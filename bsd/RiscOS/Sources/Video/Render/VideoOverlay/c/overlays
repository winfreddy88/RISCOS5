/*
 * Copyright (c) 2017, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include <limits.h>
#include <stdlib.h>
#include <string.h>

#include "globals.h"
#include "overlays.h"
#include "utils.h"

static overlay_t overlays[OVERLAY_MAX];

overlay_t *overlay_new(const modeselector_t *desc,int flags,int32_t task)
{
	for(int i=0;i<OVERLAY_MAX;i++)
	{
		if (overlays[i].task)
		{
			continue;
		}
		size_t size = modeselector_size(desc);
		overlays[i].desc = (modeselector_t *) malloc(size);
		if (!overlays[i].desc)
		{
			return NULL;
		}
		memcpy(overlays[i].desc, desc, size);
		overlays[i].flags = flags;
		overlays[i].id = ((overlays[i].id & ~(OVERLAY_MAX-1)) + OVERLAY_MAX + i) | 0x80000000;
		overlays[i].task = task;
		overlays[i].window = WINDOW_NONE;
		overlays[i].gvoverlay = 0;
		overlays[i].buffer = -1;
		overlays[i].win_clip[0] = INT_MIN;
		overlays[i].win_clip[1] = INT_MIN;
		overlays[i].win_clip[2] = INT_MAX;
		overlays[i].win_clip[3] = INT_MAX;
		return &overlays[i];
	}
	return NULL;
}

void overlay_free(overlay_t *overlay)
{
	if (overlay->desc)
	{
		free(overlay->desc);
	}
	memset(overlay,0,sizeof(overlay_t));
}

overlay_t *overlay_get(uint32_t id)
{
	int idx = id & (OVERLAY_MAX-1);
	if (overlays[idx].id == id)
	{
		return &overlays[idx];
	}
	return NULL;
}

void overlay_iterate(void (*cb)(overlay_t *,void *),void *param)
{
	for(int i=0;i<OVERLAY_MAX;i++)
	{
		if (!overlays[i].task)
		{
			continue;
		}
		cb(&overlays[i],param);
	}
}
