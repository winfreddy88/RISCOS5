/*
 * Copyright (c) 2017, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef GLOBALS_H
#define GLOBALS_H

#include <stdint.h>
#include <stdbool.h>

#include "msgtrans.h"
#include "wimp.h"

typedef struct
{
	uint32_t var;
	uint32_t val;
} modevarpair_t;

typedef struct
{
	uint32_t flags;
	uint32_t xres;
	uint32_t yres;
	uint32_t log2bpp;
	uint32_t framerate;
	modevarpair_t modevars[1];
} modeselector_t;

typedef struct {
	uint32_t id; /* ID that we've assigned the overlay */
	int32_t window; /* Window overlay is attached to, WINDOW_NONE if none */
	int32_t task; /* Task handle of overlay owner */
	uint8_t gvoverlay; /* GraphicsV overlay number, 0 if overlay has been lost */
	uint8_t type; /* GraphicsV overlay type */
	bool visible; /* True if overlay is currently enabled/visible at the GraphicsV layer */
	bool lost; /* True if the overlay has been lost recently */
	int16_t buffer; /* Current buffer being displayed, -1 if none */
	int width,height; /* Current width & height in display pixels */
	int clip[4]; /* Current screen-space clipping rectangle */
	int x,y; /* Current screen-space coordinates */
	uint32_t aspect; /* Last aspect ratio value that was used */
	int x_offset,y_offset; /* User-specified offset within window (in window coordinate space) */
	int win_clip[4]; /* User-specified clipping rectangle within window (in window coordinate space) */
	modeselector_t *desc; /* Copy of mode selector used to create overlay */
	int flags; /* Flags specified on creation */
} overlay_t;

typedef struct
{
	int xeig;
	int yeig;
	int ylimit;
	int gvdriver;
	int terminator;
} vduvars_t;

extern void *private_word;
extern vduvars_t vduvars;
extern msgtrans_control_block messages;

#define WINDOW_NONE -1

#define TASK_MAGIC_VALUE 0x4b534154 /* "TASK" */

extern void show_overlay(overlay_t *o,bool force);

#endif
