/*
 * Copyright (c) 2010, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include <stddef.h>

#include "Global/RISCOS.h"
#include "Global/HALEntries.h"
#include "swis.h"

#include "venc.h"
#include "regs.h"
#include "globals.h"
#include "dispc.h"

#include "DebugLib/DebugLib.h"

static const venc_regs_t template_ntsc_601 =
{
	.f_control							= 0,
	.vidout_ctrl						= 1,
	.sync_ctrl							= 0x8040,
	.llen								= 0x359,
	.flens								= 0x20C,
	.hfltr_ctrl							= 0,
	.cc_carr_wss_carr					= 0x043F2631,
	.c_phase							= 0,
	.gain_u								= 0x102,
	.gain_v								= 0x16C,
	.gain_y								= 0x12F,
	.black_level						= 0x43,
	.blank_level						= 0x38,
	.x_color							= 0x7,
	.m_control							= 0x1,
	.bstamp_wss_data					= 0x38,
	.s_carr								= 0x21F07C1F,
	.line21								= 0,
	.ln_sel								= 0x01310011,
	.l21_wc_ctl							= 0x0000F003,
	.htrigger_vtrigger					= 0,

	.savid_eavid						= 0x069300F4,
	.flen_fal							= 0x0016020C,
	.lal_phase_reset					= 0x00060107,
	.hs_int_start_stop_x				= 0x008E0350,
	.hs_ext_start_stop_x				= 0x000F0359,
	.vs_int_start_x						= 0x01A00000,
	.vs_int_stop_x_vs_int_start_y		= 0x020701A0,
	.vs_int_stop_y_vs_ext_start_x		= 0x01AC0024,
	.vs_ext_stop_x_vs_ext_start_y		= 0x020D01AC,
	.vs_ext_stop_y						= 0x00000006,
	.avid_start_stop_x					= 0x03480078,
	.avid_start_stop_y					= 0x02060024,
	.fid_int_start_x_fid_int_start_y	= 0x0001008A,
	.fid_int_offset_y_fid_ext_start_x	= 0x01AC0106,
	.fid_ext_start_y_fid_ext_offset_y	= 0x01060006,

	.tvdetgp_int_start_stop_x			= 0x00140001,
	.tvdetgp_int_start_stop_y			= 0x00010001,
	.gen_ctrl							= 0x00F90000,
};

static const venc_regs_t template_pal_601 =
{
	.f_control							= 0,
	.vidout_ctrl						= 1,
	/*
		sync_ctrl - NOTE - FREE isn't set in the TRM listing, but it gets the
		testcard to work for me. But for some reason FREE isn't needed when
		the testcard is off (and the same seems to be true of NTSC output - the
		testcard only works with it on, but actual video output works regardless
	 */
	.sync_ctrl							= 0x8040,

	.llen								= 0x35F, /* 863 */
	.flens								= 0x270, /* 624 */
	.hfltr_ctrl							= 0,
	.cc_carr_wss_carr					= 0x2F7225ED,
	.c_phase							= 0,
	.gain_u								= 0x111,
	.gain_v								= 0x181,
	.gain_y								= 0x140,
	.black_level						= 0x3B,
	.blank_level						= 0x3B,
	.x_color							= 0x7,
	.m_control							= 0x2,
	.bstamp_wss_data					= 0x3F,
	.s_carr								= 0x2A098ACB,
	.line21								= 0,
	.ln_sel								= 0x01290015,
	.l21_wc_ctl							= 0x0000F603,
	.htrigger_vtrigger					= 0,

	.savid_eavid						= 0x06A70108,
	.flen_fal							= 0x00180270,
	.lal_phase_reset					= 0x00040135,
	.hs_int_start_stop_x				= 0x00880358,
	.hs_ext_start_stop_x				= 0x000F035F,
	.vs_int_start_x						= 0x01A70000,
	.vs_int_stop_x_vs_int_start_y		= 0x000001A7,
	.vs_int_stop_y_vs_ext_start_x		= 0x01AF0000,
	.vs_ext_stop_x_vs_ext_start_y		= 0x000101AF,
	.vs_ext_stop_y						= 0x00000025,
	.avid_start_stop_x					= 0x03530083,
	.avid_start_stop_y					= 0x026C002E,
	.fid_int_start_x_fid_int_start_y	= 0x0001008A,
	.fid_int_offset_y_fid_ext_start_x	= 0x002E0138,
	.fid_ext_start_y_fid_ext_offset_y	= 0x01380001,

	.tvdetgp_int_start_stop_x			= 0x00140001,
	.tvdetgp_int_start_stop_y			= 0x00010001,
	.gen_ctrl							= 0x00FF0000,
};

static const venc_regs_t *venc_templates[TVMODE_MAX] =
{
	&template_ntsc_601,	/* As per TRM */
	&template_pal_601,	/* As per TRM. Broken? */
};

void venc_set_tvmode(tvmode mode, tvouttype type, bool showtestcard)
{
	/* Avoid pointless updates */
	if ((mode == current_tvmode) && (type == current_tvtype) && (showtestcard == testcard))
	{
		/* But at the least we do want to update the overlays */
		if (type != TVOUT_NONE)
		{
			int irqs;
			if (!begin_quick_hardware_update(&irqs))
			{
				/* TODO - Mark as pending! */
				return;
			}
			/* Flush any pending overlay updates */
			for (int i = 0; i < OVERLAY_MAX; ++i)
				dispc_update_overlay((overlayidx)i);
			/* Update transparency settings*/
			dispc_flush_transparency_cfg(true);
			end_quick_hardware_update(irqs);
		}
		return;
	}
	dprintf(("", "venc_set_tvmode: Mode %d type %d testcard %d\n", mode, type, showtestcard));
	current_tvmode = mode;
	current_tvtype = type;
	testcard = showtestcard;
	if (type == TVOUT_NONE)
	{
		/* Disable */
		int irqs;
		if (!begin_quick_hardware_update(&irqs))
		{
			/* TODO - Mark as pending! */
			return;
		}
		/* Make sure we disable the SYNCLOSTTV interrupt else it'll keep firing
		   and we'll die horribly */
		dispc->irqenable &= ~DISPC_IRQ_SYNCLOSTTV;
		/* Now disable the TV output */
		dispc->control1 &= ~DISPC_CONTROL_TVENABLE;
		/* Looks like we can get away with just disabling the clocks */
		dss->ctrl &= ~(DSS_CTRL_VENC_CLOCK_4X_ENABLE | DSS_CTRL_DAC_DEMEN | DSS_CTRL_DAC_POWERDN_BGZ);
		end_quick_hardware_update(irqs);
		return;
	}
	/* Enable, as per flow in spruf98d 15.5.8.3 (p2336) */
	int irqs;
	if (!begin_slow_hardware_update(&irqs))
	{
		/* TODO - Mark as pending! */
		return;
	}
	/* 1. Initialise the video encoder and the display controller configuration registers */
	/* TODO - Need to set DISPC_CONTROL_HT, DISPC_DIVISOR? */
	/* 0. Disable TV output! */
	/* TODO - Do any other stuff to disable it properly */
	dispc->control1 &= ~DISPC_CONTROL_TVENABLE;
	/* X. Enable clocks first */
	dss->ctrl |= DSS_CTRL_VENC_CLOCK_4X_ENABLE | DSS_CTRL_DAC_DEMEN | DSS_CTRL_DAC_POWERDN_BGZ;
	/* 1. Soft reset */
	venc->f_control = VENC_F_CONTROL_RESET;
	int timeout = 1000000;
	while ((venc->f_control & VENC_F_CONTROL_RESET) && --timeout)
	{
		;
	}
	if (!timeout)
	{
		dprintf(("", "venc_set_tvmode: Timeout waiting for VENC_F_CONTROL_RESET clear\n"));
	}
	/* 2. Save IRQ state */
	uint32_t irqenable = dispc->irqenable;
	dispc->irqenable = 0;
	/* 15.5.8.2 SVideo/Composite selection in DSS_CONTROL */
	if (type == TVOUT_COMPOSITE)
		dss->ctrl &= ~DSS_CTRL_VENC_OUT_SEL;
	else
		dss->ctrl |= DSS_CTRL_VENC_OUT_SEL;
	/* 3. Program registers as per table 15-69 */
	const venc_regs_t *template = venc_templates[mode];
	const uint32_t *temp = (const uint32_t *)template;
	uint32_t *dest = (uint32_t *)venc;
	for (uint32_t offset = 0; offset < sizeof(venc_regs_t); offset += 4)
	{
		/* Skip padding, status register, VENC_F_CONTROL, VENC_SYNC_CTRL, VENC_OUTPUT_CONTROL */
		if ((offset != offsetof(venc_regs_t, rev_id))
		 && (offset != offsetof(venc_regs_t, _pad1))
		 && (offset != offsetof(venc_regs_t, _pad2))
		 && (offset != offsetof(venc_regs_t, _pad3))
		 && (offset != offsetof(venc_regs_t, _pad4))
		 && (offset != offsetof(venc_regs_t, _pad5))
		 && (offset != offsetof(venc_regs_t, _pad6))
		 && (offset != offsetof(venc_regs_t, _pad7))
		 && (offset != offsetof(venc_regs_t, _pad8))
		 && (offset != offsetof(venc_regs_t, status))
		 && (offset != offsetof(venc_regs_t, f_control))
		 && (offset != offsetof(venc_regs_t, sync_ctrl))
		 && (offset != offsetof(venc_regs_t, output_control)))
		{
			dest[offset>>2] = temp[offset>>2];
		}
	}
	/* Program VENC_OUTPUT_CONTROL with correct value for SVideo/composite */
	if (type == TVOUT_COMPOSITE)
		venc->output_control = 0xA;
	else
		venc->output_control = 0xD;
	/* Program VENC_F_CONTROL and VENC_SYNC_CTRL last */
	venc->f_control = (template->f_control & ~VENC_F_CONTROL_SVDS_MASK)
					| (showtestcard ? VENC_F_CONTROL_SVDS_TESTCARD : VENC_F_CONTROL_SVDS_EXTERNAL);
	venc->sync_ctrl = template->sync_ctrl;
	/* Program DISPC_SIZE_TV appropriately */
	/* TODO - Check that this code is correct for all modes and not just my two test modes! */
	int w = (REG_EXTRACT(template->avid_start_stop_x, VENC_AVID_START_STOP_X_AVID_STOP_X)
		  -  REG_EXTRACT(template->avid_start_stop_x, VENC_AVID_START_STOP_X_AVID_START_X)) - 1;
	int h = (REG_EXTRACT(template->flen_fal, VENC_FLEN_FAL_FLEN)/2)
		  -  REG_EXTRACT(template->flen_fal, VENC_FLEN_FAL_FAL);
	dispc->size_tv = (w << DISPC_SIZE_LCD_PPL_SHIFT) | (h << DISPC_SIZE_LCD_LPP_SHIFT);
	/* Flush any pending overlay updates */
	for (int i = 0; i < OVERLAY_MAX; ++i)
		dispc_update_overlay((overlayidx)i);
	/* Update transparency settings*/
	dispc_flush_transparency_cfg(false);
	/* 4. Set the DISPC_CONTROL[6] GODIGITAL bit and DISPC_CONTROL[1] DIGITALENABLE bit to 1 */
	/* Also, make sure EVSYNC_EVEN/EVSYNC_ODD are clear */
	dispc->irqstatus = DISPC_IRQ_EVSYNC_EVEN | DISPC_IRQ_EVSYNC_ODD;
	dispc->control1 |= DISPC_CONTROL_GOTV | DISPC_CONTROL_TVENABLE;
	/* EXPERIMENTATION - Failed first time round, so let's wait a bit */
	_swix(OS_Hardware, _IN(0) | _INR(8,9), 100000, 0, EntryNo_HAL_CounterDelay);
	/* 5. Wait for the first VSYNC pulse signal */
	timeout = 10000000;
	while (!(dispc->irqstatus & (DISPC_IRQ_EVSYNC_EVEN | DISPC_IRQ_EVSYNC_ODD)) && --timeout)
	{
		;
	}
	if (!timeout)
	{
		dprintf(("", "venc_set_tvmode: Timeout waiting for EVSYNC\n"));
	}
	/* 6. Clear the SYNCLOSTTV interrupt */
	dispc->irqstatus = DISPC_IRQ_EVSYNC_EVEN | DISPC_IRQ_EVSYNC_ODD | DISPC_IRQ_SYNCLOSTTV;
	/* 7. Enable the SYNCLOSTTV interrupt & restore earlier context */
	/* Except if we're in test card mode - SYNCLOSTTV seems to occur all the time
	   and should be ignored! */
	irqenable |= DISPC_IRQ_EVSYNC_EVEN | DISPC_IRQ_EVSYNC_ODD;
	/* EXPERIMENTATION - don't enable SYNCLOSTTV for PAL (video output seems fine even
	   though the IRQ keeps firing) */
	if (showtestcard || (mode == TVMODE_PAL_601))
		irqenable &= ~DISPC_IRQ_SYNCLOSTTV;
	else
		irqenable |= DISPC_IRQ_SYNCLOSTTV;
	dispc->irqenable = irqenable;
	end_slow_hardware_update(irqs);
	dprintf(("", "venc_set_tvmode: Done\n"));
}
