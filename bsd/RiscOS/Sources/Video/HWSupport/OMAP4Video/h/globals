/*
 * Copyright (c) 2010, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef OMAP4VIDEO_GLOBALS_H
#define OMAP4VIDEO_GLOBALS_H

#include "regs.h"
#include "videodevice.h"
#include "palette.h"

extern void *private_word;
extern int instance;
extern uint8_t graphicsv_driver_number;

typedef enum
{
	/* Starts at -1 so valid values can index the overlaycfg/transparencycfg arrays */
	TARGET_NONE=-1,
	TARGET_LCD,
	TARGET_TV,	/* AKA digital output */

	TARGET_MAX,
} overlaytarget;

typedef enum
{
	TVMODE_NTSC_601,
	TVMODE_PAL_601,

	TVMODE_MAX,
} tvmode;

typedef enum
{
	TVOUT_NONE = -1,
	TVOUT_COMPOSITE,
	TVOUT_SVIDEO,
} tvouttype;

/* lcdtype enum definition must match HAL */

typedef enum
{
	LCD_NONE = 0,
	LCD_TFT,
	LCD_STN_COLOUR,
	LCD_STN_MONO4,
	LCD_STN_MONO8,

	LCD_MAX,
} lcdtype;

typedef enum
{
	OVERLAY_GFX,
	OVERLAY_VID1,
	OVERLAY_VID2,

	OVERLAY_MAX,
} overlayidx;

/* Transparency settings:

   NONE, TCK_VIDSRC, TCK_GFXDEST use VID2->VID1->GFX->BGCOL overlay ordering (front->back)
   TCK_GFXSRC & ALPHA use GFX->VID2->VID1->BGCOL ordering */

typedef enum
{
	TRANSPARENCY_NONE,
	/* Video overlay pixels that match the colour key won't be drawn.
	   Only if colour space conversion & scaling disabled. */
	TRANSPARENCY_TCK_VIDSRC,
	/* Graphics overlay pixels that match the colour key won't be drawn.
	   Only if colour space conversion & scaling disabled. */
	TRANSPARENCY_TCK_GFXSRC,
	/* Graphics underlay pixels that match the colour key cause the
	   overlay pixels (VID1, VID2) to be drawn */
	TRANSPARENCY_TCK_GFXDEST,
	/* Use alpha value of each overlay pixel */
	TRANSPARENCY_ALPHA,

	TRANSPARENCY_MAX,
} transparencycfg;

typedef struct
{
	uint16_t		width, height;
	int16_t			x, y;
	uint32_t		format;	/* OVERLAY_ATTRIBUTES_FORMAT_* */
	uint32_t		ba;		/* Buffer physical address */
	uint32_t		stride;	/* Num bytes from start of one line to start of next */
	uint8_t			*la;	/* Buffer logical address */
	overlaytarget	target;
} overlay;

/* lcdtimings/lcdconfig/boardconfig structs must match those used by the HAL! */

typedef struct
{
	uint32_t	pixelrate;	/* Hz */
	uint16_t	hsw, hfp, hbp, width;
	uint16_t	vsw, vfp, vbp, height;
	uint32_t	syncpol;	/* vidclist3 syncpol flags */
} lcdtimings;

typedef struct
{
	/* General */
	uint8_t		dsi_bpp;		/* BPP of DSI output */
	uint8_t		dsi_lanes;		/* Number of data lanes of DSI output */
	uint8_t		acbias_freq;	/* AC bias pin frequency */
	uint8_t		lcd_type;		/* LCD type (lcdtype enum) */
	uint32_t	flags;			/* Extra config flags */
	void (*power)(vdu_device *dev, int brightness); /* Set display brightness (0-65536)/power */
	/* Fixed panel stuff */
	lcdtimings *lcd_timings;	/* Required timings, if fixed panel */
	/* Non-fixed panel stuff */
	uint32_t	max_pixelrate;	/* Max pixel rate (kHz) */
} lcdconfig;

#define LCDCONFIG_RF			0x1	/* DISPC_POL_FREQ.RF setting */
#define LCDCONFIG_IEO			0x2	/* DISPC_POL_FREQ.IEO setting */
#define LCDCONFIG_IPC			0x4	/* DISPC_POL_FREQ.IPC setting */
#define LCDCONFIG_BRIGHTNESS	0x8	/* lcdconfig.power can control brightness */

typedef struct
{
	/* Stuff determined at runtime by HAL */
	uint32_t	sys_clk;		/* System clock frequency, Hz */
	uint16_t	max_porch;		/* Max porch value */
	uint16_t	max_sync;		/* Max sync value */
	sdma_regs_t	*dma_ptr;		/* SDMA registers */
	uint32_t	dma_device;		/* IRQ number */
	uint32_t	dma_chans;		/* Mask of available SDMA channels */
	/* Hardware config */
	uint8_t		flags;			/* Extra config flags */
	uint8_t		num_lcds;		/* Number of entries in num_lcds array */
	lcdconfig	*lcd_configs;	/* Array of available LCD outputs */
} boardconfig;

#define BOARDCONFIG_SVIDEO		0x1	/* Supports SVideo TV-out */
#define BOARDCONFIG_COMPOSITE	0x2	/* Supports composite TV-out */


/* Soft copies of hardware registers/desired states */

extern overlay overlays[OVERLAY_MAX]; /* GFX, VID1, VID2 */

extern uint32_t vdu_init; /* Physical address of current VDU display bank */

/* Current DSI PLL pixel rate (for DISPC); 0 if DSI PLL isn't running */
extern uint32_t dsi_pll_current_pixel_rate;

extern lcdtimings current_timings; /* Current timings programmed to hardware */
extern int current_lcd; /* Current LCD index (-1=none?) */

extern tvmode current_tvmode; /* Current TV-out mode */
extern tvouttype current_tvtype; /* Current TV-out type */
extern bool testcard; /* True for TV to display builtin colour bars test image */

/* Current transparency config for LCD & TV output */
extern transparencycfg current_transparencycfgs[TARGET_MAX];


/* Required resources that RISC OS doesn't maintain for us */

/* Graphics palette logical addr */
extern uint32_t *gfx_palette_l;
/* Graphics palette physical addr */
extern uint32_t gfx_palette_p;
/* A copy of the graphics palette in its original form, as received from RISC OS */
extern uint32_t gfx_palette_ro[256];
/* Current function to use for performing palette updates */
extern palette_func gfx_palette_func;

/* Softcopy of mouse palette */
extern uint32_t mouse_palette_soft[4];
/* A copy of the mouse palette in its original form, as received from RISC OS */
extern uint32_t mouse_palette_ro[4];
/* Softcopy of the 2bpp image */
extern uint8_t mouse_image_soft[32*32/4];
/* True when palette has been changed */
extern bool mouse_dirty;
/* Current function to use for performing palette updates */
extern palette_func mouse_palette_func;

/* 32bpp image used by hardware */
extern uint32_t *mouse_image_l;
extern uint32_t mouse_image_p;

/* Indices of overlays used for desktop & mouse pointer */
extern overlayidx overlay_desktop, overlay_pointer;
/* Display that RISC OS is using for desktop & pointer, mode changes, etc. */
extern overlaytarget default_display;

extern bool blanked; /* True if screen should be blanked */


/* Const config data & lookup tables */

/* BPP of each overlay format */
extern const uint8_t overlay_format_bpp[16];
/* FIFO preload value for each LCD type */
extern const uint32_t fifo_preload_for_lcd[LCD_MAX];
/* DISPC_CONFIG settings for each transparency config */
extern const uint32_t transparency_lut[TARGET_MAX][TRANSPARENCY_MAX];

/* Fixed board-specific configuration values */
extern const boardconfig *hwconfig;


/* Experiments */

extern int exp_synclost_count;

#endif /* OMAP4VIDEO_GLOBALS_H */
