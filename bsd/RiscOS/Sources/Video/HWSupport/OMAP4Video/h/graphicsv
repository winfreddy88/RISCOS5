/*
 * Copyright (c) 2010, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef OMAP4VIDEO_GRAPHICSV_H
#define OMAP4VIDEO_GRAPHICSV_H

#include <stdint.h>
#include "kernel.h"

/* Pointer update */

typedef struct
{
	uint8_t width; /* unpadded width in bytes */
	uint8_t height; /* in pixels */
	uint8_t padding[2]; /* 2 bytes of padding for field alignment */
	void *buffLA; /* logical address of buffer holding pixel data */
	void *buffPA; /* corresponding physical address of buffer */
} shape_t;

/* vidclist3 for mode changes */

typedef struct
{
	uint32_t index;
	uint32_t value;
} controlentry;

typedef struct
{
	uint32_t Format;
	uint32_t PixelDepth;
	uint32_t HorizSyncWidth;
	uint32_t HorizBackPorch;
	uint32_t HorizLeftBorder;
	uint32_t HorizDisplaySize;
	uint32_t HorizRightBorder;
	uint32_t HorizFrontPorch;
	uint32_t VertiSyncWidth;
	uint32_t VertiBackPorch;
	uint32_t VertiTopBorder;
	uint32_t VertiDisplaySize;
	uint32_t VertiBottomBorder;
	uint32_t VertiFrontPorch;
	uint32_t PixelRate;
	uint32_t SyncPol;
	controlentry ControlList[1];
} vidclist3;

#define VIDCLIST3_1BPP 0
#define VIDCLIST3_2BPP 1
#define VIDCLIST3_4BPP 2
#define VIDCLIST3_8BPP 3
#define VIDCLIST3_16BPP 4
#define VIDCLIST3_32BPP 5

#define VIDCLIST3_HSYNC 1
#define VIDCLIST3_VSYNC 2

/* GraphicsV_Render */

typedef struct
{
	/* 0,0 = bottom-left of screen :( */
	uint32_t src_left;
	uint32_t src_bottom;
	uint32_t dest_left;
	uint32_t dest_bottom;
	uint32_t width; /* -1 */
	uint32_t height; /* -1 */
} copyrect_params;

typedef struct
{
	/* All inclusive. 0,0 = bottom-left of screen :( */
	uint32_t left;
	uint32_t top;
	uint32_t right;
	uint32_t bottom;
	uint32_t *oraeor;
} fillrect_params;

extern int graphicsv_handler(_kernel_swi_regs *r, void *pw);

#endif /* OMAP4VIDEO_GRAPHICSV_H */
