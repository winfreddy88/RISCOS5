; Copyright (c) 2014, RISC OS Open Ltd
; All rights reserved.
; 
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met: 
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
; 
#include "Global/RISCOS.h"
#include "Global/Services.h"
#include "../VersionNum"

initialisation-code:	module_init

finalisation-code:	module_final

service-call-handler:	module_service	Service_USB,
					Service_DeviceDead

title-string:		COMPONENT

help-string:		COMPONENT     Module_MajorVersion_CMHG

date-string:		Module_Date_CMHG

command-keyword-table:	module_commands
#if 0 /* Obsolete */
UDLProducts( min-args:0, max-args:0,
            help-text: "*UDLProducts lists the USB devices that UDLVideo recognises\n",
            add-syntax:, invalid-syntax: "Syntax: *UDLProducts\n"),
#endif
#ifdef DEBUGLIB
UDLWriteReg( min-args:3, max-args:3,
            help-text: "*UDLWriteReg sends a register write command to a device\n",
            add-syntax:, invalid-syntax: "Syntax: *UDLWriteReg <device> <reg> <value>"),
UDLStartupMode( min-args:3, max-args:3,
            help-text: "*UDLStartupMode selects the mode dimensions to use when switching output to a device\n",
            add-syntax:, invalid-syntax: "Syntax: *UDLStartupMode <device> <width> <height>\n"),
UDLHuffman( min-args:2, max-args:2,
            help-text: "*UDLHuffman enables/disables huffman compression for a device\n",
            add-syntax:, invalid-syntax: "Syntax: *UDLHuffman <device> <0|1>"),
UDLTest(    min-args:5, max-args:5,
            help-text: "*UDLTest changes mode and plots a sprite to a device without performing a GraphicsV driver switch\n",
            add-syntax:, invalid-syntax: "Syntax: *UDLTest <device> <width> <height> <16|32> <file>\n"),
UDLDumpRegs( min-args:1, max-args:1,
            help-text: "*UDLDumpRegs reads back the control registers from a device\n",
            add-syntax:, invalid-syntax: "Syntax: *UDLDumpRegs <device>\n"),
UDLPeek(    min-args:3, max-args:3,
            help-text: "*UDLPeek reads a block of the 64K internal work RAM\n",
            add-syntax:, invalid-syntax: "Syntax: *UDLPeek <device> <addr> <len>\n"),
#endif
UDLDevices( min-args:0, max-args:0,
            help-text: "*UDLDevices lists the status of all attached devices\n",
            add-syntax:, invalid-syntax: "Syntax: *UDLDevices")

vector-handlers:	tickerv_entry/tickerv_handler,
			graphicsv_entry/graphicsv_handler

generic-veneers:	callback_entry/callback_handler
