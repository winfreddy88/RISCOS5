/*
 * Copyright (c) 2014, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>

/* Process the textual 16 bit huffman table into a binary file which can then
   be compressed for use with UDLVideo

   Input file is expected to be in the same format as the tubecable_huffman.c
   file from tubecable:

   https://github.com/floe/tubecable/blob/master/tubecable_huffman.c
*/

#define NUM 65537

void eor_n(uint32_t *patterns,int n)
{
	uint32_t prev[n];
	memset(prev,0,sizeof(uint32_t)*n);
	for(int i=0;i<NUM;i++)
	{
		uint32_t t = patterns[i];
		patterns[i] = t ^ prev[i & (n-1)];
		prev[i & (n-1)] = t;
	}
}

void eor_prev(uint32_t *patterns)
{
	uint32_t prev = 0;
	for(int i=0;i<NUM;i++)
	{
		uint32_t t = patterns[i];
		patterns[i] = t ^ prev;
		prev = t;
	}
}

int main(int argc,char **argv)
{
	uint32_t patterns[NUM];
	char buf[128];
	if(argc != 3)
	{
		fprintf(stderr,"Usage: buildhuff <infile> <outfile>\n");
		exit(1);
	}
	FILE *f = fopen(argv[1],"r");
	if(!f)
	{
		fprintf(stderr,"Failed to open input\n");
		exit(1);
	}
	while(!feof(f) && fgets(buf,128,f))
	{
		int idx,count;
		if(sscanf(buf,"\tarray[%d] = assign(%d",&idx,&count) != 2)
			continue;
		char *quote = strchr(buf,'"');
		if(!quote)
			continue;
		/* Read in the pattern */
		quote++;
		uint32_t pattern = 0;
		for(int i=0;i<count;i++)
			if(quote[i] == '1')
				pattern |= 1<<i;
		/* Add an extra bit which we use to detect the end of the pattern */
		pattern |= 1<<count;
		/* Add to the array */
		patterns[idx+32768] = pattern;
	}
	fclose(f);
	/* EOR the patterns with each other to improve compression ratio */
	eor_n(patterns,32);
	eor_prev(patterns);
	/* Write out as binary */
	f = fopen(argv[2],"wb");
	if(!f)
	{
		fprintf(stderr,"Failed to open output\n");
		exit(1);
	}
	fwrite(patterns,sizeof(patterns),1,f);
	fclose(f);
	return 0;
}
