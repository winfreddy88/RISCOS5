/*
 * Copyright (c) 2014, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef UDL_RISCOS_H
#define UDL_RISCOS_H

#include <stdint.h>
#include <dev/usb/usb.h>
#include <dev/usb/usbdi.h>
#include <stdio.h>
#include <stdlib.h>

#include "DebugLib/DebugLib.h"
#include "Global/Services.h" /* Prevent Service_USB #define conflict */
#include "USB/USBDevFS.h"

/* Log all bulk TX traffic to a file */
//#define SPOOL

static inline uint32_t htobe32(uint32_t a)
{
	return (a>>24) | ((a>>8) & 0xff00) | ((a<<8) & 0xff0000) | (a<<24);
}
#define betoh32 htobe32

static inline uint16_t htobe16(uint16_t a)
{
	return (a>>8) | (a<<8);
}
#define betoh16 htobe16
#define bswap16 htobe16

#define bzero(PTR,SIZE) memset(PTR,0,SIZE)
#define bcopy(SRC,DEST,SIZE) memcpy(DEST,SRC,SIZE)

typedef struct
{
	struct device sc_dev; /* *** HACK *** something pokes this! */

	char devname[20];
	usb_device_descriptor_t ddesc;
	bool broken; /* True if device is broken and needs resetting */
} my_usbdev;

typedef struct
{
	uint32_t handle; /* Internal buffer handle */
	uint32_t r12; /* R12 value for service routine */
	uint32_t service; /* Buffer service code */
} buffer_internal;

typedef struct
{
	my_usbdev *dev;

	uint32_t fh; /* RISC OS file handle */
	uint32_t bufh; /* BufferManager buffer handle */
	uint32_t devh; /* DeviceFS file handle */
	uint32_t strh; /* Driver stream handle */
	buffer_internal internal; /* Internal buffer info */
} my_pipe;

/* Mode timing information, in device format */

typedef struct {
	uint16_t hsyncstart;
	uint16_t hsyncend;
	uint16_t xdisplaystart;
	uint16_t xdisplayend;
	uint16_t xendcount;
	uint16_t vsyncstart;
	uint16_t vsyncend;
	uint16_t ydisplaystart;
	uint16_t ydisplayend;
	uint16_t yendcount;
	uint16_t pixelclock5khz;
} udl_mode;

/* The huffman decompression table that's uploaded to the device */
#define HUFFMAN_DECOMP_SIZE (9*512)
extern uint8_t *huffman_decomp;

/* The 16bit huffman table is stored in two separate arrays to reduce memory overheads */
extern uint32_t *huffman_16_patterns;
extern uint8_t *huffman_16_bits;

/* The 8bit table is stored in just one array */
typedef struct {
	uint16_t pattern;
	uint8_t bits;
} huffman_8_t;

#ifdef SPOOL
extern FILE *spool;
#endif

extern huffman_8_t *huffman_8;

extern void *private_word;

extern const char *chip_names[];

extern int chip_matchname(const char *name);

extern void huffman_init(void);
extern void huffman_shutdown(void);

extern size_t buffer_insert(buffer_internal *buffer,const void *data,size_t size);
extern size_t buffer_nextfreeblock(uint32_t bufh,void **ptr);

extern int memcmp_len(const void *a,const void *b,int offset,int len);

/* HACK - Declare manually due to BSD/TCPIPLib header conflicts */
extern clock_t clock(void);

/* USB utilities */
extern usbd_status usbd_set_config_no(usbd_device_handle dev, int no, int msg);
extern usbd_status usbd_get_string_desc(usbd_device_handle dev, int sindex,
                                        int langid,usb_string_descriptor_t *sdesc,
                                        int *sizep);

#endif
