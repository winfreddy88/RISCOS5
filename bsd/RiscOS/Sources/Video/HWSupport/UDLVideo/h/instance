/*
 * Copyright (c) 2014, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef INSTANCE_H
#define INSTANCE_H

#include "udl_riscos.h"
#include "udl.h"
#include "screen.h"
#include "devcaps.h"

/* Buffered state for a device. This tracks any state which can be changed by background calls to the driver. */

typedef struct {
	uint32_t vinit;		/* VInit DAG value (as byte offset into RO screen memory) */
	uint8_t blank_state;	/* UDL_REG_BLANK value. If nonzero, screen updates are stopped. */
	pointer_t pointer;	/* Pointer state */
} bufferedstate_t;

/* All the state required for an instance of a DisplayLink device/GraphicsV driver */

typedef struct instance {
	my_usbdev usbdev;	/* Base USB device struct we feed to the UDL code */
	struct udl_softc softc;	/* BSD UDL driver state */
	devcaps_t devcaps;	/* Device capabilities */
	bool decomp_table_set;
	bool huffman_enabled;

	/* GraphicsV information */
	uint8_t graphicsv_driver_number;
	uint8_t log2bpp;	/* 4 or 5 */
	bool need_reset;	/* True if mode needs to be reprogrammed when returning from blanked state */
	char devname[128];	/* GraphicsV driver name */
	bufferedstate_t state;	/* State updated by any GraphicsV calls */
	bufferedstate_t live;	/* Actual state of device */
#ifdef DEBUGLIB
	int startupmode[8];
#endif
	udl_mode mode;		/* Current mode timings */

	/* Screen memory information */
	uint32_t screensize;	/* How much memory we advertise as being available */
	uint8_t *pci_logaddr;	/* Logical address of memory in PCI space */
	uint32_t pci_physaddr;	/* Physical address of memory in PCI space */
	int shadow_da_number;	/* DA number of the shadow buffer */
	uint8_t *shadow;	/* Base of the shadow buffer */
	screenstate scrstate;	/* State structure used by screen update routines */
} instance_t;

extern instance_t *instances[256]; /* GraphicsV driver number -> device lookup table */
extern int extant_instance_count; /* >0 if we are on GraphicsV */
extern uint32_t process_rate; /* Max number of bytes to process per tick event */

#endif
