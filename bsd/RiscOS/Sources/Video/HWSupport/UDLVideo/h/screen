/*
 * Copyright (c) 2014, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef SCREEN_H
#define SCREEN_H

#include <stdint.h>
#include <stdbool.h>

/* In 24bpp modes the 16 bit plane contains the top bits of each component (R5G6B5, as per 16bpp modes), while the 8 bit plane contains the bottom bits (R3G2B3) */
#define MUNGE24_8(RGB,HI,LO,EIGHT) \
{ \
	const uint32_t src_ = RGB; \
	HI = (src_ & 0xf8) | ((src_ & 0xe000)>>13); \
	LO = ((src_ & 0x1c00)>>5) | (src_>>19); \
	EIGHT = (src_<<5) | ((src_ & 0x300)>>5) | ((src_ & 0x70000)>>16); \
}

#define MUNGE24_16(RGB,HILO,EIGHT) \
{ \
	uint8_t hi_,lo_; \
	MUNGE24_8(RGB,hi_,lo_,EIGHT) \
	HILO = (((uint16_t)hi_)<<8) | lo_; \
}

typedef struct {
	uint8_t *screen;
	uint8_t *shadow;
	int stride; /* Byte stride of RO screen */
	int curoffset; /* Current byte offset for screen_process */
	int byte_base; /* Base/offset of byte plane in 24bpp DL RAM */
	/* DAG values as byte offsets in RO screen memory */
	int vinit;
	int vend;
	int vrender;
} screenstate;

/* Pointer state */

typedef struct {
	uint8_t pal[4][3];	/* Palette, HI+LO+EIGHT form */
	uint64_t image[32];	/* Image */
	int x,y;		/* Coords */
	uint32_t vinit;		/* VInit at time of render, ~0 if not displayed */
} pointer_t;

struct instance;

extern bool finish_packet(struct udl_softc *sc,uint8_t *start,uint8_t *end);

extern void screen_clear(struct udl_softc *sc,int words);

extern bool screen_process_16(struct instance *i,int amount);
extern bool screen_process_16_huff(struct instance *i,int amount);
extern bool screen_process_24(struct instance *i,int amount);
extern bool screen_process_24_huff(struct instance *i,int amount);

extern void screen_fill_16(struct instance *i,uint16_t col,int x,int y,int w,int h);
extern void screen_fill_24(struct instance *i,uint32_t col,int x,int y,int w,int h);

extern void screen_copy_16(struct instance *i,int srcx,int srcy,int destx,int desty,int w,int h);
extern void screen_copy_16_huff(struct instance *i,int srcx,int srcy,int destx,int desty,int w,int h);
extern void screen_copy_24(struct instance *i,int srcx,int srcy,int destx,int desty,int w,int h);
extern void screen_copy_24_huff(struct instance *i,int srcx,int srcy,int destx,int desty,int w,int h);

extern void pointer_show_16(struct instance *i,pointer_t *p);
extern void pointer_show_24(struct instance *i,pointer_t *p);

extern void pointer_remove_16(struct instance *i,pointer_t *p);
extern void pointer_remove_24(struct instance *i,pointer_t *p);

#endif
