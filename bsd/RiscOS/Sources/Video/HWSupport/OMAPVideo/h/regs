/*
 * Copyright (c) 2010, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef OMAPVIDEO_REGS_H
#define OMAPVIDEO_REGS_H

#include <stdbool.h>
#include <stdint.h>

typedef struct fir_coef {
	uint32_t h;
	uint32_t hv;
} fir_coef_t;

#if OMAP==3
 #include "regs3.h"
 #define HALDeviceID_VDU_Desired   HALDeviceID_VDU_OMAP3
#else
 #if OMAP==4
  #include "regs4.h"
  #define HALDeviceID_VDU_Desired  HALDeviceID_VDU_OMAP4
 #else
  #error "Not a supported OMAP variant"
 #endif
#endif

#ifdef DEBUGLIB
#define DUMPREG(BANK,REG) printf("%08x: %08x %s.%s\n",(uint32_t) &(BANK->REG),BANK->REG,#BANK,#REG)
#endif

/* Register blocks */
extern volatile struct dss_regs      *dss;
extern volatile struct dispc_regs    *dispc;
extern volatile struct rfbi_regs     *rfbi;
extern volatile struct venc_regs     *venc;
extern volatile struct dsi_regs      *dsi;
extern volatile struct dsi_phy_regs  *dsi_phy;
extern volatile struct dsi_pll_regs  *dsi_pll;
extern volatile struct sdma_regs     *sdma;
extern volatile struct sdmachan_regs *sdmachan; /* Only using 1 channel */

/* Update control */

#define BHUB_OFF		0x1 /* Ban hardware update due to hardware being off */
#define BHUB_SYNCLOST		0x2 /* Ban hardware update due to SYNCLOST IRQ */
#define BHUB_SYNCLOSTDIGITAL	0x4 /* Ban hardware update due to SYNCLOSTDIGITAL IRQ */

extern uint32_t ban_hardware_update; /* Bitflags used to ban hardware updates (GOLCD/GODIGITAL, etc) */

extern void set_ban(uint32_t flags); /* Set ban flags */
extern void clear_ban(uint32_t flags); /* Clear ban flags */
extern bool begin_quick_hardware_update(int *irqstate); /* Return true for success, false for failure. Disables IRQs and stores old state in irqstate */
extern void end_quick_hardware_update(int irqstate);
extern bool begin_slow_hardware_update(int *irqstate); /* Return true for success, false for failure. Disables DISPC IRQs and stores old state in irqstate */
extern void end_slow_hardware_update(int irqstate);

#endif
