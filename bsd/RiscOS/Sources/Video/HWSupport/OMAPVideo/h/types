/*
 * Copyright (c) 2010, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef OMAPVIDEO_TYPES_H
#define OMAPVIDEO_TYPES_H

#include <stdbool.h>
#include <stdint.h>
#include "kernel.h"

#include "Global/HALDevice.h"
#include "Global/VIDCList.h"

struct sdma_regs;
struct pmp_block;

typedef enum
{
	TARGET_NONE=-1, /* Starts at -1 so valid values can index the overlaycfg/transparencycfg arrays */
#if OMAP==3
	TARGET_LCD, /* DVI output or builtin LCD for TouchBook/Pandora/etc. */
	TARGET_TV, /* AKA digital output */
#endif
#if OMAP==4
	TARGET_LCD2, /* DVI output */
#endif

	TARGET_MAX,
} overlaytarget;

typedef enum
{
	TVMODE_NTSC_601,
	TVMODE_PAL_601,

	TVMODE_MAX,
} tvmode;

typedef enum
{
	TVOUT_NONE=-1,
	TVOUT_COMPOSITE,
	TVOUT_SVIDEO,
} tvouttype;

/* lcdtype enum definition must match HAL */

typedef enum
{
	LCD_NONE=0,
	LCD_TFT,
	LCD_STN_COLOUR,
	LCD_STN_MONO4,
	LCD_STN_MONO8,

	LCD_MAX,
} lcdtype;

typedef enum
{
	OVERLAY_GFX,
	OVERLAY_VID1,
	OVERLAY_VID2,
#if OMAP==4
	OVERLAY_VID3,
#endif

	OVERLAY_MAX,
} overlayidx;

/* Number of overlays which are made available for GraphicsV (we reserve two for desktop + pointer) */
#define GVOVERLAY_MAX (OVERLAY_MAX-2)

/* All the pixel formats defined by RISC OS which we support */
typedef enum
{
	PIXELFORMAT_1_PAL,
	PIXELFORMAT_2_PAL,
	PIXELFORMAT_4_PAL,
	PIXELFORMAT_8_PAL,
	PIXELFORMAT_4444_TBGR,
	PIXELFORMAT_4444_TRGB,
	PIXELFORMAT_4444_ABGR,
	PIXELFORMAT_4444_ARGB,
	PIXELFORMAT_1555_TBGR,
	PIXELFORMAT_1555_TRGB,
	PIXELFORMAT_1555_ABGR,
	PIXELFORMAT_1555_ARGB,
	PIXELFORMAT_565_BGR,
	PIXELFORMAT_565_RGB,
	PIXELFORMAT_888_BGR,
	PIXELFORMAT_888_RGB,
	PIXELFORMAT_8888_TBGR,
	PIXELFORMAT_8888_TRGB,
	PIXELFORMAT_8888_ABGR,
	PIXELFORMAT_8888_ARGB,
	PIXELFORMAT_UYVY_601_full,
	PIXELFORMAT_UYVY_601_video,
	PIXELFORMAT_UYVY_709_full,
	PIXELFORMAT_UYVY_709_video,
	PIXELFORMAT_YUY2_601_full,
	PIXELFORMAT_YUY2_601_video,
	PIXELFORMAT_YUY2_709_full,
	PIXELFORMAT_YUY2_709_video,
	PIXELFORMAT_NV12_601_full,
	PIXELFORMAT_NV12_601_video,
	PIXELFORMAT_NV12_709_full,
	PIXELFORMAT_NV12_709_video,
	PIXELFORMAT_NORMAL_MAX,

	PIXELFORMAT_POINTER = PIXELFORMAT_NORMAL_MAX, /* Special format for pointer overlay, is more permissive than any formats which are selectable via the GraphicsV interface */

	PIXELFORMAT_MAX,
} pixelformat;

#define FORMAT_IS_NV12(FORMAT) (((FORMAT) >= PIXELFORMAT_NV12_601_full) && ((FORMAT) <= PIXELFORMAT_NV12_709_video))

typedef struct
{
	uint32_t omapformat; /* Value to program into hardware register */
	uint8_t features_val; /* Settings of relevant head features */
	uint8_t features_mask; /* Mask indicating which head features are required */
	uint8_t overlays; /* Mask of which overlays support this format */
	uint8_t extra_flags;
} omapformat_t;

#define FEATURE_CPR 1
#define FEATURE_ALPHA 2 /* TODO: Unused? */
#define FEATURE_PALETTE 4
#define FEATURE_GAMMAHACK 8

#define EXTRAFLAG_FULLRANGE 1 /* Full range YUV (not video) */
#define EXTRAFLAG_709 2 /* ITU-R BT.709 colour space (not .601) */
#define EXTRAFLAG_PLANAR 4 /* Planar format */

/* This should probably go into the kernel headers at some point! */

typedef struct
{
	struct device dev;

	uint32_t devicespecificfield; /* pointer to boardconfig struct */
} vdu_device_t;

/* lcdtimings/lcdconfig/boardconfig structs must match those used by the HAL! */

typedef struct
{
	uint32_t pixelrate; /* Hz */
	uint16_t hsw,hfp,hbp,width;
	uint16_t vsw,vfp,vbp,height;
	uint32_t syncpol; /* vidclist3 syncpol flags */
} lcdtimings_t;

typedef struct
{
	/* General */
	uint8_t dsi_bpp; /* BPP of DSI output */
	uint8_t dsi_lanes; /* Number of data lanes of DSI output */
	uint8_t acbias_freq; /* AC bias pin frequency */
	uint8_t lcd_type; /* LCD type (lcdtype enum) */
	uint32_t flags; /* Extra config flags */
	void (*power)(vdu_device_t *dev,int brightness); /* Set display brightness (0-65536)/power */
	/* Fixed panel stuff */
	lcdtimings_t *lcd_timings; /* Required timings, if fixed panel */
	/* Non-fixed panel stuff */
	uint32_t max_pixelrate; /* Max pixel rate (kHz) */
} lcdconfig_t;

#define LCDCONFIG_RF		0x1 /* DISPC_POL_FREQ.RF setting */
#define LCDCONFIG_IEO		0x2 /* DISPC_POL_FREQ.IEO setting */
#define LCDCONFIG_IPC		0x4 /* DISPC_POL_FREQ.IPC setting */
#define LCDCONFIG_BRIGHTNESS	0x8 /* lcdconfig.power can control brightness */

typedef struct
{
	/* Stuff determined at runtime by HAL */
	uint32_t sys_clk; /* System clock frequency, Hz */
	uint16_t max_porch; /* Max porch value */
	uint16_t max_sync; /* Max sync value */
	struct sdma_regs *dma_ptr; /* SDMA registers */
	uint32_t dma_device; /* IRQ number */
	uint32_t dma_chans; /* Mask of available SDMA channels */
	/* Hardware config */
	uint8_t flags; /* Extra config flags */
	uint8_t num_lcds; /* Number of entries in num_lcds array */
	uint16_t mysize; /* sizeof(boardconfig_t), or 0 for old HAL */
	lcdconfig_t *lcd_configs; /* Array of available LCD outputs */

	/* Warning - Members after this point only exist if 'mysize' is large enough */

	uint32_t (*tvdet_func)(vdu_device_t *dev); /* Poll TV detection signal */
	void (*tvpower_func)(vdu_device_t *dev,bool on); /* Turn TV-out power on/off */
} boardconfig_t;

#define BOARDCONFIG_SVIDEO	0x1 /* Supports SVideo TV-out */
#define BOARDCONFIG_COMPOSITE	0x2 /* Supports composite TV-out */

/* Per-head configuration parameters that only change on mode change */
typedef struct
{
	lcdtimings_t mode; /* Current mode timings */
	int16_t x,y; /* Offsets that should be applied to overlay positions */
	uint16_t dw,dh; /* Desktop width & height, for overlays that are clipped to the desktop area */
	bool enabled;
	bool interlaced; /* True if it's an interlaced mode (-> mode timings will be interlaced, other properties won't be) */
} modelocked_head_t;

/* Configuration parameters that are never changed by IRQ code (and typically only change on mode change) */
typedef struct
{
	modelocked_head_t heads[TARGET_MAX];
	overlayidx overlay_desktop,overlay_pointer; /* Indices of overlays used for desktop & mouse pointer. May be OVERLAY_MAX if none assigned yet. */
	overlaytarget default_display; /* Display that RISC OS is using for desktop & pointer, mode changes, etc. */
} modelocked_t;

typedef struct
{
	uint16_t buf_w,buf_h; /* Buffer dimensions */
	uint16_t scaled_w,scaled_h; /* Scaled image dimensions */
	int16_t x,y;
	pixelformat format;
	uint32_t ba; /* Buffer physical address */
	uint32_t ba_uv; /* UV plane for NV12 */
	uint32_t stride; /* Num bytes from start of one line to start of next */
	uint8_t *la; /* Buffer logical address */
	overlaytarget target;
	uint8_t rotation; /* Rotate/flip flags (mainly to help YUV). Bit 0 = 90  right, 1 = 180, 2 = V flip */
	bool enabled;
	bool highprio;
	bool v5tap; /* Use 5-tap vertical filter */
	bool desktopclip; /* Clip to the desktop overlay area */
	uint16_t clip[4]; /* Clipping rectangle */
} overlaycfg_t;

/* TV-out configuration */
typedef struct
{
	tvmode mode;
	tvouttype type;
	bool testcard;
} tvcfg_t;

/* Per-head configuration that can be changed by IRQ code */
typedef struct
{
	uint32_t background; /* Background colour in &BBGGRRSS format */
	uint32_t transparent; /* Transparent colour in hardware format */
	uint8_t dpms; /* Current dpms state */
	bool blanked;
} irqlocked_head_t;

/* Configuration that can be changed by IRQ code */
typedef struct
{
	irqlocked_head_t heads[TARGET_MAX];
	overlaycfg_t overlays[OVERLAY_MAX];
} irqlocked_t;

typedef struct
{
	/* DISPC mode timing registers */
	uint32_t control;
	uint32_t pol_freq;
	uint32_t size_lcd;
	uint32_t timing_h;
	uint32_t timing_v;
} dispcmode_t;

typedef struct
{
	/* Vet a mode
	   interlace & pixelformat have been extracted from the VIDCList for convenience
	   pixelformat has already been checked against the formats the head supports
	   Return true if mode is OK
	*/
	bool (*vetmode)(overlaytarget target,const VIDCList3 *params,bool interlace,pixelformat format);

	/* Prepare for a mode change by calculating the modelocked_head_t value:
	   * mode, x, y, enabled, interlaced will already be filled in with the expected values, but can be tweaked further if necessary
	 */
	void (*prepmode)(overlaytarget target,modelocked_head_t *state,pixelformat format);

	/* Program/reprogram the given mode */
	void (*setmode)(overlaytarget target,const modelocked_head_t *state);

	/* Blank/unblank display */
	void (*setblank)(overlaytarget target,bool blanked,uint8_t dpms);

	/* Reprogram the background colour setting from irqlocked */
	void (*setbackground)(overlaytarget target, const irqlocked_t *irqlocked);

	/* Reprogram the colour key transparency colour from headstates */
	void (*settransparent)(overlaytarget target, const irqlocked_t *irqlocked);

	/* Perform an IIC op, as per GraphicsV_IICOp
	   Set r4 to 0 to claim call */
	void (*iicop)(overlaytarget target,_kernel_swi_regs *r);

	/* Return fixed mode timings to use, or NULL */
	const lcdtimings_t *(*fixedtimings)(overlaytarget target);

	/* Table to map pixelformat enum values to OMAP-specific format */
	const omapformat_t *formats;

	/* Mask of which features have restricted settings */
	uint8_t features_val;
	uint8_t features_mask;

	/* Other flags */
	uint16_t flags;
} headattr_t;

#define HEADATTR_INTERLACED	0x1 /* Output is always interlaced */
#define HEADATTR_CLAMPTIMINGS	0x2 /* Clamp mode timings to within hwconfig limits */

typedef struct
{
	/* Settings copied straight from overlaycfg_t */
	pixelformat format;
	overlaytarget target;
	uint8_t rotation;
	bool highprio;
	bool v5tap;
	/* Register values */
	uint32_t ba[2]; /* Physical base address registers */
	uint32_t ba_uv[2]; /* UV plane for NV12 */
	uint32_t position; /* Position register */
	uint32_t size; /* Size register */
	uint32_t row_inc; /* Row inc register */
	/* Video overlay settings */
	uint32_t pic_size; /* Picture size register */
	uint32_t fir; /* Filter register */
	uint32_t accui[2]; /* Accumulator initialisers */
} lloverlaycfg_t;

typedef struct
{
	/* Enable an overlay/modify its parameters */
	void (*enable)(overlayidx overlay,const lloverlaycfg_t *ll);

	/* Disable an overlay */
	void (*disable)(overlayidx overlay);
} overlayattr_t;

typedef struct
{
	uint32_t errnum;
	char     errmess[8];
} internaterr_t;

typedef struct
{
	pixelformat format;
	overlaytarget target;
} featurecfg_t;

typedef struct
{
	/* Features requested by each overlay */
	featurecfg_t requests[OVERLAY_MAX];
	/* Actual features enabled for each head */
	uint8_t head_vals[TARGET_MAX];
	/* Combined mask of which features are locked-in */
	uint8_t head_masks[TARGET_MAX];
} features_t;

#endif
