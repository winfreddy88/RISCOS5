/*
 * Copyright (c) 2017, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef OMAPVIDEO_GVOVERLAY_H
#define OMAPVIDEO_GVOVERLAY_H

#include "graphicsv.h"
#include "buffer.h"

/* 8 screen banks per overlay should be enough */
#define GVBANK_MAX 8

/* Number of planes */
#define GVPLANE_MAX 2

typedef struct
{
	void *ba;
	uint32_t stride;
} gvoverlay_plane_mapping_t;

typedef struct
{
	overlayidx overlay; /* Hardware overlay that is used by this GraphicsV overlay, if OVERLAY_MAX then this overlay isn't allocated and rest of struct is garbage */
	int display; /* Which bank is currently being displayed, -1 if none */
	int flags; /* Transform + scaling flags */
	buffer_t *buffer; /* Framebuffer */
	gvoverlay_plane_mapping_t cpu_mappings[GVBANK_MAX][GVPLANE_MAX]; /* Arrays for return by GraphicsV_MapOverlayBuffer */
} gvoverlay_t;

typedef struct {
	pixelformat format;
	int overlay_flags; /* gvoverlay_t.flags */
	int banks;
	int return_flags; /* Flags to return to the caller */
	int min_w;
	int min_h;
	int max_w;
	int max_h;
} gvoverlay_create_vet_result_t;

typedef struct {
	int clip_x0;
	int clip_y0;
	int clip_x1;
	int clip_y1;
	int dummy; /* R4 in the GraphicsV call register dump */
	int width;
	int height;
	uint32_t aspect;
} gvoverlay_transform_t;

extern gvoverlay_t gvoverlays[GVOVERLAY_MAX]; /* GraphicsV overlays */
extern int current_gvoverlay_mode; /* GVOverlayType_ZOrder or GVOverlayType_Basic */

extern void gvoverlay_init(void);
extern void gvoverlay_shutdown(void);
extern _kernel_oserror *gvoverlay_create(const modeselector_t *desc,uint32_t aspect,uint32_t flags,uint32_t heads,const modelocked_t *modelocked,gvoverlay_create_vet_result_t *result,int *out_idx);
extern _kernel_oserror *gvoverlay_vet(const modeselector_t *desc,uint32_t aspect,uint32_t flags,uint32_t heads,const modelocked_t *modelocked,gvoverlay_create_vet_result_t *result);
extern _kernel_oserror *gvoverlay_destroy(int o,const modelocked_t *modelocked);
extern _kernel_oserror *gvoverlay_setposition(int o,int x,int y,int bank,const modelocked_t *modelocked);
extern _kernel_oserror *gvoverlay_map(int o, int b, gvoverlay_plane_mapping_t **mapping);
extern _kernel_oserror *gvoverlay_unmap(int o, int b);
extern _kernel_oserror *gvoverlay_discard(int o, int b, const modelocked_t *modelocked);
extern _kernel_oserror *gvoverlay_settransform(int o,gvoverlay_transform_t *xform,const modelocked_t *modelocked);
extern _kernel_oserror *gvoverlay_setzorder(const uint8_t *ids,int count,const modelocked_t *modelocked);

#endif
