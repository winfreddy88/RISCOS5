/*
 * Copyright (c) 2010, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef OMAPVIDEO_VARS_H
#define OMAPVIDEO_VARS_H

#include "types.h"

#ifdef DEBUGLIB
#define LOCKDEBUG
#endif

#ifdef LOCKDEBUG
#define LOCKDEBUG_ARGS_DEF const char *file,const char *func,int line
#define LOCKDEBUG_ARGS __FILE__,__func__,__LINE__
extern void lockdebug_init(void);
extern void lockdebug_output(void);
#else
#define LOCKDEBUG_ARGS_DEF void
#define LOCKDEBUG_ARGS
#define lockdebug_init() ((void) 0)
#define lockdebug_output() ((void) 0)
#endif

/* Global variables */

/* Reset an overlay config to default values */
extern void overlaycfg_reset(overlaycfg_t *o);

/* Acquire/release read/write access to the IRQ-locked data */
extern irqlocked_t *_irqlocked_lock(LOCKDEBUG_ARGS_DEF);
#define irqlocked_lock() _irqlocked_lock(LOCKDEBUG_ARGS)
extern void irqlocked_unlock(void);

/* Acquire/release read/write access to the mode-locked data */
extern const modelocked_t *modelocked_read_lock(void);
extern void modelocked_read_unlock(void);
extern modelocked_t *_modelocked_write_lock(LOCKDEBUG_ARGS_DEF);
#define modelocked_write_lock() _modelocked_write_lock(LOCKDEBUG_ARGS)
extern void modelocked_write_unlock(void);
extern const modelocked_t *modelocked_write_to_read(void);

/* Acquire/release read/write access to the head feature flags */
extern const features_t *features_read_lock(void);
extern void features_read_unlock(void);
extern features_t *_features_write_lock(LOCKDEBUG_ARGS_DEF);
#define features_write_lock() _features_write_lock(LOCKDEBUG_ARGS)
extern void features_write_unlock(void);
extern const features_t *features_write_to_read(void);


#endif
