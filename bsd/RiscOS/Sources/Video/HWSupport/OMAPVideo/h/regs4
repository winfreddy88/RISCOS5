/*
 * Copyright (c) 2010, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/* Offsets relative to DSS_BASE */
#define DISPC_BASE				0x1000
#define RFBI_BASE				0x2000
#define VENC_BASE				0x3000
#define DSI1_PROTOCOL_ENGINE	0x4000
#define DSI1_PHY				0x4200
#define DSI1_PLLCTRL			0x4300
#define DSI2_PROTOCOL_ENGINE	0x5000
#define DSI2_PHY				0x5200
#define DSI2_PLLCTRL			0x5300
#define HDMI_BASE				0x6000
#define HDMI_PLLCTRL			0x6200
#define HDMI_PHY				0x6300
#define HDCP_BASE				0x7000

/* Return max value for given register (assuming _MASK and _SHIFT macros exist) */
#define REG_MAX(REG)			(REG ## _MASK >> REG ## _SHIFT)
/* Extract field from register (assuming _MASK and _SHIFT macros exist) */
#define REG_EXTRACT(VAL,REG)	(((VAL) & REG ## _MASK) >> REG ## _SHIFT)

/* General registers */

#define SYSCONFIG_AUTOIDLE				(1 << 0)	/* DISPC, DSIn */
#define SYSCONFIG_SOFTRESET				(1 << 1)	/* DISPC, DSIn */
#define SYSCONFIG_ENWAKEUP				(1 << 2)	/* DISPC, DSIn */
#define SYSCONFIG_SIDLEMODE_MASK		(3 << 3)	/* DISPC, DSIn */
#define SYSCONFIG_SIDLEMODE_FORCE		(0 << 3)
#define SYSCONFIG_SIDLEMODE_NO			(1 << 3)
#define SYSCONFIG_SIDLEMODE_SMART		(2 << 3)
#define SYSCONFIG_CLOCKACTIVITY_MASK	(3 << 8)	/* DISPC, DSIn */
#define SYSCONFIG_CLOCKACTIVITY_IF0		(0 << 8)
#define SYSCONFIG_CLOCKACTIVITY_I1F0	(1 << 8)
#define SYSCONFIG_CLOCKACTIVITY_I0F1	(2 << 8)
#define SYSCONFIG_CLOCKACTIVITY_IF1		(3 << 8)
#define SYSCONFIG_MIDLEMODE_MASK		(3 << 12)	/* DISPC */
#define SYSCONFIG_MIDLEMODE_FORCE		(0 << 12)
#define SYSCONFIG_MIDLEMODE_NO			(1 << 12)
#define SYSCONFIG_MIDLEMODE_SMART		(2 << 12)

#define SYSSTATUS_RESETDONE				(1 << 0)	/* DSS, DISPC, DSIn */

/* DSS registers */

typedef struct dss_regs
{
	uint32_t revision;
	uint32_t _pad1[4];
	uint32_t sysstatus;
	uint32_t _pad2[10];
	uint32_t ctrl;
	uint32_t _pad3[6];
	uint32_t status;
} dss_regs_t;


/* bits in DSS_CTRL register */
#define DSS_CTRL_LCD1_CLK_SWITCH			(1 << 0)	/* 0==DSS_CLK,1==PLL1_CLK1 */
#define DSS_CTRL_DSI1_CLK_SWITCH			(1 << 1)	/* 0==DSS_CLK,1==PLL1_CLK2 */
#define DSS_CTRL_VENC_CLOCK_MODE			(1 << 2)	/* VENC clock mode */
#define DSS_CTRL_VENC_CLOCK_4X_ENABLE		(1 << 3)	/* VENC clock CLK4X enable */
#define DSS_CTRL_DAC_DEMEN					(1 << 4)	/* DAC Dynamic Element Matching */
#define DSS_CTRL_DAC_POWERDN_BGZ			(1 << 5)	/* DAC Power-down bandgap control */
#define DSS_CTRL_VENC_OUT_SEL				(1 << 6)	/* 0==Composite,1==Luminance */
#define DSS_CTRL_FCK_CLK_SWITCH				(3 << 8)	/* DISPC Functional clock */
#define DSS_CTRL_FCK_CLK_SWITCH_DSS_CLK		(0 << 8)	/* DSS_CLK (from PRCM) */
#define DSS_CTRL_FCK_CLK_SWITCH_PLL1_CLK1	(1 << 8)	/* PLL1_CLK1 (from DSI1 PLL) */
#define DSS_CTRL_FCK_CLK_SWITCH_PLL2_CLK1	(2 << 8)	/* PLL2_CLK1 (from DSI2 PLL) */
#define DSS_CTRL_FCK_CLK_SWITCH_PLL3_CLK1	(3 << 8)	/* PLL3_CLK1 (from HDMI PLL) */
#define DSS_CTRL_FCK_CLK_SWITCH_SHIFT		8
#define DSS_CTRL_DSI2_CLK_SWITCH			(1 << 10)	/* 0==DSS_CLK,1==PLL2_CLK2 */
#define DSS_CTRL_TV_CLK_SWITCH				(1 << 11)	/* 0==HDMI_PLL,1==DSS_TV_CLK */
#define DSS_CTRL_LCD2_CLK_SWITCH			(1 << 12)	/* 0==DSS_CLK,1==PLL2_CLK1 */
#define DSS_CTRL_SYNC_SWITCH				(1 << 13)
#define DSS_CTRL_RFBI_SWITCH				(1 << 14)	/* 0==LCD1,1==LCD2 */
#define DSS_CTRL_VENC_HDMI_SWITCH			(1 << 15)	/* 0==VENC,1==HDMI */
#define DSS_CTRL_LCD2_TV_SEL				(1 << 17)	/* 0==LCD2,1==TV */

/* bits in DSS_STATUS register */
#define DSS_STATUS_LCD1_CLK_STATUS				(3 << 0)	/* LCD1_CLK clock selection */
#define DSS_STATUS_LCD1_CLK_STATUS_DSS_CLK		(1 << 0)
#define DSS_STATUS_LCD1_CLK_STATUS_PLL1_CLK1	(2 << 0)
#define DSS_STATUS_TV_CLK_OUT_STATUS			(3 << 5)	/* TV_CLK_OUT selection */
#define DSS_STATUS_TV_CLK_OUT_STATUS_TV_CLK		(1 << 5)
#define DSS_STATUS_TV_CLK_OUT_STATUS_HDMI_M_PCLK (2 << 5)
#define DSS_STATUS_DSI1_CLK_STATUS				(3 << 7)	/* DSI1_CLK clock selection */
#define DSS_STATUS_DSI1_CLK_STATUS_DSS_CLK		(1 << 7)
#define DSS_STATUS_DSI1_CLK_STATUS_PLL1_CLK2	(2 << 7)
#define DSS_STATUS_DSI2_CLK_STATUS				(3 << 9)	/* DSI2_CLK clock selection */
#define DSS_STATUS_DSI2_CLK_STATUS_DSS_CLK		(1 << 9)
#define DSS_STATUS_DSI2_CLK_STATUS_PLL2_CLK2	(2 << 9)
#define DSS_STATUS_LCD2_CLK_STATUS				(3 << 11)	/* LCD2_CLK clock selection */
#define DSS_STATUS_LCD2_CLK_STATUS_DSS_CLK		(1 << 11)
#define DSS_STATUS_LCD2_CLK_STATUS_PLL2_CLK1	(2 << 11)
#define DSS_STATUS_TV_CLK_STATUS				(3 << 13)	/* TV_CLK clock selection */
#define DSS_STATUS_TV_CLK_STATUS_PLL3_CLK1		(1 << 13)
#define DSS_STATUS_TV_CLK_STATUS_DSS_TV_CLK		(2 << 13)
#define DSS_STATUS_FCK_CLK_STATUS				(15 << 15)	/* DISPC_FCLK clock selection */
#define DSS_STATUS_FCK_CLK_STATUS_DSS_CLK		( 1 << 15)
#define DSS_STATUS_FCK_CLK_STATUS_PLL1_CLK1		( 2 << 15)
#define DSS_STATUS_FCK_CLK_STATUS_PLL2_CLK1		( 4 << 15)
#define DSS_STATUS_FCK_CLK_STATUS_PLL3_CLK1		( 8 << 15)
#define DSS_STATUS_SYNC_STATUS					(3 << 19)	/* Sync generator selection */
#define DSS_STATUS_SYNC_STATUS_INT_VENC_IP		(0 << 19)	/* Internal VENC IP */
#define DSS_STATUS_SYNC_STATUS_COMP_VENC_IP		(1 << 19)	/* Component VENC IP */
#define DSS_STATUS_SYNC_STATUS_HDMI_IP			(2 << 19)	/* HDMI IP */
#define DSS_STATUS_RFBI_STATUS					(1 << 21)	/* 0=LCD1,1=LCD2 */



/* DISPC registers */

typedef struct gfx_regs
{
	uint32_t ba[2];
	uint32_t position;
	uint32_t size;
	uint32_t pad[4];
	uint32_t attributes;
	uint32_t buf_threshold;
	uint32_t buf_size_status;
	uint32_t row_inc;
	uint32_t pixel_inc;
	uint32_t window_skip;
	uint32_t table_ba;
} gfx_regs_t;

typedef struct vid_regs
{
	uint32_t ba[2];
	uint32_t position;
	uint32_t size;
	uint32_t attributes;
	uint32_t buf_threshold;
	uint32_t buf_size_status;
	uint32_t row_inc;
	uint32_t pixel_inc;
	uint32_t fir;
	uint32_t picture_size;
	uint32_t accui[2];
	fir_coef_t fir_coef[8];
	uint32_t conv_coef[5];
} vid_regs_t;

typedef struct vid3_regs
{
	uint32_t accui[2];
	uint32_t ba[2];
	fir_coef_t fir_coef[8];
	uint32_t fir_coef_v[8];
	uint32_t attributes;
	uint32_t conv_coef[5];
	uint32_t buf_size_status;
	uint32_t buf_threshold;
	uint32_t fir;
	uint32_t picture_size;
	uint32_t pixel_inc;
	uint32_t position;
	uint32_t preload;
	uint32_t row_inc;
	uint32_t size;
} vid3_regs_t;

typedef struct vid_regs2
{
	uint32_t fir;
	uint32_t accu[2];
	fir_coef_t fir_coef[8];
	uint32_t fir_coef_v[8];
} vid_regs2_t;

typedef struct vid_wb2
{
	uint32_t fir;
	uint32_t accu[2];
	uint32_t _pad0[1];
	fir_coef_t fir_coef[8];
	uint32_t fir_coef_v[8];
} vid_wb2_t;

typedef struct dispc_regs
{
	uint32_t revision;
	uint32_t _pad1[3];
	uint32_t sysconfig;
	uint32_t sysstatus;
	uint32_t irqstatus;
	uint32_t irqenable;
	uint32_t _pad2[8];
	uint32_t control1;
	uint32_t config1;
	uint32_t _pad3[1];
	uint32_t default_color[2];
	uint32_t trans_color[2];
	uint32_t line_status;
	uint32_t line_number;
	uint32_t timing_h1;
	uint32_t timing_v1;
	uint32_t pol_freq1;
	uint32_t divisor1;
	uint32_t global_alpha;
	uint32_t size_tv;
	uint32_t size_lcd1;
	gfx_regs_t gfx;
	vid_regs_t vid1;
	uint32_t _pad4[2];
	vid_regs_t vid2;
	uint32_t data1_cycle[3];
	uint32_t vid_fir_coef_v[2][8];
	uint32_t cpr1_coef_r;
	uint32_t cpr1_coef_g;
	uint32_t cpr1_coef_b;
	uint32_t gfx_preload;
	uint32_t vid_preload[2];

	uint32_t control2;
	uint32_t _pad5[49];
	vid3_regs_t vid3;
	uint32_t default_color2;
	uint32_t trans_color2;
	uint32_t cpr2_coef_b;
	uint32_t cpr2_coef_g;
	uint32_t cpr2_coef_r;
	uint32_t data2_cycle[3];
	uint32_t size_lcd2;
	uint32_t _pad6[12];
	uint32_t timing_h2;
	uint32_t timing_v2;
	uint32_t pol_freq2;
	uint32_t divisor2;
	uint32_t _pad7[60];
	vid3_regs_t wb;
	uint32_t _pad8[21];

	uint32_t ba_uv[4][2];		/* Vid1, Vid2, Vid3, WB */
	uint32_t config2;
	uint32_t attributes2[3];	/* Vid1, Vid2, Vid3 */
	uint32_t gamma_table[3];
	vid_regs2_t vid1_2;
	vid_regs2_t vid2_2;
	uint32_t _pad9[4];
	vid_regs2_t vid3_2;
	vid_wb2_t wb_2;
	uint32_t global_buffer;
	uint32_t divisor;
	uint32_t _pad10[2];
	uint32_t wb_attributes2;
} dispc_regs_t;

/* DISPC IRQ status/enable */
#define DISPC_IRQ_FRAMEDONE1			(1 << 0)
#define DISPC_IRQ_VSYNC1				(1 << 1)
#define DISPC_IRQ_EVSYNC_EVEN			(1 << 2)
#define DISPC_IRQ_EVSYNC_ODD			(1 << 3)
#define DISPC_IRQ_ACBIASCOUNTSTATUS1	(1 << 4)
#define DISPC_IRQ_PROGRAMMEDLINENUMBER	(1 << 5)
#define DISPC_IRQ_GFXBUFFERUNDERFLOW	(1 << 6)
#define DISPC_IRQ_GFXENDWINDOW			(1 << 7)
#define DISPC_IRQ_PALETTEGAMMA			(1 << 8)
#define DISPC_IRQ_OCPERROR				(1 << 9)
#define DISPC_IRQ_VID1BUFFERUNDERFLOW	(1 << 10)
#define DISPC_IRQ_VID1ENDWINDOW			(1 << 11)
#define DISPC_IRQ_VID2BUFFERUNDERFLOW	(1 << 12)
#define DISPC_IRQ_VID2ENDWINDOW			(1 << 13)
#define DISPC_IRQ_SYNCLOST1				(1 << 14)
#define DISPC_IRQ_SYNCLOSTTV			(1 << 15)
#define DISPC_IRQ_SYNCLOSTDIGITAL		DISPC_IRQ_SYNCLOSTTV	/* OMAP3 compatibility */
#define DISPC_IRQ_WAKEUP				(1 << 16)
#define DISPC_IRQ_SYNCLOST2				(1 << 17)
#define DISPC_IRQ_VSYNC2				(1 << 18)
#define DISPC_IRQ_VID3ENDWINDOW			(1 << 19)
#define DISPC_IRQ_VID3BUFFERUNDERFLOW	(1 << 20)
#define DISPC_IRQ_ACBIASCOUNTSTATUS2	(1 << 21)
#define DISPC_IRQ_FRAMEDONE2			(1 << 22)
#define DISPC_IRQ_FRAMEDONEWB			(1 << 23)
#define DISPC_IRQ_FRAMEDONETV			(1 << 24)
#define DISPC_IRQ_WBBUFFEROVERFLOW		(1 << 25)

/* bits in DISPC_CONTROL1/2 register */
#define DISPC_CONTROL_LCDENABLE								(1 << 0)
#define DISPC_CONTROL_TVENABLE								(1 << 1)	/* only CONTROL1 */
#define DISPC_CONTROL_DIGITALENABLE							DISPC_CONTROL_TVENABLE	/* OMAP3 */
#define DISPC_CONTROL_MONOCOLOR								(1 << 2)
#define DISPC_CONTROL_STNTFT								(1 << 3)
#define DISPC_CONTROL_M8B									(1 << 4)
#define DISPC_CONTROL_GOLCD									(1 << 5)
#define DISPC_CONTROL_GOTV									(1 << 6)	/* only CONTROL1 */
#define DISPC_CONTROL_GODIGITAL								DISPC_CONTROL_GOTV	/* OMAP3 */
#define DISPC_CONTROL_GOWB									(1 << 6)	/* only CONTROL2 */
#define DISPC_CONTROL_STDITHERENABLE						(1 << 7)
#define DISPC_CONTROL_TFTDATALINES_MASK						(3 << 8)
#define DISPC_CONTROL_TFTDATALINES_12BPP					(0 << 8)
#define DISPC_CONTROL_TFTDATALINES_16BPP					(1 << 8)
#define DISPC_CONTROL_TFTDATALINES_18BPP					(2 << 8)
#define DISPC_CONTROL_TFTDATALINES_24BPP					(3 << 8)
#define DISPC_CONTROL_SECURE								(1 << 10)	/* only CONTROL1 */
#define DISPC_CONTROL_STALLMODE								(1 << 11)
#define DISPC_CONTROL_OVERLAYOPTIMIZATION					(1 << 12)
#define DISPC_CONTROL_GPIN0									(1 << 13)	/* only CONTROL1 */
#define DISPC_CONTROL_GPIN1									(1 << 14)	/* only CONTROL1 */
#define DISPC_CONTROL_GPOUT0								(1 << 15)	/* only CONTROL1 */
#define DISPC_CONTROL_GPOUT1								(1 << 16)	/* only CONTROL1 */
#define DISPC_CONTROL_HT_MASK								(7 << 17)	/* only CONTROL1 */
#define DISPC_CONTROL_HT_SHIFT								17
#define DISPC_CONTROL_TDMENABLE								(1 << 20)
#define DISPC_CONTROL_TDMPARALLELMODE_MASK					(3 << 21)
#define DISPC_CONTROL_TDMPARALLELMODE_8						(0 << 21)
#define DISPC_CONTROL_TDMPARALLELMODE_9						(1 << 21)
#define DISPC_CONTROL_TDMPARALLELMODE_12					(2 << 21)
#define DISPC_CONTROL_TDMPARALLELMODE_16					(3 << 21)
#define DISPC_CONTROL_TDMCYCLEFORMAT_MASK					(3 << 23)
#define DISPC_CONTROL_TDMCYCLEFORMAT_1_1					(0 << 23)
#define DISPC_CONTROL_TDMCYCLEFORMAT_2_1					(1 << 23)
#define DISPC_CONTROL_TDMCYCLEFORMAT_3_1					(2 << 23)
#define DISPC_CONTROL_TDMCYCLEFORMAT_3_2					(3 << 23)
#define DISPC_CONTROL_TDMUNUSEDBITS_MASK					(3 << 25)
#define DISPC_CONTROL_TDMUNUSEDBITS_LL						(0 << 25)
#define DISPC_CONTROL_TDMUNUSEDBITS_HL						(1 << 25)
#define DISPC_CONTROL_TDMUNUSEDBITS_UNCHANGED				(2 << 25)
#define DISPC_CONTROL_PCKFREEENABLE							(1 << 27)	/* only CONTROL1 */
#define DISPC_CONTROL_LCDENABLESIGNAL						(1 << 28)	/* only CONTROL1 */
#define DISPC_CONTROL_LCDENABLEPOL							(1 << 29)	/* only CONTROL1 */
#define DISPC_CONTROL_STDITHERINGFRAMES_MASK				(3u << 30)
#define DISPC_CONTROL_STDITHERINGFRAMES_SPATIAL				(0  << 30)
#define DISPC_CONTROL_STDITHERINGFRAMES_SPATIAL_TEMPORAL_2	(1u << 30)
#define DISPC_CONTROL_STDITHERINGFRAMES_SPATIAL_TEMPORAL_4	(2u << 30)

/* bits in DISPC_CONFIG1/2 */
#define DISPC_CONFIG_PIXELGATED					(1 << 0)
#define DISPC_CONFIG_LOADMODE_MASK				(3 << 1)	/* only CONFIG1 */
#define DISPC_CONFIG_LOADMODE_BOTH				(0 << 1)
#define DISPC_CONFIG_LOADMODE_PALETTE			(1 << 1)	/* and then what? */
#define DISPC_CONFIG_LOADMODE_FRAME				(2 << 1)
#define DISPC_CONFIG_LOADMODE_BOTH_THEN_FRAME	(3 << 1)
#define DISPC_CONFIG_PALETTEGAMMATABLE			(1 << 3)	/* only CONFIG1 */
#define DISPC_CONFIG_PIXELDATAGATED				(1 << 4)
#define DISPC_CONFIG_PIXELCLOCKGATED			(1 << 5)
#define DISPC_CONFIG_HSYNCGATED					(1 << 6)
#define DISPC_CONFIG_VSYNCGATED					(1 << 7)
#define DISPC_CONFIG_ACBIASGATED				(1 << 8)
#define DISPC_CONFIG_GAMMATABLEENABLE			(1 << 9)	/* only CONFIG1 */
#define DISPC_CONFIG_TCKLCDENABLE				(1 << 10)
#define DISPC_CONFIG_TCKLCDSELECTION			(1 << 11)
#define DISPC_CONFIG_TCKTVENABLE				(1 << 12)	/* only CONFIG1 */
#define DISPC_CONFIG_TCKTVSELECTION				(1 << 13)	/* only CONFIG1 */
#define DISPC_CONFIG_TCKDIGENABLE				DISPC_CONFIG_TCKTVENABLE	/* OMAP3 */
#define DISPC_CONFIG_TCKDIGSELECTION			DISPC_CONFIG_TCKTVSELECTION	/* OMAP3 */
#define DISPC_CONFIG_BUFFERMERGE				(1 << 14)	/* only CONFIG1 */
#define DISPC_CONFIG_CPR						(1 << 15)
#define DISPC_CONFIG_BUFFERHANDCHECK			(1 << 16)
#define DISPC_CONFIG_BUFFERFILLING				(1 << 17)	/* only CONFIG1 */
#define DISPC_CONFIG_LCDALPHABLENDERENABLE		(1 << 18)	/* only CONFIG1 */
#define DISPC_CONFIG_TVALPHABLENDERENABLE		(1 << 19)	/* only CONFIG1 */
#define DISPC_CONFIG_OUTPUTMODEENABLE			(1 << 22)
#define DISPC_CONFIG_FIDFIRST					(1 << 23)
#define DISPC_CONFIG_COLORCONVENABLE			(1 << 24)
#define DISPC_CONFIG_FULLRANGE					(1 << 25)

/* Max values defined by HAL (they vary by OMAP revision) */
#define DISPC_TIMING_H_HSW_SHIFT				0
#define DISPC_TIMING_H_HFP_SHIFT				8
#define DISPC_TIMING_H_HBP_SHIFT				20

#define DISPC_TIMING_V_VSW_SHIFT				0
#define DISPC_TIMING_V_VFP_SHIFT				8
#define DISPC_TIMING_V_VBP_SHIFT				20

/* bits in DISPC_POL_FREQn */
#define DISPC_POL_FREQ_ACB_MASK					(0xFF << 0)
#define DISPC_POL_FREQ_ACB_SHIFT				0
#define DISPC_POL_FREQ_ACBI_MASK				(0x0F << 8)
#define DISPC_POL_FREQ_ACBI_SHIFT				8
#define DISPC_POL_FREQ_IVS						(1 << 12)
#define DISPC_POL_FREQ_IHS						(1 << 13)
#define DISPC_POL_FREQ_IPC						(1 << 14)
#define DISPC_POL_FREQ_IEO						(1 << 15)
#define DISPC_POL_FREQ_RF						(1 << 16)
#define DISPC_POL_FREQ_ONOFF					(1 << 17)
#define DISPC_POL_FREQ_ALIGN					(1 << 18)

#define DISPC_DIVISOR_PCD_MASK					(0xFF << 0)
#define DISPC_DIVISOR_PCD_SHIFT					0
#define DISPC_DIVISOR_LCD_MASK					(0xFF << 16)
#define DISPC_DIVISOR_LCD_SHIFT					16

#define DISPC_GLOBAL_ALPHA_GFXGLOBALALPHA_MASK		(0xFF << 0)
#define DISPC_GLOBAL_ALPHA_GFXGLOBALALPHA_SHIFT		0
#define DISPC_GLOBAL_ALPHA_VID1GLOBALALPHA_MASK		(0xFF << 8)
#define DISPC_GLOBAL_ALPHA_VID1GLOBALALPHA_SHIFT	8
#define DISPC_GLOBAL_ALPHA_VID2GLOBALALPHA_MASK		(0xFF << 16)
#define DISPC_GLOBAL_ALPHA_VID2GLOBALALPHA_SHIFT	16
#define DISPC_GLOBAL_ALPHA_VID3GLOBALALPHA_MASK		(0xFF << 24)
#define DISPC_GLOBAL_ALPHA_VID3GLOBALALPHA_SHIFT	24

/* bits in DISPC_SIZE_TV, DISPC_SIZE_LCD1, DISPC_SIZE_LCD2 */
#define DISPC_SIZE_LCD_PPL_MASK			(0x7FF << 0)
#define DISPC_SIZE_LCD_PPL_SHIFT		0
#define DISPC_SIZE_LCD_DELTA_LPP_MASK	(3 << 14)
#define DISPC_SIZE_LCD_DELTA_LPP_SHIFT	14
#define DISPC_SIZE_LCD_LPP_MASK			(0x7FF << 16)
#define DISPC_SIZE_LCD_LPP_SHIFT		16

/* OMAP3 compatibility */
#define DISPC_SIZE_DIG_PPL_MASK			0x00007FF
#define DISPC_SIZE_DIG_PPL_SHIFT		0
#define DISPC_SIZE_DIG_LPP_MASK			0x7FF0000
#define DISPC_SIZE_DIG_LPP_SHIFT		16

#define OVERLAY_POSITION_X_MASK			(0x7FF << 0)
#define OVERLAY_POSITION_X_SHIFT		0
#define OVERLAY_POSITION_Y_MASK			(0x7FF << 16)
#define OVERLAY_POSITION_Y_SHIFT		16

#define OVERLAY_SIZE_X_MASK				(0x7FF << 0)
#define OVERLAY_SIZE_X_SHIFT			0
#define OVERLAY_SIZE_Y_MASK				(0x7FF << 16)
#define OVERLAY_SIZE_Y_SHIFT			16

/* Common overlay attributes */
#define OVERLAY_ATTRIBUTES_ENABLE			(1 << 0)
#define OVERLAY_ATTRIBUTES_FORMAT_MASK		(0xF << 1)
#define OVERLAY_ATTRIBUTES_FORMAT_SHIFT		1
#define OVERLAY_ATTRIBUTES_FORMAT_NV12			( 0 << 1) /*     VID1 VID2 VID3 WB */
#define OVERLAY_ATTRIBUTES_FORMAT_BMP1			( 0 << 1) /* GFX                   */
#define OVERLAY_ATTRIBUTES_FORMAT_BMP2			( 1 << 1) /* GFX                   */
#define OVERLAY_ATTRIBUTES_FORMAT_BMP4			( 2 << 1) /* GFX                   */
#define OVERLAY_ATTRIBUTES_FORMAT_BMP8			( 3 << 1) /* GFX                   */
#define OVERLAY_ATTRIBUTES_FORMAT_xRGB12_4444	( 4 << 1) /* GFX VID1 VID2 VID3 WB */
#define OVERLAY_ATTRIBUTES_FORMAT_ARGB16_4444	( 5 << 1) /* GFX VID1 VID2 VID3 WB */
#define OVERLAY_ATTRIBUTES_FORMAT_RGB16_565		( 6 << 1) /* GFX VID1 VID2 VID3 WB */
#define OVERLAY_ATTRIBUTES_FORMAT_ARGB16_1555	( 7 << 1) /* GFX VID1 VID2 VID3 WB */
#define OVERLAY_ATTRIBUTES_FORMAT_xRGB24_8888	( 8 << 1) /* GFX VID1 VID2 VID3 WB */
#define OVERLAY_ATTRIBUTES_FORMAT_RGB24_888		( 9 << 1) /* GFX VID1 VID2 VID3 WB */
#define OVERLAY_ATTRIBUTES_FORMAT_RGBx12_4444	(10 << 1) /* GFX                   */
#define OVERLAY_ATTRIBUTES_FORMAT_RGBA12_4444	(11 << 1) /* GFX                   */
#define OVERLAY_ATTRIBUTES_FORMAT_YUV2			(10 << 1) /*     VID1 VID2 VID3 WB */
#define OVERLAY_ATTRIBUTES_FORMAT_UYVY			(11 << 1) /*     VID1 VID2 VID3 WB */
#define OVERLAY_ATTRIBUTES_FORMAT_ARGB32_8888	(12 << 1) /* GFX VID1 VID2 VID3 WB */
#define OVERLAY_ATTRIBUTES_FORMAT_RGBA32_8888	(13 << 1) /* GFX VID1 VID2 VID3 WB */
#define OVERLAY_ATTRIBUTES_FORMAT_RGBx24_8888	(14 << 1) /* GFX VID1 VID2 VID3 WB */
#define OVERLAY_ATTRIBUTES_FORMAT_xRGB15_1555	(15 << 1) /* GFX VID1 VID2 VID3 WB */
#define OVERLAY_ATTRIBUTES_ROTATION_MASK	(3 << 12)
#define OVERLAY_ATTRIBUTES_ROTATION_0		(0 << 12)
#define OVERLAY_ATTRIBUTES_ROTATION_90		(1 << 12)
#define OVERLAY_ATTRIBUTES_ROTATION_180		(2 << 12)
#define OVERLAY_ATTRIBUTES_ROTATION_270		(3 << 12)
#define OVERLAY_ATTRIBUTES_ZORDERENABLE		(1 << 25)
#define OVERLAY_ATTRIBUTES_ZORDER_SHIFT		(26)
#define OVERLAY_ATTRIBUTES_ZORDER_MASK		(3 << 26)
#define OVERLAY_ATTRIBUTES_ZORDER_0			(0 << 26)
#define OVERLAY_ATTRIBUTES_ZORDER_1			(1 << 26)
#define OVERLAY_ATTRIBUTES_ZORDER_2			(2 << 26)
#define OVERLAY_ATTRIBUTES_ZORDER_3			(3 << 26)
#define OVERLAY_ATTRIBUTES_PREMULTIPLYALPHA	(1 << 28)
#define OVERLAY_ATTRIBUTES_BURSTTYPE		(1 << 29)
#define OVERLAY_ATTRIBUTES_CHANNELOUT2		(3u << 30)
#define OVERLAY_ATTRIBUTES_CHANNELOUT2_LCD1	(0u << 30)
#define OVERLAY_ATTRIBUTES_CHANNELOUT2_LCD2	(1u << 30)
#define OVERLAY_ATTRIBUTES_CHANNELOUT2_WB	(3u << 30)

/* Graphics overlay attributes */
#define OVERLAY_ATTRIBUTES_GFXREPLICATIONENABLE	(1 << 5)
#define OVERLAY_ATTRIBUTES_GFXBURSTSIZE_MASK	(3 << 6)
#define OVERLAY_ATTRIBUTES_GFXBURSTSIZE_2X128	(0 << 6)
#define OVERLAY_ATTRIBUTES_GFXBURSTSIZE_4X128	(1 << 6)
#define OVERLAY_ATTRIBUTES_GFXBURSTSIZE_8X128	(2 << 6)
#define OVERLAY_ATTRIBUTES_GFXCHANNELOUT		(1 << 8)
#define OVERLAY_ATTRIBUTES_GFXNIBBLEMODE		(1 << 9)
#define OVERLAY_ATTRIBUTES_GFXBUFPRELOAD		(1 << 11)
#define OVERLAY_ATTRIBUTES_GFXARBITRATION		(1 << 14)
#define OVERLAY_ATTRIBUTES_GFXSELFREFRESH		(1 << 15)
#define OVERLAY_ATTRIBUTES_GFXSELFREFRESHAUTO	(1 << 17)
#define OVERLAY_ATTRIBUTES_GFXANTIFLICKER		(1 << 24)


/* Video overlay attributes */
#define OVERLAY_ATTRIBUTES_VIDRESIZEENABLE_MASK	(3 << 5)
#define OVERLAY_ATTRIBUTES_VIDRESIZEENABLE_NONE	(0 << 5)
#define OVERLAY_ATTRIBUTES_VIDRESIZEENABLE_H	(1 << 5)
#define OVERLAY_ATTRIBUTES_VIDRESIZEENABLE_V	(2 << 5)
#define OVERLAY_ATTRIBUTES_VIDRESIZEENABLE_BOTH	(3 << 5)
#define OVERLAY_ATTRIBUTES_VIDHRESIZECONF		(1 << 7)
#define OVERLAY_ATTRIBUTES_VIDVRESIZECONF		(1 << 8)
#define OVERLAY_ATTRIBUTES_VIDCOLORCONVENABLE	(1 << 9)
#define OVERLAY_ATTRIBUTES_VIDREPLICATIONENABLE	(1 << 10)
#define OVERLAY_ATTRIBUTES_VIDFULLRANGE			(1 << 11)
#define OVERLAY_ATTRIBUTES_VIDBURSTSIZE_MASK	(3 << 14)
#define OVERLAY_ATTRIBUTES_VIDBURSTSIZE_2X128	(0 << 14)
#define OVERLAY_ATTRIBUTES_VIDBURSTSIZE_4X128	(1 << 14)
#define OVERLAY_ATTRIBUTES_VIDBURSTSIZE_8X128	(2 << 14)
#define OVERLAY_ATTRIBUTES_VIDCHANNELOUT		(1 << 16)
#define OVERLAY_ATTRIBUTES_VIDSELFREFRESHAUTO	(1 << 17)
#define OVERLAY_ATTRIBUTES_VIDBUFPRELOAD		(1 << 19)
#define OVERLAY_ATTRIBUTES_VIDDMAOPTIMIZATION	(1 << 20)
#define OVERLAY_ATTRIBUTES_VIDVERTICALTAPS		(1 << 21)
#define OVERLAY_ATTRIBUTES_VIDDOUBLESTRIDE		(1 << 22)
#define OVERLAY_ATTRIBUTES_VIDARBITRATION		(1 << 23)
#define OVERLAY_ATTRIBUTES_VIDSELFREFRESH		(1 << 24)

/* Video overlay attributes2 */
#define OVERLAY_ATTRIBUTES2_VC1ENABLE				(1 << 0)
#define OVERLAY_ATTRIBUTES2_VC1_RANGE_Y_MASK		(7 << 1)
#define OVERLAY_ATTRIBUTES2_VC1_RANGE_Y_SHIFT		1
#define OVERLAY_ATTRIBUTES2_VC1_RANGE_CBCR_MASK		(7 << 4)
#define OVERLAY_ATTRIBUTES2_VC1_RANGE_CBCR_SHIFT	4
#define OVERLAY_ATTRIBUTES2_YUVCHROMARESAMPLING		(1 << 8)


#define OVERLAY_FIFOLOWTHRESHOLD_MASK	(0xFFF << 0)
#define OVERLAY_FIFOLOWTHRESHOLD_SHIFT	0
#define OVERLAY_FIFOHIGHTHRESHOLD_MASK	(0xFFF << 16)
#define OVERLAY_FIFOHIGHTHRESHOLD_SHIFT	16

#define OVERLAY_FIFO_SIZE_STATUS_MASK	(0xFFF << 0)
#define OVERLAY_FIFO_SIZE_STATUS_SHIFT	0

#define OVERLAY_PIXEL_INC_MAX			0xFFFFF

#define VID_OVERLAY_FIR_HINC_MASK	(0x1FFF << 0)
#define VID_OVERLAY_FIR_HINC_SHIFT	0
#define VID_OVERLAY_FIR_VINC_MASK	(0x1FFF << 16)
#define VID_OVERLAY_FIR_VINC_SHIFT	16

#define VID_OVERLAY_ACCUI_HACC_MASK		0x000007FF
#define VID_OVERLAY_ACCUI_HACC_SHIFT	0
#define VID_OVERLAY_ACCUI_VACC_MASK		0x07FF0000
#define VID_OVERLAY_ACCUI_VACC_SHIFT	16

/* For each of the three registers */
#define DISPC_CPR_COEF_xB_MASK		(0x3FF << 0)
#define DISPC_CPR_COEF_xB_SHIFT		0
#define DISPC_CPR_COEF_xG_MASK		(0x3FF << 11)
#define DISPC_CPR_COEF_xG_SHIFT		11
#define DISPC_CPR_COEF_xR_MASK		(0x3FFu << 22)
#define DISPC_CPR_COEF_xR_SHIFT		22

#define DISPC_PRELOAD_MASK			(0xFFF << 0)
#define DISPC_PRELOAD_SHIFT			0

/* RFBI registers */

typedef struct rfbi_regs
{
	uint32_t revision;
	uint32_t _pad1[3];
	uint32_t sysconfig;
	uint32_t sysstatus;
	uint32_t _pad2[10];
	uint32_t control;
	uint32_t pixel_cnt;
	uint32_t line_number;
	uint32_t cmd;
	uint32_t param;
	uint32_t data;
	uint32_t read;
	uint32_t status;
	uint32_t config;
	uint32_t onoff_time;
	uint32_t cycle_time;
	uint32_t data_cycle[3];
	uint32_t _pad3[6];
	uint32_t vsync_width;
	uint32_t hsync_width;
} rfbi_regs_t;

/* VENC registers */

typedef struct venc_regs
{
	uint32_t rev_id;
	uint32_t status;
	uint32_t f_control;
	uint32_t _pad1;
	uint32_t vidout_ctrl;
	uint32_t sync_ctrl;
	uint32_t _pad2;
	uint32_t llen;
	uint32_t flens;
	uint32_t hfltr_ctrl;
	uint32_t cc_carr_wss_carr;
	uint32_t c_phase;
	uint32_t gain_u;
	uint32_t gain_v;
	uint32_t gain_y;
	uint32_t black_level;
	uint32_t blank_level;
	uint32_t x_color;
	uint32_t m_control;
	uint32_t bstamp_wss_data;
	uint32_t s_carr;
	uint32_t line21;
	uint32_t ln_sel;
	uint32_t l21_wc_ctl;
	uint32_t htrigger_vtrigger;
	uint32_t savid_eavid;
	uint32_t flen_fal;
	uint32_t lal_phase_reset;
	uint32_t hs_int_start_stop_x;
	uint32_t hs_ext_start_stop_x;
	uint32_t vs_int_start_x;
	uint32_t vs_int_stop_x_vs_int_start_y;
	uint32_t vs_int_stop_y_vs_ext_start_x;
	uint32_t vs_ext_stop_x_vs_ext_start_y;
	uint32_t vs_ext_stop_y;
	uint32_t _pad3;
	uint32_t avid_start_stop_x;
	uint32_t avid_start_stop_y;
	uint32_t _pad4;
	uint32_t _pad5;
	uint32_t fid_int_start_x_fid_int_start_y;
	uint32_t fid_int_offset_y_fid_ext_start_x;
	uint32_t fid_ext_start_y_fid_ext_offset_y;
	uint32_t _pad6;
	uint32_t tvdetgp_int_start_stop_x;
	uint32_t tvdetgp_int_start_stop_y;
	uint32_t gen_ctrl;
	uint32_t _pad7;
	uint32_t _pad8;
	uint32_t output_control;
	uint32_t output_test;
} venc_regs_t;

/* bits in VENC_STATUS */
#define VENC_STATUS_FSQ_MASK				(0x07 << 0)
#define VENC_STATUS_FSQ_SHIFT				0
#define VENC_STATUS_CCO						(1 << 3)
#define VENC_STATUS_CCE						(1 << 4)

/* bits in VENC_F_CONTROL */
#define VENC_F_CONTROL_FMT_MASK				(3 << 0)
#define VENC_F_CONTROL_FMT_24_444_RGB		(0 << 0)
#define VENC_F_CONTROL_FMT_24_444			(1 << 0)
#define VENC_F_CONTROL_FMT_16_422			(2 << 0)
#define VENC_F_CONTROL_FMT_8_ITUR_656_422	(3 << 0)
#define VENC_F_CONTROL_BCOLOR_MASK			(7 << 2)
#define VENC_F_CONTROL_BCOLOR_BLACK			(0 << 2)
#define VENC_F_CONTROL_BCOLOR_BLUE			(1 << 2)
#define VENC_F_CONTROL_BCOLOR_RED			(2 << 2)
#define VENC_F_CONTROL_BCOLOR_MAGENTA		(3 << 2)
#define VENC_F_CONTROL_BCOLOR_GREEN			(4 << 2)
#define VENC_F_CONTROL_BCOLOR_CYAN			(5 << 2)
#define VENC_F_CONTROL_BCOLOR_YELLOW		(6 << 2)
#define VENC_F_CONTROL_BCOLOR_WHITE			(7 << 2)
#define VENC_F_CONTROL_RGBF					(1 << 5)
#define VENC_F_CONTROL_SVDS_MASK			(3 << 6)	/* Select Video Data Source */
#define VENC_F_CONTROL_SVDS_EXTERNAL		(0 << 6)	/* external video source */
#define VENC_F_CONTROL_SVDS_TESTCARD		(1 << 6)	/* internal Color BAR */
#define VENC_F_CONTROL_SVDS_BGCOL			(2 << 6)	/* background color */
#define VENC_F_CONTROL_RESET				(1 << 8)

/* bits in VENC_VIDOUT_CTRL */
#define VENC_VIDOUT_CTRL_MHZ_27_54			(1 << 0)

/* bits in VENC_SYNC_CTRL */
#define VENC_SYNC_CTRL_FHVMOD					(1 << 0)
#define VENC_SYNC_CTRL_HS_POL					(1 << 2)
#define VENC_SYNC_CTRL_VS_POL					(1 << 3)
#define VENC_SYNC_CTRL_FID_POL					(1 << 6)
#define VENC_SYNC_CTRL_M_S						(1 << 7)
#define VENC_SYNC_CTRL_HBLKM_MASK				(3 << 8)
#define VENC_SYNC_CTRL_HBLKM_INTERNAL_DEFAULT	(0 << 8)
#define VENC_SYNC_CTRL_HBLKM_INTERNAL_PROGRAM	(1 << 8)
#define VENC_SYNC_CTRL_HBLKM_EXTERNAL			(2 << 8)
#define VENC_SYNC_CTRL_VBLKM_MASK				(3 << 10)
#define VENC_SYNC_CTRL_VBLKM_INTERNAL_DEFAULT	(0 << 10)
#define VENC_SYNC_CTRL_VBLKM_INTERNAL_PROGRAM	(1 << 10)
#define VENC_SYNC_CTRL_NBLNKS					(1 << 12)
#define VENC_SYNC_CTRL_IGNP						(1 << 13)
#define VENC_SYNC_CTRL_ESAV						(1 << 14)
#define VENC_SYNC_CTRL_FREE						(1 << 15)

/* bits in VENC_LLEN */
#define VENC_LLEN_LLEN_MASK						(0x3FF << 0)
#define VENC_LLEN_LLEN_SHIFT					0
#define VENC_LLEN_LLEN_EN						(1 << 15)

/* bits in VENC_FLENS */
#define VENC_FLENS_FLENS_MASK					(0x7FF << 0)
#define VENC_FLENS_FLENS_SHIFT					0

/* bits in VENC_HFLTR_CTRL */
#define VENC_HFLTR_CTRL_YINTP					(1 << 0)
#define VENC_HFLTR_CTRL_CINTP_MASK				(3 << 1)
#define VENC_HFLTR_CTRL_CINTP_ENABLED			(0 << 1)
#define VENC_HFLTR_CTRL_CINTP_1BYPASSED			(1 << 1)
#define VENC_HFLTR_CTRL_CINTP_2BYPASSED			(2 << 1)
#define VENC_HFLTR_CTRL_CINTP_DISABLED			(3 << 1)

/* bits in VENC_CC_CARR_WSS_CARR */
#define VENC_CC_CARR_WSS_CARR_FCC_MASK			(0xFFFF << 0)
#define VENC_CC_CARR_WSS_CARR_FCC_SHIFT			0
#define VENC_CC_CARR_WSS_CARR_FWSS_MASK			(0xFFFFu << 16)
#define VENC_CC_CARR_WSS_CARR_FWSS_SHIFT		16

/* bits in VENC_C_PHASE */
#define VENC_C_PHASE_CPHS_MASK					(0xFF << 0)
#define VENC_C_PHASE_CPHS_SHIFT					0

/* bits in VENC_GAIN_U */
#define VENC_GAIN_U_GU_MASK						(0x1FF << 0)
#define VENC_GAIN_U_GU_SHIFT					0

/* bits in VENC_GAIN_V */
#define VENC_GAIN_V_GV_MASK						(0x1FF << 0)
#define VENC_GAIN_V_GV_SHIFT					0

/* bits in VENC_GAIN_Y */
#define VENC_GAIN_Y_GY_MASK						(0x1FF << 0)
#define VENC_GAIN_Y_GY_SHIFT					0

/* bits in VENC_BLACK_LEVEL */
#define VENC_BLACK_LEVEL_BLACK_MASK				(0x7F << 0)
#define VENC_BLACK_LEVEL_BLACK_SHIFT			0

/* bits in VENC_BLANK_LEVEL */
#define VENC_BLANK_LEVEL_BLANK_MASK				(0x7F << 0)
#define VENC_BLANK_LEVEL_BLANK_SHIFT			0

/* bits in VENC_X_COLOR */
#define VENC_X_COLOR_LCD_MASK					(7 << 0)
#define VENC_X_COLOR_LCD_SHIFT					0
#define VENC_X_COLOR_XCBW_MASK					(3 << 3)
#define VENC_X_COLOR_XCBW_32_8					(0 << 3)
#define VENC_X_COLOR_XCBW_26_5					(1 << 3)
#define VENC_X_COLOR_XCBW_30_0					(2 << 3)
#define VENC_X_COLOR_XCBW_29_2					(3 << 3)
#define VENC_X_COLOR_XCE						(1 << 6)

/* bits in VENC_M_CONTROL */
#define VENC_M_CONTROL_FFRQ						(1 << 0)
#define VENC_M_CONTROL_PAL						(1 << 1)
#define VENC_M_CONTROL_CBW_MASK					(7 << 2)
#define VENC_M_CONTROL_CBW_21_8					(0 << 2)
#define VENC_M_CONTROL_CBW_19_8					(1 << 2)
#define VENC_M_CONTROL_CBW_18_0					(2 << 2)
#define VENC_M_CONTROL_CBW_23_7					(5 << 2)
#define VENC_M_CONTROL_CBW_26_8					(6 << 2)
#define VENC_M_CONTROL_CBW_BYPASS				(7 << 2)
#define VENC_M_CONTROL_PALPHS					(1 << 5)
#define VENC_M_CONTROL_PALN						(1 << 6)
#define VENC_M_CONTROL_PALI						(1 << 7)

/* bits in VENC_BSTAMP_WSS_DATA */
#define VENC_BSTAMP_WSS_DATA_BSTAP_MASK			(0x7F << 0)
#define VENC_BSTAMP_WSS_DATA_BSTAP_SHIFT		0
#define VENC_BSTAMP_WSS_DATA_SQP				(1 << 7)
#define VENC_BSTAMP_WSS_DATA_WSS_DATA_MASK		(0xFFFFF << 8)
#define VENC_BSTAMP_WSS_DATA_WSS_DATA_SHIFT		8

/* bits in VENC_LINE21 */
#define VENC_LINE21_L21O_MASK					(0xFFFF << 0)
#define VENC_LINE21_L21O_SHIFT					0
#define VENC_LINE21_L21E_MASK					(0xFFFFu << 16)
#define VENC_LINE21_L21E_SHIFT					16

/* bits in VENC_LN_SEL */
#define VENC_LN_SEL_SLINE_MASK					(0x1F << 0)
#define VENC_LN_SEL_SLINE_SHIFT					0
#define VENC_LN_SEL_LN21_RUNIN_MASK				(0x3FF << 16)
#define VENC_LN_SEL_LN21_RUNIN_SHIFT			16

/* bits in VENC_L21_WC_CTL */
#define VENC_L21_WC_CTL_L21EN_MASK				(3 << 0)
#define VENC_L21_WC_CTL_L21EN_OFF				(0 << 0)
#define VENC_L21_WC_CTL_L21EN_ODD				(1 << 0)
#define VENC_L21_WC_CTL_L21EN_EVEN				(2 << 0)
#define VENC_L21_WC_CTL_L21EN_BOTH				(3 << 0)
#define VENC_L21_WC_CTL_LINE_MASK				(0x1F << 8)
#define VENC_L21_WC_CTL_LINE_SHIFT				8
#define VENC_L21_WC_CTL_EVEN_ODD_EN_MASK		(3 << 13)
#define VENC_L21_WC_CTL_EVEN_ODD_EN_OFF			(0 << 13)
#define VENC_L21_WC_CTL_EVEN_ODD_EN_ODD			(1 << 13)
#define VENC_L21_WC_CTL_EVEN_ODD_EN_EVEN		(2 << 13)
#define VENC_L21_WC_CTL_EVEN_ODD_EN_BOTH		(3 << 13)
#define VENC_L21_WC_CTL_INV						(1 << 15)

/* bits in VENC_HTRIGGER_VTRIGGER */
#define VENC_HTRIGGER_VTRIGGER_HTRIG_MASK		(0x7FF << 0)
#define VENC_HTRIGGER_VTRIGGER_HTRIG_SHIFT		0
#define VENC_HTRIGGER_VTRIGGER_VTRIG_MASK		(0x3FF << 16)
#define VENC_HTRIGGER_VTRIGGER_VTRIG_SHIFT		16

/* bits in VENC_SAVID_EAVID */
#define VENC_SAVID_EAVID_SAVID_MASK				(0x7FF << 0)
#define VENC_SAVID_EAVID_SAVID_SHIFT			0
#define VENC_SAVID_EAVID_EAVID_MASK				(0x7FF << 16)
#define VENC_SAVID_EAVID_EAVID_SHIFT			16

/* bits in VENC_FLEN_FAL */
#define VENC_FLEN_FAL_FLEN_MASK					(0x3FF << 0)
#define VENC_FLEN_FAL_FLEN_SHIFT				0
#define VENC_FLEN_FAL_FAL_MASK					(0x1FF << 16)
#define VENC_FLEN_FAL_FAL_SHIFT					16

/* bits in VENC_LAL_PHASE_RESET */
#define VENC_LAL_PHASE_RESET_LAL_MASK			(0x1FF << 0)
#define VENC_LAL_PHASE_RESET_LAL_SHIFT			0
#define VENC_LAL_PHASE_RESET_SBLANK				(1 << 16)
#define VENC_LAL_PHASE_RESET_PRES_MASK			(3 << 17)
#define VENC_LAL_PHASE_RESET_PRES_NONE			(0 << 17)
#define VENC_LAL_PHASE_RESET_PRES_2LINES		(1 << 17)
#define VENC_LAL_PHASE_RESET_PRES_8FIELDS		(2 << 17)
#define VENC_LAL_PHASE_RESET_PRES_4FIELDS		(3 << 17)

/* bits in VENC_AVID_START_STOP_X */
#define VENC_AVID_START_STOP_X_AVID_START_X_MASK	(0x3FF << 0)
#define VENC_AVID_START_STOP_X_AVID_START_X_SHIFT	0
#define VENC_AVID_START_STOP_X_AVID_STOP_X_MASK		(0x3FF << 16)
#define VENC_AVID_START_STOP_X_AVID_STOP_X_SHIFT	16

/* bits in VENC_AVID_START_STOP_Y */
#define VENC_AVID_START_STOP_Y_AVID_START_Y_MASK	(0x3FF << 0)
#define VENC_AVID_START_STOP_Y_AVID_START_Y_SHIFT	0
#define VENC_AVID_START_STOP_Y_AVID_STOP_Y_MASK		(0x3FF << 16)
#define VENC_AVID_START_STOP_Y_AVID_STOP_Y_SHIFT	16

/* bits in VENC_GEN_CTRL */
#define VENC_GEN_CTRL_EN							(1 << 0)
#define VENC_GEN_CTRL_TVDP							(1 << 16)
#define VENC_GEN_CTRL_FEP							(1 << 17)
#define VENC_GEN_CTRL_FIP							(1 << 18)
#define VENC_GEN_CTRL_AVIDP							(1 << 19)
#define VENC_GEN_CTRL_VEP							(1 << 20)
#define VENC_GEN_CTRL_HEP							(1 << 21)
#define VENC_GEN_CTRL_VIP							(1 << 22)
#define VENC_GEN_CTRL_HIP							(1 << 23)
#define VENC_GEN_CTRL_CBAR							(1 << 24)
#define VENC_GEN_CTRL_656							(1 << 25)
#define VENC_GEN_CTRL_MS							(1 << 26)

/* bits in VENC_OUTPUT_CONTROL */
#define VENC_OUTPUT_CONTROL_COMPOSITE_ENABLE		(1 << 1)
#define VENC_OUTPUT_CONTROL_VIDEO_INVERT			(1 << 3)
#define VENC_OUTPUT_CONTROL_TEST_MODE				(1 << 4)
#define VENC_OUTPUT_CONTROL_COMPOSITE_SOURCE		(1 << 6)

/* bits in VENC_OUTPUT_TEST */
#define VENC_OUTPUT_TEST_COMPOSITE_TEST_MASK		(0x3FF << 0)
#define VENC_OUTPUT_TEST_COMPOSITE_TEST_SHIFT		0



/* DSI registers */
/* DSI Protocol Engine register */

/* subsection relative to DSI_VC_i (i = 0 ..3) */
typedef struct dsi_vc_regs
{
	uint32_t ctrl;
	uint32_t te;
	uint32_t long_packet_header;
	uint32_t long_packet_payload;
	uint32_t short_packet_header;
	uint32_t _pad0[1];
	uint32_t irqstatus;
	uint32_t irqenable;
} dsi_vc_regs_t;

typedef struct dsi_regs
{
	uint32_t revision;
	uint32_t _pad0[3];
	uint32_t sysconfig;
	uint32_t sysstatus;
	uint32_t irqstatus;
	uint32_t irqenable;
	uint32_t _pad1[8];
	uint32_t ctrl;
	uint32_t gnq;
	uint32_t complexio_cfg1;
	uint32_t complexio_irqstatus;
	uint32_t complexio_irqenable;
	uint32_t clk_ctrl;
	uint32_t timing1;
	uint32_t timing2;
	uint32_t vm_timing1;
	uint32_t vm_timing2;
	uint32_t vm_timing3;
	uint32_t clk_timing;
	uint32_t tx_fifo_vc_size;
	uint32_t rx_fifo_vc_size;
	uint32_t complexio_cfg2;
	uint32_t rx_fifo_vc_fullness;
	uint32_t vm_timing4;
	uint32_t tx_fifo_vc_emptiness;
	uint32_t vm_timing5;
	uint32_t vm_timing6;
	uint32_t vm_timing7;
	uint32_t stopclk_timing;
	uint32_t ctrl2;
	uint32_t vm_timing8;
	uint32_t te_hsync_width_0;
	uint32_t te_vsync_width_0;
	uint32_t te_hsync_number_0;
	uint32_t te_hsync_width_1;
	uint32_t te_vsync_width_1;
	uint32_t te_hsync_number_1;
	uint32_t _pad2[18];

	dsi_vc_regs_t vc[4];
} dsi_regs_t;

/* DSI_PHY register */

typedef struct dsi_phy_regs
{
	uint32_t reg[6];
} dsi_phy_regs_t;

/* DSI_PLLCTRL register */

typedef struct dsi_pll_regs
{
	uint32_t control;
	uint32_t status;
	uint32_t go;
	uint32_t configuration1;
	uint32_t configuration2;
	uint32_t configuration3;
	uint32_t ssc_configuration1;
	uint32_t ssc_configuration2;
} dsi_pll_regs_t;


/* DSIn IRQ status/enable */
#define DSI_IRQ_VIRTUAL_CHANNEL0				(1 << 0)	/* RO (IRQSTATUS only) */
#define DSI_IRQ_VIRTUAL_CHANNEL1				(1 << 1)	/* RO (IRQSTATUS only) */
#define DSI_IRQ_VIRTUAL_CHANNEL2				(1 << 2)	/* RO (IRQSTATUS only) */
#define DSI_IRQ_VIRTUAL_CHANNEL3				(1 << 3)	/* RO (IRQSTATUS only) */
#define DSI_IRQ_WAKEUP							(1 << 4)
#define DSI_IRQ_RESYNCHRONIZATION				(1 << 5)
#define DSI_IRQ_PLL_LOCK						(1 << 7)
#define DSI_IRQ_PLL_UNLOCK						(1 << 8)
#define DSI_IRQ_PLL_RECAL						(1 << 9)
#define DSI_IRQ_COMPLEXIO_ERR					(1 << 10)
#define DSI_IRQ_HS_TX_TO						(1 << 14)
#define DSI_IRQ_LP_RX_TO						(1 << 15)
#define DSI_IRQ_TE_TRIGGER						(1 << 16)
#define DSI_IRQ_ACK_TRIGGER						(1 << 17)
#define DSI_IRQ_SYNC_LOST						(1 << 18)
#define DSI_IRQ_LDO_POWER_GOOD					(1 << 19)
#define DSI_IRQ_TA_TO							(1 << 20)
#define DSI_IRQ_TE0_LINE						(1 << 21)
#define DSI_IRQ_TE1_LINE						(1 << 22)

/* bits in DSIn_CTRL */
#define DSI_CTRL_IF_EN							(1 << 0)
#define DSI_CTRL_CS_RX_EN						(1 << 1)
#define DSI_CTRL_ECC_RX_EN						(1 << 2)
#define DSI_CTRL_TX_FIFO_ARBITRATION			(1 << 3)
#define DSI_CTRL_VP_CLK_RATIO					(1 << 4)
#define DSI_CTRL_TRIGGER_RESET					(1 << 5)
#define DSI_CTRL_VP_DATA_BUS_WIDTH				(3 << 6)
#define DSI_CTRL_VP_DATA_BUS_WIDTH_16			(0 << 6)
#define DSI_CTRL_VP_DATA_BUS_WIDTH_18			(1 << 6)
#define DSI_CTRL_VP_DATA_BUS_WIDTH_24			(2 << 6)
#define DSI_CTRL_VP_CLK_POL						(1 << 8)
#define DSI_CTRL_VP_DE_POL						(1 << 9)
#define DSI_CTRL_VP_HSYNC_POL					(1 << 10)
#define DSI_CTRL_VP_VSYNC_POL					(1 << 11)
#define DSI_CTRL_LINE_BUFFER					(3 << 12)
#define DSI_CTRL_LINE_BUFFER_NONE				(0 << 12)
#define DSI_CTRL_LINE_BUFFER_1					(1 << 12)
#define DSI_CTRL_LINE_BUFFER_2					(2 << 12)
#define DSI_CTRL_TRIGGER_RESET_MODE				(1 << 14)
#define DSI_CTRL_VP_VSYNC_START					(1 << 15)
#define DSI_CTRL_VP_VSYNC_END					(1 << 16)
#define DSI_CTRL_VP_HSYNC_START					(1 << 17)
#define DSI_CTRL_VP_HSYNC_END					(1 << 18)
#define DSI_CTRL_EOT_ENABLE						(1 << 19)
#define DSI_CTRL_BLANKING_MODE					(1 << 20)
#define DSI_CTRL_HFP_BLANKING_MODE				(1 << 21)
#define DSI_CTRL_HBP_BLANKING_MODE				(1 << 22)
#define DSI_CTRL_HSA_BLANKING_MODE				(1 << 23)
#define DSI_CTRL_DISPC_UPDATE_SYNC				(1 << 24)

/* bits in DSIn_CLK_CTRL */
#define DSI_CLK_CTRL_LP_CLK_DIVISOR_MASK			(0x1FFF << 0)
#define DSI_CLK_CTRL_LP_CLK_DIVISOR_SHIFT			0
#define DSI_CLK_CTRL_DDR_CLK_ALWAYS_ON				(1 << 13)
#define DSI_CLK_CTRL_CIO_CLK_ICG					(1 << 14)
#define DSI_CLK_CTRL_LP_CLK_NULL_PACKET_ENABLE		(1 << 15)
#define DSI_CLK_CTRL_LP_CLK_NULL_PACKET_SIZE_MASK	(3 << 16)
#define DSI_CLK_CTRL_LP_CLK_NULL_PACKET_SIZE_SHIFT	16
#define DSI_CLK_CTRL_HS_AUTO_STOP_ENABLE			(1 << 18)
#define DSI_CLK_CTRL_HS_MANUAL_STOP_CTRL			(1 << 19)
#define DSI_CLK_CTRL_LP_CLK_ENABLE					(1 << 20)
#define DSI_CLK_CTRL_LP_RX_SYNCHRO_ENABLE			(1 << 21)
#define DSI_CLK_CTRL_PLL_PWR_STATUS_MASK			(3 << 28)
#define DSI_CLK_CTRL_PLL_PWR_STATUS_SHIFT			28
#define DSI_CLK_CTRL_PLL_PWR_CMD_MASK				(3u << 30)
#define DSI_CLK_CTRL_PLL_PWR_CMD_SHIFT				30

#define DSI_PLL_PWR_CMD_OFF							0u
#define DSI_PLL_PWR_CMD_DSI_PLL_ON_HSDIVIDER_OFF	1u
#define DSI_PLL_PWR_CMD_BOTH_ON						2u
#define DSI_PLL_PWR_CMD_BOTH_ON_DSI_COMPLEXIO_OFF	3u


/* bits in DSIn_PLL_CONTROL register */
#define DSI_PLL_CONTROL_PLL_AUTOMODE			(1 << 0)
#define DSI_PLL_CONTROL_PLL_GATEMODE			(1 << 1)
#define DSI_PLL_CONTROL_PLL_HALTMODE			(1 << 2)
#define DSI_PLL_CONTROL_PLL_SYSRESET			(1 << 3)
#define DSI_PLL_CONTROL_HSDIV_SYSRESET			(1 << 4)

/* bits in DSIn_PLL_STATUS register */
#define DSI_PLL_STATUS_DSI_PLLCTRL_RESET_DONE	(1 << 0)
#define DSI_PLL_STATUS_DSI_PLL_LOCK				(1 << 1)
#define DSI_PLL_STATUS_DSI_PLL_RECAL			(1 << 2)
#define DSI_PLL_STATUS_DSI_PLL_LOSSREF			(1 << 3)
#define DSI_PLL_STATUS_DSI_PLL_LIMP				(1 << 4)
#define DSI_PLL_STATUS_DSI_PLL_HIGHJITTER		(1 << 5)
#define DSI_PLL_STATUS_DSI_PLL_BYPASS			(1 << 6)
#define DSI_PLL_STATUS_M4_CLOCK_ACK				(1 << 7)
#define DSI_PLL_STATUS_M5_CLOCK_ACK				(1 << 8)
#define DSI_PLL_STATUS_BYPASSACKZ				(1 << 9)
#define DSI_PLL_STATUS_M7_CLOCK_ACK				(1 << 11)
#define DSI_PLL_STATUS_SSC_EN_ACK				(1 << 12)

/* bits in DSIn_PLL_GO register */
#define DSI_PLL_GO_DSI_PLL_GO					(1 << 0)

/* bits in DSIn_PLL_CONFIGURATION1 register */
#define DSI_PLL_CONFIGURATION1_DSI_PLL_STOPMODE		(1 << 0)
#define DSI_PLL_CONFIGURATION1_DSI_PLL_REGN_MASK	(0xFF << 1)
#define DSI_PLL_CONFIGURATION1_DSI_PLL_REGN_SHIFT	1
#define DSI_PLL_CONFIGURATION1_DSI_PLL_REGM_MASK	(0xFFF << 9)
#define DSI_PLL_CONFIGURATION1_DSI_PLL_REGM_SHIFT	9
#define DSI_PLL_CONFIGURATION1_M4_CLOCK_DIV_MASK	(0x1F << 21)
#define DSI_PLL_CONFIGURATION1_M4_CLOCK_DIV_SHIFT	21
#define DSI_PLL_CONFIGURATION1_M5_CLOCK_DIV_MASK	(0x1F << 26)
#define DSI_PLL_CONFIGURATION1_M5_CLOCK_DIV_SHIFT	26

/* bits in DSIn_PLL_CONFIGURATION2 register */
#define DSI_PLL_CONFIGURATION2_PLL_IDLE				(1 << 0)
#define DSI_PLL_CONFIGURATION2_PLL_PLLLPMODE		(1 << 5)
#define DSI_PLL_CONFIGURATION2_PLL_LOWCURRSTBY		(1 << 6)
#define DSI_PLL_CONFIGURATION2_PLL_DRIFTGUARDEN		(1 << 8)
#define DSI_PLL_CONFIGURATION2_PLL_LOCKSEL_MASK		(3 << 9)
#define DSI_PLL_CONFIGURATION2_PLL_LOCKSEL_TPL		(0 << 9)	/* Phase Lock */
#define DSI_PLL_CONFIGURATION2_PLL_LOCKSEL_FREQ		(1 << 9)	/* Frequency Lock */
#define DSI_PLL_CONFIGURATION2_PLL_REFEN			(1 << 13)
#define DSI_PLL_CONFIGURATION2_PHY_CLKINEN			(1 << 14)	/* CLKIN4DDR */
#define DSI_PLL_CONFIGURATION2_BYPASSEN				(1 << 15)
#define DSI_PLL_CONFIGURATION2_M4_CLOCK_EN			(1 << 16)
#define DSI_PLL_CONFIGURATION2_M4_CLOCK_PWDN		(1 << 17)
#define DSI_PLL_CONFIGURATION2_M5_CLOCK_EN			(1 << 18)
#define DSI_PLL_CONFIGURATION2_M5_CLOCK_PWDN		(1 << 19)
#define DSI_PLL_CONFIGURATION2_HSDIVBYPASS			(1 << 20)
#define DSI_PLL_CONFIGURATION2_M7_CLOCK_EN			(1 << 25)
#define DSI_PLL_CONFIGURATION2_M7_CLOCK_PWDN		(1 << 26)

/* bits in DSIn_PLL_CONFIGURATION3 register */
#define DSI_PLL_CONFIGURATION3_M7_CLOCK_DIV_MASK	(0x1F << 5)
#define DSI_PLL_CONFIGURATION3_M7_CLOCK_DIV_SHIFT	5

/* bits in DSIn_PLL_SSC_CONFIGURATION1 register */
#define DSI_PLL_SSC_CONFIGURATION1_EN_SSC			(1 << 0)
#define DSI_PLL_SSC_CONFIGURATION1_DOWNSPREAD		(1 << 2)

/* bits in DSIn_PLL_SSC_CONFIGURATION2 register */
#define DSI_PLL_SSC_CONFIGURATION2_DELTAM_MASK			(0xFFFFF << 0)
#define DSI_PLL_SSC_CONFIGURATION2_DELTAM_SHIFT			0
#define DSI_PLL_SSC_CONFIGURATION2_MODFREQDIVIDER_MASK	(0x3FF << 20)
#define DSI_PLL_SSC_CONFIGURATION2_MODFREQDIVIDER_SHIFT	20


/* SDMA registers */

typedef struct sdmachan_regs
{
	uint32_t ccr;
	uint32_t clnk_ctrl;
	uint32_t cicr;
	uint32_t csr;
	uint32_t csdp;
	uint32_t cen;
	uint32_t cfn;
	uint32_t cssa;
	uint32_t cdsa;
	uint32_t csei;
	uint32_t csfi;
	uint32_t cdei;
	uint32_t cdfi;
	uint32_t csac;
	uint32_t cdac;
	uint32_t ccen;
	uint32_t ccfn;
	uint32_t color;
	uint32_t _pad[6];
} sdmachan_regs_t;

#define DMA4_CCR_SYNCHRO_CONTROL_MASK			(0x1F << 0)
#define DMA4_CCR_SYNCHRO_CONTROL_SHIFT			0
#define DMA4_CCR_FS								(1 << 5)
#define DMA4_CCR_READ_PRIORITY					(1 << 6)
#define DMA4_CCR_ENABLE							(1 << 7)
#define DMA4_CCR_SUSPEND_SENSITIVE				(1 << 8)
#define DMA4_CCR_RD_ACTIVE						(1 << 9)
#define DMA4_CCR_WR_ACTIVE						(1 << 10)
#define DMA4_CCR_SRC_AMODE_MASK					(3 << 12)
#define DMA4_CCR_SRC_AMODE_CONSTANT				(0 << 12)
#define DMA4_CCR_SRC_AMODE_POSTINCREMENT		(1 << 12)
#define DMA4_CCR_SRC_AMODE_SINGLEINDEX			(2 << 12)
#define DMA4_CCR_SRC_AMODE_DOUBLEINDEX			(3 << 12)
#define DMA4_CCR_DST_AMODE_MASK					(3 << 14)
#define DMA4_CCR_DST_AMODE_CONSTANT				(0 << 14)
#define DMA4_CCR_DST_AMODE_POSTINCREMENT		(1 << 14)
#define DMA4_CCR_DST_AMODE_SINGLEINDEX			(2 << 14)
#define DMA4_CCR_DST_AMODE_DOUBLEINDEX			(3 << 14)
#define DMA4_CCR_CONST_FILL_ENABLE				(1 << 16)
#define DMA4_CCR_TRANSPARENT_COPY_ENABLE		(1 << 17)
#define DMA4_CCR_BS								(1 << 18)
#define DMA4_CCR_SYNCHRO_CONTROL_UPPER_MASK		(3 << 19)
#define DMA4_CCR_SYNCHRO_CONTROL_UPPER_SHIFT	(19-5) /* Shifts to the correct position to combine with SYNCHRO_CONTROL */
#define DMA4_CCR_SECURE							(1 << 21)
#define DMA4_CCR_SUPERVISOR						(1 << 22)
#define DMA4_CCR_PREFETCH						(1 << 23)
#define DMA4_CCR_SEL_SRC_DST_SYNC				(1 << 24)
#define DMA4_CCR_BUFFERING_DISABLE				(1 << 25)
#define DMA4_CCR_WRITE_PRIORITY					(1 << 26)

#define DMA4_CLNK_CTRL_NEXTLCH_ID_MASK			(0x1F << 0)
#define DMA4_CLNK_CTRL_NEXTLCH_ID_SHIFT			0
#define DMA4_CLNK_CTRL_ENABLE_LNK				(1 << 15)

#define DMA4_CICR_DROP_IE						(1 << 1)
#define DMA4_CICR_HALF_IE						(1 << 2)
#define DMA4_CICR_FRAME_IE						(1 << 3)
#define DMA4_CICR_LAST_IE						(1 << 4)
#define DMA4_CICR_BLOCK_IE						(1 << 5)
#define DMA4_CICR_PKT_IE						(1 << 7)
#define DMA4_CICR_TRANS_ERR_IE					(1 << 8)
#define DMA4_CICR_SECURE_ERR_IR					(1 << 9)
#define DMA4_CICR_SUPERVISOR_ERR_IE				(1 << 10)
#define DMA4_CICR_MISALIGNED_ERR_IE				(1 << 11)
#define DMA4_CICR_DRAIN_IE						(1 << 12)

#define DMA4_CSR_DROP							(1 << 1)
#define DMA4_CSR_HALF							(1 << 2)
#define DMA4_CSR_FRAME							(1 << 3)
#define DMA4_CSR_LAST							(1 << 4)
#define DMA4_CSR_BLOCK							(1 << 5)
#define DMA4_CSR_SYNC							(1 << 6)
#define DMA4_CSR_PKT							(1 << 7)
#define DMA4_CSR_TRANS_ERR						(1 << 8)
#define DMA4_CSR_SECURE_ERR						(1 << 9)
#define DMA4_CSR_SUPERVISOR_ERR					(1 << 10)
#define DMA4_CSR_MISALIGNED_ADRS_ERR			(1 << 11)
#define DMA4_CSR_DRAIN_END						(1 << 12)

#define DMA4_CSDP_DATA_TYPE_MASK				(3 << 0)
#define DMA4_CSDP_DATA_TYPE_8					(0 << 0)
#define DMA4_CSDP_DATA_TYPE_16					(1 << 0)
#define DMA4_CSDP_DATA_TYPE_32					(2 << 0)
#define DMA4_CSDP_SRC_PACKED					(1 << 6)
#define DMA4_CSDP_SRC_BURST_EN_MASK				(3 << 7)
#define DMA4_CSDP_SRC_BURST_EN_SINGLE			(0 << 7)
#define DMA4_CSDP_SRC_BURST_EN_16BYTES			(1 << 7)
#define DMA4_CSDP_SRC_BURST_EN_32BYTES			(2 << 7)
#define DMA4_CSDP_SRC_BURST_EN_64BYTES			(3 << 7)
#define DMA4_CSDP_DST_PACKED					(1 << 13)
#define DMA4_CSDP_DST_BURST_EN_MASK				(3 << 14)
#define DMA4_CSDP_DST_BURST_EN_SINGLE			(0 << 14)
#define DMA4_CSDP_DST_BURST_EN_16BYTES			(1 << 14)
#define DMA4_CSDP_DST_BURST_EN_32BYTES			(2 << 14)
#define DMA4_CSDP_DST_BURST_EN_64BYTES			(3 << 14)
#define DMA4_CSDP_WRITE_MODE_MASK				(3 << 16)
#define DMA4_CSDP_WRITE_MODE_NONPOSTED			(0 << 16)
#define DMA4_CSDP_WRITE_MODE_POSTED				(1 << 16)
#define DMA4_CSDP_WRITE_MODE_LAST_NONPOSTED		(2 << 16)
#define DMA4_CSDP_DST_ENDIAN_LOCK				(1 << 18)
#define DMA4_CSDP_DST_ENDIAN					(1 << 19)
#define DMA4_CSDP_SRC_ENDIAN_LOCK				(1 << 20)
#define DMA4_CSDP_SRC_ENDIAN					(1 << 21)

#define DMA4_CEN_CHANNEL_ELMNT_NBR_MASK			0xFFFFFF
#define DMA4_CEN_CHANNEL_ELMNT_NBR_SHIFT		0

#define DMA4_CFN_CHANNEL_FRAME_NBR_MASK			0xFFFF
#define DMA4_CFN_CHANNEL_FRAME_NBR_SHIFT		0

#define DMA4_CSEI_CHANNEL_SRC_ELMNT_INDEX_MASK	0xFFFF
#define DMA4_CSEI_CHANNEL_SRC_ELMNT_INDEX_SHIFT	0

#define DMA4_CSFI_CH_SRC_FRM_INDEX_MASK			0xFFFFFFFF
#define DMA4_CSFI_CH_SRC_FRM_INDEX_SHIFT		0
#define DMA4_CSFI_16BIT_PKT_ELNT_NBR_MASK		0xFFFF
#define DMA4_CSFI_16BIT_PKT_ELNT_NBR_SHIFT		0

#define DMA4_CDEI_CHANNEL_DST_ELMNT_INDEX_MASK	0xFFFF
#define DMA4_CDEI_CHANNEL_DST_ELMNT_INDEX_SHIFT	0

#define DMA4_CDFI_CH_DST_FRM_INDEX_MASK			0xFFFFFFFF
#define DMA4_CDFI_CH_DST_FRM_INDEX_SHIFT		0
#define DMA4_CDFI_16BIT_PKT_ELNT_NBR_MASK		0xFFFF
#define DMA4_CDFI_16BIT_PKT_ELNT_NBR_SHIFT		0

#define DMA4_CCEN_CURRENT_ELMNT_NBR_MASK		0xFFFFFF
#define DMA4_CCEN_CURRENT_ELMNT_NBR_SHIFT		0

#define DMA4_CCFN_CURRENT_FRAME_NBR_MASK		0xFFFF
#define DMA4_CCFN_CURRENT_FRAME_NBR_SHIFT		0

typedef struct sdma_regs
{
	uint32_t revision;
	uint32_t _pad1[1];
	uint32_t irqstatus[4];
	uint32_t irqenable[4];
	uint32_t sysstatus;		/* Ignore; handled by HAL/DMAManager */
	uint32_t ocp_sysconfig;	/* Ignore; handled by HAL/DMAManager */
	uint32_t _pad2[13];
	uint32_t caps[5];
	uint32_t gcr;			/* Ignore; handled by HAL/DMAManager */
	uint32_t _pad3[1];
	sdmachan_regs_t chans[32];
} sdma_regs_t;

/* DMM registers */

typedef struct pat_refill {
	uint32_t descr;	/* Pointer to next refill descriptor */
	uint32_t area;	/* Coordinates of rectangle within PAT */
	uint32_t ctrl;
	uint32_t data;	/* Pointer to data to copy to PAT (array of physical addresses of pages) */
} pat_refill_t;

typedef struct dmm_regs {
	uint32_t revision;
	uint32_t hwinfo;
	uint32_t lisa_hwinfo;
	uint32_t _pad1;
	uint32_t sysconfig;
	uint32_t _pad2[2];
	uint32_t lisa_lock;
	uint32_t _pad3[8];
	uint32_t lisa_map[4];
	uint32_t _pad4[110];
	uint32_t tiler_hwinfo;
	uint32_t _pad5[5];
	uint32_t tiler_or[2];
	uint32_t _pad6[120];
	uint32_t pat_hwinfo;
	uint32_t pat_geometry;
	uint32_t pat_config;
	uint32_t _pad7[3];
	uint32_t pat_view[2];
	uint32_t _pad8[6];
	uint32_t pat_view_map[4];
	uint32_t _pad9[4];
	uint32_t pat_view_map_base;
	uint32_t _pad10[7];
	uint32_t pat_irqstatus_raw;
	uint32_t _pad11[3];
	uint32_t pat_irqstatus;
	uint32_t _pad12[3];
	uint32_t pat_irqenable_set;
	uint32_t _pad13[3];
	uint32_t pat_irqenable_clr;
	uint32_t _pad14[3];
	uint32_t pat_status[4];
	uint32_t _pad15[12];
	pat_refill_t pat_refill[4];
	uint32_t _pad16[50];
	uint32_t peg_hwinfo;
	uint32_t _pad17[5];
	uint32_t peg_prio[8];
	uint32_t peg_prio_pat;
} dmm_regs_t;

//#include <stddef.h>
//#define CHECK(X,O) static uint8_t check_##X[offsetof(dmm_regs_t,X)==O?1:-1];
//CHECK(lisa_lock,0x1c)
//CHECK(tiler_hwinfo,0x208)
//CHECK(pat_hwinfo,0x408)
//CHECK(pat_irqenable_clr,0x4b0)
//CHECK(peg_prio_pat,0x640)

/* bits in DMM_TILER_HWINFO */
#define DMM_TILER_HWINFO_OR_CNT_MASK		0xF
#define DMM_TILER_HWINFO_OR_CNT_SHIFT		0

/* bits in DMM_TILER_ORn */
#define DMM_TILER_OR_ORIENTATION_MASK	0x7
#define DMM_TILER_OR_ORIENTATION_WRITE	0x8 /* Write-enable flag for when writing to field */
#define DMM_TILER_OR_ORIENTATION_SIZE	4   /* 8 fields per register spaced 4 bits apart */

/* bits in DMM_PAT_HWINFO */
#define DMM_PAT_HWINFO_VIEW_CNT_MASK		0x7F
#define DMM_PAT_HWINFO_VIEW_CNT_SHIFT		0
#define DMM_PAT_HWINFO_VIEW_MAP_CNT_MASK	0xF00
#define DMM_PAT_HWINFO_VIEW_MAP_CNT_SHIFT	8
#define DMM_PAT_HWINFO_LUT_CNT_MASK			0x1F0000
#define DMM_PAT_HWINFO_LUT_CNT_SHIFT		16
#define DMM_PAT_HWINFO_ENGINE_CNT_MASK		0x1F000000
#define DMM_PAT_HWINFO_ENGINE_CNT_SHIFT		24

/* bits in DMM_PAT_GEOMETRY */
#define DMM_PAT_GEOMETRY_PAGE_SZ_MASK		0x1F
#define DMM_PAT_GEOMETRY_PAGE_SZ_SHIFT		0
#define DMM_PAT_GEOMETRY_ADDR_RANGE_MASK	0x3F00
#define DMM_PAT_GEOMETRY_ADDR_RANGE_SHIFT	8
#define DMM_PAT_GEOMETRY_CONT_WIDTH_MASK	0xF0000
#define DMM_PAT_GEOMETRY_CONT_WIDTH_SHIFT	16
#define DMM_PAT_GEOMETRY_CONT_HGHT_MASK		0x7000000
#define DMM_PAT_GEOMETRY_CONT_HGHT_SHIFT	24

/* bits in DMM_PAT_CONFIG */
#define DMM_PAT_CONFIG_MODE0	1
#define DMM_PAT_CONFIG_MODE1	2
#define DMM_PAT_CONFIG_MODE2	4
#define DMM_PAT_CONFIG_MODE3	8

/* bits in DMM_PAT_VIEWn */
#define DMM_PAT_VIEW_VIEW_MASK	0x3
#define DMM_PAT_VIEW_VIEW_WRITE	0x8 /* Write-enable flag for when writing to field */
#define DMM_PAT_VIEW_VIEW_SIZE	4   /* 8 fields per register spaced 4 bits apart */

/* bits in DMM_PAT_VIEW_MAPn */
#define DMM_PAT_VIEW_MAP_CONT_8_MASK		0xF
#define DMM_PAT_VIEW_MAP_CONT_8_SHIFT		0
#define DMM_PAT_VIEW_MAP_CONT_ACCESS_8		0x80
#define DMM_PAT_VIEW_MAP_CONT_16_MASK		0xF00
#define DMM_PAT_VIEW_MAP_CONT_16_SHIFT		8
#define DMM_PAT_VIEW_MAP_CONT_ACCESS_16		0x8000
#define DMM_PAT_VIEW_MAP_CONT_32_MASK		0xF0000
#define DMM_PAT_VIEW_MAP_CONT_32_SHIFT		16
#define DMM_PAT_VIEW_MAP_CONT_ACCESS_32		0x800000
#define DMM_PAT_VIEW_MAP_CONT_PAGE_MASK		0xF000000
#define DMM_PAT_VIEW_MAP_CONT_PAGE_SHIFT	24
#define DMM_PAT_VIEW_MAP_CONT_ACCESS_PAGE	0x80000000

/* bits in DMM_PAT_VIEW_MAP_BASE */
#define DMM_PAT_VIEW_MAP_BASE_BASE_ADDR	0x80000000

/* bits in DMM_PAT_IRQ* */
#define DMM_PAT_IRQ_FILL_DSC0		(1 << 0)
#define DMM_PAT_IRQ_FILL_LST0		(1 << 1)
#define DMM_PAT_IRQ_ERR_INV_DSC0	(1 << 2)
#define DMM_PAT_IRQ_ERR_INV_DATA0	(1 << 3)
#define DMM_PAT_IRQ_ERR_UPD_AREA0	(1 << 4)
#define DMM_PAT_IRQ_ERR_UPD_CTRL0	(1 << 5)
#define DMM_PAT_IRQ_ERR_UPD_DATA0	(1 << 6)
#define DMM_PAT_IRQ_ERR_LUT_MISS0	(1 << 7)
#define DMM_PAT_IRQ_FILL_DSC1		(1 << 8)
#define DMM_PAT_IRQ_FILL_LST1		(1 << 9)
#define DMM_PAT_IRQ_ERR_INV_DSC1	(1 << 10)
#define DMM_PAT_IRQ_ERR_INV_DATA1	(1 << 11)
#define DMM_PAT_IRQ_ERR_UPD_AREA1	(1 << 12)
#define DMM_PAT_IRQ_ERR_UPD_CTRL1	(1 << 13)
#define DMM_PAT_IRQ_ERR_UPD_DATA1	(1 << 14)
#define DMM_PAT_IRQ_ERR_LUT_MISS1	(1 << 15)

/* bits in DMM_PAT_STATUSn */
#define DMM_PAT_STATUS_READY		(1 << 0)
#define DMM_PAT_STATUS_VALID		(1 << 1)
#define DMM_PAT_STATUS_RUN			(1 << 2)
#define DMM_PAT_STATUS_DONE			(1 << 3)
#define DMM_PAT_STATUS_LINKED		(1 << 4)
#define DMM_PAT_STATUS_BYPASSED		(1 << 7)
#define DMM_PAT_STATUS_ERROR_MASK	0xFC00
#define DMM_PAT_STATUS_ERROR_SHIFT	10
#define DMM_PAT_STATUS_CNT_MASK		0x1FF0000
#define DMM_PAT_STATUS_CNT_SHIFT	16

/* bits in DMM_PAT_DESCRn */
#define DMM_PAT_DESCR_MASK	0xFFFFFFF0

/* bits in DMM_PAT_AREAn */
#define DMM_PAT_AREA_X0_MASK	0xFF
#define DMM_PAT_AREA_X0_SHIFT	0
#define DMM_PAT_AREA_Y0_MASK	0x7F00
#define DMM_PAT_AREA_Y0_SHIFT	8
#define DMM_PAT_AREA_X1_MASK	0xFF0000
#define DMM_PAT_AREA_X1_SHIFT	16
#define DMM_PAT_AREA_Y1_MASK	0x7F000000
#define DMM_PAT_AREA_Y1_SHIFT	24

/* bits in DMM_PAT_CTRLn */
#define DMM_PAT_CTRL_START				(1 << 0)
#define DMM_PAT_CTRL_DIRECTION_MASK		0x70
#define DMM_PAT_CTRL_DIRECTION_SHIFT	4
#define DMM_PAT_CTRL_SYNC				(1 << 16)
#define DMM_PAT_CTRL_INITIATOR_MASK		0xF0000000
#define DMM_PAT_CTRL_INITIATOR_SHIFT	28

/* bits in DMM_PAT_DATAn */
#define DMM_PAT_DATA_MASK	0xFFFFFFF0
