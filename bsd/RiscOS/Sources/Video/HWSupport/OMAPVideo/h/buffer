/*
 * Copyright (c) 2017, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef OMAPVIDEO_BUFFER_H
#define OMAPVIDEO_BUFFER_H

#include <stdint.h>
#include <stdbool.h>
#include "kernel.h"

#include "types.h"

struct buffer_if;

typedef struct {
	uint16_t width;
	uint16_t height;
	uint8_t rotation;
	uint8_t maxbank; /* Maximum valid bank number (i.e. number of banks - 1) */
	pixelformat format;
} buffer_desc_t;

typedef struct {
	struct buffer_if *iface;
	/* Other data here, dependent on type */
} buffer_t;

typedef struct buffer_if {
	/* Check if the given parameters are acceptable */
	bool (*vet)(const buffer_desc_t *desc);

	/* Create a new buffer */
	_kernel_oserror *(*create)(const buffer_desc_t *desc,buffer_t **out_buffer);

	/* Destroy a buffer. Must release any CPU/GPU configurations and memory as appropriate. */
	_kernel_oserror *(*destroy)(buffer_t *buffer);

	/* Configure the buffer for GPU access to the indicated bank */
	_kernel_oserror *(*config_gpu)(buffer_t *buffer,uint32_t bank,uint32_t *out_pa,uint32_t *out_pa2,uint32_t *out_stride);

	/* Release the GPU configuration */
	_kernel_oserror *(*release_gpu)(buffer_t *buffer,uint32_t bank);

	/* Configure the buffer for CPU access to the indicated bank */
	_kernel_oserror *(*config_cpu)(buffer_t *buffer,uint32_t bank,void **out_la,void **out_la2,uint32_t *out_stride);

	/* Release the CPU configuration */
	_kernel_oserror *(*release_cpu)(buffer_t *buffer,uint32_t bank);

	/* Discard memory for a bank (if possible) */
	_kernel_oserror *(*discard)(buffer_t *buffer,uint32_t bank);

#ifdef DEBUGLIB
	/* Describe buffer for debugging */
	void (*describe)(buffer_t *buffer);
#endif
} buffer_if_t;

/* Interface to use for handling rotated buffers (if any) */
extern buffer_if_t *buffer_rotation_if;

/* Vet the given buffer definition, against any suitable interface */
extern bool buffer_vet(const buffer_desc_t *desc);

/* Create an instance of the given buffer */
extern _kernel_oserror *buffer_create(const buffer_desc_t *desc,buffer_t **out_buffer);

/* Convenience functions for safely invoking the buffer ops */
extern _kernel_oserror *buffer_destroy(buffer_t *buffer);
extern _kernel_oserror *buffer_config_gpu(buffer_t *buffer,uint32_t bank,uint32_t *out_pa,uint32_t *out_pa2,uint32_t *out_stride);
extern _kernel_oserror *buffer_release_gpu(buffer_t *buffer,uint32_t bank);
extern _kernel_oserror *buffer_config_cpu(buffer_t *buffer,uint32_t bank,void **out_la,void **out_la2,uint32_t *out_stride);
extern _kernel_oserror *buffer_release_cpu(buffer_t *buffer,uint32_t bank);
extern _kernel_oserror *buffer_discard(buffer_t *buffer,uint32_t bank);
#ifdef DEBUGLIB
extern void buffer_describe(buffer_t *buffer);
#endif

#endif
