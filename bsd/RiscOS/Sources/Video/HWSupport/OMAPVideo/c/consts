/*
 * Copyright (c) 2010, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include <stdlib.h>

#include "Global/VduExt.h"

#include "consts.h"

void *private_word;
int instance;
int memory_access_privilege;

vdu_device_t *dev=NULL;
const boardconfig_t *hwconfig=NULL;
uint8_t graphicsv_driver_number = 0;

const int current_lcd=0;

const uint8_t pixel_format_bpp[PIXELFORMAT_MAX] = {
	1, //PIXELFORMAT_1_PAL,
	2, //PIXELFORMAT_2_PAL,
	4, //PIXELFORMAT_4_PAL,
	8, //PIXELFORMAT_8_PAL,
	16, //PIXELFORMAT_4444_TBGR,
	16, //PIXELFORMAT_4444_TRGB,
	16, //PIXELFORMAT_4444_ABGR,
	16, //PIXELFORMAT_4444_ARGB,
	16, //PIXELFORMAT_1555_TBGR,
	16, //PIXELFORMAT_1555_TRGB,
	16, //PIXELFORMAT_1555_ABGR,
	16, //PIXELFORMAT_1555_ARGB,
	16, //PIXELFORMAT_565_BGR,
	16, //PIXELFORMAT_565_RGB,
	24, //PIXELFORMAT_888_BGR,
	24, //PIXELFORMAT_888_RGB,
	32, //PIXELFORMAT_8888_TBGR,
	32, //PIXELFORMAT_8888_TRGB,
	32, //PIXELFORMAT_8888_ABGR,
	32, //PIXELFORMAT_8888_ARGB,
	16, //PIXELFORMAT_UYVY_601_full,
	16, //PIXELFORMAT_UYVY_601_video,
	16, //PIXELFORMAT_UYVY_709_full,
	16, //PIXELFORMAT_UYVY_709_video,
	16, //PIXELFORMAT_YUY2_601_full,
	16, //PIXELFORMAT_YUY2_601_video,
	16, //PIXELFORMAT_YUY2_709_full,
	16, //PIXELFORMAT_YUY2_709_video,
	8, //PIXELFORMAT_NV12_601_full,
	8, //PIXELFORMAT_NV12_601_video,
	8, //PIXELFORMAT_NV12_709_full,
	8, //PIXELFORMAT_NV12_709_video,
	32, //PIXELFORMAT_POINTER,
};

const uint8_t buffer_alignment_pixels[PIXELFORMAT_MAX] = {
	7, //PIXELFORMAT_1_PAL,
	3, //PIXELFORMAT_2_PAL,
	1, //PIXELFORMAT_4_PAL,
	0, //PIXELFORMAT_8_PAL,
	0, //PIXELFORMAT_4444_TBGR,
	0, //PIXELFORMAT_4444_TRGB,
	0, //PIXELFORMAT_4444_ABGR,
	0, //PIXELFORMAT_4444_ARGB,
	0, //PIXELFORMAT_1555_TBGR,
	0, //PIXELFORMAT_1555_TRGB,
	0, //PIXELFORMAT_1555_ABGR,
	0, //PIXELFORMAT_1555_ARGB,
	0, //PIXELFORMAT_565_BGR,
	0, //PIXELFORMAT_565_RGB,
	0, //PIXELFORMAT_888_BGR,
	0, //PIXELFORMAT_888_RGB,
	0, //PIXELFORMAT_8888_TBGR,
	0, //PIXELFORMAT_8888_TRGB,
	0, //PIXELFORMAT_8888_ABGR,
	0, //PIXELFORMAT_8888_ARGB,
	1, //PIXELFORMAT_UYVY_601_full,
	1, //PIXELFORMAT_UYVY_601_video,
	1, //PIXELFORMAT_UYVY_709_full,
	1, //PIXELFORMAT_UYVY_709_video,
	1, //PIXELFORMAT_YUY2_601_full,
	1, //PIXELFORMAT_YUY2_601_video,
	1, //PIXELFORMAT_YUY2_709_full,
	1, //PIXELFORMAT_YUY2_709_video,
	1, //PIXELFORMAT_NV12_601_full,
	1, //PIXELFORMAT_NV12_601_video,
	1, //PIXELFORMAT_NV12_709_full,
	1, //PIXELFORMAT_NV12_709_video,
	0, //PIXELFORMAT_POINTER,
};

const pixelformat_t pixelformats[PIXELFORMAT_NORMAL_MAX] =
{
	{ 1, 0, 0 }, // PIXELFORMAT_1_PAL,
	{ 3, 0, 1 }, // PIXELFORMAT_2_PAL,
	{ 15, 0, 2 },// PIXELFORMAT_4_PAL,
	{ 255, ModeFlag_FullPalette, 3 }, // PIXELFORMAT_8_PAL,
	{ 4095, 0, 4 }, // PIXELFORMAT_4444_TBGR,
	{ 4095, ModeFlag_DataFormatSub_RGB, 4 }, // PIXELFORMAT_4444_TRGB,
	{ 4095, ModeFlag_DataFormatSub_Alpha, 4 }, // PIXELFORMAT_4444_ABGR,
	{ 4095, ModeFlag_DataFormatSub_Alpha+ModeFlag_DataFormatSub_RGB, 4 }, // PIXELFORMAT_4444_ARGB,
	{ 65535, 0, 4 }, // PIXELFORMAT_1555_TBGR,
	{ 65535, ModeFlag_DataFormatSub_RGB, 4 }, // PIXELFORMAT_1555_TRGB,
	{ 65535, ModeFlag_DataFormatSub_Alpha, 4 }, // PIXELFORMAT_1555_ABGR,
	{ 65535, ModeFlag_DataFormatSub_Alpha+ModeFlag_DataFormatSub_RGB, 4 }, // PIXELFORMAT_1555_ARGB,
	{ 65535, ModeFlag_64k, 4 }, // PIXELFORMAT_565_BGR,
	{ 65535, ModeFlag_64k+ModeFlag_DataFormatSub_RGB, 4 }, // PIXELFORMAT_565_RGB,
	{ 16777215, 0, 6 }, // PIXELFORMAT_888_BGR,
	{ 16777215, ModeFlag_DataFormatSub_RGB, 6 }, // PIXELFORMAT_888_RGB,
	{ -1, 0, 5 }, // PIXELFORMAT_8888_TBGR,
	{ -1, ModeFlag_DataFormatSub_RGB, 5 }, // PIXELFORMAT_8888_TRGB,
	{ -1, ModeFlag_DataFormatSub_Alpha, 5 }, // PIXELFORMAT_8888_ABGR,
	{ -1, ModeFlag_DataFormatSub_Alpha+ModeFlag_DataFormatSub_RGB, 5 }, // PIXELFORMAT_8888_ARGB,
	{ 0x59565955, ModeFlag_DataFormatFamily_YCbCr                                                        , 7 }, // PIXELFORMAT_UYVY_601_full,
	{ 0x59565955, ModeFlag_DataFormatFamily_YCbCr+ModeFlag_DataFormatSub_Video                           , 7 }, // PIXELFORMAT_UYVY_601_video,
	{ 0x59565955, ModeFlag_DataFormatFamily_YCbCr                             +ModeFlag_DataFormatSub_709, 7 }, // PIXELFORMAT_UYVY_709_full,
	{ 0x59565955, ModeFlag_DataFormatFamily_YCbCr+ModeFlag_DataFormatSub_Video+ModeFlag_DataFormatSub_709, 7 }, // PIXELFORMAT_UYVY_709_video,
	{ 0x32595559, ModeFlag_DataFormatFamily_YCbCr                                                        , 7 }, // PIXELFORMAT_YUY2_601_full,
	{ 0x32595559, ModeFlag_DataFormatFamily_YCbCr+ModeFlag_DataFormatSub_Video                           , 7 }, // PIXELFORMAT_YUY2_601_video,
	{ 0x32595559, ModeFlag_DataFormatFamily_YCbCr                             +ModeFlag_DataFormatSub_709, 7 }, // PIXELFORMAT_YUY2_709_full,
	{ 0x32595559, ModeFlag_DataFormatFamily_YCbCr+ModeFlag_DataFormatSub_Video+ModeFlag_DataFormatSub_709, 7 }, // PIXELFORMAT_YUY2_709_video,
	{ 0x3231564e, ModeFlag_DataFormatFamily_YCbCr                                                        , 7 }, // PIXELFORMAT_NV12_601_full,
	{ 0x3231564e, ModeFlag_DataFormatFamily_YCbCr+ModeFlag_DataFormatSub_Video                           , 7 }, // PIXELFORMAT_NV12_601_video,
	{ 0x3231564e, ModeFlag_DataFormatFamily_YCbCr                             +ModeFlag_DataFormatSub_709, 7 }, // PIXELFORMAT_NV12_709_full,
	{ 0x3231564e, ModeFlag_DataFormatFamily_YCbCr+ModeFlag_DataFormatSub_Video+ModeFlag_DataFormatSub_709, 7 }, // PIXELFORMAT_NV12_709_video,
};

pixelformat findformat(pixelformat_t format)
{
	for(int i=0;i<PIXELFORMAT_NORMAL_MAX;i++)
	{
		if((format.ncolour == pixelformats[i].ncolour)
		 && (format.modeflags == pixelformats[i].modeflags)
		 && (format.log2bpp == pixelformats[i].log2bpp))
		{
			return (pixelformat) i;
		}
	}
	return PIXELFORMAT_MAX;
}
