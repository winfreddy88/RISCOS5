/*
 * Copyright (c) 2010, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include <stddef.h>

#include "palette.h"
#include "mouse.h"
#include "dispc.h"
#include "types.h"
#include "consts.h"
#include "vars.h"

#include "DebugLib/DebugLib.h"

static uint32_t mouse_palette_soft[4]; /* Softcopy of mouse palette */
static uint32_t mouse_palette_ro[4]; /* A copy of the mouse palette in its original form, as received from RISC OS */
static uint8_t mouse_image_soft[32*32/4]; /* Softcopy of the 2bpp image */
bool mouse_dirty; /* True when palette has been changed */
static palette_func_t mouse_palette_func; /* Current function to use for performing palette updates */

static uint32_t *mouse_image_l; /* 32bpp image used by hardware */
static uint32_t mouse_image_p;

/* Null mouse palette func - for use with CPR */
static void mouse_palette_func_null(const uint32_t *entries,uint32_t idx,uint32_t count)
{
	if(idx >= 4)
		return;
	if(count > 4-idx)
		count = 4-idx;
	uint32_t *cache = &mouse_palette_ro[idx];
	uint32_t *out = &mouse_palette_soft[idx];
	while(count--)
	{
		uint32_t val = *entries++;
		*cache++ = val;
		val >>= 8;
		/* Assume first entry is transparent, all others opaque */
		if(idx++)
		{
			val |= 0xff000000;
		}
		if(*out != val)
		{
			*out = val;
			mouse_dirty = true;
		}
		out++;
	}
}

/* R/B swap mouse palette func - for when CPR is disabled */
static void mouse_palette_func_rbswap(const uint32_t *entries,uint32_t idx,uint32_t count)
{
	if(idx >= 4)
		return;
	if(count > 4-idx)
		count = 4-idx;
	uint32_t *cache = &mouse_palette_ro[idx];
	uint32_t *out = &mouse_palette_soft[idx];
	while(count--)
	{
		uint32_t val = *entries++;
		*cache++ = val;
		val = ((val & 0xff00)<<8) | ((val & 0xff0000)>>8) | ((val & 0xff000000) >> 24);
		/* Assume first entry is transparent, all others opaque */
		if(idx++)
		{
			val |= 0xff000000;
		}
		if(*out != val)
		{
			*out = val;
			mouse_dirty = true;
		}
		out++;
	}
}

/* 555 mouse palette func - for when palette_func_555_565 is in use
   Green & blue channels need to be fudged, to take into account the fudging in the gamma table */
static void mouse_palette_func_555_565(const uint32_t *entries,uint32_t idx,uint32_t count)
{
	if(idx >= 4)
		return;
	if(count > 4-idx)
		count = 4-idx;
	uint32_t *cache = &mouse_palette_ro[idx];
	uint32_t *out = &mouse_palette_soft[idx];
	while(count--)
	{
		uint32_t val = *entries++;
		*cache++ = val;
		// RO:   B0B1B2B3 B4B5B6B7 G0G1G2G3 G4G5G6G7 R0R1R2R3 R4R5R6R7 xxxxxxxx xxxxxxxx
		// OMAP:                     B0B1B2 B3  B0B1   G0G1G2 G3G4  G0 R0R1R2R3 R4R5R6R7
		val = ((val & 0xff00)>>8) | ((val & 0xf0f80000)>>9) | ((val & 0xc0000000)>>14) | ((val & 0x800000)>>15);
		/* Assume first entry is transparent, all others opaque */
		if(idx++)
		{
			val |= 0xff000000;
		}
		if(*out != val)
		{
			*out = val;
			mouse_dirty = true;
		}
		out++;
	}
}

/* 555 mouse palette func - for when palette_func_555_565 is in use
   Green & blue channels need to be fudged, to take into account the fudging in the gamma table */
static void mouse_palette_func_555_565_rbswap(const uint32_t *entries,uint32_t idx,uint32_t count)
{
	if(idx >= 4)
		return;
	if(count > 4-idx)
		count = 4-idx;
	uint32_t *cache = &mouse_palette_ro[idx];
	uint32_t *out = &mouse_palette_soft[idx];
	while(count--)
	{
		uint32_t val = *entries++;
		*cache++ = val;
		// RO:   B0B1B2B3 B4B5B6B7 G0G1G2G3 G4G5G6G7 R0R1R2R3 R4R5R6R7 xxxxxxxx xxxxxxxx
		// OMAP:                     R0R1R2 R3  R0R1   G0G1G2 G3G4  G0 B0B1B2B3 B4B5B6B7
		val = (val>>24) | ((val & 0xf80000)>>9) | ((val & 0x800000)>>15) | ((val & 0xf000)<<7) | ((val & 0xc000)<<2);
		/* Assume first entry is transparent, all others opaque */
		if(idx++)
		{
			val |= 0xff000000;
		}
		if(*out != val)
		{
			*out = val;
			mouse_dirty = true;
		}
		out++;
	}
}

void mouse_select_palette_func(bool gammahack_needed, bool cpr)
{
	palette_func_t newfunc;
	if (gammahack_needed)
	{
		if(cpr)
			newfunc = mouse_palette_func_555_565;
		else
			newfunc = mouse_palette_func_555_565_rbswap;
	}
	else if(cpr)
		newfunc = mouse_palette_func_null;
	else
		newfunc = mouse_palette_func_rbswap;
	if(newfunc != mouse_palette_func)
	{
		/* Retranslate palette */
		mouse_palette_func = newfunc;
		(newfunc)(mouse_palette_ro,0,4);
	}
}

void mouse_palette_write(const uint32_t *entries,uint32_t idx,uint32_t count)
{
	(mouse_palette_func)(entries,idx,count);
}

void mouse_set_buffers(uint32_t *image_l, uint32_t image_p)
{
	mouse_image_l = image_l;
	mouse_image_p = image_p;
}

void mouse_update(const gvupdatepointer_t *params, const modelocked_t *modelocked)
{
	/* TODO - What if palette change isn't immediately followed by an updatepointer call? Need to stick something in IRQ handler that does a secondary update on vsync */
	/* TODO - Turn IRQs off at this level to avoid overlay array corruption? */
	const shape_t *shape = params->shape;
	if(params->flags & 1)
	{
		/* Redo palette if needed */
		int dirty = 32*32/4; /* Number of dirty bytes */
		uint8_t *src = (uint8_t *) shape->buffLA;
		uint8_t *dest = mouse_image_soft;
		uint32_t *real = mouse_image_l;
		int incount=shape->height*32/4; /* Number of bytes left in input */
		if(incount > dirty)
			incount = dirty; /* Protect against dodgy heights */
		if(mouse_dirty)
		{
			uint32_t trans = mouse_palette_soft[0];
			while((trans == mouse_palette_soft[1]) || (trans == mouse_palette_soft[2]) || (trans == mouse_palette_soft[3]))
				trans = (trans+1)&0xffffff;
			mouse_palette_soft[0] = trans;
			irqlocked_t *irqlocked = irqlocked_lock();
			if(irqlocked->heads[modelocked->default_display].transparent != trans)
			{
				irqlocked->heads[modelocked->default_display].transparent = trans;
				(headattrs[modelocked->default_display].settransparent)(modelocked->default_display, irqlocked);
			}
			irqlocked_unlock();
		}
		else if(params->flags & 2)
		{
			while(incount>0)
			{
				if(*((uint32_t *)src) != *((uint32_t *)dest)) /* Check words for speed */
					goto rebuild;
				src+=4;
				dest+=4;
				real+=16;
				dirty-=4;
				incount-=4;
			}
			while(dirty>0)
			{
				if(*((uint32_t *)dest))
					goto rebuild;
				dest+=4;
				real+=16;
				dirty-=4;
			}
		}
		/* Redo image if needed
		   Note that we always pad it out to 32x32; should make life easier once we have rotation support */
		/* TODO - Make faster - test each individual byte to see if it matches dest - should speed up most stuff where only small portions change (e.g. ourglass) */
		if(mouse_dirty)
		{
			rebuild:
			while(dirty-->0)
			{
				uint8_t data = (incount-->0?*src++:0);
				*dest++ = data;
				*real++ = mouse_palette_soft[data & 3];
				data = data >> 2;
				*real++ = mouse_palette_soft[data & 3];
				data = data >> 2;
				*real++ = mouse_palette_soft[data & 3];
				data = data >> 2;
				*real++ = mouse_palette_soft[data];
			}
			mouse_dirty = false;
		}
		/* Redo position & other overlay attribs if needed */
		int x = params->x;
		int y = params->y;
		irqlocked_t *irqlocked = irqlocked_lock();
		overlaycfg_t *o = &irqlocked->overlays[modelocked->overlay_pointer];
		if((o->x != x) || (o->y != y) || (o->target != modelocked->default_display) || !o->enabled)
		{
			if(o->target != modelocked->default_display)
			{
				irqlocked->heads[modelocked->default_display].transparent = mouse_palette_soft[0];
				(headattrs[modelocked->default_display].settransparent)(modelocked->default_display, irqlocked);
			}
			o->buf_w = o->scaled_w = 32;
			o->buf_h = o->scaled_h = 32;
			o->x = x;
			o->y = y;
			o->format = PIXELFORMAT_POINTER;
			o->ba = mouse_image_p;
			o->stride = 32*4;
			o->la = (uint8_t *) mouse_image_l; /* Logical address not really needed, but fill it in anyway */
			o->target = modelocked->default_display;
			o->enabled = true;
			dispc_update_overlay(modelocked->overlay_pointer, modelocked, irqlocked);
		}
		irqlocked_unlock();
	}
	else
	{
		irqlocked_t *irqlocked = irqlocked_lock();
		overlaycfg_t *o = &irqlocked->overlays[modelocked->overlay_pointer];
		if(o->enabled)
		{
			o->enabled = false;
			dispc_update_overlay(modelocked->overlay_pointer, modelocked, irqlocked);
		}
		irqlocked_unlock();
	}
}
