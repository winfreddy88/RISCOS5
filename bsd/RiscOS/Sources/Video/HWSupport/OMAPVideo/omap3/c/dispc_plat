/*
 * Copyright (c) 2010, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include <string.h>
#include "Global/RISCOS.h"
#include "Global/HALEntries.h"
#include "Global/GraphicsV.h"
#include "swis.h"

#include "DebugLib/DebugLib.h"

#include "dispc.h"
#include "dsi.h"
#include "graphicsv.h"
#include "dss.h"
#include "regs.h"
#include "vars.h"
#include "consts.h"

int dispc_irq_handler(_kernel_swi_regs *r, void *pw)
{
	(void) r;
	(void) pw;
	/* Get cause */
	uint32_t cause = dispc->irqstatus & dispc->irqenable;
	if(!cause)
		return 1; /* Wasn't us! */
	/* SYNCLOST handling - as per note on p2192 of spruf98d:
	   * Disable offending display (LCD or TV)
	   * Wait for current frame to complete (FRAMEDONE or EVSYNC_EVEN/EVSYNC_ODD)
	   * Perform DSS SOFTRESET
	   * Reprogram and pray it's fixed! */
	if(cause & DISPC_IRQ_SYNCLOST)
	{
		/* This still feels icky */
		dispc->irqstatus = DISPC_IRQ_FRAMEDONE;
		dispc->control &= ~DISPC_CONTROL_LCDENABLE;
		dispc->irqenable = (dispc->irqenable & ~DISPC_IRQ_SYNCLOST) | DISPC_IRQ_FRAMEDONE;
		set_ban(BHUB_SYNCLOST);
	}
	if(cause & DISPC_IRQ_SYNCLOSTDIGITAL)
	{
		dispc->irqstatus = DISPC_IRQ_EVSYNC_EVEN | DISPC_IRQ_EVSYNC_ODD;
		dispc->control &= ~DISPC_CONTROL_DIGITALENABLE;
		dispc->irqenable = (dispc->irqenable & ~DISPC_IRQ_SYNCLOSTDIGITAL) | DISPC_IRQ_EVSYNC_EVEN | DISPC_IRQ_EVSYNC_ODD;
		set_ban(BHUB_SYNCLOSTDIGITAL);
	}
#ifdef DEBUGLIB
	if((cause & ~(DISPC_IRQ_VSYNC | DISPC_IRQ_EVSYNC_EVEN | DISPC_IRQ_EVSYNC_ODD)) != 0)
		dprintf(("","dispc_irq_handler: Cause %08x\n",cause));
#endif
	/* Clear IRQs */
	dispc->irqstatus = cause;
	/* Clear in interrupt controller */
	_swix(OS_Hardware, _IN(0) | _INR(8,9), dev->dev.devicenumber&~(1u<<31), OSHW_CallHAL, EntryNo_HAL_IRQClear);
	/* We can now enable interrupts? */
	int irqs = _kernel_irqs_disabled();
	if(irqs)
		_kernel_irqs_on();
	/* Only tell RISC OS about VSync if we haven't encountered SYNCLOST, and only if it's the right kind of vsync */
	overlaytarget default_display = modelocked_read_lock()->default_display;
	modelocked_read_unlock();
	if(((cause & DISPC_IRQ_VSYNC) && (default_display == TARGET_LCD) && !(ban_hardware_update & BHUB_SYNCLOST))
	|| ((cause & (DISPC_IRQ_EVSYNC_EVEN | DISPC_IRQ_EVSYNC_ODD)) && (default_display == TARGET_TV) && !(ban_hardware_update & BHUB_SYNCLOSTDIGITAL)))
	{
		/* Let RISC OS know it was a VSync */
		_kernel_oserror *e =_swix(OS_CallAVector,_IN(4) | _IN(9),GraphicsV_VSync | (graphicsv_driver_number<<24),GraphicsV);
		if(e)
			dprintf(("","%08x %s\n",e->errnum,e->errmess));
	}
	if(((cause & DISPC_IRQ_FRAMEDONE) && (ban_hardware_update & BHUB_SYNCLOST))
	|| ((cause & (DISPC_IRQ_EVSYNC_EVEN | DISPC_IRQ_EVSYNC_ODD)) && (ban_hardware_update & BHUB_SYNCLOSTDIGITAL)))
	{
		uint32_t oldctrl = dispc->control;
		/* SYNCLOST handling, part two
		   Reset the DSS, then reprogram whatever outputs were active before the incident */
		dprintf(("","dispc_irq_handler: dss_reset: cause %08x ban %08x oldctrl %08x\n",cause,ban_hardware_update,oldctrl));
		/* Clear all bans beforehand? Seems icky */
		bool restore_lcd = ((oldctrl & DISPC_CONTROL_LCDENABLE) || (ban_hardware_update & BHUB_SYNCLOST));
		bool restore_tv = ((oldctrl & DISPC_CONTROL_DIGITALENABLE) || (ban_hardware_update & BHUB_SYNCLOSTDIGITAL));
		clear_ban(BHUB_SYNCLOST);
		clear_ban(BHUB_SYNCLOSTDIGITAL);
		dss_reset();
		{
			const irqlocked_t *irqlocked = irqlocked_lock();
			for(int i=0;i<TARGET_MAX;i++)
			{
				(headattrs[i].settransparent)((overlaytarget) i,irqlocked);
				(headattrs[i].setbackground)((overlaytarget) i,irqlocked);
			}
			irqlocked_unlock();
		}
		const modelocked_t *modelocked = modelocked_read_lock();
		if(restore_lcd)
		{
			(headattrs[TARGET_LCD].setmode)(TARGET_LCD,&modelocked->heads[TARGET_LCD]);
		}
		if(restore_tv)
		{
			/* We need to fool the code into resetting the mode */
			irqlocked_lock()->heads[TARGET_TV].blanked = true; /* TODO - YUCK */
			irqlocked_unlock();
			(headattrs[TARGET_TV].setmode)(TARGET_TV,&modelocked->heads[TARGET_TV]);
		}
		/* Reprogram the overlays */
		{
			const irqlocked_t *irqlocked = irqlocked_lock();
			for(int i=0;i<OVERLAY_MAX;i++)
			{
				dispc_update_overlay((overlayidx) i,modelocked,irqlocked);
			}
			irqlocked_unlock();
		}
		modelocked_read_unlock();
	}
	if(irqs)
		_kernel_irqs_off();
	return 0;
}
