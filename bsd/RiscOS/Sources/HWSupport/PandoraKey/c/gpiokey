/*
 * Copyright (c) 2012, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include <stdlib.h>
#include <stdint.h>
#include "kernel.h"
#include "swis.h"

#include "Global/RISCOS.h"
#include "Global/Keyboard.h"

#include "gpio.h"
#include "gpiokey.h"
#include "pandorakey.h"

static uint32_t gpiokey_states = 0;

static const uint32_t gpiokey_keys[] =
{
  KeyNo_CursorLeft, /* Left */
  KEYMAPPING_NOTHING, /* L2 - not fitted */
  KeyNo_CursorRight, /* Right */
  KeyNo_AcornLeft, /* Pandora */
  KeyNo_AltLeft, /* Start/Alt */
  KeyNo_Home, /* A */
  KEYMAPPING_NOTHING, /* L1 - see SPECIAL_L1R1 */
  KeyNo_CursorDown, /* Down */
  KeyNo_CtrlLeft, /* Select/Ctrl */
  KEYMAPPING_NOTHING, /* R1 - see SPECIAL_L1R1 */
  KeyNo_PageDown, /* X */
  KEYMAPPING_NOTHING, /* R2 - not fitted */
  KeyNo_LidClosed, /* Lid sensor */
  KeyNo_PageUp, /* Y */
  KeyNo_CursorUp, /* Up */
  KeyNo_Copy, /* B */
  /* Additional special keys */
  KeyNo_Break, /* L1+R1 */
};

static void update_keys(uint32_t keys,uint32_t msg)
{
  while(keys)
  {
    uint32_t k;
    __asm
    {
    CLZ k,keys;
    }
    k = 31-k;
    keys &= ~(1<<k);
    if(gpiokey_keys[k] != KEYMAPPING_NOTHING)
      _swix(OS_CallAVector,_INR(0,1)|_IN(9),msg,gpiokey_keys[k],KEYV);
  } 
}

void gpiokey_init(void)
{
  gpiokey_states = 0;
  /* Set required keys to input */
  gpio_atomic_update(GPIOKEY_BANK,GPIO_OE,GPIOKEY_MASK,~GPIOKEY_MASK);
}

void gpiokey_shutdown(void)
{
  update_keys(gpiokey_states,KeyV_KeyUp);
  gpiokey_states = 0;
}

void gpiokey_reset(void)
{
  gpiokey_states = 0;
}

void gpiokey_update(void)
{
  uint32_t status = (~gpio_read(GPIOKEY_BANK,GPIO_DATAIN)) ^ GPIOKEY_ACTIVEHIGH;
  status &= GPIOKEY_MASK;
  if((status & (GPIOKEY_L1 | GPIOKEY_R1)) == (GPIOKEY_L1 | GPIOKEY_R1))
    status |= GPIOKEY_SPECIAL_L1R1; 
  if(status == gpiokey_states)
    return;
  update_keys(gpiokey_states & ~status,KeyV_KeyUp);
  update_keys(status & ~gpiokey_states,KeyV_KeyDown);
  gpiokey_states = status;
}
