/*
 * Copyright (c) 1994, Simon Foster
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
  Name    - !Hopper95
  Module  - graphics.h
  Purpose - Handle the graphics stuff.
  Author  - Simon Foster
  Version - 1.00 (12-Dec-1994)
*/

#ifndef _GRAPHICS_
#define _GRAPHICS_


/* The various includes for the module */

/* The various defines required */

/* PsychoEffect module SWIs */
#define  PsychoEffect_Fade  0x59580

/* Colours */
#define BLACK    0x0
#define RED      0x1
#define GREEN    0x2
#define YELLOW   0x3
#define BLUE     0x4
#define MAGENTA  0x5
#define CYAN     0x6
#define WHITE    0x7

#define TO       0
#define FROM     1

/* Structures */
typedef struct gfx_sprite  gfx_sprite ;

struct gfx_sprite {
  int  x ;
  int  y ;
  int  spr ;
} ;

typedef struct row  row ;

struct row {
  int         speed ;
  int         timer ;
  int	      width ;
  int         num ;
  gfx_sprite  sprites[10] ;
} ;


/* Global variables */

/* The functions */

/* Load in all the graphics data */
void gfx_load_graphics_data ( void ) ;

/* Free all the memory used by the graphics module */
void gfx_closedown ( void ) ;

/* Initialise the list of sprites that require plotting */
void gfx_initialise_plot_list ( void ) ;

/* Add a sprite to the list */
void gfx_add_to_plot_list ( int *spr_add, int *scr_add, int word, int height,
                                  	     	      	       int width ) ;

/* Add a sprite to the list */
void gfx_add_to_store_list ( int *spr_add, int *scr_add, int word,
                                                   int height, int width ) ;

/* Add a sprite to the list */
void gfx_add_to_mask_list ( int *spr_add, int *mask_add, int *scr_add,
                                         int word, int height, int width ) ;

/* Plot the sprites */
void gfx_plot_list ( int order ) ;

/* Initialise the mode */
void gfx_initialise_mode ( void ) ;

/* Closedown the mode */
void gfx_closedown_mode ( void ) ;

/* Show the wibble */
void gfx_show_wibble ( int pos ) ;

/* Display a vehicle */
void gfx_show_vehicle ( gfx_sprite *stat ) ;

/* Print a water to the screen */
void gfx_show_water ( gfx_sprite *stat ) ;

/* Print a block of scenery to the screen */
void gfx_show_scenery ( int x, int y, int spr ) ;

/* Display the title screen */
int  gfx_display_title ( void ) ;

/* Print a frog to the screen */
void gfx_show_frog ( gfx_sprite *stat ) ;

/* Delete the frog from the screen */
void gfx_delete_frog ( void ) ;

/* Print the fly to the screen */
void gfx_show_fly ( int x ) ;

/* Print the snake to the screen */
void gfx_show_snake ( int x ) ;

/* Delete the snake from the screen */
void gfx_delete_snake ( void ) ;

/* Print a number to the screen */
void gfx_show_number ( int x, int y, int spr ) ;

/* Set the colour to a specified colour */
void gfx_set_colour ( int col, int bright ) ;

/* Use the PsychoEffect module */
void gfx_psycho ( int *from, int *to, int size, int fade, int width ) ;

/* Fade the screen */
void gfx_fade_screen ( void ) ;

/* Fade the screen and music together */
void gfx_fade_screen_and_qtm ( void ) ;

/* Draw a line from (x0,y0) to (x1,y1) */
void gfx_draw_line ( int x0, int y0, int x1, int y1 ) ;

/* Write a string to the screen */
void gfx_write_string ( const char *string, int x, int y, int col, int bright ) ;

/* Return the length of a screen */
int  gfx_string_width ( const char *string ) ;

/* Write a string to the screen, right justified */
void gfx_string_right ( const char *string, int x, int y, int col, int bright ) ;

/* Write a string to the screen, centred */
void gfx_string_centre ( const char *string, int x, int y, int col, int bright ) ;

/* Switch all output to the sprite */
void gfx_to_sprite ( void ) ;

/* Back to the screen again */
void gfx_to_screen ( void ) ;

/* Clear the screen */
void gfx_clear ( void ) ;

/* Perform fade */
void gfx_fade ( int start_row, int height, int fade, int direction ) ;

/* Fade special effects */
int  gfx_special_in ( void ) ;

/* Fade special effects */
int  gfx_special_out ( void ) ;


#endif
