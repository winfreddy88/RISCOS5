/*
 * Copyright (c) 1994, Simon Foster
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
  scenery.c
*/

#include <stdio.h>
#include "os.h"
#include "osbyte.h"

#include "scenery.h"
#include "graphics.h"
#include "sync.h"
#include "water.h"
#include "cars.h"
#include "score.h"
#include "qtm.h"
#include "messages.h"

int  in[5] ;
int  croc_num   = 0 ;
int  croc_pos   = 5 ;
int  croc_count = 0 ;
int  croc_dir   = 1 ;
int  croc_in    = 5 ;
int  croc_use   = 0 ;
int  croc_speed = 0 ;
int  croc_timer = 0 ;



/* Clear the river */
void scenery_clear_river ( void )
{
  gfx_sprite  me ;
  int         row, col ;

  me.spr = 4 ;
  for (row = 0; row < 4; row++) {
    for (col = 0; col < 4; col++) {
      me.x = col * 88 ;
      me.y = (row * 20) + 44 ;
      gfx_show_water ( &me ) ;
    }
  }
}


/* Clear the road */
void scenery_clear_road ( void )
{
  gfx_sprite  me ;
  int         row, col ;

  me.spr = 6 ;
  for (row = 0; row < 4; row++) {
    for (col = 0; col < 10; col++) {
      me.x = col * 32 ;
      me.y = (row * 20) + 144 ;
      gfx_show_vehicle ( &me ) ;
    }
  }
}


/* Display the scenery */
void scenery_display ( int hi )
{
  int  loop ;

  os_remove_cursors () ;

  gfx_initialise_plot_list () ;

  gfx_show_scenery ( 100, 0, 7 ) ;
  gfx_show_scenery ( 140, 0, 8 ) ;
  gfx_show_scenery ( 180, 0, 9 ) ;

  for (loop = 0; loop < 8; loop++) {
    gfx_show_scenery ( loop * 40, 20, 2 ) ;
    gfx_show_scenery ( loop * 40, 122, 3 ) ;
    gfx_show_scenery ( loop * 40, 220, 4 ) ;
  }

  gfx_write_string ( messages_xlate_text ( "Score", NULL, NULL ), 0, 0, RED, 3 ) ;
  gfx_string_right ( messages_xlate_text ( "High", NULL, NULL ), 320, 0, RED, 3 ) ;
  gfx_string_right ( messages_xlate_text ( "Time", NULL, NULL ), 268, 246, RED, 3 ) ;

  for (loop = 0; loop < 5; loop++) {
    gfx_show_scenery ( 12 + (loop * 64), 20, 1 ) ;
    in[loop] = 0 ;
  }

  os_byte ( 15, 1, 0, &loop, &loop ) ;
  scenery_clear_river () ;
  scenery_clear_road () ;

  os_writec ( 17 ) ;
  os_writec ( 13 ) ;

  gfx_show_number ( 240, 10, (hi / 10000) % 10 ) ;
  gfx_show_number ( 256, 10, (hi / 1000) % 10 ) ;
  gfx_show_number ( 272, 10, (hi / 100) % 10 ) ;
  gfx_show_number ( 288, 10, (hi / 10) % 10 ) ;
  gfx_show_number ( 304, 10, hi % 10 ) ;

  gfx_plot_list ( 1 ) ;
}


/* Check collision with scenery */
/* 1 - hit bank */
/* 2 - got home ok */
/* 3 - all got home ok*/
int  scenery_collided ( gfx_sprite *box )
{
  int  loop, loop2, pos, ret = 1 ;

  for (loop = 0; loop < 5; loop++) {
    if ( in[loop] == 0 ) {
      pos = 16 + (loop * 64) ;
      if ( ((box -> x) >= pos-2)  &&  ((box -> x) <= pos + 16) ) {
        if ( loop != croc_in ) {
          in[loop] = 1 ;
          if ( loop == croc_pos ) {
            croc_pos = 5 ;
            croc_num = 0 ;
          }

/*
          switch (loop) {
             case 0:
                qtm_sample(qtm_FROG, 15, 64, -127);
                break;
             case 1:
                qtm_sample(qtm_FROG, 15, 64, -63);
                break;
             case 2:
                qtm_sample(qtm_FROG, 15, 64, 0);
                break;
             case 3:
                qtm_sample(qtm_FROG, 15, 64, 63);
                break;
             case 4:
                qtm_sample(qtm_FROG, 15, 64, 127);
                break;
          }
*/
          qtm_sample(qtm_FROG, 15, 64, pos);

          gfx_initialise_plot_list () ;
          gfx_show_scenery ( 12 + (loop * 64), 20, 0 ) ;
          gfx_plot_list ( 0 ) ;
          ret = 3 ;
          for (loop2 = 0; loop2 < 5; loop2++) {
            if ( in[loop2] == 0 ) {
  	      ret = 2 ;
            }
          }
        }
      }
    }
  }

  return ( ret ) ;
}


/* Clear the homes after level completion */
void scenery_clear_homes ( void )
{
  int  loop ;

  for (loop = 0; loop < 5; loop++) {
    sync_wait(500);
/*
    sfx_beep ( 70 + (loop * 5) ) ;
*/
    qtm_sample ( qtm_CLEAR, 10 + loop, 64, 16 + (loop * 64) ) ;

    score_add ( 200 ) ;
    gfx_initialise_plot_list () ;
    gfx_show_scenery ( 12 + (loop * 64), 20, 1 ) ;
    score_print () ;
    gfx_plot_list ( 0 ) ;
  }
}


/* Control the croc */
void scenery_croc ( void )
{
  if ( croc_use == 1 ) {
    croc_count = (croc_count + sync_elapsed ( &croc_timer, 2 ) ) %
                                    (croc_speed + ((croc_num == 6) * (croc_speed << 1))) ;
    if ( croc_count == 0 ) {
      if ( (croc_pos == 5)  &&  (sync_random(0, 50) > 35) ) {
        croc_pos = sync_random ( 0, 4 ) ;
        if ( in[croc_pos] != 0 ) {
          croc_pos = 5 ;
        }
        croc_num = 4 ;
        croc_dir = 1 ;
      }

      if ( croc_pos != 5 ) {
        croc_num = croc_num + croc_dir ;
        if ( croc_num == 6 ) {
          croc_dir = -1 ;
        }
        if ( croc_num == 4 ) {
          gfx_show_scenery ( 12 + (croc_pos * 64), 20, 1 ) ;
          croc_pos = 5 ;
        }
        else {
          gfx_show_scenery ( 12 + (croc_pos * 64), 20, croc_num ) ;
        }
      }

      croc_in = (croc_num == 6) ? croc_pos : 5 ;
    }
  }
}

/* Initialise the croc */
void scenery_croc_initialise ( int level )
{
  croc_num   = 0 ;
  croc_pos   = (level > 1) ? 5 : 6 ;
  croc_count = 0 ;
  croc_dir   = 1 ;
  croc_in    = 5 ;
  croc_use   = (level > 1) ? 1 : 0 ;
  if ( level < 5 ) {
    croc_speed = 200 ;
  }
  else if ( level < 8 ) {
    croc_speed = 300 ;
  }
  else {
    croc_speed = 400 ;
  }
  sync_set_timer ( &croc_timer ) ;
}
