/*
 * Copyright (c) 1994, Simon Foster
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
  snake.c
*/

#include "snake.h"
#include "graphics.h"
#include "sync.h"

int  snake_pos   = 320 ;
int  snake_speed = 4 ;
int  snake_count = 0 ;

/* Initialise the snake */
void snake_initialise ( int level )
{
  snake_pos   = 320 ;
  if ( level == 1 ) {
    snake_speed = 0 ;
  }
  else if ( level < 5 ) {
    snake_speed = 96 ;
  }
  else if ( level < 7 ) {
    snake_speed = 64 ;
  }
  else {
    snake_speed = 48 ;
  }
  sync_set_timer ( &snake_count ) ;
}


/* Reset the timer */
void snake_reset_timers ( void )
{
  sync_set_timer ( &snake_count ) ;
}


/* Print the snake */
void snake_print ( void )
{
  gfx_show_snake ( snake_pos ) ;
}

/* Update the snake */
void snake_update ( void )
{
  if (snake_speed > 0) {
    snake_pos = snake_pos - sync_elapsed ( &snake_count, snake_speed ) ;
    if ( snake_pos <= -40 ) {
      snake_pos = 320 ;
    }
  }
}

/* Has the frog landed on the snake */
int  snake_collided ( gfx_sprite *box )
{
  if ( box->x <= snake_pos-19  ||  box->x >= snake_pos+24 ) {
    return ( 0 ) ;
  }

  return ( 1 ) ;
}

