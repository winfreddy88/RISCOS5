/*
 * Copyright (c) 1994, Simon Foster
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
  Name    - !Hopper95
  Module  - hopper.c
  Purpose - The actual game.
  Author  - Simon Foster
  Version - 1.00 (14-Dec-1994)
*/

#include <stdio.h>
#include <string.h>
#include "wimp.h"
#include "osbyte.h"
#include "osfile.h"
#include "os.h"
#include "joystick.h"

#include "hopper.h"
#include "graphics.h"
#include "sync.h"
#include "qtm.h"
#include "cars.h"
#include "water.h"
#include "scenery.h"
#include "frog.h"
#include "snake.h"
#include "score.h"
#include "timer.h"
#include "keys.h"
#include "messages.h"

/* The various includes for the module */

/* The various defines required */
#define  n_L    40
#define  n_T   150
#define  n_R   280
#define  n_B   190


/* Global variables */
typedef struct scores  scores ;

struct scores {
  char  name[40] ;
  int   score ;
} ;

scores  hopper_hi[11] ;


/* The functions */

/* Set up screen */
void hopper_setup_screen ( int *col1, int *col2 )
{
  int  loop ;

  *col1 = 0 ;
  *col2 = 0 ;

  /* Pick two random colours, but sure they are different */
  while ( *col1 == *col2 ) {
    *col1 = sync_random( 1, 6 ) ;
    *col2 = sync_random( 1, 6 ) ;
  }

  /* Draw the borders */
  for ( loop = 0; loop < 5; loop++ ) {
    gfx_set_colour ( *col1, 10 - (loop * 2) ) ;
    gfx_draw_line ( b_L + loop, b_T + loop, b_R - loop, b_T + loop ) ;
    gfx_draw_line ( b_L + loop, b_B - loop, b_R - loop, b_B - loop ) ;
    gfx_set_colour ( *col2, 10 - ((loop - 10) * 2) ) ;
    gfx_draw_line ( b_L + loop, b_T + loop,
                                         b_L + loop, b_B - loop ) ;
    gfx_draw_line ( b_R - loop, b_T + loop,
                                         b_R - loop, b_B - loop ) ;
  }
}


/* Display the hi-score table */
int  hopper_display_hi ( void )
{
  int   loop ;
  char  temp[6] ;
  int   name_col = 0, score_col = 0, bor_col1 = 0, bor_col2 = 0 ;


  hopper_setup_screen ( &bor_col1, &bor_col2 ) ;

  while ( name_col == score_col  ||  score_col == bor_col1  ||
                          name_col == bor_col1 ||  score_col == bor_col2  ||
                                                    name_col == bor_col2 ) {
    name_col   = sync_random( 1, 6 ) ;
    score_col  = sync_random( 1, 6 ) ;
  }

  for ( loop = 0; loop < 10; loop++ ) {
    gfx_write_string ( hopper_hi[loop].name, 25, 60 + (loop * 15),
                                                          name_col, loop ) ;
    sprintf ( temp, "%05d", hopper_hi[loop].score ) ;
    gfx_string_right ( temp, 294, 60 + (loop * 15), score_col, loop ) ;
  }

  return ( name_col ) ;
}


/* Get a new name for the high score table */
void enter_name(int where, char *name, int col)
{
  char   temp[40] = "", concat[2] = " " ;
  int    x_pos = 60, y_pos = 60 + ( where * 15 ) ;
  int    key, d, dir = 1, which = 1 ;
  int    ftimer, tx, l1, l2 ;


  os_byte ( 15, 1, 0, &d, &d ) ;
  os_byte ( 129, 0, 0, &key, &d ) ;
  sync_set_timer(&ftimer);

  do {
    sync_read_timer();
    if (sync_elapsed(&ftimer, 32) != 0) {
      which = which + dir ;
    }
    if ( which <= 0 ) {
      dir = 1 ;
    }
    else if ( which >= 20 ) {
      dir = -1 ;
    }
    os_byte ( 129, 0, 0, &key, &d ) ;
    os_byte ( 15, 1, 0, &d, &d ) ;

    if ( key >= 32  &&  key <= 126 ) {
      tx = x_pos + (gfx_string_width ( temp ) >> 2) ;

      for (l1=-1; l1<=1; l1++) {
        for (l2=-1; l2<=1; l2++) {
          gfx_write_string ( "_", tx+l1, y_pos+l2, BLACK, 0 ) ;
        }
      }

      concat[0] = key ;
      strcat ( temp, concat ) ;
      if ( gfx_string_width ( temp ) > 776 ) {
        temp[strlen(temp) - 1] = '\0' ;
      }

      gfx_write_string ( temp, x_pos, y_pos, col, where ) ;
    }
    else if ( (key == 8  ||  key == 127 )  &&  strlen(temp) > 0 ) {
      tx = x_pos + (gfx_string_width ( temp ) >> 2) ;

      for (l1=-1; l1<=1; l1++) {
        for (l2=-1; l2<=1; l2++) {
          gfx_write_string ( "_", tx+l1, y_pos+l2, BLACK, 0 ) ;
        }
      }

      concat[0] = temp[strlen(temp) - 1] ;
      temp[strlen(temp) - 1] = '\0' ;

      tx = x_pos + (gfx_string_width ( temp ) >> 2) ;

      for (l1=-2; l1<=1; l1++) {
        for (l2=-1; l2<=1; l2++) {
          gfx_write_string ( concat, tx + l1, y_pos + l2, BLACK, 0 ) ;
        }
      }

      gfx_write_string ( temp, x_pos, y_pos, col, where ) ;
    }
    else if ( key != 13  &&  key != 0xff ) {
    }

    gfx_write_string ( "_", x_pos + (gfx_string_width ( temp ) >> 2), y_pos,
                                                            BLACK, (which > 15) ? 15 : which ) ;
  } while ( key != 13  &&  key != 27 ) ;

  strcpy(name, temp);
}


/* Insert a new score into the high score table */
void hopper_insert_score ( int score )
{
  int  loop, where = 0;
  int  col1, col2, name_col = -1, text_col = -1 ;

  for ( loop = 0; loop < 10; loop++ ) {
    if ( score > hopper_hi[loop].score ) {
      where = loop ;
      break;
    }
  }
  for ( loop = 10; loop > where; loop-- ) {
    hopper_hi[loop].score = hopper_hi[loop-1].score ;
    strcpy ( hopper_hi[loop].name, hopper_hi[loop-1].name ) ;
  }
  hopper_hi[where].score = score ;
  strcpy(hopper_hi[where].name, "");

  gfx_to_sprite () ;
  os_writec (12) ;
  gfx_to_screen () ;

  gfx_display_title () ;

  gfx_to_sprite () ;

  hopper_setup_screen ( &col1, &col2 ) ;

  while ( name_col == text_col  ||  text_col ==col1  ||  name_col == col1
                              ||  text_col == col2  ||  name_col == col2 ) {
    name_col = sync_random( 1, 6 ) ;
    text_col = sync_random( 1, 6 ) ;
  }

  gfx_string_centre ( messages_xlate_text ( "Hs00", NULL, NULL ),
                      160, 68, text_col, 8 ) ;
  gfx_string_centre ( messages_xlate_text ( "Hs01", NULL, NULL ),
                      160, 88, text_col, 6 ) ;
  gfx_string_centre ( messages_xlate_text ( "Hs02", NULL, NULL ),
                      160, 103, text_col, 4 ) ;
  gfx_string_centre ( messages_xlate_text ( "Name", NULL, NULL ),
                      160, 123, text_col, 2 ) ;

  /* Draw the borders */
  for ( loop = 0; loop < 5; loop++ ) {
    gfx_set_colour ( col2, 10 - (loop * 2) ) ;
    gfx_draw_line ( n_L + loop, n_T + loop, n_R - loop, n_T + loop ) ;
    gfx_draw_line ( n_L + loop, n_B - loop, n_R - loop, n_B - loop ) ;
    gfx_set_colour ( col1, 10 - ((loop - 10) * 2) ) ;
    gfx_draw_line ( n_L + loop, n_T + loop,
                                         n_L + loop, n_B - loop ) ;
    gfx_draw_line ( n_R - loop, n_T + loop,
                                         n_R - loop, n_B - loop ) ;
  }

  gfx_to_screen () ;

  gfx_special_in () ;

  enter_name ( 7, hopper_hi[where].name, name_col ) ;
  /*
  enter_name ( where, hopper_hi[where].name, hopper_display_hi() ) ;
  */
}


/* Play a level */
int  hopper_play_level ( int level, int hi, int control )
{
  int  where = 0, coll = 0, loop, time ;
  int  a, b ;
  int  which;

  cars_initialise ( level ) ;
  water_initialise ( level ) ;
  snake_initialise ( level ) ;
  scenery_croc_initialise ( level ) ;
  scenery_display ( hi ) ;

  os_writec ( 5 ) ;
  for ( loop = 0; loop < level; loop++ ) {
    gfx_set_colour ( BLACK, 0 ) ;
    os_plot ( 4, 1259 - (loop * 24), 68 ) ;
    os_writec ( 130 ) ;
    gfx_set_colour ( BLUE, loop ) ;
    os_plot ( 4, 1259 - (loop * 24), 68 ) ;
    os_writec ( 131 ) ;
  }
  os_writec( 4 ) ;

  gfx_initialise_plot_list () ;
  frog_initialise ( control ) ;
  score_print () ;
  timer_initialise () ;
  time = timer_print () ;
  snake_print () ;
  gfx_plot_list ( 1 ) ;

  gfx_initialise_plot_list () ;
  gfx_delete_frog () ;
  gfx_delete_snake () ;
  cars_print () ;
  water_print () ;
  frog_print () ;
  water_show_fly () ;
  snake_print () ;
  score_print () ;
  os_byte ( 19, 0, 0, &a, &b ) ;
  gfx_plot_list ( 1 ) ;

  os_byte ( 15, 1, 0, &a, &b ) ;

  sync_read_timer () ;
  cars_reset_timers () ;
  water_reset_timers () ;
  snake_reset_timers () ;
  timer_initialise () ;

  which = 1;

  do {
    sync_read_timer () ;
    cars_update () ;
    water_update () ;
    snake_update () ;
    where = frog_update () ;

    gfx_initialise_plot_list () ;
    gfx_delete_frog () ;
    gfx_delete_snake () ;

    if (!keys_update) {
       cars_print () ;
       water_print () ;
    }
    else if (which) {
       cars_print () ;
    }
    else {
       water_print () ;
    }
    which=!which;
    frog_print () ;
    water_show_fly () ;
    snake_print () ;
    scenery_croc () ;
    score_print () ;
    time = timer_print () ;
    gfx_plot_list ( where >= 10 ) ;
    /*
    if ( where < 10 ) {
      gfx_plot_list ( 0 ) ;
    }
    else {
      gfx_plot_list ( 1 ) ;
    }
    */

    coll = frog_collided () ;

    if (coll == 1 || time <= 0) {
      coll = 1 ;
      gfx_initialise_plot_list () ;
      gfx_delete_frog () ;
      frog_dead () ;
      gfx_plot_list ( 0 ) ;
      sync_wait(500);
/*
      for (loop=0; loop<35; loop++) {
        os_byte ( osbyte_AWAIT_VSYNC, 0, 0, &a, &b ) ;
      }
*/
      gfx_initialise_plot_list () ;
      gfx_delete_frog () ;
      frog_initialise ( control ) ;
      gfx_plot_list ( 0 ) ;
      os_byte ( 15, 1, 0, &a, &b ) ;
      if ( score_lives() >= 0 ) {
        coll = 0 ;
      }
      sync_read_timer () ;
      cars_reset_timers () ;
      water_reset_timers () ;
      snake_reset_timers () ;
      timer_initialise () ;
    }

    if ( coll == 2 ) {
      coll = 0 ;
      score_add ( time ) ;

      sync_wait(500);

      gfx_initialise_plot_list () ;
      frog_initialise ( control ) ;
      score_print () ;
      gfx_plot_list ( 0 ) ;
      os_byte ( 15, 1, 0, &a, &b ) ;
      sync_read_timer () ;
      cars_reset_timers () ;
      water_reset_timers () ;
      snake_reset_timers () ;
      timer_initialise () ;
    }

    if ( coll == 3 ) {
      score_add ( time ) ;
      gfx_initialise_plot_list () ;
      score_print () ;
      gfx_plot_list ( 0 ) ;
    }
  } while ( coll == 0  &&  where != -1 ) ;

  if ( where == -1 ) {
    coll = 4 ;
  }

  return ( coll ) ;
}


/* Start a game */
void hopper_play_game ( int hi, int control )
{
  int  happened = 0, level = 1 ;

  os_writec ( 12 ) ;

  score_initialise () ;

  qtm_start ( qtm_INGAME ) ;

  do {
    happened = hopper_play_level ( level++, hi, control ) ;
    if ( happened == 3 ) {
      scenery_clear_homes () ;
    }
  } while ( happened == 3 ) ;

  gfx_fade_screen_and_qtm () ;

  if ( happened != 4 ) {
    if ( score_score () > hopper_hi[9].score ) {
      qtm_start(qtm_HISCORE);
      hopper_insert_score ( score_score () ) ;
      gfx_fade_screen_and_qtm () ;
    }
  }
}


/* Wait for key to start, etc.. */
int  hopper_key ( int start )
{
  int         r1, r2, key ;
  static int  state = 0, count = 0, step = 1, timer = 0, joystick = 0 ;

  if ( start == 1 ) {
    /* Is there a joystick module */
    joystick = frog_joystick_present () ;

    gfx_fade ( 0, 256, 60, FROM ) ;
    gfx_to_sprite () ;
    if ( joystick == 0 ) {
      gfx_string_centre ( messages_xlate_text ( "StKbd", NULL, NULL ),
                          160, 232, WHITE, 15 ) ;
    }
    else {
      gfx_string_centre ( messages_xlate_text ( "StJoy", NULL, NULL ),
                          160, 232, WHITE, 15 ) ;
    }
    gfx_to_screen () ;

    os_byte ( 15, 1, 0, &r1, &r2 ) ;
    os_byte ( 129, 0, 0, &key, &r2 ) ;

    state = 0 ;
    count = 0 ;
    step  = 1 ;
    timer = 0 ;

    sync_read_timer () ;
    sync_set_timer ( &timer ) ;
  }
  else {
    gfx_fade ( 232, 24, count < 60 ? count : 60, TO ) ;
    sync_read_timer () ;
    if ( sync_elapsed ( &timer, 16 ) != 0 ) {
      count = count + step ;
      if ( count == 0  ||  count == 80 ) {
        step = -step ;
      }
    }

    if ( joystick == 1 ) {
      state = (int) joystick_read ( 0 ) ;
      state = (state / 0x10000) & 1 ;
    }

    os_byte ( 129, 0, 0, &key, &r2 ) ;
    os_byte ( 15, 1, 0, &r1, &r2 ) ;

    if ( key == ' ' ) {
      return ( 1 ) ;
    }
    else if ( key == 27 ) {
      return ( 3 ) ;
    }
    if ( state != 0 ) {
      return ( 2 ) ;
    }
  }

  return ( 0 ) ;
}


/* Display the details for a key */
void hopper_write_key ( const char *text, int key, int hcol, int kcol, int num )
{
  int  y = 58 + (num * 20) ;

  gfx_string_right ( text, 128, y, hcol, num ) ;
  gfx_write_string ( "'", 136, y, hcol, num ) ;
  gfx_write_string ( keys_string ( key ), 143, y, kcol, num ) ;
  gfx_write_string ( "'", 143 + (gfx_string_width(keys_string(key)) / 4),
                                                            y, hcol, num ) ;
}


/* Show the control keys used for Hopper */
void hopper_show_control_keys ( void )
{
  int   head_col = 0, key_col = 0, bor_col1 = 0, bor_col2 = 0 ;

  hopper_setup_screen ( &bor_col1, &bor_col2 ) ;

  while ( head_col == key_col  ||  head_col == bor_col1  ||
                            key_col == bor_col1 ||  head_col == bor_col2  ||
                                                     key_col == bor_col2 ) {
    head_col = sync_random( 1, 6 ) ;
    key_col  = sync_random( 1, 6 ) ;
  }

  gfx_write_string ( messages_xlate_text ( "Frg00", NULL, NULL ),
                     20, 58, WHITE, 15 ) ;
  hopper_write_key ( messages_xlate_text ( "Frg01", NULL, NULL ),
                     keys_up_key,    head_col, key_col, 2 ) ;
  hopper_write_key ( messages_xlate_text ( "Frg02", NULL, NULL ),
                     keys_down_key,  head_col, key_col, 3 ) ;
  hopper_write_key ( messages_xlate_text ( "Frg03", NULL, NULL ),
                     keys_left_key,  head_col, key_col, 4 ) ;
  hopper_write_key ( messages_xlate_text ( "Frg04", NULL, NULL ),
                     keys_right_key, head_col, key_col, 5 ) ;
  gfx_string_right ( messages_xlate_text ( "Frg05", NULL, NULL ),
                     300, 198, WHITE, 15 ) ;
}


/* Show the general keys used for Hopper */
void hopper_show_general_keys ( void )
{
  int   head_col = 0, key_col = 0, bor_col1 = 0, bor_col2 = 0 ;

  hopper_setup_screen ( &bor_col1, &bor_col2 ) ;

  while ( head_col == key_col  ||  head_col == bor_col1  ||
                            key_col == bor_col1 ||  head_col == bor_col2  ||
                                                     key_col == bor_col2 ) {
    head_col = sync_random( 1, 6 ) ;
    key_col  = sync_random( 1, 6 ) ;
  }
  gfx_write_string ( messages_xlate_text ( "Gen00", NULL, NULL ),
                     20, 58, WHITE, 15 ) ;
  hopper_write_key ( messages_xlate_text ( "Gen01", NULL, NULL ),
                     keys_KEY_SOUND_ON, head_col, key_col, 1 ) ;
  hopper_write_key ( messages_xlate_text ( "Gen02", NULL, NULL ),
                     keys_KEY_SOUND_OFF, head_col, key_col, 2 ) ;
  hopper_write_key ( messages_xlate_text ( "Gen03", NULL, NULL ),
                     keys_KEY_MUSIC_ON, head_col, key_col, 3 ) ;
  hopper_write_key ( messages_xlate_text ( "Gen04", NULL, NULL ),
                     keys_KEY_MUSIC_OFF, head_col, key_col, 4 ) ;
  hopper_write_key ( messages_xlate_text ( "Gen05", NULL, NULL ),
                     keys_KEY_PAUSE, head_col, key_col, 5 ) ;
  hopper_write_key ( messages_xlate_text ( "Gen06", NULL, NULL ),
                     keys_KEY_CONTINUE, head_col, key_col, 6 ) ;
  hopper_write_key ( messages_xlate_text ( "Gen07", NULL, NULL ),
                     keys_KEY_ABORT, head_col, key_col, 7 ) ;
}


/* Show the credits for Hopper */
void hopper_display_credits ( void )
{
  int   head_col = 0, key_col = 0, bor_col1 = 0, bor_col2 = 0 ;

  hopper_setup_screen ( &bor_col1, &bor_col2 ) ;

  while ( head_col == key_col  ||  head_col == bor_col1  ||
                            key_col == bor_col1 ||  head_col == bor_col2  ||
                                                     key_col == bor_col2 ) {
    head_col = sync_random( 1, 6 ) ;
    key_col  = sync_random( 1, 6 ) ;
  }

  gfx_write_string ( messages_xlate_text ( "Crd00", NULL, NULL ),
                     20, 58, head_col, 0 ) ;
  gfx_string_right ( "Simon Foster", 300, 73, key_col, 1 ) ;
  gfx_write_string ( messages_xlate_text ( "Crd01", NULL, NULL ),
                     20, 98, head_col, 2 ) ;
  gfx_string_right ( "Leitch, Myers & Young", 300, 113, key_col, 3 ) ;
  gfx_write_string ( messages_xlate_text ( "Crd02", NULL, NULL ),
                     20, 138, head_col, 4 ) ;
  gfx_string_right ( "Steve Harrison", 300, 153, key_col, 5 ) ;
  gfx_write_string ( messages_xlate_text ( "Crd03", NULL, NULL ),
                     20, 178, head_col, 6 ) ;
  gfx_string_right ( "Andy Southgate", 300, 193, key_col, 7 ) ;
}


/* The main bits */
void hopper_go ( void )
{
  int  currentmode ;
  int  r1, r2, state = 0, timer = 0 ;
  int  screen = 0, scr_timer = 0 ;
  int  first = 1 ;
  int  key, d ;


  os_byte ( 135, 0, 255, &r1, &r2 ) ;
  currentmode = r2 ;

  /* Initialise the mode */
  gfx_initialise_mode () ;

  sync_set_timer ( &timer ) ;

  do {
    hopper_key ( 1 ) ;

    state = gfx_display_title () ;

    if ( state == 0 ) {
      qtm_start ( qtm_INTRO ) ;

      sync_read_timer () ;
      sync_set_timer ( &scr_timer ) ;

      gfx_fade ( 0, 231, 60, FROM ) ;
      gfx_to_sprite () ;
      if ( first ) {
        hopper_display_credits () ;
        first = 0 ;
      }
      else {
        hopper_display_hi () ;
        screen = 5 ;
      }
      gfx_to_screen () ;
      state = gfx_special_in () ;
    }

    while ( state == 0 ) {
      state = hopper_key ( 0 ) ;
      if ( sync_elapsed ( &scr_timer, 12000 ) != 0 ) {
        state = gfx_special_out () ;
        if ( state == 0 ) {
          gfx_fade ( 0, 231, 60, FROM ) ;
          gfx_to_sprite () ;
          screen = (screen + 1) % 6 ;
          switch (screen) {
            case 0 :
              hopper_display_credits () ;
              break ;
            case 1 :
            case 3 :
            case 5 :
              hopper_display_hi () ;
              break ;
            case 2 :
              hopper_show_control_keys () ;
              break ;
            case 4:
              hopper_show_general_keys () ;
              break ;
          }
          gfx_to_screen () ;

          state = gfx_special_in () ;
        }
      }

      /* Do sound control */
      os_byte ( osbyte_SCAN_KEYBOARD, keys_KEY_SOUND_ON, 0xff, &key, &d ) ;
      if ( key == 0xff ) {
        keys_sound_fx = 1 ;
      }
      os_byte ( osbyte_SCAN_KEYBOARD, keys_KEY_SOUND_OFF, 0xff, &key, &d ) ;
      if ( key == 0xff ) {
        keys_sound_fx = 0 ;
      }

      /* Do music control */
      os_byte ( osbyte_SCAN_KEYBOARD, keys_KEY_MUSIC_ON, 0xff, &key, &d ) ;
      if ( key == 0xff ) {
        if ( keys_intro == 0 ) {
          keys_ingame = 1 ;
          keys_intro = 1 ;
          qtm_start ( qtm_INTRO ) ;
        }
        keys_ingame = 1 ;
        keys_intro = 1 ;
      }
      os_byte ( osbyte_SCAN_KEYBOARD, keys_KEY_MUSIC_OFF, 0xff, &key, &d ) ;
      if ( key == 0xff ) {
        if ( keys_intro == 1 ) {
          qtm_stop_music () ;
        }
        keys_ingame = 0 ;
        keys_intro = 0 ;
      }
    }

    gfx_fade_screen_and_qtm () ;

    if ( state == 1 ) {
      hopper_play_game ( hopper_hi[0].score, 0 ) ;
      state = 0 ;
    }

    if ( state == 2 ) {
      hopper_play_game ( hopper_hi[0].score, 1 ) ;
      state = 0 ;
    }

  } while ( state != 3 ) ;

  gfx_closedown_mode () ;
  wimp_set_mode ( (os_mode) currentmode ) ;
}


/* Load the high scores */
void hopper_load_hi ( void )
{
  FILE     *in ;
  int      loop ;

  in = fopen ( info_CHOICES_RO ".HiScores", "rb" ) ;

  if ( in != NULL ) {
    for ( loop = 0; loop < 10; loop ++ ) {
      fread ( &hopper_hi[loop].score, sizeof (int), 1, in ) ;
      fread ( hopper_hi[loop].name, 40, 1, in ) ;
    }
    fclose ( in ) ;
  }
  else {
    hopper_reset_hi () ;
  }
}


/* Save the high scores */
void hopper_save_hi ( void )
{
  FILE  *out ;
  int   loop ;

  osfile_create_dir( info_CHOICES_RW, 0 ) ;
  out = fopen ( info_CHOICES_RW ".HiScores", "wb" ) ;

  if ( out != NULL ) {
    for ( loop = 0; loop < 10; loop ++ ) {
      fwrite ( &hopper_hi[loop].score, sizeof (int), 1, out ) ;
      fwrite ( hopper_hi[loop].name, 40, 1, out ) ;
    }
    fclose ( out ) ;
  }
}


/* Reset the high scores */
void hopper_reset_hi ( void )
{
  int  loop ;

  for ( loop = 0; loop < 10; loop ++ ) {
    hopper_hi[loop].score = 1000 ;
    strcpy ( hopper_hi[loop].name, info_APPNAME ) ;
  }
}
