/*
 * Copyright (c) 1994, Simon Foster
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
  Name    - !Hopper
  Module  - main.c
  Purpose - Contains the main function that calls the functions to
            initialise, run, and closedown the application.
  Author  - Simon Foster
  Version - 1.01 (30-Sep-1996)
*/

#include <stdlib.h>
#include "hourglass.h"

#include "templates.h"	   /* Handle window templates */
#include "exit.h"	   /* Tells whether exit has been selected */
#include "memory.h"	   /* Memory allocation with full error checking */
#include "iconbar.h"	   /* Looks after the iconbar sprite */
#include "menu.h"	   /* Creates the menus */
#include "graphics.h"	   /* The graphics side of things */
#include "keys.h"
#include "messages.h"
#include "hopper.h"
#include "qtm.h"
#include "cars.h"
#include "water.h"

/* The various defines required */

/* Global variables */
wimp_t  app_hnd ;


/* Initialise the application */
void main_initialise ( void )
{
  int   version ;

  hourglass_on () ;
  messages_initialise ();

  app_hnd = wimp_initialise ( wimp_VERSION_RO2, info_APPNAME,
                                       (wimp_message_list *) 0, &version ) ;

  templates_initialise () ;
  iconbar_initialise () ;
  keys_initialise () ;
  gfx_load_graphics_data () ;
  cars_load_data () ;
  water_load_data () ;
  qtm_load () ;

  hourglass_off () ;
}


/* Ungraceful error & quit when something goes wrong */
void main_exit_error ( os_error *the_error )
{
  wimp_report_error ( the_error, 1, info_APPNAME ) ;
  messages_closedown () ;

  exit ( EXIT_FAILURE ) ;
}
  

/* Closedown the application, free all memory, etc... */
void main_closedown ( void )
{
  templates_closedown () ;
  gfx_closedown () ;
  water_finished () ;
  cars_finished () ;
  keys_finished () ;

  wimp_close_down ( app_hnd ) ;

  messages_closedown () ;
}


/* Something to do with the application has been clicked */
void main_clicked ( wimp_block *my_block )
{
  wimp_w  wdw ;

  wdw = my_block -> pointer.w ;

  if ( wdw == wimp_ICON_BAR ) {
    iconbar_clicked ( my_block ) ;
  }
  else if ( wdw == prefs_hnd ) {
    keys_prefs_clicked ( my_block ) ;
  }
  else if ( wdw == keys_hnd ) {
    keys_keys_clicked ( my_block ) ;
  }
  else if ( wdw == sound_hnd ) {
    keys_sound_clicked ( my_block ) ;
  }
  else if ( wdw == misc_hnd ) {
    keys_misc_clicked ( my_block ) ;
  }
  else if ( wdw == advanced_hnd ) {
    keys_advanced_clicked ( my_block ) ;
  }
  /* To add another window into the list

        else if ( wdw == window_hnd ) {
          window_clicked ( my_block ) ;
        }
  */
}


/* A key was pressed while the application has input focus */
void main_key_pressed ( wimp_block *my_block )
{
  wimp_w  wdw ;

  wdw = my_block -> key.w ;

  /* To add another window into the list

        if ( wdw == window_hnd ) {
          window_key_pressed ( my_block ) ;
        }
  */
  wimp_process_key ( my_block -> key.c ) ;
}


/* A window connected to the application needs redrawing */
void main_window_opened ( wimp_block *my_block )
{
  /* If we need to check which window is being redrawn

        if ( my_block -> open.w == window_hnd ) {
          window_redrawn ( my_block ) ;
        }

     You then need to place else { .... } around the
     following.
  */
  if ( my_block -> open.w == prefs_hnd ) {
    keys_keep_joined ( &my_block -> open ) ;
  }
  else {
    wimp_open_window ( &my_block -> open ) ;
  }
}


/* A window connected to the application has been closed */
void main_window_closed ( wimp_block *my_block )
{
  /* If we need to check which window is being redrawn

        if ( my_block -> close.w == window_hnd ) {
          window_close ( my_block ) ;
        }

     You then need to place else { .... } around the
     following.
  */
  if ( my_block -> close.w == prefs_hnd ) {
    wimp_close_window ( keys_hnd ) ;
  }
  wimp_close_window ( my_block -> close.w ) ;
}


/* One of the application's menus has been selected */
void main_menu_selected ( wimp_block *my_block )
{
  switch ( menu_current_menu () ) {
    case iconbar_MENU :
      iconbar_menu_selected ( my_block ) ;
      break ;
  }
}


/* A message has been received from the wimp, process it */
void main_message_received ( wimp_block *my_block )
{
  switch ( my_block -> message.action ) {
    case message_QUIT :
      exit_selected () ;
      break ;
    case message_PREQUIT :
      /* Save current accounts, etc... */
      break ;
  }
}


/* Poll the wimp, and basically run the application */
void main_run ( void )
{
  int         event, pollword = 0 ;
  wimp_block  *my_block ;

  my_block = (wimp_block *) memory_alloc ( sizeof ( wimp_block ), "wimp_block" ) ;

  do {
    event = wimp_poll ( 0x01u, my_block, &pollword ) ;
    switch (event) {
      case wimp_NULL_REASON_CODE :
        break ;
      case wimp_MOUSE_CLICK :
        main_clicked ( my_block ) ;
        break ;
      case wimp_KEY_PRESSED :
        main_key_pressed ( my_block ) ;
        break ;
      case wimp_OPEN_WINDOW_REQUEST :
        main_window_opened ( my_block ) ;
        break ;
      case wimp_CLOSE_WINDOW_REQUEST :
        main_window_closed ( my_block) ;
        break ;
      case wimp_MENU_SELECTION :
        main_menu_selected ( my_block ) ;
        break ;
      case wimp_USER_MESSAGE :
      case wimp_USER_MESSAGE_RECORDED :
        main_message_received ( my_block ) ;
        break ;
    }
  } while ( exit_yes_or_no() == exit_NO ) ;
}


/* The main function, no parameters allowed at the moment */
int  main ( void )
{
  main_initialise () ;
  main_run () ;
  main_closedown () ;

  exit ( EXIT_SUCCESS ) ;
}

