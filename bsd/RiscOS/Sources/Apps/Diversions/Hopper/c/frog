/*
 * Copyright (c) 1994, Simon Foster
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
  Control the frog
  frog.c
*/

#include "osbyte.h"
#include "os.h"
#include "joystick.h"

#include "graphics.h"
#include "water.h"
#include "cars.h"
#include "keys.h"
#include "scenery.h"
#include "snake.h"
#include "score.h"
#include "sync.h"
#include "qtm.h"
#include "timer.h"
#include "messages.h"

#define  frog_PITCH  15


gfx_sprite  frog_spr ;
int         moving = 0 ;
int         direction = 0 ;
int         y_pos ;
int         frog_control ;
int	    frog_count ;
int	    frog_timer ;


/* Initialise the frog */
void frog_initialise ( int control )
{
  frog_spr.x   = 150 ;
  frog_spr.y   = 224 ;
  frog_spr.spr = 0 ;
  sync_set_timer ( &frog_timer ) ;
  y_pos	       = 20 ;
  direction    = 0 ;
  moving       = 0 ;

  frog_control = control ;

  gfx_show_frog ( &frog_spr ) ;
}


/* Is there a joystick module present */
int  frog_joystick_present ( void )
{
  os_error  *my_error ;
  int       d ;

  my_error = xos_swi_number_from_string ( "Joystick_Read", &d ) ;
  if ( my_error != NULL ) {
    return ( 0 ) ;
  }

  return ( 1 ) ;
}


/* Print the frog */
void frog_print ( void )
{
  gfx_show_frog ( &frog_spr ) ;
}


/* Print the frog dead */
void frog_dead ( void )
{
  frog_spr.spr = 12 ;
  gfx_show_frog ( &frog_spr ) ;
}


/* Update the frog */
int  frog_update ( void )
{
  int          d ;
  int          key ;
  int          which = 0, dir = 1 ;
  int          move_up, move_down, move_left, move_right ;
  int          state ;
  int          timer ;
  static int   up_pressed = 0xff, down_pressed = 0xff ;
  static int   left_pressed = 0xff, right_pressed = 0xff ;


  /* Look for F9 - Pause */
  os_byte ( osbyte_SCAN_KEYBOARD, keys_KEY_PAUSE, 0xff, &key, &d ) ;
  if ( key == 0xff ) {
    const char *paused ;

    paused = messages_xlate_text ( "Pause", NULL, NULL ) ;
    gfx_fade ( 0, 256, 60, FROM ) ;

    sync_read_timer () ;
    sync_set_timer ( &timer ) ;
    do {
      which = which + dir ;
      if ( which == 0  ||  which == 15 ) {
        dir = -dir ;
      }
      do {
        sync_read_timer () ;
      } while (sync_elapsed ( &timer, 64 ) == 0) ;

      gfx_string_centre ( paused, 160, 162, BLACK, which ) ;
      /* Look for F10 - Continue */
      os_byte ( osbyte_SCAN_KEYBOARD, keys_KEY_CONTINUE, 0xff, &key, &d ) ;
    } while ( key != 0xff ) ;

    gfx_fade ( 0, 256, 60, TO ) ;

    sync_read_timer () ;
    sync_set_timer ( &frog_timer ) ;
    cars_reset_timers () ;
    water_reset_timers () ;
    snake_reset_timers () ;
    timer_reset_timers () ;
  }

  /* Look for ESCAPE key */
  os_byte ( osbyte_SCAN_KEYBOARD, keys_KEY_ABORT, 0xff, &key, &d ) ;
  if ( key == 0xff ) {
    return ( -1 ) ;
  }

  /* Do sound control */
  os_byte ( osbyte_SCAN_KEYBOARD, keys_KEY_SOUND_ON, 0xff, &key, &d ) ;
  if ( key == 0xff ) {
    keys_sound_fx = 1 ;
  }
  os_byte ( osbyte_SCAN_KEYBOARD, keys_KEY_SOUND_OFF, 0xff, &key, &d ) ;
  if ( key == 0xff ) {
    keys_sound_fx = 0 ;
  }

  /* Do music control */
  os_byte ( osbyte_SCAN_KEYBOARD, keys_KEY_MUSIC_ON, 0xff, &key, &d ) ;
  if ( key == 0xff ) {
    if ( keys_ingame == 0 ) {
      keys_ingame = 1 ;
      keys_intro = 1 ;
      qtm_start ( qtm_INGAME ) ;
    }
    keys_ingame = 1 ;
    keys_intro = 1 ;
  }
  os_byte ( osbyte_SCAN_KEYBOARD, keys_KEY_MUSIC_OFF, 0xff, &key, &d ) ;
  if ( key == 0xff ) {
    if ( keys_ingame == 1 ) {
      qtm_stop_music () ;
    }
    keys_ingame = 0 ;
    keys_intro = 0 ;
  }

/*
  frog_count = (frog_count + sync_elapsed ( &frog_timer, 16 ) ) % 2 ;
  frog_count = (sync_elapsed ( &frog_timer, 20 ) > 0);
*/
  if ( sync_elapsed ( &frog_timer, 20 ) > 0 ) {
    switch (moving) {
      case 0 :
        if ( frog_control == 0 ) {
          os_byte ( osbyte_SCAN_KEYBOARD, keys_up_key,    0xff, &move_up, &d ) ;
          os_byte ( osbyte_SCAN_KEYBOARD, keys_down_key,  0xff, &move_down, &d ) ;
          os_byte ( osbyte_SCAN_KEYBOARD, keys_left_key,  0xff, &move_left, &d ) ;
          os_byte ( osbyte_SCAN_KEYBOARD, keys_right_key, 0xff, &move_right, &d ) ;
        }
        else {
          state = (int) joystick_read ( 0 ) ;
          move_up = state & 255 ;
          if ( (move_up & 127) > 32 ) {
            if ( (move_up & 128) == 128 ) {
              move_down = 0xff ;
              move_up   = 0 ;
            }
            else {
              move_down = 0 ;
              move_up   = 0xff ;
            }
          }
          move_left = (state / 0x100) & 255 ;
          if ( (move_left & 127) > 32 ) {
            if ( (move_left & 128) == 128 ) {
              move_left  = 0xff ;
              move_right = 0 ;
            }
            else {
              move_left  = 0 ;
              move_right = 0xff ;
            }
          }
        }

        move_up    = move_up & up_pressed ;
        move_down  = move_down & down_pressed ;
        move_left  = move_left & left_pressed ;
        move_right = move_right & right_pressed ;

        if ( move_up == 0xff ) {
            if (y_pos > 0) {
              direction = 0 ;
              moving = 1 ;
              frog_spr.y = frog_spr.y - 4 ;
              y_pos-- ;
              qtm_sample ( qtm_JUMP, frog_PITCH, 64, frog_spr.x ) ;
              score_add ( 10 ) ;

              up_pressed = 0 ;
            }
        }
        if ( move_down == 0xff ) {
            if (y_pos < 20) {
              direction = 1 ;
              moving = 1 ;
              frog_spr.y = frog_spr.y + 4 ;
              y_pos++ ;
              qtm_sample ( qtm_JUMP, frog_PITCH, 64, frog_spr.x ) ;

              down_pressed = 0 ;
            }
        }
        if ( move_left == 0xff ) {
            if (frog_spr.x > 19) {
              direction = 2 ;
              moving = 1 ;
              frog_spr.x = frog_spr.x - 4 ;
              qtm_sample ( qtm_JUMP, frog_PITCH, 64, frog_spr.x ) ;

              left_pressed = 0 ;
            }
        }
        if ( move_right == 0xff ) {
            if (frog_spr.x < 280) {
              direction = 3 ;
              moving = 1 ;
              frog_spr.x = frog_spr.x + 4 ;
              qtm_sample ( qtm_JUMP, frog_PITCH, 64, frog_spr.x ) ;

              right_pressed = 0 ;
            }
        }
        break ;

      case 1 :
        switch (direction) {
          case 0 :   moving = 2 ;
                     frog_spr.y = frog_spr.y - 5 ;
                     break ;
          case 1 :   moving = 2 ;
                     frog_spr.y = frog_spr.y + 5 ;
                     break ;
          case 2 :   moving = 2 ;
                     frog_spr.x = frog_spr.x - 5 ;
                     break ;
          case 3 :   moving = 2 ;
                     frog_spr.x = frog_spr.x + 5 ;
                     break ;
        }
        break ;
      case 2 :
        switch (direction) {
          case 0 :   moving = 3 ;
                     frog_spr.y = frog_spr.y - 6 ;
                     break ;
          case 1 :   moving = 3 ;
                     frog_spr.y = frog_spr.y + 6 ;
                     break ;
          case 2 :   moving = 3 ;
                     frog_spr.x = frog_spr.x - 6 ;
                     break ;
          case 3 :   moving = 3 ;
                     frog_spr.x = frog_spr.x + 6 ;
                     break ;
        }
        break ;
      case 3 :
        switch (direction) {
          case 0 :   moving = -255 ;
                     frog_spr.y = frog_spr.y - 5 ;
                     y_pos-- ;
                     break ;
          case 1 :   moving = -255 ;
                     frog_spr.y = frog_spr.y + 5 ;
                     y_pos++ ;
                     break ;
          case 2 :   moving = -255 ;
                     frog_spr.x = frog_spr.x - 5 ;
                     break ;
          case 3 :   moving = -255 ;
                     frog_spr.x = frog_spr.x + 5 ;
                     break ;
        }
        break ;
      case -255 :
        switch (direction) {
          case 0:
          case 1:
          case 2:
          case 3:    moving = -254;
               	     break;
        }
        break;
      case -254 :
        switch (direction) {
          case 0 :
          case 1 :
          case 2 :
          case 3 :   moving = 0 ;
                     break ;
        }
        break;
      default :
        moving = 0 ;
        direction = 0 ;
    }
    frog_spr.spr = (direction * 3) + ((moving > 2) ? 2 : ((moving<0) ? 0 : moving)) ;
  }

  if (keys_auto_repeat) {
    /* Allow keypresses regardless */
    up_pressed    = 0xff ;
    down_pressed  = 0xff ;
    left_pressed  = 0xff ;
    right_pressed = 0xff ;
  }
  else {
    /* Make sure keys have been released */
    os_byte ( osbyte_SCAN_KEYBOARD, keys_up_key,    0xff, &key, &d ) ;
    if (key != 0xff) {
      up_pressed = 0xff ;
    }
    os_byte ( osbyte_SCAN_KEYBOARD, keys_down_key,  0xff, &key, &d ) ;
    if (key != 0xff) {
      down_pressed = 0xff ;
    }
    os_byte ( osbyte_SCAN_KEYBOARD, keys_left_key,  0xff, &key, &d ) ;
    if (key != 0xff) {
      left_pressed = 0xff ;
    }
    os_byte ( osbyte_SCAN_KEYBOARD, keys_right_key, 0xff, &key, &d ) ;
    if (key != 0xff) {
      right_pressed = 0xff ;
    }
  }

  return ( y_pos ) ;
}


/* Check to see if the frog has collided with anyone */
int  frog_collided ( void )
{
  int   result;


  if ( frog_spr.x < 0 || frog_spr.x > 300 ) {
    qtm_sample(qtm_BANK, 15, 64, frog_spr.x);
    return ( 1 ) ;
  }
  switch (y_pos) {
    case 0 :
      result = scenery_collided ( &frog_spr ) ;
      if (result==1) {
        qtm_sample(qtm_BANK, 15, 64, frog_spr.x);
      }
      return ( result ) ;
      break ;
    case 2 :
    case 4 :
    case 6 :
    case 8 :
      result = water_collided(&frog_spr, y_pos);
      if (result) {
        qtm_sample(qtm_SPLASH, 15, 64, frog_spr.x);
      }
      return(result);
      break ;
    case 10 :
      result = snake_collided ( &frog_spr );
      if (result==1) {
        qtm_sample(qtm_EATEN, 15, 64, frog_spr.x);
      }
      return ( result ) ;
      break ;
    case 12 :
    case 14 :
    case 16 :
    case 18 :
      result = cars_collided(&frog_spr, y_pos );
      if (result) {
        qtm_sample(qtm_SPLAT, 15, 64, frog_spr.x);
      }
      return(result);
      break ;
  }
  return ( 0 ) ;
}



