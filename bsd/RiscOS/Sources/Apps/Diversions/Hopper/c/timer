/*
 * Copyright (c) 1994, Simon Foster
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
  timer.c
*/

#include <stdio.h>
#include "os.h"

#include "timer.h"
#include "graphics.h"
#include "sync.h"
#include "qtm.h"

int  timer_sw = 0 ;
int  timer    = 0 ;
int  oldtimer = 0 ;

/* Initialise timer */
void timer_initialise ( void )
{
  timer    = 400 ;
  sync_set_timer ( &timer_sw ) ;
}


/* Reset the timer */
void timer_reset_timers ( void )
{
  sync_set_timer ( &timer_sw ) ;
}


/* Display the timer */
int  timer_print ( void )
{
  timer = timer - sync_elapsed ( &timer_sw, 40 ) ;

  gfx_show_number ( 272, 246, (timer / 100) % 10 ) ;
  gfx_show_number ( 288, 246, (timer / 10) % 10 ) ;
  gfx_show_number ( 304, 246, timer % 10 ) ;

  if ( timer == 100 ) {
    qtm_sample ( qtm_ALARM, 17, 64, 160 ) ;
  }

  return ( timer ) ;
}

