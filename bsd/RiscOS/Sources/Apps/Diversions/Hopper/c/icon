/*
 * Copyright (c) 1994, Simon Foster
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
    Name:      icon.c
    Purpose:   Perform operations on icons
    Author:    Simon Foster
    Version:   1.05 (24-Sep-95)
*/

#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include "wimp.h"

#include "icon.h"


/* Set a flag */
void icon_set_flag ( wimp_w window, wimp_i icon, bits flag )
{
  wimp_set_icon_state ( window, icon, flag, flag ) ;
}


/* Clear a flag */
void icon_clear_flag ( wimp_w window, wimp_i icon, bits flag )
{
  wimp_set_icon_state ( window, icon, 0x00u, flag ) ;
}


/* Test a flag */
int  icon_get_flag ( wimp_w window, wimp_i icon, bits flag )
{
  wimp_icon_state my_state ;

  my_state.w = window ;
  my_state.i = icon ;
  wimp_get_icon_state ( &my_state ) ;
  if ((my_state.icon.flags & flag) != 0)
    return ( 1 ) ;
  else
    return ( 0 ) ;
}


/* Set the text on in icon, if the icon number is -1 update the window title */
void icon_set_text ( wimp_w window, wimp_i icon, char *text )
{
  wimp_icon_state    my_state ;
  wimp_window_info   my_info ;
  wimp_outline       my_outline ;

  if ( icon != -1 ) {
    my_state.w = window ;
    my_state.i = icon ;
    wimp_get_icon_state ( &my_state ) ;
    strcpy ( my_state.icon.data.indirected_text.text, text ) ;
    wimp_set_icon_state ( window, icon, 0x00u, 0x00u ) ;
  }
  else {
    my_info.w = window ;
    wimp_get_window_info_header_only ( &my_info ) ;
    strcpy ( my_info.title_data.indirected_text.text, text ) ;
    my_outline.w = window ;
    wimp_get_window_outline ( &my_outline ) ;
    my_outline.outline.y0 = my_outline.outline.y1 - 40 ;
    wimp_force_redraw ( (wimp_w) -1, my_outline.outline.x0, my_outline.outline.y0,
                                     my_outline.outline.x1, my_outline.outline.y1 ) ;
  }
}


/* Set the text in an icon, but without updating the icon */
void icon_set_text_no_up ( wimp_w window, wimp_i icon, char *text )
{
  wimp_icon_state  my_state ;

  my_state.w = window ;
  my_state.i = icon ;
  wimp_get_icon_state ( &my_state ) ;
  strcpy ( my_state.icon.data.indirected_text.text, text ) ;
}


/* Get the text in an icon */
void icon_get_text ( wimp_w window, wimp_i icon, char *text )
{
  wimp_icon_state  my_state ;
  int		   loop ;

  my_state.w = window ;
  my_state.i = icon ;
  wimp_get_icon_state ( &my_state ) ;
  strcpy ( text, my_state.icon.data.indirected_text.text ) ;
  loop = 0 ;
  while ( text[loop] >= ' '  &&  text[loop] != (char) 127 ) {
    loop ++ ;
  }
  text[loop] = 0 ;
}


/* Set the text in an icon to an integer value */
void icon_set_int ( wimp_w window, wimp_i icon, int num )
{
  char  temp[10] ;

  sprintf ( temp, "%d\0", num ) ;
  icon_set_text ( window, icon, temp ) ;
}


/* Get the text in an icon as an integer value */
void icon_get_int ( wimp_w window, wimp_i icon, int *num )
{
  char  temp[10] ;

  icon_get_text ( window, icon, temp ) ;

  *num = atoi(temp) ;
}


/* Set an icon as selected or not */
void icon_set_selected ( wimp_w window, wimp_i icon, int selected )
{
  if ( selected == 1 ) {
    icon_set_flag ( window, icon, wimp_ICON_SELECTED ) ;
  }
  else {
    icon_clear_flag ( window, icon, wimp_ICON_SELECTED ) ;
  }
}


/* Get if an icon is selected or not */
int  icon_get_selected ( wimp_w window, wimp_i icon )
{
  return ( icon_get_flag ( window, icon, wimp_ICON_SELECTED ) ) ;
}


/* Set the validation string for an icon */
void icon_set_validation ( wimp_w window, wimp_i icon, char *text )
{
  wimp_icon_state my_state ;

  my_state.w = window ;
  my_state.i = icon ;
  wimp_get_icon_state ( &my_state ) ;
  strcpy ( my_state.icon.data.indirected_text.validation, text ) ;
  wimp_set_icon_state ( window, icon, 0x00u, 0x00u ) ;
}


/* Update all the icons in a given window */
void icon_update_all ( wimp_w window )
{
  wimp_outline  my_outline ;

  my_outline.w = window ;
  wimp_get_window_outline ( &my_outline ) ;
  wimp_force_redraw ( (wimp_w) -1, my_outline.outline.x0,
     my_outline.outline.y0, my_outline.outline.x1, my_outline.outline.y1 ) ;
}


/* Set the foreground colour of an icon */
void icon_set_fg_colour ( wimp_w window, wimp_i icon, int colour )
{
  wimp_set_icon_state ( window, icon, 0x0fu << wimp_ICON_FG_COLOUR_SHIFT,
                                              colour << wimp_ICON_FG_COLOUR_SHIFT ) ;
}


/* Set the background colour of an icon */
void icon_set_bg_colour ( wimp_w window, wimp_i icon, int colour )
{
  wimp_set_icon_state ( window, icon, 0x0fu << wimp_ICON_BG_COLOUR_SHIFT,
                                              colour << wimp_ICON_BG_COLOUR_SHIFT ) ;
}


/* Get the current size of an icon */
void icon_get_extent ( wimp_w window, wimp_i icon, int *x, int *y, int *w, int *h )
{
  wimp_icon_state  state;

  state.w = window;
  state.i = icon;
  wimp_get_icon_state(&state);
  *x = state.icon.extent.x0;
  *y = state.icon.extent.y0;
  *w = state.icon.extent.x1 - state.icon.extent.x0;
  *h = state.icon.extent.y1 - state.icon.extent.y0;
}


/* Set a new size for an icon */
int  icon_new_size ( wimp_w window, wimp_i icon, int x, int y )
{
  wimp_icon_state   state;
  wimp_icon_create  create;
  int		    icon_no;

  state.w = window;
  state.i = icon;
  wimp_get_icon_state(&state);

  create.icon = state.icon ;
  create.icon.extent.x1 = create.icon.extent.x0 + x ;
  create.icon.extent.y1 = create.icon.extent.y0 + y ;
  create.w = window ;

  wimp_delete_icon( window, icon ) ;
  icon_no = wimp_create_icon(&create);

  return(icon_no);
}
