/*
 * Copyright (c) 1994, Simon Foster
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
  Name    - !Hopper95
  Module  - templates.c
  Purpose - Load the templates, and create the associated windows. Also
            define the icon numbers for each template.
  Author  - Simon Foster
  Version - 1.00 (10-Sep-1994)
*/

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "osbyte.h"
#include "wimp.h"

#include "templates.h"
#include "main.h"
#include "memory.h"
#include "hopper.h"
#include "messages.h"
#include "icon.h"

/* The various defines required */

/* Global variables */
/* The variables for each window in the template file */
wimp_window  *advanced_wdw, *change_wdw, *keys_wdw ;
wimp_window  *misc_wdw, *prefs_wdw, *proginfo_wdw ;
wimp_window  *sound_wdw ;
wimp_w       advanced_hnd, change_hnd, keys_hnd ;
wimp_w 	     misc_hnd, prefs_hnd, proginfo_hnd ;
wimp_w	     sound_hnd ;
int          advanced_opn = 0, change_opn = 0, keys_opn = 0 ;
int	     misc_opn = 0, prefs_opn = 0, proginfo_opn = 0 ;
int          sound_opn = 0 ;
/* Others */
char         *templates_workspace[100] ;
int          templates_loaded = 0 ;


/* Test for the presence of a file */
int  templates_file_exists ( char *filename )
{
  FILE  *test ;
  int   exists ;

  test = fopen ( filename, "r" ) ;
  if ( test == NULL ) {
    exists = 0 ;
  }
  else {
    exists = 1 ;
    fclose ( test ) ;
  }
  return ( exists ) ;
}


/* Load in an individual window definition, allocating the memory for it */
wimp_window *templates_load ( char *windowname, wimp_w *hnd )
{
  int         buffer_size ;
  int         workspace_size ;
  wimp_window *buffer_ptr ;
  char        *workspace_ptr ;
  char        *workspace_end ;

  /*
  wimp_load_template ( (wimp_window *) 0, (char *) 0, (char *) 0,
                       (font_f *) -1, windowname, 0, &buffer_size,
                       &workspace_size ) ;
  */
  /*
  buffer_ptr = (wimp_window *) memory_alloc ( buffer_size ) ;
  workspace_ptr = (char *) memory_alloc ( workspace_size ) ;
  */
  buffer_ptr = (wimp_window *) memory_alloc ( 10000, "buffer_ptr" ) ;
  workspace_ptr = (char *) memory_alloc ( 10000, "workspace_ptr" ) ;
  templates_workspace[templates_loaded++] = workspace_ptr ;
  workspace_end = workspace_ptr + workspace_size ;

  wimp_load_template ( buffer_ptr, workspace_ptr, workspace_end,
  		       (font_f *) -1, windowname, 0,  &buffer_size,
                       &workspace_size ) ;

  *hnd = wimp_create_window ( buffer_ptr ) ;

  return ( buffer_ptr ) ;
}


/* Update the proginfo window */
void templates_setup_proginfo ( void )
{
  icon_set_text ( proginfo_hnd, proginfo_VERSION,
                  (char *) messages_xlate_text ( "_Version", NULL, NULL ) );
}


/* Load in and initialise each of the windows */
void templates_initialise ( void )
{
  int   os3 = 0, temp, exists = 0 ;
  char  filename[256] ;

  /* First work out whether 2D or 3D */
  os_byte ( 161, 140, 0, &temp, &os3 ) ;
  os3 = os3 & 1 ;
  /* Place the correct filename into filename,
     'Templates'  - 2D, 'Templates3' - 3D
  */
  if ( os3 == 1 ) {
    strcpy ( filename, info_APPDIR ".Templates3" ) ;
    exists = templates_file_exists ( filename ) ;
  }
  if ( exists == 0 ) {
    strcpy ( filename, info_APPDIR ".Templates" ) ;
    exists = templates_file_exists ( filename ) ;
  }
  if ( exists == 0 ) {
    main_exit_error ( messages_xlate_error ( "NoPlates", NULL, NULL ) ) ;
  }

  /* Open up the template file */
  wimp_open_template ( filename ) ;

  advanced_wdw = templates_load ( "advanced", &advanced_hnd ) ;
  change_wdw   = templates_load ( "change", &change_hnd ) ;
  keys_wdw     = templates_load ( "keys", &keys_hnd ) ;
  misc_wdw     = templates_load ( "misc", &misc_hnd ) ;
  prefs_wdw    = templates_load ( "prefs", &prefs_hnd ) ;
  proginfo_wdw = templates_load ( "proginfo", &proginfo_hnd ) ;
  sound_wdw    = templates_load ( "sound", &sound_hnd ) ;

  /* Close the template file */
  wimp_close_template () ;

  templates_setup_proginfo () ;
}


/* Free all the memory associated with templates */
void templates_closedown ( void )
{
  int  loop ;

  for ( loop = 0; loop < templates_loaded; loop++ ) {
    free ( templates_workspace[loop] ) ;
  }

  free ( change_wdw ) ;
  free ( keys_wdw ) ;
  free ( misc_wdw ) ;
  free ( prefs_wdw ) ;
  free ( proginfo_wdw ) ;
  free ( sound_wdw ) ;
}
