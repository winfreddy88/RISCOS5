/*
 * Copyright (c) 1994, Simon Foster
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
  water.c
*/

#include <stdlib.h>

#include "graphics.h"
#include "water.h"
#include "sync.h"
#include "data.h"
#include "score.h"
#include "qtm.h"

#define  MINIMUM_SPEED   4

int  water_l ;
row  water[6] ;
int  plus[4] ;
int  fly_ok   = 0 ;
int  fly_pos  = 0 ;
int  submerge[3] = { 0, 0, 0 } ;
int  dir[3]   = { -1, 1, 0 } ;
int  *water_data ;
int  turtle_speed[3] = { 0, 0, 0 } ;
int  sub_timer[3] = { 0, 0, 0 } ;


/* Load level data */
void water_load_data ( void )
{
  water_data = data_load ( "Levels.Water" ) ;
  water_l    = water_data[0] ;
}


/* Finished with data, free the memory */
void water_finished ( void )
{
  free ( water_data ) ;
}


/* Initialise the water */
void water_initialise ( int level )
{
  int  pos, num, loop, loop2, minus ;

  if ( level > water_l ) {
    minus = level - water_l ;
    num   = water_l ;
  }
  else {
    num   = level ;
    minus = 0 ;
  }

  pos = water_data[num] ;

  for (loop = 0; loop < 4; loop++) {
    water[loop].speed = water_data[pos++] - minus ;
    if (water[loop].speed < MINIMUM_SPEED) {
      water[loop].speed = MINIMUM_SPEED ;
    }
    sync_set_timer ( &water[loop].timer ) ;
    water[loop].width = water_data[pos++] ;
    water[loop].num   = water_data[pos++] ;
    for (loop2 = 0; loop2 < water[loop].num; loop2++) {
      water[loop].sprites[loop2].x   = water_data[pos++] ;
      water[loop].sprites[loop2].y   = 44 + (loop * 20) ;
      water[loop].sprites[loop2].spr = ((loop == 0) || (loop == 2)) ? 0 : 1 ;
    }
  }
  if ( level == 1 ) {
    dir[0] = 0 ;
    dir[1] = 0 ;
    dir[2] = 0 ;
  }
  else if ( level == 2 ) {
    dir[0] = -1 ;
    water[1].sprites[0].spr = 4 ;
  }
  else if ( level < 6 ) {
    dir[0] = -1 ;
    dir[1] = 1 ;
    water[1].sprites[0].spr = 4 ;
  }
  else {
    dir[0] = -1 ;
    dir[1] = 1 ;
    dir[2] = 1 ;
    water[1].sprites[0].spr = 4 ;
  }
  if ( level > 8 ) {
    turtle_speed[0] = 300 ;
    turtle_speed[1] = 250 ;
    turtle_speed[2] = 200 ;
  }
  else if ( level > 5 ) {
    turtle_speed[0] = 350 ;
    turtle_speed[1] = 400 ;
    turtle_speed[2] = 350 ;
  }
  else {
    turtle_speed[0] = 500 ;
    turtle_speed[1] = 400 ;
    turtle_speed[2] = 350 ;
  }
  fly_ok = 0 ;
  sync_set_timer ( &sub_timer[0] ) ;
  sync_set_timer ( &sub_timer[1] ) ;
  sync_set_timer ( &sub_timer[2] ) ;
}


/* Reset the timers */
void water_reset_timers ( void )
{
  sync_set_timer ( &water[0].timer ) ;
  sync_set_timer ( &water[1].timer ) ;
  sync_set_timer ( &water[2].timer ) ;
  sync_set_timer ( &water[3].timer ) ;
  sync_set_timer ( &sub_timer[0] ) ;
  sync_set_timer ( &sub_timer[1] ) ;
  sync_set_timer ( &sub_timer[2] ) ;
}


/* Print the water */
void water_print ( void )
{
  int  loop, loop2 ;

  for (loop = 0; loop < 6; loop++) {
    for (loop2 = 0; loop2 < water[loop].num; loop2++) {
      gfx_show_water ( &water[loop].sprites[loop2] ) ;
    }
  }
}


/* Update the water */
void water_update ( void )
{
  int  loop, loop2 ;
  int  top ;


  for (loop = 0; loop < 4; loop++) {
    plus[loop] = sync_elapsed ( &water[loop].timer, water[loop].speed ) ;
    top = water[loop].width - 100 ;
    for (loop2 = 0; loop2 < water[loop].num; loop2++) {
      if ( loop == 0 || loop == 2 ) {
        water[loop].sprites[loop2].x = water[loop].sprites[loop2].x +
                                                                plus[loop] ;
        if (water[loop].sprites[loop2].x >= top) {
          water[loop].sprites[loop2].x = water[loop].sprites[loop2].x -
                                                         water[loop].width ;
          if ( loop == 2 && fly_ok == 0 && sync_random(0, 100) < 50 ) {
            fly_pos = water[loop].sprites[loop2].x + 10
                                                      + sync_random(0, 40) ;
            fly_ok = 1 ;
          }
        }
      }
      else {
        water[loop].sprites[loop2].x = water[loop].sprites[loop2].x -
                                                                plus[loop] ;
        if (water[loop].sprites[loop2].x <= -100 ) {
          water[loop].sprites[loop2].x = water[loop].sprites[loop2].x +
                                                         water[loop].width ;
        }
      }
    }
  }

  /* Update submerging turtles */
  for (loop = 0; loop < 3; loop++) {
    if (dir[loop]!=0) {
      submerge[loop] = (submerge[loop] + sync_elapsed( &sub_timer[loop], 2 )) % turtle_speed[loop] ;
      if ( submerge[loop] == 0 ) {
        switch (loop) {
          case 0:
            water[1].sprites[0].spr = water[1].sprites[0].spr + dir[0] ;
            if ( water[1].sprites[0].spr == 4 || water[1].sprites[0].spr == 1 ) {
              dir[0] = -dir[0] ;
            }
            break;

          case 1:
            water[3].sprites[0].spr = water[3].sprites[0].spr + dir[1] ;
            if ( water[3].sprites[0].spr == 4 || water[3].sprites[0].spr == 1 ) {
              dir[1] = -dir[1] ;
            }
            break;

          case 2:
            water[1].sprites[1].spr = water[1].sprites[1].spr + dir[2] ;
            if ( water[1].sprites[1].spr == 4 || water[1].sprites[1].spr == 1 ) {
              dir[2] = -dir[2] ;
            }
            break;
        }
      }
    }
  }


  fly_pos = fly_pos + plus[2] ;
  if ( fly_pos >= 480 ) {
    fly_ok = 0 ;
  }
}


/* Check collision with water */
int  water_collided ( gfx_sprite *box, int row )
{
  int  loop = (row / 2) - 1, loop2 ;


  if ( loop == 2  &&  fly_ok != 0 ) {
    if ( box->x >= fly_pos-15  &&  box->x <= fly_pos+12) {
      qtm_sample ( qtm_BURP, 21, 64, box->x );
      score_add ( 200 ) ;
      fly_ok = 0 ;
    }
  }

  for (loop2 = 0; loop2 < water[loop].num; loop2++) {
    if ( ((box -> x) + 10 >= water[loop].sprites[loop2].x) &&
                     ((box -> x) <= (water[loop].sprites[loop2].x + 74)) ) {
      box->x = (loop == 0 || loop == 2) ? box->x + plus[loop] :
                                                       box->x - plus[loop] ;
      return ( (water[loop].sprites[loop2].spr == 4) ? 1 : 0 ) ;
    }
  }

  return ( 1 ) ;
}


/* Display the fly sat on the log */
void water_show_fly ( void )
{
  if ( fly_ok != 0 ) {
    gfx_show_fly ( fly_pos ) ;
  }
}
