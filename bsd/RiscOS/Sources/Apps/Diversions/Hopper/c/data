/*
 * Copyright (c) 1994, Simon Foster
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
  data.c
*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "osfile.h"
#include "wimp.h"
#include "os.h"
#include "fileswitch.h"

#include "data.h"
#include "memory.h"
#include "hopper.h"
#include "main.h"
#include "messages.h"


/* Alocate memory for a file, load it in, and return a pointer to it */
int  *data_load ( char *filename )
{
  int                     file_size, *ptr ;
  bits                    load_addr, exec_addr, file_type, d ;
  char                    fname[240] ;
  os_error                *err;
  fileswitch_object_type  obj_type;
  fileswitch_attr         attr;

  strcpy ( fname, info_APPDIR ) ;
  strcat ( fname, "." ) ;
  strcat ( fname, filename ) ;

  err = xosfile_read_stamped ( fname, &obj_type, &load_addr, &exec_addr, &file_size,
                                                                &attr, &file_type ) ;
  if ( ( err != NULL ) || ( obj_type != osfile_IS_FILE ) ) {
    main_exit_error ( messages_xlate_error ( "BadLoad", fname, NULL ) ) ;
  }

  ptr = (int *) memory_alloc ( file_size + 8, fname ) ;

  osfile_load_stamped_no_path ( fname, (byte *) ptr, &d, &d, (int *) &d, &attr ) ;

  return ( ptr ) ;
}


/* Allocate memory for a file, load it, and return pointer plus length */
int  *data_load_len ( char *filename, int *length )
{
  int   file_size, *ptr ;
  bits  load_addr, exec_addr, file_type, attr, d ;
  char  fname[240] ;

  strcpy ( fname, info_APPDIR ) ;
  strcat ( fname, "." ) ;
  strcat ( fname, filename ) ;

  osfile_read_stamped ( fname, &load_addr, &exec_addr, &file_size, &attr,
                                                              &file_type ) ;

  ptr = (int *) memory_alloc ( file_size + 8, fname ) ;

  osfile_load_stamped_no_path ( fname, (byte *) ptr, &d, &d, (int *) &d, &d ) ;

  *length = file_size ;
  return ( ptr ) ;
}
