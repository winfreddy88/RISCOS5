/*
 * Copyright (c) 2014, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
  Internationalise text messages
  messages.c
*/

#include <string.h>
#include <stdlib.h>
#include "MessageTrans.h"

#include "messages.h"
#include "main.h"
#include "memory.h"

static messagetrans_control_block control;
static char *msgs = NULL;


/* Locate and load the file */
void messages_initialise ( void )
{
  int size;
  os_error *err ;

  err = xmessagetrans_file_info ( "<Hopper$Dir>.Messages", 0, &size ) ;
  if (err != NULL) {
    main_exit_error ( err ) ;
  }

  msgs = memory_alloc ( size, "messages" ) ;

  messagetrans_open_file ( &control, "<Hopper$Dir>.Messages", msgs ) ;
}


/* Translate a token into a error block */
os_error *messages_xlate_error ( const char *token, const char *arg0, const char *arg1 )
{
  os_error my_error;

  my_error.errnum = 0 ;
  strcpy ( my_error.errmess, token ) ;

  /* MessageTrans always returns an error for this call */
  return xmessagetrans_error_lookup ( &my_error, &control, NULL, 0,
                                      arg0, arg1, NULL, NULL ) ;
}


/* Translate a token into a C string */
const char *messages_xlate_text ( const char *token, const char *arg0, const char *arg1 )
{
  static char text[128];
  os_error *err;

  err = xmessagetrans_lookup ( &control, token, text, sizeof ( text ),
                               arg0, arg1, NULL, NULL,
                               NULL, NULL ) ;
  if ( err != NULL ) {
    return "???";
  }
  return text;
}


/* Finish with the messages */
void messages_closedown ( void )
{
  if ( msgs != NULL ) {
    messagetrans_close_file ( &control );
    free ( msgs );
  }
}
