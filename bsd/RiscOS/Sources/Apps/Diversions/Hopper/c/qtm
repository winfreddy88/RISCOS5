/*
 * Copyright (c) 1994, Simon Foster
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
  qtm.c
  Control the sound tracker player for the music
*/

#include <stdlib.h>
#include "kernel.h"
#include "osbyte.h"

#include "qtm.h"
#include "data.h"
#include "keys.h"



int  *intro    = NULL ;
int  *ingame   = NULL ;
int  *hiscore  = NULL ;
int  qtm_which = 0 ;
int  *samples[qtm_NUM_SAMPLES] ;
int  length[qtm_NUM_SAMPLES] ;



/* The functions */

/* Set the sample speed of QTM */
void qtm_set_speed ( void )
{
  _kernel_swi_regs  regs;


  /* Set sample speed */
  switch (keys_music_speed) {
     case 0 :
       regs.r[0] = 24 ;
       break ;
     case 1 :
       regs.r[0] = 32 ;
       break ;
     case 2 :
       regs.r[0] = 48 ;
       break ;
     case 3 :
       regs.r[0] = 64 ;
       break ;
  }
  _kernel_swi ( QTM_SetSampleSpeed, &regs, &regs ) ;
}



/* Allocate memory and load in the tune */
void qtm_load ( void )
{
  _kernel_swi_regs  regs ;


  /* Load tune data */
  intro   = data_load ( "Music.Intro" ) ;
  ingame  = data_load ( "Music.InGame" ) ;
  hiscore = data_load ( "Music.HiScore" ) ;

  /* Load in sound samples */
  samples[qtm_JUMP]   = data_load_len ( "Sounds.Jump",   &length[qtm_JUMP] ) ;
  samples[qtm_ALARM]  = data_load_len ( "Sounds.Alarm",  &length[qtm_ALARM] ) ;
  samples[qtm_FROG]   = data_load_len ( "Sounds.Frog",   &length[qtm_FROG] ) ;
  samples[qtm_SPLASH] = data_load_len ( "Sounds.Splash", &length[qtm_SPLASH]) ;
  samples[qtm_CLEAR]  = data_load_len ( "Sounds.Clear",  &length[qtm_CLEAR]) ;
  samples[qtm_BURP]   = data_load_len ( "Sounds.Burp",   &length[qtm_BURP]) ;
  samples[qtm_SPLAT]  = data_load_len ( "Sounds.Splat",  &length[qtm_SPLAT]) ;
  samples[qtm_BANK]   = data_load_len ( "Sounds.Bank",   &length[qtm_BANK]) ;
  samples[qtm_EATEN]  = data_load_len ( "Sounds.Eaten",  &length[qtm_EATEN]) ;

  qtm_set_speed () ;

  /* Use 8 channels */
  regs.r[0] = 8 ;
  regs.r[1] = -1 ;
  regs.r[2] = -1 ;
  _kernel_swi ( QTM_SoundControl, &regs, &regs ) ;
}



/* Start playing the tune */
void qtm_start ( int which )
{
  _kernel_swi_regs  regs ;


  /* Initialise song */
  regs.r[0] = 0 ;
  if ( which == qtm_INTRO  &&  keys_intro == 1 ) {
    regs.r[1] = (int) intro ;
    qtm_which = which ;
    _kernel_swi ( QTM_Load, &regs, &regs ) ;
  }
  else if ( which == qtm_INGAME  &&  keys_ingame == 1 ) {
    regs.r[1] = (int) ingame ;
    qtm_which = which ;
    _kernel_swi ( QTM_Load, &regs, &regs ) ;
  }
  else if ( which == qtm_HISCORE  &&  keys_intro == 1 ) {
    regs.r[1] = (int) hiscore ;
    qtm_which = which ;
    _kernel_swi ( QTM_Load, &regs, &regs ) ;
  }

  /* Set volume */
  regs.r[0] = keys_music_vol ;
  _kernel_swi ( QTM_MusicVolume, &regs, &regs ) ;
  regs.r[0] = keys_fx_vol ;
  _kernel_swi ( QTM_SampleVolume, &regs, &regs ) ;

  /* Start playing */
  if ( qtm_which != qtm_NO_SONG ) {
    _kernel_swi ( QTM_Start, &regs, &regs ) ;
  }
}



/* Fade out the tune and stop playing */
void qtm_fade_and_stop ( void )
{
  _kernel_swi_regs  regs ;
  int               l1, l2, a, b ;


  if ( qtm_which == qtm_INTRO ) {
    for ( l1 = keys_music_vol; l1 > -1; l1-- ) {
      regs.r[0] = l1 ;
      _kernel_swi ( QTM_Volume, &regs, &regs ) ;
      for ( l2 = 1; l2 < 2; l2++ ) {
        os_byte ( 19, 0, 0, &a, &b ) ;
      }
    }
  }

  _kernel_swi ( QTM_Stop, &regs, &regs ) ;

  if ( qtm_which != qtm_NO_SONG ) {
    regs.r[0] = -1 ;
    _kernel_swi ( QTM_Clear, &regs, &regs ) ;
  }

  qtm_which = qtm_NO_SONG ;
}



/* Stop the music and unload from memory */
void qtm_stop_music ( void )
{
  _kernel_swi_regs  regs ;


  _kernel_swi ( QTM_Stop, &regs, &regs ) ;

  if ( qtm_which != qtm_NO_SONG ) {
    regs.r[0] = -1 ;
    _kernel_swi ( QTM_Clear, &regs, &regs ) ;
  }

  qtm_which = qtm_NO_SONG ;
}



/* Play a sample from the currently loaded tune */
void qtm_sample ( int snum, int note, int vol, int pos )
{
  _kernel_swi_regs  regs ;
  static int        chan = 5 ;
  static int        last = qtm_JUMP ;


  if ( keys_sound_fx == 1 ) {
    if ( snum == qtm_JUMP ) {
      chan = 4 ;
    }

    if ( last == qtm_JUMP ) {
      regs.r[0] = 5 ;
      regs.r[1] = 0 ;
      regs.r[2] = 1 ;
      regs.r[3] = 64 ;
      _kernel_swi ( QTM_PlaySample, &regs, &regs ) ;
    }

    chan = (chan == 8) ? 5: chan + 1 ;

    /* Set the stereo position of the sound */
    regs.r[0] = chan;
    regs.r[1] = -126+((pos*100)/126);
    _kernel_swi ( QTM_Stereo, &regs, &regs);

    /* Play the sample */
    regs.r[0] = chan ;
    regs.r[1] = (int) samples[snum] ;
    regs.r[2] = length[snum] ;
    regs.r[3] = 0 ;
    regs.r[4] = 0 ;
    regs.r[5] = note ;
    regs.r[6] = vol ;
    _kernel_swi ( QTM_PlayRawSample, &regs, &regs ) ;

    last = snum ;
  }
}
