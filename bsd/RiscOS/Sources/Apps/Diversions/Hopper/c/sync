/*
 * Copyright (c) 1994, Simon Foster
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
  sync.c
  Control the speed of things
*/

#include "os.h"

#include "sync.h"

int  tickcount ;
int  seed ;

/* Read the timer, ready to update */
void sync_read_timer ( void )
{
  tickcount = ((int) os_read_monotonic_time ()) << 3 ;
}

/* Set a timer */
void sync_set_timer ( int *t )
{
  *t = tickcount ;
}

/* Return the time since t was set */
int  sync_passed ( int t )
{
  return ( tickcount - t ) ;
}

/* Return if e ticks have passed since t was set */
int  sync_elapsed ( int *t, int e )
{
  int  el ;

  el = (tickcount - *t) / e ;
  *t = *t + (el * e) ;

  return ( el ) ;
}

/* Wait for a number of ticks */
void sync_wait ( int t )
{
   int  timer;


   sync_set_timer(&timer);

   do {
      sync_read_timer();
   } while (sync_passed(timer) < t);
}

/* Return a random number */
int  sync_random ( int l, int h )
{
  seed = ((seed * 75) + 1) % 65537 ;

  return ( (seed % ((h-l)+1)) + l ) ;
}
