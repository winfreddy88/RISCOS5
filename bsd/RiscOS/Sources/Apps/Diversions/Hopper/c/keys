/*
 * Copyright (c) 1994, Simon Foster
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
/*
  keys.c
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "wimp.h"
#include "osfile.h"
#include "osbyte.h"

#include "main.h"
#include "keys.h"
#include "icon.h"
#include "memory.h"
#include "templates.h"
#include "hopper.h"
#include "qtm.h"
#include "messages.h"

/* Global variables */
char    *lookup[129] ;
int     keys_up_key      = 207 ;
int     keys_down_key    = 232 ;
int     keys_left_key    = 225 ;
int     keys_right_key   = 194 ;
int     keys_sound_fx    = 1 ;
int     keys_ingame      = 1 ;
int     keys_intro       = 1 ;
int     keys_save_hi     = 1 ;
int	keys_fx_vol      = 64 ;
int	keys_music_vol   = 64 ;
int     keys_music_speed = 1 ;
int     keys_update      = 0 ;
int     keys_auto_repeat = 0 ;
int     keys_x0, keys_x1, keys_y0, keys_y1 ;
int     keys_temp_up, keys_temp_down, keys_temp_left, keys_temp_right ;
int     keys_temp_sound, keys_temp_ingame,  keys_temp_intro, keys_temp_save ;
int	keys_temp_fx_vol, keys_temp_mc_vol, keys_temp_speed, keys_temp_update ;
int     keys_temp_repeat ;
wimp_i  keys_selected = prefs_KEYS ;
int	slider_off, slider_x, slider_y ;
int	sound_fx_vol = sound_FX_VOLUME ;
int	sound_music_vol = sound_MUSIC_VOLUME ;



/* Read in the preferences from a file */
void keys_read_in_prefs ( FILE *in )
{
  /* Default keys */
  fread ( &keys_up_key,      sizeof(int), 1, in ) ;
  fread ( &keys_down_key,    sizeof(int), 1, in ) ;
  fread ( &keys_left_key,    sizeof(int), 1, in ) ;
  fread ( &keys_right_key,   sizeof(int), 1, in ) ;
  /* Other options */
  fread ( &keys_sound_fx,    sizeof(int), 1, in ) ;
  fread ( &keys_ingame,      sizeof(int), 1, in ) ;
  fread ( &keys_intro,       sizeof(int), 1, in ) ;
  fread ( &keys_save_hi,     sizeof(int), 1, in ) ;
  fread ( &keys_fx_vol,      sizeof(int), 1, in ) ;
  fread ( &keys_music_vol,   sizeof(int), 1, in ) ;
  /* Advanced options */
  fread ( &keys_music_speed, sizeof(int), 1, in ) ;
  fread ( &keys_update,      sizeof(int), 1, in ) ;
  /* More Miscellaneous */
  fread ( &keys_auto_repeat, sizeof(int), 1, in ) ;
}


/* Set the default prefs */
void keys_default_prefs ( void )
{
  /* Default keys */
  keys_up_key      = 207 ;
  keys_down_key    = 232 ;
  keys_left_key    = 225 ;
  keys_right_key   = 194 ;
  /* Other options */
  keys_sound_fx    = 1 ;
  keys_ingame      = 1 ;
  keys_intro       = 1 ;
  keys_save_hi     = 1 ;
  keys_fx_vol      = 64 ;
  keys_music_vol   = 48 ;
  /* Advanced options */
  keys_music_speed = 1 ;
  keys_update      = 0 ;
  /* More misc */
  keys_auto_repeat = 0 ;
}


/* Write out the preferences to a file */
void keys_write_out_prefs ( void )
{
  FILE  *out ;

  osfile_create_dir( info_CHOICES_RW, 0 ) ;
  out = fopen ( info_CHOICES_RW ".Choices", "wb" ) ;

  if ( out != NULL ) {
    /* Default keys */
    fwrite ( &keys_up_key,      sizeof(int), 1, out ) ;
    fwrite ( &keys_down_key,    sizeof(int), 1, out ) ;
    fwrite ( &keys_left_key,    sizeof(int), 1, out ) ;
    fwrite ( &keys_right_key,   sizeof(int), 1, out ) ;
    /* Other options */
    fwrite ( &keys_sound_fx,    sizeof(int), 1, out ) ;
    fwrite ( &keys_ingame,      sizeof(int), 1, out ) ;
    fwrite ( &keys_intro,       sizeof(int), 1, out ) ;
    fwrite ( &keys_save_hi,     sizeof(int), 1, out ) ;
    fwrite ( &keys_fx_vol,      sizeof(int), 1, out ) ;
    fwrite ( &keys_music_vol,   sizeof(int), 1, out ) ;
    /* Advanced options */
    fwrite ( &keys_music_speed, sizeof(int), 1, out ) ;
    fwrite ( &keys_update,      sizeof(int), 1, out ) ;
    /* More miscellaneous */
    fwrite ( &keys_auto_repeat, sizeof(int), 1, out ) ;

    fclose ( out ) ;
  }
}


/* Read in the file and initialise it */
void keys_initialise ( void )
{
  FILE  *in ;
  int   loop = 0 ;
  char  line[100] ;
  const char *uk;

  sprintf(line, "%s.Keys", info_APPDIR);
  in = fopen ( line, "r" ) ;

  if ( in == NULL ) {
    main_exit_error ( messages_xlate_error ( "NoKeys", NULL, NULL ) ) ;
  }

  fgets ( line, 99, in ) ;
  while ( loop < 128  &&  feof(in) == 0 ) {
    if (strlen(line) != 0) {
      lookup[loop] = (char *) memory_alloc ( strlen(line), "lookup" ) ;
      line[strlen(line)-1] = '\0' ;
      strcpy ( lookup[loop], line ) ;
    }
    else {
      lookup[loop] = (char *) -1 ;
    }
    loop++ ;
    fgets ( line, 99, in ) ;
  }

  fclose ( in ) ;

  uk = messages_xlate_text ( "Unknown", NULL, NULL ) ;
  lookup[128] = (char *) memory_alloc ( strlen( uk ) + 1 , "lookup" ) ;
  strcpy ( lookup[128], uk ) ;

  in = fopen ( info_CHOICES_RO ".Choices", "rb" ) ;
  if (in != (FILE *) 0) {
    keys_default_prefs () ;
    keys_read_in_prefs ( in ) ;
    fclose ( in ) ;
  }
  else {
    keys_default_prefs () ;
  }

  hopper_load_hi () ;

  icon_get_extent ( sound_hnd, sound_FX_BACK, &slider_off, &loop, &slider_x,
                                                                        &slider_y ) ;
}


/* Provide a string for an internal key number */
char *keys_string ( int key )
{
  if ( lookup[key-128] != (char *) -1 ) {
    return ( lookup[key-128] ) ;
  }
  else {
    return ( lookup[128] ) ;
  }
}


/* Free the memory used by the keys table */
void keys_finished ( void )
{
  int  loop ;

  for ( loop = 0; loop < 129; loop++ ) {
    if ( lookup[loop] != (char *) -1 ) {
      free ( lookup[loop] ) ;
    }
  }

  if ( keys_save_hi == 1 ) {
    hopper_save_hi () ;
  }
}


/* Show the change keys dialogue box */
void keys_show_keys ( void )
{
  wimp_window_state   p_state, i_state;
  int		      volume;

  /* Which window ? */
  icon_set_selected ( prefs_hnd, prefs_KEYS, (keys_selected == prefs_KEYS) ) ;
  icon_set_selected ( prefs_hnd, prefs_SOUND, (keys_selected == prefs_SOUND) ) ;
  icon_set_selected ( prefs_hnd, prefs_MISC, (keys_selected == prefs_MISC) ) ;
  icon_set_selected ( prefs_hnd, prefs_ADV, (keys_selected == prefs_ADV) ) ;

  /* Keys window */
  icon_set_text ( keys_hnd, keys_UP, keys_string ( keys_up_key ) ) ;
  icon_set_text ( keys_hnd, keys_DOWN, keys_string ( keys_down_key ) ) ;
  icon_set_text ( keys_hnd, keys_LEFT, keys_string ( keys_left_key ) ) ;
  icon_set_text ( keys_hnd, keys_RIGHT, keys_string ( keys_right_key ) ) ;

  /* Sound window */
  icon_set_selected ( sound_hnd, sound_SOUND, keys_sound_fx ) ;
  icon_set_selected ( sound_hnd, sound_INGAME, keys_ingame ) ;
  icon_set_selected ( sound_hnd, sound_INTRO, keys_intro ) ;
  volume=(int) ((float) keys_fx_vol * ((float) slider_x / (float) 64));
  icon_new_size ( sound_hnd, sound_fx_vol, volume, slider_y);
  volume=(int) ((float) keys_music_vol * ((float) slider_x / (float) 64));
  icon_new_size ( sound_hnd, sound_music_vol, volume, slider_y);

  /* Misc window */
  icon_set_selected ( misc_hnd, misc_SAVE, keys_save_hi ) ;
  icon_set_selected ( misc_hnd, misc_AUTO, keys_auto_repeat ) ;

  /* Advanced window */
  icon_set_selected ( advanced_hnd, advanced_VHIGH, (keys_music_speed == 0) ) ;
  icon_set_selected ( advanced_hnd, advanced_HIGH, (keys_music_speed == 1) ) ;
  icon_set_selected ( advanced_hnd, advanced_MEDIUM, (keys_music_speed == 2) ) ;
  icon_set_selected ( advanced_hnd, advanced_LOW, (keys_music_speed == 3) ) ;
  icon_set_selected ( advanced_hnd, advanced_NORMAL, (keys_update == 0) ) ;
  icon_set_selected ( advanced_hnd, advanced_SLOWER, (keys_update == 1) ) ;

  keys_temp_up     = keys_up_key ;
  keys_temp_down   = keys_down_key ;
  keys_temp_left   = keys_left_key ;
  keys_temp_right  = keys_right_key ;
  keys_temp_sound  = keys_sound_fx ;
  keys_temp_fx_vol = keys_fx_vol ;
  keys_temp_ingame = keys_ingame ;
  keys_temp_intro  = keys_intro ;
  keys_temp_mc_vol = keys_music_vol ;
  keys_temp_save   = keys_save_hi ;
  keys_temp_speed  = keys_music_speed ;
  keys_temp_update = keys_update ;
  keys_temp_repeat = keys_auto_repeat ;

  p_state.w = prefs_hnd ;
  wimp_get_window_state ( &p_state ) ;
  switch ( keys_selected ) {
    case prefs_KEYS :
      i_state.w = keys_hnd ;
      break ;
    case prefs_SOUND :
      i_state.w = sound_hnd ;
      break ;
    case prefs_MISC :
      i_state.w = misc_hnd ;
      break ;
    case prefs_ADV :
      i_state.w = advanced_hnd ;
      break ;
  }
  wimp_get_window_state ( &i_state ) ;
  keys_x0 = i_state.visible.x0 - p_state.visible.x0 ;
  keys_y0 = i_state.visible.y0 - p_state.visible.y0 ;
  keys_x1 = i_state.visible.x1 - p_state.visible.x1 ;
  keys_y1 = i_state.visible.y1 - p_state.visible.y1 ;
  i_state.next = wimp_TOP ;
  wimp_open_window ( (wimp_open *) &i_state ) ;
  p_state.next = i_state.w ;
  wimp_open_window ( (wimp_open *) &p_state ) ;
  prefs_opn = 1 ;
}


/* Keep the two windows joined */
void keys_keep_joined ( wimp_open *m_open )
{
  wimp_window_state  i_state ;

  switch ( keys_selected ) {
    case prefs_KEYS :
      i_state.w = keys_hnd ;
      break ;
    case prefs_SOUND :
      i_state.w = sound_hnd ;
      break ;
    case prefs_MISC :
      i_state.w = misc_hnd ;
      break ;
    case prefs_ADV :
      i_state.w = advanced_hnd ;
      break ;
  }
  wimp_get_window_state ( &i_state ) ;
  i_state.visible.x0 = m_open -> visible.x0 + keys_x0 ;
  i_state.visible.y0 = m_open -> visible.y0 + keys_y0 ;
  i_state.visible.x1 = m_open -> visible.x1 + keys_x1 ;
  i_state.visible.y1 = m_open -> visible.y1 + keys_y1 ;
  i_state.next       = m_open -> next ;
  wimp_open_window ( (wimp_open *) &i_state ) ;
  m_open -> next = i_state.w ;
  wimp_open_window ( m_open ) ;
}


/* A new inside prefs window has been selected */
void keys_new_inside ( wimp_i wdw )
{
  wimp_window_state  n_state, o_state ;

  if ( wdw != keys_selected ) {
    switch ( keys_selected ) {
      case prefs_KEYS :
        o_state.w = keys_hnd ;
        break ;
      case prefs_SOUND :
        o_state.w = sound_hnd ;
        break ;
      case prefs_MISC :
        o_state.w = misc_hnd ;
        break ;
      case prefs_ADV :
        o_state.w = advanced_hnd ;
        break ;
    }
    switch ( wdw ) {
      case prefs_KEYS :
        n_state.w = keys_hnd ;
        break ;
      case prefs_SOUND :
        n_state.w = sound_hnd ;
        break ;
      case prefs_MISC :
        n_state.w = misc_hnd ;
        break ;
      case prefs_ADV :
        n_state.w = advanced_hnd ;
        break ;
    }
    wimp_get_window_state ( &o_state ) ;
    wimp_get_window_state ( &n_state ) ;
    n_state.visible.x0 = o_state.visible.x0 ;
    n_state.visible.y0 = o_state.visible.y0 ;
    n_state.visible.x1 = o_state.visible.x1 ;
    n_state.visible.y1 = o_state.visible.y1 ;
    n_state.next       = o_state.next ;
    wimp_close_window ( o_state.w ) ;
    wimp_open_window ( (wimp_open *) &n_state ) ;
    keys_selected = wdw ;
  }
}


/* Select/adjust clicked */
void keys_prefs_selected ( wimp_block *my_block )
{
  int  close;

  close=0;

  switch ( my_block -> pointer.i ) {
    case prefs_OK :
      keys_up_key      = keys_temp_up ;
      keys_down_key    = keys_temp_down ;
      keys_left_key    = keys_temp_left ;
      keys_right_key   = keys_temp_right ;
      keys_sound_fx    = keys_temp_sound ;
      keys_fx_vol      = keys_temp_fx_vol ;
      keys_ingame      = keys_temp_ingame ;
      keys_intro       = keys_temp_intro ;
      keys_music_vol   = keys_temp_mc_vol ;
      keys_save_hi     = keys_temp_save ;
      keys_music_speed = keys_temp_speed ;
      keys_update      = keys_temp_update ;
      keys_auto_repeat = keys_temp_repeat ;
      qtm_set_speed () ;
      close=1;
      break ;

    case prefs_SAVE :
      keys_up_key      = keys_temp_up ;
      keys_down_key    = keys_temp_down ;
      keys_left_key    = keys_temp_left ;
      keys_right_key   = keys_temp_right ;
      keys_sound_fx    = keys_temp_sound ;
      keys_fx_vol      = keys_temp_fx_vol ;
      keys_ingame      = keys_temp_ingame ;
      keys_intro       = keys_temp_intro ;
      keys_music_vol   = keys_temp_mc_vol ;
      keys_save_hi     = keys_temp_save ;
      keys_music_speed = keys_temp_speed ;
      keys_update      = keys_temp_update ;
      keys_auto_repeat = keys_temp_repeat ;
      keys_write_out_prefs () ;
      qtm_set_speed () ;
      close=1;
      break ;

    case prefs_CANCEL :
      close=1;
      break ;
    case prefs_KEYS :
    case prefs_SOUND :
    case prefs_MISC :
    case prefs_ADV :
      keys_new_inside ( my_block -> pointer.i ) ;
      break ;
  }

  if (close==1) {
    if (my_block->pointer.buttons == wimp_CLICK_SELECT) {
      wimp_close_window ( prefs_hnd ) ;
      switch ( keys_selected ) {
        case prefs_KEYS :
          wimp_close_window ( keys_hnd ) ;
          break ;
        case prefs_SOUND :
          wimp_close_window ( sound_hnd ) ;
          break ;
        case prefs_MISC :
          wimp_close_window ( misc_hnd ) ;
          break ;
        case prefs_ADV :
          wimp_close_window ( advanced_hnd );
          break ;
      }
      prefs_opn = 0 ;
    }
    else {
      keys_show_keys();
    }
  }
}


/* Mouse click detected in the change keys window */
void keys_prefs_clicked ( wimp_block *my_block )
{
  switch ( my_block -> pointer.buttons ) {
    case wimp_CLICK_SELECT :
    case wimp_CLICK_ADJUST :
      keys_prefs_selected ( my_block ) ;
      break ;
  }
}


/* Display the dialogue on the screen */
static void keys_display_change ( const char *str, int xadd, int yadd )
{
  int   	     loop ;
  wimp_icon_state    my_state ;

  icon_set_text ( change_hnd, change_STRING,
                  (char *) messages_xlate_text ( "PrKey", str, NULL ) ) ;

  for ( loop = 0; loop < 5; loop++ ) {
    my_state.w = change_hnd ;
    my_state.i = loop ;
    wimp_get_icon_state ( &my_state ) ;
    my_state.icon.extent.x0 = my_state.icon.extent.x0 + xadd ;
    my_state.icon.extent.y0 = my_state.icon.extent.y0 + yadd ;
    my_state.icon.extent.x1 = my_state.icon.extent.x1 + xadd ;
    my_state.icon.extent.y1 = my_state.icon.extent.y1 + yadd ;
    wimp_plot_icon ( &my_state.icon ) ;
  }
}


/* Read the value of the key that is pressed */
int  keys_read_key ( void )
{
  int  ret, key = 0xff, d ;

  while ( key == 0xff ) {
    os_byte ( 121, 3, 0, &key, &d ) ;
    if ( (key >= 9  &&  key <= 11)  ||  (key >= 113  &&  key <= 119)  ||
                (key >= 28  &&  key <= 30)  ||  key == 20  ||  key == 22 ) {
      key = 0xff ;
    }
  }

  ret = key ;
  key = 0xff ;

  while ( key == 0xff ) {
    os_byte ( 121, ret + 128, 0, &key, &d ) ;
  }

  return ( ret + 128 ) ;
}


/* Read in a key and continue until it is a unique one */
int  keys_read_without ( int a, int b, int c )
{
  int  key = 0xff ;

  while ( key == 0xff  ||  key == a  ||  key == b  ||  key == c ) {
    key = keys_read_key () ;
  }

  return ( key ) ;
}


/* Change the current keys to some new ones */
void keys_change_keys ( void )
{
  int                r1, r2 ;
  wimp_window_state  w_state ;
  int		     xsize, ysize, width, height ;
  char               temp[64];

  /* Wait for no keys to be pressed */
  os_byte ( 121, 3, 0, &r1, &r2 ) ;
  while ( r1 != 0xff ) {
    os_byte ( 121, 3, 0, &r1, &r2 ) ;
  }
  /* Centre the window */
  w_state.w = change_hnd ;
  wimp_get_window_state ( &w_state ) ;
  os_read_mode_variable ( (os_mode) -1, 11, &xsize ) ;
  os_read_mode_variable ( (os_mode) -1,  4, &width ) ;
  os_read_mode_variable ( (os_mode) -1, 12, &ysize ) ;
  os_read_mode_variable ( (os_mode) -1,  5, &height ) ;
  xsize  = (xsize * (1 << width)) / 2 ;
  ysize  = (ysize * (1 << height)) / 2 ;
  width  = w_state.visible.x1 - w_state.visible.x0 ;
  height = w_state.visible.y1 - w_state.visible.y0 ;
  xsize  = xsize - (width / 2) ;
  ysize  = ysize - (height / 2) ;

  keys_temp_up    = 0 ;
  keys_temp_down  = 0 ;
  keys_temp_left  = 0 ;
  keys_temp_right = 0 ;

  /* Get new keys */
  strcpy ( temp, messages_xlate_text ( "Up", NULL, NULL ) ) ;
  keys_display_change ( temp, xsize, ysize ) ;
  keys_temp_up = keys_read_without ( 0, 0, 0 ) ;
  strcpy ( temp, messages_xlate_text ( "Down", NULL, NULL ) ) ;
  keys_display_change ( temp, xsize, ysize ) ;
  keys_temp_down = keys_read_without ( keys_temp_up, 0, 0 ) ;
  strcpy ( temp, messages_xlate_text ( "Left", NULL, NULL ) ) ;
  keys_display_change ( temp, xsize, ysize ) ;
  keys_temp_left = keys_read_without ( keys_temp_up, keys_temp_down, 0 ) ;
  strcpy ( temp, messages_xlate_text ( "Right", NULL, NULL ) ) ;
  keys_display_change ( temp, xsize, ysize ) ;
  keys_temp_right = keys_read_without ( keys_temp_up, keys_temp_down,
                                                          keys_temp_left ) ;
  /* Redraw the screen */
  wimp_force_redraw ( wimp_BACKGROUND, xsize, ysize, xsize+width,
                                                            ysize+height ) ;
  /* Set the text icons to the new keys */
  icon_set_text ( keys_hnd, keys_UP, keys_string ( keys_temp_up ) ) ;
  icon_set_text ( keys_hnd, keys_DOWN, keys_string ( keys_temp_down ) ) ;
  icon_set_text ( keys_hnd, keys_LEFT, keys_string ( keys_temp_left ) ) ;
  icon_set_text ( keys_hnd, keys_RIGHT, keys_string ( keys_temp_right ) ) ;
}


/* Select/adjust clicked */
void keys_keys_selected ( wimp_block *my_block )
{
  switch ( my_block -> pointer.i ) {
    case keys_CHANGE :
      keys_change_keys () ;
      break ;
  }
}


/* Mouse click detected in the change keys window */
void keys_keys_clicked ( wimp_block *my_block )
{
  switch ( my_block -> pointer.buttons ) {
    case wimp_CLICK_SELECT :
    case wimp_CLICK_ADJUST :
      keys_keys_selected ( my_block ) ;
      break ;
  }
}


/* Select/adjust clicked */
void keys_sound_selected ( wimp_block *my_block )
{
  wimp_i             icon=my_block->pointer.i;
  wimp_window_state  state ;
  int		     click;
  int		     x, y, w, h, d;

  state.w=sound_hnd;
  wimp_get_window_state(&state);
  click=(my_block->pointer.pos.x - state.visible.x0) - slider_off;

  switch ( icon ) {
    case sound_SOUND :
      keys_temp_sound = keys_temp_sound ^ 1 ;
      break ;
    case sound_INGAME :
      keys_temp_ingame = keys_temp_ingame ^ 1 ;
      break ;
    case sound_INTRO :
      keys_temp_intro = keys_temp_intro ^ 1 ;
      break ;
    case sound_FX_BACK :
      sound_fx_vol=icon_new_size(sound_hnd, sound_fx_vol, click, slider_y);
      keys_temp_fx_vol = (int) ((float) ((float) click/(float) slider_x)*(float) 64);
      icon_get_extent(sound_hnd, sound_FX_BACK, &x, &y, &w, &h);
      os_byte(19, 0, 0, &d, &d);
      wimp_force_redraw(sound_hnd, x, y, x+w, y+h);
      break;
    case sound_MUSIC_BACK :
      sound_music_vol=icon_new_size(sound_hnd, sound_music_vol, click, slider_y);
      keys_temp_mc_vol = (int) ((float) ((float) click/(float) slider_x)*(float) 64);
      icon_get_extent(sound_hnd, sound_MUSIC_BACK, &x, &y, &w, &h);
      os_byte(19, 0, 0, &d, &d);
      wimp_force_redraw(sound_hnd, x, y, x+w, y+h);
      break;
  }
}


/* Mouse click detected in the sound prefs window */
void keys_sound_clicked ( wimp_block *my_block )
{
  switch ( my_block -> pointer.buttons ) {
    case wimp_CLICK_SELECT :
    case wimp_CLICK_ADJUST :
      keys_sound_selected ( my_block ) ;
      break ;
  }
}


/* Select/adjust clicked */
void keys_misc_selected ( wimp_block *my_block )
{
  switch ( my_block -> pointer.i ) {
    case misc_SAVE :
      keys_temp_save = keys_temp_save ^ 1 ;
      break ;
    case misc_RESET :
      hopper_reset_hi () ;
      break ;
    case misc_AUTO :
      keys_temp_repeat = keys_temp_repeat ^ 1 ;
      break ;
  }
}

/* Mouse click detected in the misc prefs window */
void keys_misc_clicked ( wimp_block *my_block )
{
  switch ( my_block -> pointer.buttons ) {
    case wimp_CLICK_SELECT :
    case wimp_CLICK_ADJUST :
      keys_misc_selected ( my_block ) ;
      break ;
  }
}




/* Select/adjust clicked */
void keys_advanced_selected ( wimp_block *my_block )
{
  switch ( my_block -> pointer.i ) {
    case advanced_VHIGH :
      keys_temp_speed = 0 ;
      break ;
    case advanced_HIGH :
      keys_temp_speed = 1 ;
      break ;
    case advanced_MEDIUM :
      keys_temp_speed = 2 ;
      break ;
    case advanced_LOW :
      keys_temp_speed = 3 ;
      break ;
    case advanced_NORMAL :
      keys_temp_update = 0 ;
      break ;
    case advanced_SLOWER :
      keys_temp_update = 1 ;
      break ;
  }
}

/* Mouse click detected in the advanced prefs window */
void keys_advanced_clicked ( wimp_block *my_block )
{
  switch ( my_block -> pointer.buttons ) {
    case wimp_CLICK_SELECT :
    case wimp_CLICK_ADJUST :
      keys_advanced_selected ( my_block ) ;
      break ;
  }
}


