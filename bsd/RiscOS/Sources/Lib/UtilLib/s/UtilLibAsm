; Copyright (C) 2014 RISC OS Open Ltd
;
; Permission is hereby granted, free of charge, to any person obtaining a
; copy of this software and associated documentation files (the "Software"),
; to deal in the Software without restriction, including without limitation
; the rights to use, copy, modify, merge, publish, distribute, sublicense,
; and/or sell copies of the Software, and to permit persons to whom the
; Software is furnished to do so, subject to the following conditions:
;
; The above copyright notice and this permission notice shall be included in
; all copies or substantial portions of the Software.
;
; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
; THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
; FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
; DEALINGS IN THE SOFTWARE.

        IMPORT  __RelocCode [CODE]
        IMPORT  __utility_main [CODE]
        EXPORT  __main [CODE]

; Use area name "!" so that we get linked first with link -rmf
; This isn't required if you can use link -util (requires link 5.36 or later)
        AREA    |!|, CODE, READONLY

; This symbol is an external dependency of any C file declaring a function called 'main', so
; by defining it, we persuade the linker to extract *this* translation unit from the library
__main
; Also mark this as the entry point, so the linker sets up the Utility header to point here
        ENTRY

; Entry conditions for transient utilities, as per PRM:

; R0 -> command line
; R1 -> command tail (first argument)
; R12 -> workspace (1K below stack pointer)
; R13 -> top of stack
; R14 -> return address
; USR mode, IRQs enabled

; On exit
; VS, R0 -> error block
; otherwise, registers may be corrupted

        STMFD   sp!, {r0,r1,lr}
        BL      __RelocCode ; call __RelocCode before we enter C - have to assume it might use absolute addresses
        LDMFD   sp!, {a1,a2}
        MOV     sl, r12
        MOV     fp, #0
        BL      __utility_main
        CMP     a1, #0 ; clears V
        LDREQ   pc, [sp], #4
        CMP     a1, #&80000000
        CMNVC   a1, #&80000000 ; set V
        LDR     pc, [sp], #4

        END
