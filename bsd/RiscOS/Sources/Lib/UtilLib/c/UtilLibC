/* Copyright (C) 2014 RISC OS Open Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#include <stdlib.h>
#include <stdbool.h>
#include "kernel.h"
#include "swis.h"

extern _kernel_oserror *main(int argc, char *argv[]);

_kernel_oserror *__utility_main(const char *cmdline,
                                const char *cmdtail,
                                void *workspace);

static inline _kernel_oserror *rma_malloc(void *pblock, size_t size)
{
  _kernel_oserror *e;
  __asm {
    MOV     r0, #6
    MOV     r3, size
    SWI     XOS_Bit+OS_Module, {r0,r3}, {r2,psr}, {lr}
    MOVVC   r0, #0
    MOV     e, r0
    MOV     *(void **)pblock, r2
  }
  return e;
}

static inline _kernel_oserror *rma_free(const void *block)
{
  _kernel_oserror *e;
  __asm {
    MOV     r0, #7
    MOV     r2, block
    SWI     XOS_Bit+OS_Module, {r0,r2}, {psr}, {lr}
    MOVVC   r0, #0
    MOV     e, r0
  }
  return e;
}

_kernel_oserror *__utility_main(const char *cmdline,
                                const char *cmdtail,
                                void *workspace)
{
  _kernel_oserror *e;
  int argc = 0;
  char **argv;
  size_t buflen = 0;
  const char *in;
  char *out;
  int arg = 0;

  (void) cmdtail;
  (void) workspace;

  /* The argument splitting and escaping rules below mirror those in OS_CLI */

  /* Pass 1: count arguments */
  in = cmdline;
  do
  {
    /* Skip leading / separating / trailing spaces */
    while (*in == ' ') ++in;
    if (*in == 0 || *in == 10 || *in == 13)
      break; /* end of command line */
    bool arg_is_quoted = *in == '"'; /* quote rules only apply if first char is a quote */
    bool quote_active = false;
    ++argc;
    while (true)
    {
      if (*in == 0 || *in == 10 || *in == 13 || (*in == ' ' && !quote_active))
        break; /* end of argument */
      if (arg_is_quoted && *in == '"')
      {
        if (quote_active && in[1] == '"')
          ++buflen; /* two quote characters is an escaped quote */
        --quote_active; /* toggle quote state */
      }
      else
        ++buflen;
      ++in;
    }
    ++buflen; /* terminate our copy of the argument */
  }
  while (true);

  e = rma_malloc(&argv, 4*(argc+1) + buflen);
  if (e)
    return e;

  /* Pass 2: construct argument string array */
  in = cmdline;
  out = (char *)(argv + argc + 1);
  do
  {
    /* Skip leading / separating / trailing spaces */
    while (*in == ' ') ++in;
    if (*in == 0 || *in == 10 || *in == 13)
      break; /* end of command line */
    argv[arg++] = out;
    bool arg_is_quoted = *in == '"'; /* quote rules only apply if first char is a quote */
    bool quote_active = false;
    while (true)
    {
      if (*in == 0 || *in == 10 || *in == 13 || (*in == ' ' && !quote_active))
        break; /* end of argument */
      if (arg_is_quoted && *in == '"')
      {
        if (quote_active && in[1] == '"')
          *out++ = '"'; /* two quote characters is an escaped quote */
        --quote_active; /* toggle quote state */
      }
      else
        *out++ = *in;
      ++in;
    }
    *out++ = '\0'; /* terminate our copy of the argument */
  }
  while (true);
  argv[arg] = NULL; /* to match normal C main() convention */

  e = main(argc, argv);
  rma_free(argv);
  return e;
}
