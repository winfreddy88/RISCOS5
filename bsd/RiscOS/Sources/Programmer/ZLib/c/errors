/*
 * Copyright (c) 2012, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include "swis.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stddef.h>
#include <errno.h>

#include "Global/RISCOS.h"
#include "Global/Services.h"

#include "globals.h"
#include "errors.h"

typedef struct {
    int num;
    const char token[8];
} msgerr;

static const msgerr errors[] =
{
    { ErrorNumber_ZLib_NoMem, "NoMem" },
    { ErrorNumber_ZLib_InvalidCompressFlag, "InvCFlg" },
    { ErrorNumber_ZLib_InvalidDecompressFlag, "InvDFlg" },
    { ErrorNumber_ZLib_ZLibError, "ZLibErr" },
    { ErrorNumber_ZLib_UnknownSWI, "UKSWI" },
    { ErrorNumber_ZLib_InvalidTaskAssociate, "InvTA" },
    { ErrorNumber_ZLib_InvalidGZSeek, "InvGZSk" },
};

_kernel_oserror *getourerror(int err)
{
    return _swix(MessageTrans_ErrorLookup,_INR(0,2),&errors[err],&messages,0);
}

_kernel_oserror *getzliberror(int err,const char *msg)
{
    char num[32];
    char *e;
    switch(err)
    {
    case Z_ERRNO:
        sprintf(num,"Z_ERRNO %d",errno);
        e = num;
        break;
    case Z_STREAM_ERROR:
        e = "Z_STREAM_ERROR";
        break;
    case Z_DATA_ERROR:
        e = "Z_DATA_ERROR";
        break;
    case Z_MEM_ERROR:
        e = "Z_MEM_ERROR";
        break;
    case Z_BUF_ERROR:
        e = "Z_BUF_ERROR";
        break;
    case Z_VERSION_ERROR:
        e = "Z_VERSION_ERROR";
        break;
    default:
        sprintf(num,"%d",err);
        e = num;
        break;
    }
    static const msgerr blk[2] = {
    { ErrorNumber_ZLib_ZLibError, "ZLibErr" },
    { ErrorNumber_ZLib_ZLibError, "ZLibEr2" },
    };
    return _swix(MessageTrans_ErrorLookup,_INR(0,2)|_INR(4,5),&blk[msg?1:0],&messages,0,e,msg);
}
