Introduction
------------

  HangWatch is a module designed to aid in debugging crashes and other situations in which the system becomes non-responsive.


Debug dumps
-----------

    When a debug dump is triggered, FIQs & IRQs will be disabled, and the
  following data will be output via the HAL debug interface (HAL_DebugTX):

  * Register dumps for USR, SVC, IRQ, ABT & UND processor modes
  * Full SVC, IRQ, ABT & UND stack dumps
  * Dumps for given user-defined memory blocks

    Additionally, SWI DADebug_Print will also be called, to cause DADebug to
  output its log buffer. When using DADebug with HangWatch it's recommended that
  the DADebug 'UseHAL' switch is set to {TRUE} in order to make sure the debug
  output is sent to the HAL instead of OS_WriteC.

    Note that to cope with situations where the debug dump has been triggered
  while the SVC stack is invalid, HangWatch will reset the SVC stack pointer to
  its default value before calling DADebug.


SWIs
----

SWI HangWatch_Start (&59280)
  
  In:
    r0 = flags
         bit 0: 1 -> use IRQ
                0 -> use FIQ
         other bits: reserved, should be zero
    r1 = HAL timer number
    r2 = timer frequency (Hz)
    r3 = counter limit
  
  Out:
    r0 = watchdog counter address
    All other registers preserved
  
    This SWI starts the watchdog functionality. HangWatch will claim the
  FIQ/IRQ vector and configure the indicated HAL timer to generate FIQs/IRQs at
  the indicated frequency. Each time the timer interrupts, the watchdog counter
  will increment. If the timer reaches the indicated limit then HangWatch will
  halt the system and dump the debugging data.
  
    In order to keep the system alive, the task being debugged must therefore
  reset the watchdog counter at regular intervals. This can be done by one of
  two methods:
  
  * Writing a value of zero to the address returned in r0
  * Calling the HangWatch_Tick SWI
  
    For the FIQ mode of operation, HangWatch will halt the timer and relinquish
  the FIQ vector to any other system that wants to use it. Once the FIQ vector
  becomes free again, HangWatch will reclaim it and restart the timer. This
  means the watchdog functionality may not be a reliable method of detecting
  system deadlocks if the code being debugged makes use of FIQs.
  
    For the IRQ mode of operation, the top of the IRQ stack will contain R9,
  R10, and LR (returning to the kernel's IRQ despatcher).


SWI HangWatch_Stop (&59281)
  
  In:
    -
  
  Out:
    All registers preserved
  
    This SWI halts the watchdog functionality.


SWI HangWatch_Tick (&59282)
  
  In:
    -

  Out:
    All registers preserved
  
    This SWI provides a method to reset the watchdog counter to 0


SWI HangWatch_Dump (&59283)
  
  In:
    -
  
  Out:
    Does not return

    This SWI provides a method to generate a debug dump, the same as would be
  produced if the watchdog limit was reached. This SWI can be used even if the
  watchdog functionality is not in use.
  
    Note that extracting a 'clean' register/stack dump from the debug output
  may not be straightforward, as the kernel's SWI dispatcher will have altered
  some registers and stack contents. In particular, the following registers
  will not contain the values they did at the point the SWI was called:
  
  * R10-R12 (corrupted by HangWatch)
  * R13_svc (will reflect R13_svc on entry to HangWatch SWI handler)
  * R14_svc (will reflect R14_svc on entry to HangWatch SWI handler)
  * PC (will be set to -1)
  * SPSR_fiq (will reflect PSR on entry to HangWatch SWI handler)
  * SPSR_svc (overwritten by hardware)
  

SWI HangWatch_AddMemRegion (&59284)

  In:
    r0 = base of memory region (word aligned)
    r1 = length of memory region (multiple of 4)
    r2 = name of memory region (null-terminated string)

  Out:
    All registers preserved

    This SWI adds a memory region to the list of user-defined regions to include
  in the debug dump.


SWI HangWatch_RemoveMemRegion (&59285)

  In:
    r0 = base of memory region

  Out:
    All registers preserved

    This SWI removes a memory region from the list of user-defined regions

