;
; Copyright (c) 2013, Tank Stage Lighting
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of the copyright holder nor the names of their
;       contributors may be used to endorse or promote products derived from
;       this software without specific prior written permission.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
; DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;

	AREA	|!RunImage|, CODE, READONLY
	ENTRY

in
	SWI	OS_GetEnv		;get memory bits
	MOV	sp,r1			;setup stack pointer
	Push	"lr"
        ADRL    r0,dir			;r0=pointer to directory name
	ADRL    r1,name			;r1=pointer to block
        MOV     r2,#256			;length of block
        MOV     r3,#0			;First call
        MOV     r4,#3			;Expanded string returned
        SWI     OS_ReadVarVal		;Get string
        STR     r2,length		;Save length
        BL      setup			;Go to setup

	BL	task_setup		;task specific bits

	BL	mainin			;Main loop
	B	quit			;Quit application

setup
        Push	"lr"			;Stack lr
	MOV	r0,#0			;Toolbox flags
        MOV     r1,#250
	ADD	r1,r1,#100		;Last wimp version
        ADRL    r2,Wimpmask		;Pionter to wimp mask
	ADRL	r3,Toolboxmask		;pointer to toolbox mask
	ADRL	r4,name			;Pointer to Path name
	ADRL	r5,Messfiledes		;pointer to messagetrans block
	ADRL	r6,Toolboxblock		;Pointer to tbox block
        SWI     Toolbox_Initialise
        STR     r1,Task			;Wimp task ID
	STR	r2,Sprite		;Pointer to sprite block
        Pull	"pc"			;Pull pc from stack

mainin
        Push	"lr"			;Stack lr
	SWI	OS_ReadMonotonicTime
	ADD	r0,r0,#100		;Add aprox 1 second to time
	STR	r0,Count		;Save time
main_loop
	BL	updatedisplay		;update window
        LDR     r0,Wimpmask		;
        ADRL    r1,block		;Ponter to wimp block
        SWI     Wimp_Poll		;Poll wimp once every second
	CMP	r0,#&200		;Is it a toolbox event ?
	BEQ	more			;Yes, go to toolbox routine
        CMP     r0,#&13			;Is it outside wimps events
	BGE	main_loop		;Yes, loop to poll
        ADDLE   pc,pc,r0,LSL #2		;Get event branch
        B       main_loop		;Space filler
        B       main_loop		;Null code
        B       redraw			;Redraw window
        B       open			;Open window
        B       close			;Close window
        B       pointerl		;Pointer leaving window
        B       pointere		;Pointer entering window
        B       mouse			;Mouse click
        B       drag			;User drag box
        B       key			;Key pressed
        B       menu			;Menu selection
        B       scroll			;Scroll request
        B       lose			;Loose caret
        B       gain			;Gain catret
        B       nonzero			;Poll word non zero
        B       reserved		;Unused
        B       reserved		;Unused
        B       reserved		;Unused
        B       mess			;User message
        B       messr			;User message recorded
        B       messa			;User message acknowledge
        B       main_loop		;Loop to Poll

mess
messr

        LDR     r0,[r1,#16]		;Get Message type
        CMP     r0,#0			;Is it quit
        BEQ     closedown		;Yes, quit
	LDR	r2,tboxerr		;Get tollbox error no
	CMP	r0,r2			;Is it a toolbox error code
	BEQ	more			;Yes, go to toolbox routine
	CMP	r0,#3			;file transfer ?
	BEQ	loadfile		;
        B       main_loop		;Loop to poll

messa
        B       main_loop		;Loop to poll

closedown
closeapp
        Pull	"pc"			;Pull pc from stack(poll loop)


open
close
redraw
pointerl
pointere
drag
key
menu
scroll
lose
gain
nonzero
reserved
        B       main_loop		;Loop to poll

mouse
	ADRL	r3,Toolboxblock		;
	LDR	r4,[r3,#selfid]		;get tbox handle
	LDR	r2,mainwindow		;ours
	CMP	r4,r2			;
	BEQ	mousebutton		;
	LDR	r2,i2cwindow		;ours
	CMP	r4,r2			;
	BEQ	i2cmousebutton		;
        B       main_loop		;Loop to poll


quit
        LDR     r0,Task			;ro="TASK"
        LDR     r1,ta			;r1=Task ID
        SWI     Wimp_CloseDown		;Close wimp
        ADRL    r0,block		;r0=Pointer to block
	Pull	"pc"

more
 	LDR	r0,[r1,#8]		;Get toolbox event no
	CMP	r0,#&200		;Is it quit Option ?
	BEQ	closeapp		;Yes, quit program
	CMP	r0,#1
	BEQ	auxusb
	CMP	r0,#2
	BEQ	auxmmc
	CMP	r0,#3
	BEQ	auxmm
	CMP	r0,#4
	BEQ	expuart
	CMP	r0,#5
	BEQ	expmmc
	CMP	r0,#6
	BEQ	subenable
	CMP	r0,#7
	BEQ	subdisable
	CMP	r0,#8
	BEQ	i2con
	CMP	r0,#9
	BEQ	i2coff
	CMP	r0,#10
	BEQ	choosemaintoopen
	CMP	r0,#11
	BEQ	openi2c



	CMP	r0,#&100
	BEQ	mainopening
	CMP	r0,#&104
	BEQ	mainclosing
	CMP	r0,#&108
	BEQ	menuopening
	CMP	r0,#&10C
	BEQ	i2copening
	CMP	r0,#&110
	BEQ	i2cclosing

	LDR	r2,created
	CMP	r0,r2
	BEQ	maincreated
	LDR	r2,menusel
	CMP	r0,r2
	BEQ	menuselectionmade
	LDR	r2,saveas
	CMP	r0,r2
	BEQ	saveconfig
	LDR	r2,savecomp
	CMP	r0,r2
	BEQ	saveclose


	B       main_loop		;Loop to poll

;-----------------------------------------------------
task_setup
	Push	"lr"
	Pull	"pc"
;-----------------------------------------------------
choosemaintoopen
	SWI	GPIO_GetBoard		;get gpiomachine
	MOV	r0,r0,LSL #2		;
	ADRL	r3,machtable		;
	ADD	r1,r0,r3		;pointer to name
	MOV	r0,#0			;flage
	SWI	Toolbox_CreateObject	;
	MOV	r1,r0			;id
	STR	r1,mainwindow		;save handle
	MOV	r0,#0			;flags
	MOV	r2,#0			;default
	MOV	r3,#0			;
	MOV	r4,#0			;
	MOV	r5,#0			;
	SWI	Toolbox_ShowObject	;
	MOV	r0,#0			;flags
	LDR	r1,mainwindow		;id
	MOV	r2,#0			;
	SWI	Toolbox_ObjectMiscOp	;get wimp handle
	STR	r0,realwindow		;store it

	SWI	GPIO_Info		;
	STR	r2,table1pointer	;
	MOV	r1,#-1			;
10	LDRB	r0,[r2],#1		;
	CMP	r0,#&FF			;
	ADDNE	r1,r1,#1		;
	BNE	%BT10			;

	STR	r2,table2pointer	;
	STR	r1,icon1end		;
20	LDRB	r0,[r2],#1		;
	CMP	r0,#&FF			;
	ADDNE	r1,r1,#1		;
	BNE	%BT20			;

	STR	r2,table3pointer	;
	STR	r1,icon2end		;
30	LDRB	r0,[r2],#1		;
	CMP	r0,#&FF			;
	ADDNE	r1,r1,#1		;
	BNE	%BT30			;

	STR	r2,table4pointer	;
	STR	r1,icon3end		;
40	LDRB	r0,[r2],#1		;
	CMP	r0,#&FF			;
	ADDNE	r1,r1,#1		;
	BNE	%BT40			;
	STR	r1,icon4end		;

	B	main_loop


machtable
	DCB	"Non",0
	DCB	"Bgl",0
	DCB	"Bgl",0
	DCB	"Bgl",0
	DCB	"Bgl",0
	DCB	"Bgl",0
	DCB	"Bgl",0
	DCB	"Dev",0
	DCB	"Bgl",0
	DCB	"Bgl",0
	DCB	"PDR",0
	DCB	"Rp1",0
	DCB	"Rp2",0
	DCB	"Rp2",0
	DCB	"PDa",0
	DCB	"PDS",0
	DCB	"Rp2",0
	DCB	"Rpp",0
	DCB	"Com",0
	DCB	"RP2",0
	ALIGN
;-----------------------------------------------------
;add gadgets to match pin count
creategadgets
	Push	"r0-r12,lr"		;
	SWI	GPIO_I2CInfo		;any to add ?
	CMP	r0,#-1			;
	Pull	"r0-r12,pc",EQ		;
	SUB	r9,r1,r0		;r9=gadgets needed
	MOV	r7,#1			;number on window
	MOV	r0,#0			;
	ADRL	r1,i2ctitle		;
	SWI	Toolbox_TemplateLookUp
	MOV	r1,r0			;
	MOV	r0,#0			;
	MOV	r2,#0			;gadget number
	SWI	Window_ExtractGadgetInfo
	ADRL	r5,datastore		;temp store
	MOV	r3,#0			;counter
10	LDRB	r4,[r0,r3]		;
	STRB	r4,[r5,r3]		;move template gadget
	ADD	r3,r3,#1		;
	CMP	r3,r1			;
	BLE	%BT10			;
20	STR	r7,[r5,#24]		;give it a number

	MOV	r0,#0			;
	LDR	r1,i2cwindow		;
	MOV	r2,#1			;add gadget
	MOV	r3,r5			;pointer to template
	SWI	Toolbox_ObjectMiscOp	;

	MOV	r0,#0			;
	MOV	r2,#72			;get bounding box
	MOV	r3,r7			;
	ADRL	r4,bbox			;
	SWI	Toolbox_ObjectMiscOp	;

	LDR	r3,[r4,#8]		;xmax
	LDR	r2,[r4,#0]		;xmin
	SUB	r2,r3,r2		;r2=xmax-xmin
	MUL	r0,r2,r7		;
	ADD	r0,r3,r0		;
	STR	r0,[r4,#8]		;move to right
	MOV	r8,r0			;extent of gadget
	SUB	r0,r0,r2		;
	STR	r0,[r4,#0]		;move to right

	MOV	r0,#0			;
	MOV	r2,#71			;set bounding box
	MOV	r3,r7			;
	SWI	Toolbox_ObjectMiscOp	;

	MOV	r0,#0			;
	MOV	r2,#16			;get window extent
	MOV	r3,r4			;
	SWI	Toolbox_ObjectMiscOp	;

	LDR	r0,[r4,#8]		;
	CMP	r0,r8			;
	BGT	%FT30			;its big enough
	ADD	r0,r0,#48		;
	STR	r0,[r4,#8]		;

	MOV	r0,#0			;
	MOV	r2,#15			;
	SWI	Toolbox_ObjectMiscOp	;

30	ADD	r7,r7,#1		;
	CMP	r7,r9			;
	BLE	%BT20			;
	Pull	"r0-r12,pc"
;-----------------------------------------------------
openi2c
	SWI	GPIO_I2CInfo
	CMP	r0,#-1			;no i2cs
	BEQ	main_loop		;
	MOV	r0,#0			;flags
	LDR	r1,i2cwindow
	MOV	r2,#0			;default
	MOV	r3,#0			;
	MOV	r4,#0			;
	MOV	r5,#0			;
	SWI	Toolbox_ShowObject	;
	B	main_loop


;-----------------------------------------------------
auxusb
	SWI	GPIO_AuxAsUSB
	BL	do_mimic
	B	main_loop
;-----------------------------------------------------
auxmmc
	SWI	GPIO_AuxAsMMC
	BL	do_mimic
	B	main_loop
;-----------------------------------------------------
auxmm
	SWI	GPIO_AuxAsMM
	BL	do_mimic
	B	main_loop
;-----------------------------------------------------
expuart
	SWI	GPIO_ExpAsUART
	BL	do_mimic
	B	main_loop
;-----------------------------------------------------
expmmc
	SWI	GPIO_ExpAsMMC
	BL	do_mimic
	B	main_loop
;-----------------------------------------------------
i2con
	MOV	r0,#1
i2in	SWI	GPIO_EnableI2C
	B       main_loop

;-----------------------------------------------------
i2coff
	MOV	r0,#0
	B       i2in

;-----------------------------------------------------
saveconfig
	ADRL	r0,datastore		;store for data
	MOV	r1,#0			;short spec
	SWI	GPIO_SaveConfig
	MOV	r5,r0			;setup call
	ADD	r6,r1,#4		;
	MOV	r0,#4			;
	ADRL	r1,savewindow		;
	LDR	r1,[r1]			;
	MOV	r2,#10
	MOV	r3,r5
	SUB	r4,r6,r5
	MOV	r6,r4
	SWI	Toolbox_ObjectMiscOp
	B       main_loop
;-----------------------------------------------------
saveclose
	MOV	r0,#0
	ADRL	r1,savewindow
	LDR	r1,[r1]
	SWI	Toolbox_HideObject
	B       main_loop
;-----------------------------------------------------
loadfile
        LDR     r0,[r1,#40]		;Get file type
	LDR	r2,mytype
	CMP	r0,r2
	BNE	main_loop
	ADD	r1,r1,#44		;filename pointer
	MOV	r0,#12			;use path string
	ADRL	r2,datastore		;load address
	MOV	r3,#0			;
	MOV	r6,#-1			;test load bit
	STR	r6,[r2]			;
	SWI	OS_File			;load it
	ADRL	r0,datastore		;load address
	LDR	r1,[r0]			;get first word
	CMP	r1,#-1			;not loaded ?
	SWINE	GPIO_LoadConfig
	B       main_loop

mytype	DCD	filetype
;-----------------------------------------------------
mainopening
	LDR	r0,mainflag		;get flags
	ORR	r0,r0,#mainwindowflag	;set bit
	STR	r0,mainflag		;save handle
	BL	maindisp
	B       main_loop

;-----------------------------------------------------
mainclosing
	LDR	r0,mainflag		;get flags
	BIC	r0,r0,#mainwindowflag	;clear bit
	STR	r0,mainflag		;save handle
	B       main_loop

;-----------------------------------------------------
i2copening
	LDR	r0,mainflag		;get flags
	ORR	r0,r0,#i2cwindowflag	;set bit
	STR	r0,mainflag		;save handle
	BL	i2cdisp
	B       main_loop

;-----------------------------------------------------
i2cclosing
	LDR	r0,mainflag		;get flags
	BIC	r0,r0,#i2cwindowflag	;clear bit
	STR	r0,mainflag		;save handle
	B       main_loop

;-----------------------------------------------------
maincreated
	MOV	r0,#0			;set up call
	LDR	r5,[r1,#16]		;first 4 letters of name
	ADRL	r3,Toolboxblock		;
	LDR	r1,[r3,#selfid]		;get tbox handle
	LDR	r3,menutitle		;compare name
	CMP	r5,r3			;
	STREQ	r1,menuwindow		;save handle
	LDR	r3,menu1title		;compare name
	CMP	r5,r3			;
	STREQ	r1,menu1window		;save handle
	LDR	r3,menu2title		;compare name
	CMP	r5,r3			;
	STREQ	r1,menu2window		;save handle
	LDR	r3,savetitle		;compare name
	CMP	r5,r3			;
	STREQ	r1,savewindow		;save handle
	LDR	r3,i2ctitle		;compare name
	CMP	r5,r3			;
	STREQ	r1,i2cwindow		;save handle
	BLEQ	creategadgets		;
;next
	B       main_loop
;-----------------------------------------------------
menuopening
	SWI	GPIO_GetBoard		;get gpiomachine
	CMP	r0,#11			;
	LDRLT	r6,menuwindow		;
	BLT	%FT10
	CMPNE	r0,#12			;
	CMPNE	r0,#13			;
	CMPNE	r0,#16			;
	CMPNE	r0,#17			;
	CMPNE	r0,#18			;
	CMPNE	r0,#19			;
	LDREQ	r6,menu1window		;
	BEQ	%FT10
	CMP	r0,#14			;
	CMPNE	r0,#15			;
	LDREQ	r6,menu2window		;
	BNE	main_loop		;
10	MOV	r0,#0			;set tick
	MOV	r1,r6
	MOV	r2,#0			;
	ADRL	r3,currentmode		;
	LDR	r3,[r3]			;
	MOV	r4,#1			;
	SWI	Toolbox_ObjectMiscOp	;
	ADRL	r1,currentpin		;
	LDR	r0,[r1]			;
	CMP	r0,#256			;
	BGT	main_loop
	ADRL	r1,datastore		;temp storage
	MOV	r2,#128			;size
	SWI	OS_ConvertInteger2	;convert pin number to string
	MOV	r3,r0			;
	MOV	r0,#0			;
	MOV	r1,r6			;
	MOV	r2,#24			;
	SWI	Toolbox_ObjectMiscOp	;set title
	B       main_loop

;-----------------------------------------------------
menuselectionmade
	SWI	GPIO_GetBoard		;get gpiomachine
	CMP	r0,#11			;
	BLT	%FT10
	LDRLT	r6,menuwindow		;
	CMPNE	r0,#12			;
	CMPNE	r0,#13			;
	CMPNE	r0,#16			;
	CMPNE	r0,#17			;
	CMPNE	r0,#18			;
	CMPNE	r0,#19			;
	LDREQ	r6,menu1window		;
	BEQ	%FT10
	CMP	r0,#14			;
	CMPNE	r0,#15			;
	LDREQ	r6,menu2window		;
	BNE	main_loop		;
10	MOV	r0,#0			;unset tick
	MOV	r1,r6			;
	MOV	r2,#0			;
	ADRL	r3,currentmode		;
	LDR	r3,[r3]			;
	MOV	r4,#0			;
	SWI	Toolbox_ObjectMiscOp	;
	ADRL	r0,Toolboxblock		;
	LDR	r3,[r0,#selfgadget]	;get gadget selected
	MOV	r0,#0			;set tick
	MOV	r1,r6			;
	MOV	r2,#0			;
	MOV	r4,#1			;
	SWI	Toolbox_ObjectMiscOp	;
	ADRL	r2,currentmode		;
	STR	r3,[r2]			;
	ADRL	r1,currentpin		;
	LDR	r0,[r1]			;
	MOV	r5,r0			;
	SWI	GPIO_ReadMode		;get mode
	BIC	r0,r0,#7		;clear mode
	ORR	r1,r0,r3		;set new mode
	MOV	r0,r5			;
	SWI	GPIO_WriteMode		;set mode
	B       main_loop
;-----------------------------------------------------
subenable
	SWI	GPIO_GetBoard		;get gpiomachine
	CMP	r0,#14			;
	CMPNE	r0,#15			;
	MOVEQ	r3,#3			;omap4
	MOVNE	r3,#4			;omap3
	ADRL	r1,currentpin		;
	LDR	r0,[r1]			;
	MOV	r5,r0			;
	SWI	GPIO_ReadMode		;get mode
	BIC	r1,r0,#7		;clear mode
	ORR	r1,r1,r3		;set as GPIO
	ORR	r1,r1,#pullenable	;
	ORR	r1,r1,#inputenable	;
	MOV	r0,r5			;
	SWI	GPIO_WriteMode		;set mode
	ADRL	r2,currentmode		;
	STR	r3,[r2]			;
	B       main_loop

;-----------------------------------------------------
subdisable
	SWI	GPIO_GetBoard		;get gpiomachine
	CMP	r0,#14			;
	CMPNE	r0,#15			;
	MOVEQ	r3,#3			;omap4
	MOVNE	r3,#4			;omap3
	ADRL	r1,currentpin		;
	LDR	r0,[r1]			;
	MOV	r5,r0			;
	SWI	GPIO_ReadMode		;get mode
	BIC	r1,r0,#7		;clear mode
	ORR	r1,r1,r3		;set as GPIO
	BIC	r1,r1,#pullenable	;
	BIC	r1,r1,#inputenable	;
	MOV	r0,r5			;
	SWI	GPIO_WriteMode		;set mode
	ADRL	r2,currentmode		;
	MOV	r4,r3			;
	STR	r4,[r2]			;
	B       main_loop

;-----------------------------------------------------
i2cmousebutton
	LDR	r2,[r3,#selfgadget]	;get gadget clicked
	LDR	r4,[r1,#8]		;
	CMP	r4,#4			;select
	BEQ	i2ctogglepin		;
	CMP	r4,#1			;adjust
	BEQ	i2ctoggleio		;
	B       main_loop

i2ctogglepin
	MOV	r0,#1<<31		;
	ORR	r0,r0,r2		;
	B	togglepin		;

i2ctoggleio
	MOV	r0,#1<<31		;
	ORR	r0,r0,r2		;
	MOV	r2,r0			;
	SWI	GPIO_ReadOE		;
	CMP	r0,#0			;
	MOVEQ	r1,#1			;
	MOVNE	r1,#0			;
	MOV	r0,r2			;
	SWI	GPIO_WriteOE		;
	B       main_loop
;-----------------------------------------------------
mousebutton
	Push	"r1"
	SWI	GPIO_GetBoard		;get gpiomachine
	Pull	"r1"
	CMP	r0,#0			;none
	BEQ	main_loop		;get out
	LDR	r2,[r3,#selfgadget]	;get gadget clicked
	LDR	r3,icon1start		;first gadget
	LDR	r4,icon1end		;last gadget
	ADD	r4,r4,#1		;
	CMP	r2,r3
	BLT	main_loop
	CMPGE	r2,r4			;
	BGE	%FT10			;
	SUB	r2,r2,r3
	LDR	r3,table1pointer	;
	B	%FT40
10	LDR	r3,icon1end		;first gadget
	ADD	r3,r3,#1		;
	LDR	r4,icon2end		;last gadget
	ADD	r4,r4,#1		;
	CMP	r2,r3
	CMPGE	r2,r4			;
	BGE	%FT20			;
	SUB	r2,r2,r3
	LDR	r3,table2pointer	;
	B	%FT40
20	LDR	r3,icon2end		;first gadget
	ADD	r3,r3,#1		;
	LDR	r4,icon3end		;last gadget
	ADD	r4,r4,#1		;
	CMP	r2,r3
	CMPGE	r2,r4			;
	BGE	%FT30			;
	SUB	r2,r2,r3
	LDR	r3,table3pointer	;
	B	%FT40
30	LDR	r3,icon3end		;first gadget
	ADD	r3,r3,#1		;
	LDR	r4,icon4end		;last gadget
	ADD	r4,r4,#1		;
	CMP	r2,r3
	CMPGE	r2,r4			;
	BGE	main_loop		;
	SUB	r2,r2,r3
	LDR	r3,table4pointer	;

40	CMP	r0,#11			;pi b r1
	CMPNE	r0,#12			;pi b r2
	CMPNE	r0,#13			;pi a r2
	CMPNE	r0,#16			;pi b r2 512
	CMPNE	r0,#17			;pi b+
	CMPNE	r0,#18			;pi com
	CMPNE	r0,#19			;pi 2
	MOVEQ	r5,#1			;its a pi
	MOVNE	r5,#0			;its omap3
	CMP	r0,#14			;pandaboard
	CMPNE	r0,#15			;pandaboard
	MOVEQ	r5,#2			;its omap4
	LDR	r4,[r1,#8]		;get button type
	CMP	r4,#4			;select
	BEQ	toggleupdown		;
	CMP	r4,#2			;menu
	BEQ	modemenu		;
	CMP	r4,#1			;adjust
	BEQ	toggleio		;
	B       main_loop
;-----------------------------------------------------
;r2=pin offset into table
;r3=pin table
toggleupdown
	LDRB	r0,[r3,r2]		;get gpio
	CMP	r5,#1			;
	BEQ	pitoggleud		;pi
	SWI	GPIO_ReadMode		;get mode
	AND	r4,r0,#7		;just mode
	CMP	r5,#0			;omap3
	CMPEQ	r4,#4			;is it GPIO
	BEQ	%FT10			;
	CMP	r5,#2			;omap4
	CMPEQ	r4,#3			;is it GPIO
	BNE	main_loop		;
10	LDRB	r0,[r3,r2]		;get gpio
	SWI	GPIO_ReadOE		;get OE
	CMP	r0,#0			;output ?
	LDRB	r0,[r3,r2]		;get gpio
	BEQ	togglepin		;then toggle it
	SWI	GPIO_ReadMode		;get mode
	MOV	r1,r0			;
	TST	r0,#pullenable		;check existing
	ORREQ	r1,r1,#pullenable	;set bit
	TST	r0,#pulltype		;check existing
	ORREQ	r1,r1,#pulltype		;set bit
	BICNE	r1,r1,#pulltype		;unset bit
	LDRB	r0,[r3,r2]		;get gpio
	SWI	GPIO_WriteMode		;set mode
	B       main_loop

togglepin
	MOV	r2,r0			;
	SWI	GPIO_ReadData		;
	CMP	r0,#0			;
	MOVEQ	r1,#1			;
	MOVNE	r1,#0			;
	MOV	r0,r2			;
	SWI	GPIO_WriteData		;
	B       main_loop


toggleio
	LDRB	r0,[r3,r2]		;get gpio
	SWI	GPIO_ReadMode		;get mode
	AND	r0,r0,#7		;just mode
	CMP	r5,#0			;
	CMPEQ	r0,#4			;is it OMAP3 GPIO
	BEQ	%FT60			;
	CMP	r5,#2			;
	CMPEQ	r0,#3			;is it OMAP4 GPIO
	BEQ	%FT60			;
	CMP	r5,#1			;
	CMPEQ	r0,#1			;is it pi GPIO
	BEQ	%FT60			;
	CMP	r5,#1			;
	CMPEQ	r0,#0			;is it pi GPIO
	BEQ	%FT60			;
	B	main_loop		;
60	LDRB	r0,[r3,r2]		;get gpio
	SWI	GPIO_ReadOE		;
	CMP	r0,#0			;in or out ?
	MOVEQ	r1,#1			;swap
	MOVNE	r1,#0			;
	LDRB	r0,[r3,r2]		;get gpio
	SWI	GPIO_WriteOE		;set
	B       main_loop

modemenu
	CMP	r5,#0			;
	LDREQ	r6,menuwindow		;
	LDRNE	r6,menu1window		;
	CMP	r5,#2			;
	LDREQ	r6,menu2window		;
	LDRB	r5,[r3,r2]		;get gpio
	ADRL	r1,currentpin		;
	STR	r5,[r1]			;save to in use store
	MOV	r0,r5			;
	SWI	GPIO_ReadMode		;get mode
	AND	r0,r0,#7		;just mode
	ADRL	r1,currentmode		;
	STR	r0,[r1]			;save to in use store
	MOV	r0,#1			;as menu
	MOV	r1,r6			;get handle
	MOV	r2,#4			;at pointer
	MOV	r3,#0			;
	LDR	r4,mainwindow		;
	SWI	Toolbox_ShowObject	;
	MOV	r3,#0			;
10	MOV	r0,#0			;unset tick
	MOV	r1,r6			;
	MOV	r2,#0			;
	MOV	r4,#0			;
	SWI	Toolbox_ObjectMiscOp	;
	ADD	r3,r3,#1		;
	CMP	r3,#7			;
	BLE	%BT10			;
	B       main_loop

pitoggleud
	SWI	GPIO_ReadMode		;get mode
	AND	r1,r0,#7		;just mode
	CMP	r1,#2			;is it pi GPIO in/out
	BGE	main_loop			;
	CMP	r1,#1			;output ?
	LDREQB	r0,[r3,r2]		;get gpio
	BEQ	togglepin		;then toggle it
	TST	r0,#pullenable		;check existing
	ORREQ	r1,r1,#pullenable	;set bit
	TST	r0,#pulltype		;check existing
	ORREQ	r1,r1,#pulltype		;set bit
	BICNE	r1,r1,#pulltype		;unset bit
	LDRB	r0,[r3,r2]		;get gpio
	SWI	GPIO_WriteMode		;set mode
	B       main_loop

;-----------------------------------------------------
updatedisplay
	Push	"lr"
	LDR	r0,mainflag		;check if any open
	CMP	r0,#0			;
	Pull	"pc",EQ			;
	SWI	OS_ReadMonotonicTime	;
	LDR	r1,Count		;
	CMP	r0,r1			;
	Pull	"pc",LT
	BL	do_mimic
	SWI	OS_ReadMonotonicTime	;
        ADD     r0,r0,#5		;Add
        STR     r0,Count		;Save
	Pull	"pc"

do_mimic
	Push	"lr"
	LDR	r0,mainflag		;check which open
	TST	r0,#mainwindowflag	;
	BLNE	maindisp		;
	LDR	r0,mainflag		;check which open
	TST	r0,#i2cwindowflag	;
	BLNE	i2cdisp			;
	Pull	"pc"

maindisp
	Push	"lr"
	SWI	GPIO_GetBoard		;get gpiomachine
	CMP	r0,#0			;none
	Pull	"pc",EQ			;get out
;get and display table
	LDR	r7,table1pointer	;get table
	LDRB	r3,[r7]			;
	CMP	r3,#&FF
	LDRNE	r3,icon1start		;first gadget
	LDRNE	r5,icon1end		;last gadget
	BLNE	getgpio
;get and display table
	LDR	r7,table2pointer	;get table
	LDRB	r3,[r7]			;
	CMP	r3,#&FF
	LDRNE	r3,icon1end		;first gadget
	ADDNE	r3,r3,#1		;
	LDRNE	r5,icon2end		;last gadget
	BLNE	getgpio
;get and display table
	LDR	r7,table3pointer	;get table
	LDRB	r3,[r7]			;
	CMP	r3,#&FF
	LDRNE	r3,icon2end		;first gadget
	ADDNE	r3,r3,#1		;
	LDRNE	r5,icon3end		;last gadget
	BLNE	getgpio
;get and display table
	LDR	r7,table4pointer	;get table
	LDRB	r3,[r7]			;
	CMP	r3,#&FF
	LDRNE	r3,icon3end		;first gadget
	ADDNE	r3,r3,#1		;
	LDRNE	r5,icon4end		;last gadget
	BLNE	getgpio
	Pull	"pc"

i2cdisp
	Push	"lr"
	MOV	r6,r0			;keep board
	SWI	GPIO_I2CInfo		;
	MOV	r2,r0			;lowest
	MOV	r0,r6			;get back board
	MOV	r3,#0			;gadget
	SUB	r5,r1,r2		;last gadget
	MOV	r7,#-2			;its i2c
	BL	getgpio
	Pull	"pc"
;-----------------------------------------------------


	END
