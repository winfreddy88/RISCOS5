;
; Copyright (c) 2013, Tank Stage Lighting
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of the copyright holder nor the names of their
;       contributors may be used to endorse or promote products derived from
;       this software without specific prior written permission.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
; DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;

;	AREA	|Subs|, CODE, READONLY

doit
;r0=gpio
;r3=gadget
;r7=-2 if i2c
;r9=board
	Push	"lr"
	MOV	r5,r0			;save gpio
	SWI	GPIO_ReadData		;get state
	CMP	r0,#-1			;
	Pull	"pc",EQ			;
	MOV	r6,r0			;keep output state
	MOV	r0,r5			;gpio
	SWI	GPIO_ReadOE		;
	MOV	r1,r0			;keep OE state
	CMP	r0,#0			;OE state
	MOVEQ	r4,#0			;green button
	MOVNE	r4,#1			;red button
	MOV	r0,r5			;
	SWI	GPIO_ReadMode		;get pin mode
	AND	r0,r0,#7		;just mode
	CMP	r9,#11			;
	CMPNE	r9,#12			;
	BEQ	%FT50			;skip safe if pi
	CMP	r0,#7			;safe mode
	MOVEQ	r4,#3			;safe button
50
	Push	"r0-r5"			;
	CMP	r1,#0			;in or out
	MOVEQ	r5,#10<<24		;colour border
	MOVNE	r5,#11<<24		;colour border
	CMP	r9,#11			;pi
	CMPNE	r9,#12			;
	CMPNE	r9,#13			;
	CMPNE	r9,#16			;
	CMPNE	r9,#17			;
	CMPNE	r9,#18			;
	CMPNE	r9,#19			;
	BNE	%FT10			;
	CMP	r0,#0			;
	CMPNE	r0,#1			;
	B	%FT20
10	CMP	r9,#14			;OMAP4
	CMPNE	r9,#15			;
	BNE	%FT30			;
	CMP	r0,#3			;
	B	%FT20
30	CMP	r0,#4			;OMAP3
20	MOVNE	r5,#7<<24		;ordinary border
	MOV	r0,#0			;setup call
	CMP	r7,#-2			;
	LDRNE	r1,mainwindow		;
	LDREQ	r1,i2cwindow
	LDR	r2,buttonsetflag	;
	MOV	r4,#&F<<24		;
	SWI	Toolbox_ObjectMiscOp	;
	Pull	"r0-r5"			;
	MOV	r0,#0			;flags
	CMP	r7,#-2			;
	LDRNE	r1,mainwindow		;
	LDREQ	r1,i2cwindow
	LDR	r2,setbutton		;set state
	ADRL	r5,icontable		;
	CMP	r6,#1			;
	CMPNE	r4,#3			;
	MOVNE	r4,#2			;
	MOV	r4,r4,LSL #2		;
	LDR	r4,[r5,r4]		;
	SWI	Toolbox_ObjectMiscOp	;
	Pull	"pc"

buttonsetflag	DCD	961
icontable
	DCD	on
	DCD	inputon
	DCD	off
	DCD	safe

;-----------------------------------------------------
getgpio
;r1=i2chighest
;r2=i2clowest
;r3=gadget
;r5=last gadget
;r7=pin table or -2 if i2c
	Push	"lr"
	SWI	GPIO_GetBoard		;get gpiomachine
	MOV	r9,r0
	MOV	r8,r5
	CMP	r7,#-2			;
	BEQ	%FT30
10	LDRB	r0,[r7],#1		;get GPIO pin no.
	CMP	r0,#&FF			;
	Pull	"pc",EQ
	BL	doit
	CMP	r0,#-1			;error
	Pull	"pc",EQ
	ADD	r3,r3,#1		;inc gadget counter
	CMP	r3,r8			;last one ?
	BLE	%BT10
	Pull	"pc"

30	MOV	r0,#1<<31		;i2c flag
	ORR	r0,r0,r2		;add first i2c pin
	Push	"r2"			;
	BL	doit			;
	Pull	"r2"			;
	CMP	r0,#-1			;error
	Pull	"pc",EQ
	ADD	r2,r2,#1		;inc gpio pin
	ADD	r3,r3,#1		;inc gadget counter
	CMP	r3,r8			;last one ?
	Pull	"pc",GT
	B	%BT30
;-----------------------------------------------------


	END


