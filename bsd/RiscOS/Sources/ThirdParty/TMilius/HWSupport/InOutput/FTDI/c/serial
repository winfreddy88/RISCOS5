/** @file

   The functions will set the according RISC OS serial port options
   for the given port of an FTDI device if this possible.
   They will convert RISC OS IOCTL values to FTDI pendants
   and check whether the operation is allowed and if it is
   allowed it will perfom the setting.

  */
/* Created 28.04.2010 T. Milius
   Changed 04.08.2010 T. Milius */
/* Copyright (c) 2010 by Thomas Milius Stade, Germany
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of Thomas Milius Stade, Germany nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY Thomas Milius Stade, Germany ``AS IS'' AND ANY
* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL Thomas Milius Stade, Germany BE LIABLE FOR ANY
* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
/* ANSI-C */

/* !!!!!!!!!! libraries !!!!!!!!!! */
/* ---------- ANSI-C ---------- */

/* ------------ RISC OS ------------ */

/* ------------ Own ------------ */
#include "error.h"
#include "configuration.h"
#include "serial.h"

/* !!!!!!!!!!! definitions !!!!!!!!!! */

/* !!!!!!!!!! data structures !!!!!!!!!! */

/* !!!!!!!!!! support functions !!!!!!!!!! */

/* !!!!!!!!!! functions !!!!!!!!!! */
_kernel_oserror* set_baudrate(ftdi_environment *ftdi,
                              unsigned long baudrate,
                              unsigned long port_number)
{
unsigned int i;

/* Assume ftdi and port number and chip mode are valid */
/* Check allowance */
i=0;
while(i < ftdi->allowed_configurations.serial[port_number].number_of_baudrates) {
  if (baudrate == ftdi->allowed_configurations.serial[port_number].baudrate[i]) {
    /* Perform setting */
    if (!ftdi_usb_set_baudrate(ftdi,
                               baudrate,
                               (unsigned char) port_number)) {
      return generate_error(FTDI_ERROR_BAUDRATE);
      }
    else {
      return NULL;
      }
    }
  i++;
  }
return generate_error(FTDI_ERROR_INVALID_BAUDRATE);
}

_kernel_oserror* set_data_format(ftdi_environment *ftdi,
                                 unsigned long data_bits,
                                 unsigned long stopbit_type,
                                 unsigned long parity_type,
                                 unsigned long port_number)
{

/* Assume ftdi and port number and chip mode are valid */
/* convert RISC OS IOCTL to FTDI */
switch(stopbit_type) {
  /* ??? No pendant for 0 stopbits at FTDI ??? */
  /* ??? Prüfen gegen IOCTL Doku */
  case 1: {
    stopbit_type=FTDI_STOPBITS_1;
    }
  break;
  case 2: {
    stopbit_type=FTDI_STOPBITS_15;
    }
  break;
  case 3: {
    stopbit_type=FTDI_STOPBITS_2;
    }
  break;
  default: {
    return generate_error(FTDI_ERROR_INVALID_STOPBITS);
    }
  }
switch(parity_type) {
  /* ??? Prüfen gegn IOCTL Doku */
  case 0: {
    parity_type=FTDI_PARITY_NONE;
    }
  break;
  case 1: {
    parity_type=FTDI_PARITY_EVEN;
    }
  break;
  case 2: {
    parity_type=FTDI_PARITY_ODD;
    }
  break;
  /* Mark and Space are undefined under RISC OS */
  default: {
    return generate_error(FTDI_ERROR_INVALID_PARITY);
    }
  }
/* Check allowance */
if ((get_data_bits_permission(data_bits)&ftdi->allowed_configurations.serial[port_number].data_bits) == 0) {
  return generate_error(FTDI_ERROR_INVALID_DATABITS);
  }
if ((get_stopbits_permission(stopbit_type)&ftdi->allowed_configurations.serial[port_number].stopbits) == 0) {
  return generate_error(FTDI_ERROR_INVALID_STOPBITS);
  }
if ((get_parity_permission(parity_type)&ftdi->allowed_configurations.serial[port_number].parity) == 0) {
  return generate_error(FTDI_ERROR_INVALID_PARITY);
  }
if (!ftdi_set_data_property(ftdi,
                            (unsigned char) data_bits,
                            (unsigned char) stopbit_type,
                            (unsigned char) parity_type,
                            false,
                            (unsigned char) port_number)) {
  return generate_error(FTDI_ERROR_DATA);
  }
else return NULL;
}

_kernel_oserror* set_flowcontrol(ftdi_environment *ftdi,
                                 unsigned long flowcontrol_type,
                                 unsigned long port_number)
{

/* Assume ftdi and port number and chip mode are valid */
/* Convert RISC OS IOCTL to FTDI */
switch(flowcontrol_type) {
  case 0: {
    flowcontrol_type=FTDI_FLOWCONTROL_NONE;
    }
  break;
  case 1: {
    flowcontrol_type=FTDI_FLOWCONTROL_RTS_CTS;
    }
  break;
  case 2: {
    flowcontrol_type=FTDI_FLOWCONTROL_DTR_DSR;
    }
  break;
  case 3: {
    flowcontrol_type=FTDI_FLOWCONTROL_XON_XOFF;
    }
  break;
  default: {
    return generate_error(FTDI_ERROR_INVALID_FLOWCONTROL);
    }
  }
/* Check allowance */
if ((get_flowcontrol_permission(flowcontrol_type)&ftdi->allowed_configurations.serial[port_number].flowcontrol) == 0) {
  return generate_error(FTDI_ERROR_INVALID_FLOWCONTROL);
  }
if (flowcontrol_type == FTDI_FLOWCONTROL_DTR_DSR) {
  flowcontrol_type|=FTDI_FLOWCONTROL_RTS_CTS;
  }
if (!ftdi_usb_set_flow_control(ftdi,
                               flowcontrol_type,
                               ftdi->allowed_configurations.serial[port_number].flow_xon_char,
                               ftdi->allowed_configurations.serial[port_number].flow_xoff_char,
                               (unsigned char) port_number)) {
  return generate_error(FTDI_ERROR_FLOWCONTROL);
  }
else return NULL;
}

_kernel_oserror* set_event_char(ftdi_environment *ftdi,
                                unsigned char event_char,
                                unsigned long port_number)
{

/* Assume ftdi and port number and chip mode are valid */
/* Perform setting */
if (!ftdi_usb_set_event_char(ftdi,
                             event_char,
                             true,
                             (unsigned char) port_number)) {
  return generate_error(FTDI_ERROR_EVENT_CHAR);
  }
else return NULL;
}

_kernel_oserror* set_error_char(ftdi_environment *ftdi,
                                unsigned char error_char,
                                unsigned long port_number)
{

/* Assume ftdi and port number and chip mode are valid */
/* Perform setting */
if (!ftdi_usb_set_error_char(ftdi,
                             error_char,
                             true,
                             (unsigned char) port_number)) {
  return generate_error(FTDI_ERROR_ERROR_CHAR);
  }
else return NULL;
}
