/** @file

  Contains basic functions to read FTDI driver configuration files
  and conversion function of FTDI number to permisson Bitmaps.

  */
/* Created 28.04.2010 T. Milius
   Changed 03.08.2010 T. Milius */
/* Copyright (c) 2010 by Thomas Milius Stade, Germany
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of Thomas Milius Stade, Germany nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY Thomas Milius Stade, Germany ``AS IS'' AND ANY
* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL Thomas Milius Stade, Germany BE LIABLE FOR ANY
* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
/* RISC OS */

/* !!!!!!!!!! libraries !!!!!!!!!! */
/* ---------- ANSI-C ---------- */
#include <ctype.h>
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>

/* ------------ Own ------------ */
#include "configuration.h"
#include "ftdi.h"
#ifdef DEBUG
#include "debug.h"
#endif

/* !!!!!!!!!!! definitions !!!!!!!!!! */
#define MAX_CONFIG_FILE_LINE_SIZE 300

/* !!!!!!!!!! data structures !!!!!!!!!! */

/* !!!!!!!!!! support functions !!!!!!!!!! */

/* !!!!!!!!!! functions !!!!!!!!!! */
/* ---------- Configuration handling ---------- */
char *get_file_line(FILE *config_file)
{
static char file_line[MAX_CONFIG_FILE_LINE_SIZE + 1];
int line_length;

file_line[0]='\0';
if (fgets(file_line, MAX_CONFIG_FILE_LINE_SIZE, config_file)) {
  /* Remove nl is present */
  line_length=strlen(file_line);
  line_length--;
  if (line_length > 0) {
    /* Only works under Unix/RISC OS */
    if (file_line[line_length] == '\n') {
      file_line[line_length]='\0';
      }
    }
#ifdef DEBUG
  debug_writef(DEBUG_LEVEL_CONFIGURATION,
               "Config Line %s\n",
               file_line);
#endif
  return file_line;
  }
else return NULL;
}

int determine_parameter_value_number(char **value)
{
int parameter_value;

if (!(*value)) return 0;
while(isspace(**value)) (*value)++;
parameter_value=atoi(*value);
while((**value != '\0') && (!isspace(**value))) (*value)++;
if (**value == '\0') *value=NULL;
#ifdef DEBUG
debug_writef(DEBUG_LEVEL_CONFIGURATION,
             "Parameter Number value %d\n",
             parameter_value);
#endif
return parameter_value;
}

char *determine_config_parameter(char **file_line,
                                 int *port_number)
{
static char parameter[60];
char *start_position;
char *end_position;

*port_number=-1;
start_position=*file_line;
*file_line=NULL;
while(isspace(*start_position)) start_position++;
if (*start_position == '\0') return NULL;
if (*start_position == '|') {
  /* Comment */
  return NULL;
  }
/* Determine parameter keyword. */
if ((end_position=strchr(start_position, ':')) == NULL) return NULL;
strncpy(parameter, start_position, end_position - start_position);
parameter[end_position - start_position]='\0';
/* Determine possible port number */
start_position=&parameter[strlen(parameter) - 1];
while((start_position >= parameter) && (isdigit(*start_position))) {
  /* store every value even it is not the final one. */
  *port_number=atoi(start_position);
  start_position--;
  }
start_position++;
*start_position='\0';
/* Try to position on first value of pararmeter */
end_position++;
while(isspace(*end_position)) end_position++;
if (*end_position != '\0') *file_line=end_position;
/* convert all chars to lower */
start_position=parameter;
while(*start_position != '\0') {
  *start_position=tolower(*start_position);
  start_position++;
  }
/* Return determined parameter */
#ifdef DEBUG
debug_writef(DEBUG_LEVEL_CONFIGURATION,
             "Parameter %s %d\n",
             parameter,
             *port_number);
#endif
return parameter;
}

/* ---------- Convert FTDI values to permission pendants ---------- */
unsigned long get_data_bits_permission(unsigned long parity_type)
{

switch(parity_type) {
  case 5: {
    return 0x00000001;
    }
  break;
  case 6: {
    return 0x00000002;
    }
  break;
  case 7: {
    return 0x00000004;
    }
  break;
  case 8: {
    return 0x00000008;
    }
  break;
  default: {
    return 0;
    }
  }
}

unsigned long get_parity_permission(unsigned long parity_type)
{

switch(parity_type) {
  case FTDI_PARITY_NONE: {
    return 0x00000001;
    }
  break;
  case FTDI_PARITY_ODD: {
    return 0x00000002;
    }
  break;
  case FTDI_PARITY_EVEN: {
    return 0x00000004;
    }
  break;
  case FTDI_PARITY_MARK: {
    return 0x00000008;
    }
  break;
  case FTDI_PARITY_SPACE: {
    return 0x00000008;
    }
  break;
  default: {
    return 0;
    }
  }
}

unsigned long get_stopbits_permission(unsigned long stopbits)
{

switch(stopbits) {
  case FTDI_STOPBITS_1: {
    return 0x00000001;
    }
  break;
  case FTDI_STOPBITS_15: {
    return 0x00000002;
    }
  break;
  case FTDI_STOPBITS_2: {
    return 0x00000004;
    }
  break;
  default: {
    return 0;
    }
  }
}

unsigned long get_flowcontrol_permission(unsigned long flowcontrol_type)
{

switch(flowcontrol_type) {
  case FTDI_FLOWCONTROL_NONE: {
    return 0x00000001;
    }
  break;
  case FTDI_FLOWCONTROL_RTS_CTS: {
    return 0x00000002;
    }
  break;
  case FTDI_FLOWCONTROL_DTR_DSR: {
    return 0x00000004;
    }
  break;
  case FTDI_FLOWCONTROL_XON_XOFF: {
    return 0x00000008;
    }
  break;
  default: {
    return 0;
    }
  }
}
