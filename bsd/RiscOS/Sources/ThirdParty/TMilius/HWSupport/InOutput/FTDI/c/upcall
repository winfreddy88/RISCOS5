/** @file

...

  */
/* Created 02.06.2010 T. Milius
   Changed 04.08.2010 T. Milius */
/* Copyright (c) 2010 by Thomas Milius Stade, Germany
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of Thomas Milius Stade, Germany nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY Thomas Milius Stade, Germany ``AS IS'' AND ANY
* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL Thomas Milius Stade, Germany BE LIABLE FOR ANY
* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
/* RISC OS */

/* !!!!!!!!!! libraries !!!!!!!!!! */
/* ---------- ANSI-C ---------- */
#include <stdlib.h>

/* ------------ RISC OS ------------ */
#include "kernel.h"

/* ------------ Own ------------ */
#include "upcall.h"
#ifdef DEBUG
#include "debug.h"
#endif

/* !!!!!!!!!!! definitions !!!!!!!!!! */

/* !!!!!!!!!! data structures !!!!!!!!!! */

/* !!!!!!!!!! support functions !!!!!!!!!! */

/* !!!!!!!!!! functions !!!!!!!!!! */
int upcall_compare_buffer_handle(struct upcall_translation_element_structure *translation_element1,
                                 struct upcall_translation_element_structure *translation_element2)
{

return translation_element1->buffer_handle - translation_element2->buffer_handle;
}

struct upcall_translation_element_structure *upcall_find_translation(struct upcall_translation_structure *translation,
                                                                     unsigned int buffer_handle)
{
struct upcall_translation_element_structure compare_element;

#ifdef DEBUG
debug_writef(DEBUG_LEVEL_TRANSMISSION,
             "Upcall translation find Buffer %x\n",
             buffer_handle);
#endif
if (translation->no_of_elements == 0) return NULL;
/* Required to use the same function for searching and sorting. */
compare_element.buffer_handle=buffer_handle;
return (struct upcall_translation_element_structure *)bsearch((void *) &compare_element,
                                                              translation->element,
                                                              translation->no_of_elements,
                                                              sizeof(struct upcall_translation_element_structure),
                                                              (int (*)(const void *, const void *)) upcall_compare_buffer_handle);
}

void upcall_translation_remove(struct upcall_translation_structure *translation,
                               unsigned int buffer_handle)
{
int irq_state;
struct upcall_translation_element_structure *element;

#ifdef DEBUG
debug_writef(DEBUG_LEVEL_TRANSMISSION,
             "Upcall translation remove Buffer %x\n",
             buffer_handle);
#endif
if ((irq_state=_kernel_irqs_disabled()) == 0) _kernel_irqs_off;
if ((element=upcall_find_translation(translation,
                                     buffer_handle)) != NULL) {
#ifdef DEBUG
  debug_writef(DEBUG_LEVEL_TRANSMISSION,
               "Element found is Buffer %x %d RISC OS FTDI %x\n",
               element->buffer_handle,
               element->io_info,
               element->risc_os_ftdi);
#endif
  translation->no_of_elements--;
  if (translation->no_of_elements > 0) {
    *element=translation->element[translation->no_of_elements];
    qsort(translation->element,
          translation->no_of_elements,
          sizeof(struct upcall_translation_element_structure),
          (int (*)(const void *, const void *)) upcall_compare_buffer_handle);
    }
  }
if (irq_state == 0) _kernel_irqs_on;
}

_kernel_oserror *upcall_translation_add(struct upcall_translation_structure *translation,
                                        unsigned int buffer_handle,
                                        int io_info,
                                        struct risc_os_ftdi_structure *risc_os_ftdi)
{
int irq_state;
struct upcall_translation_element_structure *new_elements;

#ifdef DEBUG
debug_writef(DEBUG_LEVEL_TRANSMISSION,
             "Upcall translation add Buffer %x %d RISC OS FTDI %x\n",
             buffer_handle,
             io_info,
             risc_os_ftdi);
#endif
if ((irq_state=_kernel_irqs_disabled()) == 0) _kernel_irqs_off;
if (translation->no_of_elements >= translation->max_no_of_elements) {
  if ((new_elements=realloc(translation->element,
                            sizeof(struct upcall_translation_element_structure)*(translation->max_no_of_elements + FTDI_UPCALL_TRANSLATION_ELEMENTS_TO_EXPAND))) == NULL) {
    if (irq_state == 0) _kernel_irqs_on;
    return generate_error(FTDI_ERROR_NO_MEMORY);
    }
  translation->element=new_elements;
  translation->max_no_of_elements+=FTDI_UPCALL_TRANSLATION_ELEMENTS_TO_EXPAND;
  }
translation->element[translation->no_of_elements].buffer_handle=buffer_handle;
translation->element[translation->no_of_elements].io_info=io_info;
translation->element[translation->no_of_elements].risc_os_ftdi=risc_os_ftdi;
translation->no_of_elements++;
/* Put the new element at the right place */
qsort(translation->element,
      translation->no_of_elements,
      sizeof(struct upcall_translation_element_structure),
      (int (*)(const void *, const void *)) upcall_compare_buffer_handle);
if (irq_state == 0) _kernel_irqs_on;
return NULL;
}

void upcall_translation_initialize(struct upcall_translation_structure *translation)
{

#ifdef DEBUG
debug_write(DEBUG_LEVEL_TRANSMISSION,
            "Upcall translation initialize\n");
#endif
translation->no_of_elements=0;
translation->max_no_of_elements=0;
translation->element=NULL;
}

void upcall_translation_release(struct upcall_translation_structure *translation)
{

#ifdef DEBUG
debug_write(DEBUG_LEVEL_TRANSMISSION,
            "Upcall translation release\n");
#endif
if (translation->element) {
  free(translation->element);
  }
upcall_translation_initialize(translation);
}
