/** @file

  Contains errors of FTDI driver and declaration of error function.

  */
/* Created 28.04.2010 T. Milius
   Changed 04.08.2010 T. Milius */
/* Copyright (c) 2010 by Thomas Milius Stade, Germany
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of Thomas Milius Stade, Germany nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY Thomas Milius Stade, Germany ``AS IS'' AND ANY
* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL Thomas Milius Stade, Germany BE LIABLE FOR ANY
* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

#ifndef error_h
#define error_h

/* !!!!!!!!!! libraries !!!!!!!!!! */
/* ------------ RISC OS ------------ */
#include "kernel.h"

/* !!!!!!!!!!! definitions !!!!!!!!!! */
/** @name Error codes used by the driver. */
/* Error base allocated from ROOL */
/*@{*/
#define FTDI_ERROR_BASE 0x0081EC00
#define FTDI_ERROR_NO_MEMORY (FTDI_ERROR_BASE + 0)
#define FTDI_ERROR_NO_CALLBACKS (FTDI_ERROR_BASE + 1)
#define FTDI_ERROR_USB_TRANSFER_ABORTED (FTDI_ERROR_BASE + 2)
#define FTDI_ERROR_FETCH_PROBLEMS (FTDI_ERROR_BASE + 3)
#define FTDI_ERROR_INVALID_BAUDRATE (FTDI_ERROR_BASE + 4)
#define FTDI_ERROR_BAUDRATE (FTDI_ERROR_BASE + 5)
#define FTDI_ERROR_INVALID_STOPBITS (FTDI_ERROR_BASE + 6)
#define FTDI_ERROR_INVALID_PARITY (FTDI_ERROR_BASE + 7)
#define FTDI_ERROR_INVALID_DATABITS (FTDI_ERROR_BASE + 8)
#define FTDI_ERROR_DATA (FTDI_ERROR_BASE + 9)
#define FTDI_ERROR_INVALID_FLOWCONTROL (FTDI_ERROR_BASE + 10)
#define FTDI_ERROR_FLOWCONTROL (FTDI_ERROR_BASE + 11)
#define FTDI_ERROR_EVENT_CHAR (FTDI_ERROR_BASE + 12)
#define FTDI_ERROR_ERROR_CHAR (FTDI_ERROR_BASE + 13)
#define FTDI_ERROR_IOCTL_BLOCK (FTDI_ERROR_BASE + 14)
#define FTDI_ERROR_PURGE_BUFFERS (FTDI_ERROR_BASE + 15)
#define FTDI_ERROR_READ_PINS (FTDI_ERROR_BASE + 16)
#define FTDI_ERROR_SET_PINS (FTDI_ERROR_BASE + 17)
#define FTDI_ERROR_IOCTL_INVALID_OP (FTDI_ERROR_BASE + 18)
#define FTDI_ERROR_UNSUPPORTED_MODE (FTDI_ERROR_BASE + 19)
#define FTDI_ERROR_FTDI_INIT (FTDI_ERROR_BASE + 20)
#define FTDI_ERROR_WRITE_CHOICES (FTDI_ERROR_BASE + 21)
#define FTDI_ERROR_NO_DEVICE (FTDI_ERROR_BASE + 22)
#define FTDI_ERROR_FTDI_RESET (FTDI_ERROR_BASE + 23)
#define FTDI_ERROR_READ_MODEM_STATUS (FTDI_ERROR_BASE + 24)
#define FTDI_ERROR_GET_LATENCY_TIMER (FTDI_ERROR_BASE + 25)
#define FTDI_ERROR_SET_LATENCY_TIMER (FTDI_ERROR_BASE + 26)
#define FTDI_ERROR_EEPROM_READ (FTDI_ERROR_BASE + 27)
#define FTDI_ERROR_EEPROM_RIGHTS (FTDI_ERROR_BASE + 28)
#define FTDI_ERROR_EEPROM_WRITE (FTDI_ERROR_BASE + 29)
#define FTDI_ERROR_EEPROM_ERASE (FTDI_ERROR_BASE + 30)
#define FTDI_ERROR_DRIVER_WRONG_PARAMS (FTDI_ERROR_BASE + 31)
#define FTDI_ERROR_DRIVER_INVALID_COMMAND (FTDI_ERROR_BASE + 32)
#define FTDI_ERROR_NO_CLAIM_CALLBACKS (FTDI_ERROR_BASE + 33)
#define FTDI_ERROR_CLAIM_DOUBLED (FTDI_ERROR_BASE + 34)
/*@}*/

/* !!!!!!!!!! functions !!!!!!!!!! */
/** Called at driver start to calim required resources */
extern _kernel_oserror *initialize_error(void);

/** Called at driver termination to free used resources */
extern _kernel_oserror *close_error(void);

/** Generates a driver specific error for a given error number */
extern _kernel_oserror *generate_error(int error_number);

#endif
