/** @file

  Declares basic FTDI operations. USB control codes of the operations
  have been extracted from FTDI library written by Intra2net AG for LINUX
  and from FTDI_SIO.H

  */
/* Created 05.02.2008 T. Milius
   Changed 10.03.2010 T. Milius */
/* Copyright (c) 2008-2010 by Thomas Milius Stade, Germany
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of Thomas Milius Stade, Germany nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY Thomas Milius Stade, Germany ``AS IS'' AND ANY
* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL Thomas Milius Stade, Germany BE LIABLE FOR ANY
* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
/* RISC OS */

#ifndef ftdi_h
#define ftdi_h

/* !!!!!!!!!! libraries !!!!!!!!!! */
/* ---------- ANSI-C ---------- */
#include <stdbool.h>

/* !!!!!!!!!!! definitions !!!!!!!!!! */
/** @name FTDI chip types */
/*@{*/
#define FTDI_CHIP_TYPE_UNKNOWN -1
#define FTDI_CHIP_TYPE_AM      0
#define FTDI_CHIP_TYPE_BM      1
#define FTDI_CHIP_TYPE_2232C   2
/*@}*/

#define FTDI_MAX_PORTS 2
#define FTDI_MAX_BAURATES 64

/** @name FTDI ports.

    They are always told in the low byte of the index word if necassary. */
/*@{*/
#define FTDI_PORT_DEFAULT  0
#define FTDI_PORT_SIOA     1
#define FTDI_PORT_SIOB     2
#define FTDI_PORT_PARALLEL 3
/*@}*/

/** @name Kind of parity format */
/*@{*/
#define FTDI_PARITY_NONE  0
#define FTDI_PARITY_ODD   1
#define FTDI_PARITY_EVEN  2
#define FTDI_PARITY_MARK  3
#define FTDI_PARITY_SPACE 4
/*@}*/

/** @name Kind of stopbit format */
/*@{*/
#define FTDI_STOPBITS_1  0
#define FTDI_STOPBITS_15 1
#define FTDI_STOPBITS_2  2
/*@}*/

/** @name Kind of flowcontrol.

    May be activated parallel in accordance to FTDI_SIO.h
    by the setting the according Bits. */
/*@{*/
#define FTDI_FLOWCONTROL_NONE     0
#define FTDI_FLOWCONTROL_RTS_CTS  1
#define FTDI_FLOWCONTROL_DTR_DSR  2
#define FTDI_FLOWCONTROL_XON_XOFF 4
/*@}*/

/** @name FTDI buffers */
/*@{*/
#define FTDI_BUFFER_RX 1
#define FTDI_BUFFER_TX 2
/*@}*/

/** @name FTDI output pins */
/*@{*/
#define FTDI_PINS_DTR 0x01
#define FTDI_PINS_RTS 0x02
/*@}*/

/** @name FTDI status bits */
/*@{*/
#define FTDI_STATUS_CTS  0x10
#define FTDI_STATUS_DSR  0x20
#define FTDI_STATUS_RI   0x40
/* Line detection */
#define FTDI_STATUS_RLSD 0x80
/*@}*/

/** @name FTDI Bitmodes */
/*@{*/
#define FTDI_BITMODE_BITBANG_ASYNC    0x01
#define FTDI_BITMODE_MPSSE            0x02
#define FTDI_BITMODE_BITBANG_SYNC     0x04
#define FTDI_BITMODE_MCU_HOST_BUS_EMU 0x08
#define FTDI_BITMODE_FAST_SERIAL      0x10
/*@}*/

/** @name FTDI control codes */
/*@{*/
#define FTDI_CONTROL_RESET             0x00
#define FTDI_CONTROL_PINS              0x01
#define FTDI_CONTROL_FLOW              0x02
#define FTDI_CONTROL_BAUDRATE          0x03
#define FTDI_CONTROL_DATA              0x04
#define FTDI_CONTROL_GET_MODEM_STATUS  0x05
#define FTDI_CONTROL_EVENT_CHAR        0x06
#define FTDI_CONTROL_ERROR_CHAR        0x07
/* 0x08 unknown */
#define FTDI_CONTROL_LATENCY_TIMER     0x09
#define FTDI_CONTROL_GET_LATENCY_TIMER 0x0A
#define FTDI_CONTROL_BITMODE           0x0B
#define FTDI_CONTROL_GET_PINS          0x0C
#define FTDI_CONTROL_GET_EEPROM        0x90
#define FTDI_CONTROL_EEPROM            0x91
#define FTDI_CONTROL_EREASE_EEPROM     0x92
/*@}*/

/* !!!!!!!!!! data structures !!!!!!!!!! */
/* Positions extracted from ftdi.c.
   Seems to be wrong. */
typedef __packed struct {
/* Pos 0 */
unsigned short dummy;
/* Pos 2 */
unsigned short vendor_id;
/* Pos 4 */
unsigned short product_id;
/* Pos 6 */
/* 0x0400 indicates BM */
unsigned short device_realease_no;
/* Pos 8 */
/* Bit Set meaning
    0  self powered
    1  remote wakeup */
unsigned char config_descriptor;
/* Pos 9 */
/* in 2mA */
unsigned char max_power_consumption;
/* Pos 10 */
/* Bit Set meaning
    0  In Endpoint isochronous
    1  Out Endpoint isochronous
    2  Enable suspend pull downs for lower power
    3  Use the serial number string
    4  Change USB version */
unsigned char chip_config;
/* Pos 11 */
unsigned char dummy2;
/* Pos 12 */
/* USB version in case Bit 4 of chip configuration is set. */
unsigned short usb_version;
/* Pos 14 */
unsigned char manufacturer_string_offset;
/* Pos 15 */
unsigned char manufacturer_string_size;
/* Pos 16 */
unsigned char product_string_offset;
/* Pos 17 */
unsigned char product_string_size;
/* Pos 18 */
unsigned char serial_string_offset;
/* Pos 19 */
unsigned char serial_string_size;
/* Pos 20 */
unsigned char string_data[256];
} ftdi_eeprom;

typedef struct {
char *usb_control_reference;
int chip_type;
unsigned long number_of_ports;
unsigned char configuration_port[FTDI_MAX_PORTS];
unsigned long actual_bitmode[FTDI_MAX_PORTS];
/* Must be structure and not union because
   setings may exists parallel for the different chip modes
   even it is pure theory. */
struct {
  struct {
    unsigned long number_of_baudrates;
    int baudrate[FTDI_MAX_BAURATES];
    /* Bit Meaning
        0  6
        1  7
        2  8 */
    unsigned long data_bits;
    /* Bit Meaning
        0  1
        1  1,5
        2  2 */
    unsigned long stopbits;
    /* Bit Meaning
        0  None
        1  Odd
        2  Even
        3  Mark
        4  Space */
    unsigned long parity;
    /* Bit Meaning
        0  None
        1  Rts/Cts
        2  Dtr/Dsr
        3  Xon/Xoff */
    unsigned long flowcontrol;
    /* Separated due to IOCTL concept. */
    unsigned long flow_xon_char;
    unsigned long flow_xoff_char;
    } serial[FTDI_MAX_PORTS];
  bool eeprom_writeable;
  } allowed_configurations;
} ftdi_environment;

/* !!!!!!!!!! functions !!!!!!!!!! */
/* ---------- FTDI usb control commands ---------- */
/* Port number can be 0 or 1 in accordance to the port of the FTDI chip
   which you want to access (only very few chips are supporting more
   than 1 port). */

/** Resets the FTDI for a given ftdi_environment and port.

    (Description taken from FTDI_SIO.h)
    - Sets flow control to NONE.
    - Event char = $0D
    - Event trigger disabled
    - Purge RX buffer
    - Purge TX buffer
    - Clear DTR
    - Clear RTS
    - baud and data format are not reset!

    Returns TRUE if this was possible or FALSE if there were
    problems. */
extern bool ftdi_usb_reset(ftdi_environment *ftdi,
                           unsigned char port_number);

/** Purges a given internal buffer of the FTDI
    for a given ftdi_environment and port.

    Returns TRUE if this was possible or FALSE if there were
    problems. */
extern bool ftdi_usb_purge_buffer(ftdi_environment *ftdi,
                                  int kind_of_buffer,
                                  unsigned char port_number);

/** Purges internal receive and send buffer of the FTDI
    for a given ftdi_environment and port.

    Returns TRUE if this was possible or FALSE if there were
    problems. */
extern bool ftdi_usb_purge_buffers(ftdi_environment *ftdi,
                                   unsigned char port_number);

/** Sets or clears the FTDI pins for a given ftdi_environment and port.
    It is only possible to set one pin at a time and only in certain
    handshake modes. Only output pins can be affected.

    Returns TRUE if this was possible or FALSE if there were
    problems. */
extern bool ftdi_usb_set_pins(ftdi_environment *ftdi,
                              unsigned char pin,
                              bool set_pin,
                              unsigned char port_number);

/** Sets the FTDI flowcontrol to a given value
    for a given ftdi_environment and port.

    Returns TRUE if this was possible or FALSE if there were
    problems. */
extern bool ftdi_usb_set_flow_control(ftdi_environment *ftdi,
                                      /* OR Control line group bits. */
                                      unsigned char flowcontrol_type,
                                      unsigned char xon_char,
                                      unsigned char xoff_char,
                                      unsigned char port_number);

/** Sets the FTDI baudrate to a given value
    for a given ftdi_environment.

    Returns TRUE if this was possible or FALSE if there were
    problems. */
extern bool ftdi_usb_set_baudrate(ftdi_environment *ftdi,
                                  unsigned long baudrate,
                                  unsigned char port_number);

/** Sets the FTDI data format in accordance to given Bits,
    parity and stopbit type for a given ftdi_environment and port.

    Returns TRUE if this was possible or FALSE if there were
    problems. */
extern bool ftdi_set_data_property(ftdi_environment *ftdi,
                                   unsigned char number_bits,
                                   unsigned char stopbit_type,
                                   unsigned char parity_type,
                                   /* TRUE sets TX ON (break) */
                                   bool tx_on,
                                   unsigned char port_number);

/** Returns the state of the FTDI modem status as a bit map in
    a given Byte for a given ftdi_environment and port.

    Returns TRUE if this was possible or FALSE if there were
    problems. */
extern bool ftdi_usb_read_modem_status(ftdi_environment *ftdi,
                                       unsigned char *status_info,
                                       unsigned char port_number);

/** Sets the FTDI chip with a given event character and
    enables/disables the event interupt for a given
    ftdi_environment and port.

    Returns TRUE if this was possible or FALSE if there were
    problems. */
extern bool ftdi_usb_set_event_char(ftdi_environment *ftdi,
                                    unsigned char event_char,
                                    bool enable_event,
                                    unsigned char port_number);

/** Sets the FTDI chip with a given error character and
    enables/disables the error interupt for a given
    ftdi_environment and port.

    Returns TRUE if this was possible or FALSE if there were
    problems. */
extern bool ftdi_usb_set_error_char(ftdi_environment *ftdi,
                                    unsigned char error_char,
                                    bool enable_error,
                                    unsigned char port_number);

/** Sets the FTDI latency timer to a given millisecond value
    for a given ftdi_environment and port.

    The timer causes transmitting of data to the host if less
    than 62 Bytes are received. Exact behaviour is uncertain.
    FTDI_SIO says that the packet is only sent in case that
    at least one Byte has been received but inside the original
    FTDI documentation one sentence says that even empty buffer
    information (two length Bytes) is returned.

    Returns TRUE if this was possible or FALSE if there were
    problems. */
extern bool ftdi_usb_set_latency_timer(ftdi_environment *ftdi,
                                       unsigned char timer,
                                       unsigned char port_number);

/** Returns the value of the FTDI latency timer in
    a given Byte for a given ftdi_environment and port.

    Returns TRUE if this was possible or FALSE if there were
    problems. */
extern bool ftdi_usb_get_latency_timer(ftdi_environment *ftdi,
                                       unsigned char *timer_info,
                                       unsigned char port_number);

extern bool ftdi_usb_set_bitmode(ftdi_environment *ftdi,
                                 unsigned char bit_direction_mask,
                                 unsigned char bitmode,
                                 unsigned char port_number);

/** Enables FTDI bitbang mode for a given ftdi_environment and port.

    Returns TRUE if this was possible or FALSE if there were
    problems. */
extern bool ftdi_usb_enable_bitbang(ftdi_environment *ftdi,
                                    unsigned char port_number);

/** Enables  FTDI IO mode for a given ftdi_environment and port.

    Returns TRUE if this was possible or FALSE if there were
    problems. */
extern bool ftdi_usb_enable_io_mode(ftdi_environment *ftdi,
                                    unsigned char port_number);

/** Enables FTDI MPSSE mode for a given ftdi_environment and port.

    Returns TRUE if this was possible or FALSE if there were
    problems. */
extern bool ftdi_usb_enable_mpsse(ftdi_environment *ftdi,
                                  unsigned char port_number);

/** Enables FTDI MCU host bus emulation mode for a given
    ftdi_environment and port.

    Returns TRUE if this was possible or FALSE if there were
    problems. */
extern bool ftdi_usb_enable_mcu(ftdi_environment *ftdi,
                                unsigned char port_number);

/** Returns the state of the FTDI serial pins as a bit map in
    a given Byte for a given ftdi_environment and port.

    Returns TRUE if this was possible or FALSE if there were
    problems. */
extern bool ftdi_usb_read_pins(ftdi_environment *ftdi,
                               unsigned char *pin_info,
                               unsigned char port_number);

/* ---------- FTDI EEPROM handling ---------- */
/** Reads the given content of the FTDI for a given ftdi_environment.

    Returns TRUE if this was possible or FALSE if there were
    problems. */
extern int ftdi_usb_read_eeprom(ftdi_environment *ftdi,
                                unsigned char *eeprom_content_base,
                                unsigned short eeprom_content_size,
                                unsigned short eeprom_offset);

extern bool ftdi_usb_write_eeprom(ftdi_environment *ftdi,
                                  unsigned char *eeprom_content_base);

extern bool ftdi_usb_erase_eeprom(ftdi_environment *ftdi);

/* ---------- General ---------- */
extern bool ftdi_init(ftdi_environment *ftdi,
                      int ftdi_chip_type,
                      char *usb_control_reference);

#endif
