/** @file

  Implements functions which are allowing simple debugging by writing
  text into memory and retrieving it from there by printing. If memory is full
  its older content is overwritten.

  After the content of the memory has been printed it is discarded.

  */
/* Created 31.07.2010 T. Milius
   Changed 01.08.2010 T. Milius */
/* Copyright (c) 2010 by Thomas Milius Stade, Germany
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of Thomas Milius Stade, Germany nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY Thomas Milius Stade, Germany ``AS IS'' AND ANY
* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL Thomas Milius Stade, Germany BE LIABLE FOR ANY
* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
/* ANSI-C */

/* !!!!!!!!!! libraries !!!!!!!!!! */
/* ---------- ANSI-C ---------- */
#include <stdarg.h>
#include <stdlib.h>
#include <stdio.h>

/* ---------- Own ---------- */
#include "debug.h"
#include "ftdimodhead.h"

/* !!!!!!!!!!! definitions !!!!!!!!!! */
#define DEBUG_DATA_SIZE 40000

/* !!!!!!!!!! data structures !!!!!!!!!! */
struct {
unsigned int level;
int start;
int position;
int size;
char *debug_data;
} debug_info;

/* !!!!!!!!!! support functions !!!!!!!!!! */

/* !!!!!!!!!! functions !!!!!!!!!! */
void debug_initialize(void)
{

/* Must be set else initialization etc. will not be traced. */
debug_info.level=DEBUG_LEVEL_INITIALIZATION|DEBUG_LEVEL_CONFIGURATION|DEBUG_LEVEL_REGISTRATION;
debug_info.start=0;
debug_info.position=0;
debug_info.size=0;
if ((debug_info.debug_data=malloc(DEBUG_DATA_SIZE)) == NULL) {
  /* No memory no debugging */
  debug_info.level=DEBUG_LEVEL_NO_DEBUG;
  }
}

void debug_finalize(void)
{

debug_info.level=DEBUG_LEVEL_NO_DEBUG;
debug_info.position=0;
debug_info.start=debug_info.position;
debug_info.size=0;
if (debug_info.debug_data) {
  free(debug_info.debug_data);
  debug_info.debug_data=NULL;
  }
}

void debug_write(unsigned int debug_level,
                 char *info)
{

if ((debug_level & debug_info.level) == 0) return;
if (debug_info.debug_data) {
  if (info) {
    while(*info !='\0') {
      debug_info.debug_data[debug_info.position]=*info;
      info++;
      debug_info.position++;
      if (debug_info.position >= DEBUG_DATA_SIZE) {
        debug_info.position=0;
        }
      if (debug_info.size < DEBUG_DATA_SIZE) {
        debug_info.size++;
        }
      else {
        /* Drop older content */
        debug_info.start++;
        if (debug_info.start >= DEBUG_DATA_SIZE) {
          debug_info.start=0;
          }
        }
      }
    }
  }
}

void debug_writef(unsigned int debug_level,
                  char *info,
                  ...)
{
char output[200];
va_list args;

if ((debug_level & debug_info.level) == 0) return;
va_start(args, info);
vsprintf(output, info, args);
debug_write(debug_level,
            output);
va_end(args);
}

void debug_set_level(unsigned int debug_level)
{

if (debug_info.debug_data) {
  debug_info.level=debug_level;
  }
else {
  printf("No memory for debugging! Command ignored!\n");
  }
}

void debug_print(void)
{
int actual_pos;
int actual_size;

actual_pos=debug_info.start;
actual_size=0;
if (debug_info.debug_data) {
  while (actual_size < debug_info.size) {
    printf("%c", debug_info.debug_data[actual_pos]);
    actual_size++;
    actual_pos++;
    if (actual_pos >= DEBUG_DATA_SIZE) {
      actual_pos=0;
      }
    }
  }
else {
  printf("No memory for debugging! Command ignored!\n");
  }
debug_info.size=0;
debug_info.start=debug_info.position;
}
