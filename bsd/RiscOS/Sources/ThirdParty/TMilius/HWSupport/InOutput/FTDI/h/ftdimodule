/** @file

  Contains data structures and definitions used by the FTDI driver for DeviceFS under RISC OS.

  */
/* Created 02.06.2010 T. Milius
   Changed 10.05.2012 T. Milius */
/* Copyright (c) 2010-2012 by Thomas Milius Stade, Germany
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of Thomas Milius Stade, Germany nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY Thomas Milius Stade, Germany ``AS IS'' AND ANY
* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL Thomas Milius Stade, Germany BE LIABLE FOR ANY
* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

#ifndef ftdimodule_h
#define ftdimodule_h

/* !!!!!!!!!! libraries !!!!!!!!!! */
/* ------------ RISC OS ------------ */
#include "oslib/devicefs.h"

/* ------------ Own ------------ */
#include "upcall.h"
#include "ftdi.h"

/* !!!!!!!!!!! definitions !!!!!!!!!! */
/* a handle 0 indicates that this device is not registered
   to DeviceFS */
/* ??? */
#define FTDI_NO_FILE_HANDLE 0
#define FTDI_NO_DEVICEFS_HANDLE 0

/* ??? */
#define FTDI_NO_BUFFER_HANDLE 0

/* ??? How much workspace is available for modules. ??? */
#define FTDI_MAX_NUMBER_CALLBACK_REQUESTS 64

/** Sequence of switches must match IOCTL and should be similar to
   usual RISC OS serial port validation. */
#define FTDI_VALIDATION "baud/ndata/nstop/nnoparity,even,odd/snohandshake,rts,dtr,xon/ssize/nthres/n"

/* !!!!!!!!!! data structures !!!!!!!!!! */
struct risc_os_buffer_info_structure {
int handle;
int id;
void *routine;
void *ws;
};

struct risc_os_ftdi_structure {
/* FDTI */
ftdi_environment ftdi;
/* RISC OS */
/* USB */
char device_name[20];
struct ftdi_device_structure *devices[FTDI_MAX_PORTS];
struct {
  unsigned int file_handle;
  struct risc_os_buffer_info_structure risc_os_buffer_info;
  bool callback_requested;
  unsigned int devicefs_stream_handle;
  unsigned int usb_stream_handle;
  unsigned int devdriver_handle;
  unsigned int usb_buffer_size;
  unsigned char *buffer;
  unsigned int bytes_buffered;
  unsigned int bytes_processed;
  unsigned int bytes_requested;
  } input;
struct {
  unsigned int file_handle;
  struct risc_os_buffer_info_structure risc_os_buffer_info;
  bool callback_requested;
  unsigned int devicefs_stream_handle;
  unsigned int usb_buffer_size;
  unsigned char *buffer;
  unsigned int bytes_buffered;
  unsigned int bytes_processed;
  } output;
};

/** Multiport FTDI chips are registered as several
    devices. They are refering to the same RISC OS FTDI
    structure. Only port one handles allocation
    for this information. */
struct ftdi_device_structure {
struct ftdi_device_structure *previous_device;
struct ftdi_device_structure *next_device;
struct risc_os_ftdi_structure *risc_os_ftdi;
unsigned long ftdi_port_number;
/* DeviceFS */
char device_name[20];
int device_driver_handle;
struct {
  bool stream_valid;
  /* Filled but not used in the moment. */
  unsigned int file_handle;
  unsigned int devicefs_stream_handle;
  struct risc_os_buffer_info_structure risc_os_buffer_info;
  unsigned int bytes_requested;
  } input;
struct {
  bool stream_valid;
  /* Filled but not used in the moment. */
  unsigned int file_handle;
  unsigned int devicefs_stream_handle;
  struct risc_os_buffer_info_structure risc_os_buffer_info;
  } output;
/* Important: This structure is not copied by DeviceFS so it must be kept the whole time it is needed.
   name may be located outside the list! */
struct {
  struct devicefs_device device;
  void *list_terminator;
  } device_list;
};

/* Definition located here to allow source split. */
struct common_structure {
void *ws;
struct ftdi_device_structure *first_device;
struct upcall_translation_structure upcall_translation;
};

/* !!!!!!!!!! support functions !!!!!!!!!! */

/* !!!!!!!!!! functions !!!!!!!!!! */
/** Will setup the USB side of the driver and configure a given
    usb device. At the end it will set up the DeviceFS side
    of the device by calling register_device as far as possible.

    You must pass vendor and product ID to determine configuration.
    You may pass pendant and own config extension. */
extern _kernel_oserror *register_usb_device(unsigned int usb_device_number,
                                            unsigned int idVendor,
                                            unsigned int idProduct,
                                            char *pendant_extension,
                                            char *own_config_extension);

#endif
