Introduction
------------

There are a couple of USB devices which are not implemented in accordance
with the USB specification. In detail they are providing a couple of
endpoints with additional or different functionality but are hiding them
after been switched on. This is nothing unusual and the USB specification
provides a define scheme how to provide information about such functions and
how to switch a device between one one behaviour and another one.
Unfortunately a couple of devices providing their own way to be swapped.

The most of these devices are located in the moment in the area of USB Surf
stick devices which are showing only a mass storage device after being
switched on.

In general it is quite simple to swap the mass storage mode and the required modem mode. At PCs this is done by the software supplied on the mass storage which is limited to a certain stick and in some cases to a certain wireless internet provider. At LINUX there is a program called usb_modeswitch (http://www.draisberghof.de/usb_modeswitch/) to do the swap for arbitrary devices.
USBDevSwp (USBDeviceSwap) is a RISC OS pendant to usb_modeswitch but it is
not RISC OS port of it but an independent development even I took the
information about the swap sequences from usb_modeswitch which tooks the
information itself from various sources. Some devices which work under
usb_modeswitch may not work with USBDevSwp. This may be due to the different
concept and to the fact the usb_modeswitch will be always the more uptodate
program which will cover the newest devices. However it is quite easy to
setup a particular file for a certain device yourself simply by using a text
editor.

Note: USBDevSwp only swaps the device functionality. It does not implement
eg. a wireless internet access itself.

Installation
------------

Copy !USBDevSwp into !Boot.Resources folder. To start the module double click
on it or run <USBDevSwp$Dir>.!Run on a command line. This will swap all
activated devices. This has been decoupled from booting to allow to delay the
swap until the required programs are available which might be after the
desktop has started. It is up to you to setup this point. The easiest method might be after start of the desktop running of !USBDevSwp (!Boot -> Boot -> Run).

In the moment when !USBDevSwp is booted it will look for the installation of
its configration surface inside configuration and if this is not the case it
will perform the required configuration. If !USBDevSwp is no longer available
the configuration part will automatically remove itself from the RISCOS
configuration.

Everything to be configured can be done by invoking the configuration.

Configuration
-------------

The configuration is started by double clicking on !Boot and after wards by
clicking on USBdevSwp inside Configuration window.

A window called "USBDevSwp related devices" will pop up showing you all
connected USB device which can be handled by !USBDevSwp but also this ones
where had been already configured and are not connected in the moment. 
The num,ber of devices is limited to 8 which shall more than enough. Unused
lines are disabled.

On the left side you will see USB vendor- and product ID of the devices. You
can find out the IDs for your device by using eg. !USBInfo or the USBDevices/
USBDevInfo commands within a taskwindow. in case that your device is not
displayed it can't be swapped by USBDevInfo in the moment. Sometimes it might
be posssible to change this by writing your own swap file.

Next in the column there is an Option button showing whether a device is
activated or not. New devices are always deactivated. There are internally three states for a device:

- Attached
- Activated
- Deactivated

Where activated is independent from the other ones. For activated and deactivated devices your configuration is saved inside Choices:USBDevSwp which
allwos you to deactivate a devices but keep your configuration for a
reactivation later on.

You must save your changes to keep them. After saving !USBDevSwp is rerun
automatically which will lead to an immidiate swap of all attached and
activated devices.

You can also determine a waiting time in centi seconds after which the swap
is performed after a device has been attched to the USB system. The delay is
sometimes necassary to avoid problems with other drivers (eg. SCSIFS) trying
to claim the device after it is attached.

After the swap most devices will obtain another USB vendor/product ID combination. In case you are using commands you may have to adjust the right combiantion for your device. Unfortunately different devices are distributed using
the same initial USB vendor/product ID combination and you can't decide which
device has been plugged in. So you have to determine this manually. In case
you choose the wrong target ID pair this is not a problem. Perform the swap
and look afterwards  with !USBInfo or the USBDevices/USBDevInfo commands on
the right ID combination. Put in into !USBDevSwp save and replug your device
and everything will be fine.

A possible given command will be executed after the device has been swapped.
This allows you eg. to establish a wireless internet connect with the help of
other command files/programs.

Technical Details
-----------------

Every swap is performed by the module USBDevSwp which provides the command

USBDevSwp_Swap USBDeviceNo [-immediate] [-delay delay_cs]
               [-target selection_number] [initialization_command]

USBDeviceNo is the USB number of the device which shall be swapped.
The swap can be delayed by delay_cs or performed immediately independently
of a given delay. This allows you swap immediately on a quite system and to
delay in case the a device has just plugged in and other USB drivers are
trying to claim it.

Shortly before swapping the device an USB Alias with the initialization
command will be set up for the new target ids which will be performed by RISC
OS immediately after the device connects with new target ids again.

Writing your own swap file
--------------------------

All swap files are located inside <USBDevSwp$Dir>.Devices. There is a file
called "Dummy" showing you the parameters you can use inside your own file.

Alle files must be text files and are containing the parameters to be used
during the swap.

The file must carrying the name composed of USB vendor ID and product ID (4
hex digits) with which the device will identify itself after connected to the
USB system.

The devices are either swapped by using USB control sequences or bulk messages. In theory USBDevSwp can mix both methods where one control precceds every message. However no device is known for which this is necassary. For the
messages the related endpoints are required. Sometimes waiting for response
is required. The responses are not evaluated.

If adding Target IDs add them after the last existing Target ID to preserve
any existing configurations.

In case that anotehr driver calims the endpoints already USBDevSwp uses the
method of stealing the file handle from it. The WimpDevice claim protocol is
not supported for USBDevSwp may be used outside the desktop.

Contact
-------

In case of trouble or questions pelase contact

Thomas Milius
Tilsiter Str. 2
21680 Stade
Germany

with e-mail

thomas-milius@t-online.de

To Do
-----

Add more Devices.

Revision
--------

0.01 15-May-2011
     First public release.
