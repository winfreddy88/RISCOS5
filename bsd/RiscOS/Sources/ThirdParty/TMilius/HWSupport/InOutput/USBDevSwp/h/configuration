/** @file

  Contains contains configuration file handling of USBDevSwp (module and program).
  Because different compilation process file contains code and ot only declaration.

  */
/* Created 03.05.2011 T. Milius
   Changed 13.05.2011 T. Milius */
/* Copyright (c) 2011 by Thomas Milius Stade, Germany
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of Thomas Milius Stade, Germany nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY Thomas Milius Stade, Germany ``AS IS'' AND ANY
* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL Thomas Milius Stade, Germany BE LIABLE FOR ANY
* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

#ifndef configuration_h
#define configuration_h

/* !!!!!!!!!! libraries !!!!!!!!!! */
/* ------------ RISC OS ------------ */
#include "kernel.h"
#include "swis.h"

/* ------------ Own ------------ */
#include "error.h"

/* !!!!!!!!!!! definitions !!!!!!!!!! */
#define USBDEVSWP_MAX_CONFIGURATION_LINE_LENGTH 256

#define USBDEVSWP_MAX_MESSAGE_LENGTH 256
#define USBDEVSWP_MAX_MESSAGES 4

#define USBDEVSWP_ENDPOINT_O 0
#define USBDEVSWP_ENDPOINT_I 1

#define USBDEVSWP_NO_ENDPOINT -1

#define MAX_TARGETS 15

#define NO_TARGET -1

/* !!!!!!!!!! data structures !!!!!!!!!! */
/* ------------ Own ------------ */
struct configure_temp_structure {
/* Stack is limited in module version, so located here */
char temp_string_a[USBDEVSWP_MAX_MESSAGE_LENGTH + 1];
char temp_string_b[3];
char file_line[USBDEVSWP_MAX_CONFIGURATION_LINE_LENGTH + 1];
char parameter[60];
};

/* ------------ external ------------ */
struct target_structure {
int vendor_id;
int product_id;
};

struct message_structure {
int endpoint[2];
int length;
char message[USBDEVSWP_MAX_MESSAGE_LENGTH + 1];
};

struct control_structure {
bool usage;
unsigned char bm_request_type;
unsigned char brequest;
unsigned short wvalue;
unsigned short windex;
};

struct configuration_structure {
int eval_offset;
char subseq_command[USBDEVSWP_MAX_MESSAGE_LENGTH + 1];
struct control_structure usb_control;
int number_of_messages;
struct message_structure message[USBDEVSWP_MAX_MESSAGES];
int number_of_targets;
struct target_structure target[MAX_TARGETS];
int selected_target;
int new_vendor_id;
int new_product_id;
};

/* !!!!!!!!!! support functions !!!!!!!!!! */
char *get_file_line(FILE *config_file,
                    char *file_line)
{
int line_length;

file_line[0]='\0';
if (fgets(file_line, USBDEVSWP_MAX_CONFIGURATION_LINE_LENGTH, config_file)) {
  /* Remove nl is present */
  line_length=strlen(file_line);
  line_length--;
  if (line_length > 0) {
    /* Only works under Unix/RISC OS */
    if (file_line[line_length] == '\n') {
      file_line[line_length]='\0';
      }
    }
  return file_line;
  }
else return NULL;
}

char *determine_config_parameter(char **file_line,
                                 char *parameter)
{
char *start_position;
char *end_position;

start_position=*file_line;
*file_line=NULL;
while(isspace(*start_position)) start_position++;
if (*start_position == '\0') return NULL;
if (*start_position == '|') {
  /* Comment */
  return NULL;
  }
/* Determine parameter keyword. */
if ((end_position=strchr(start_position, ':')) == NULL) return NULL;
strncpy(parameter, start_position, end_position - start_position);
parameter[end_position - start_position]='\0';
/* Try to position on first value of parameter */
end_position++;
while(isspace(*end_position)) end_position++;
if (*end_position != '\0') *file_line=end_position;
/* convert all chars to lower */
start_position=parameter;
while(*start_position != '\0') {
  *start_position=tolower(*start_position);
  start_position++;
  }
/* Return determined parameter */
return parameter;
}

/* !!!!!!!!!! functions !!!!!!!!!! */
_kernel_oserror *get_configuration(struct configuration_structure *configuration,
                                   int vendor_id,
                                   int product_id)
{
char *config_file_line;
char *parameter;
int i;
int int_temp[4];
int hex_temp;
struct configure_temp_structure *char_temp;
FILE *config_file;

if ((char_temp=malloc(sizeof(struct configure_temp_structure))) == NULL) {
  return generate_error(USBDEVSWP_ERROR_NO_MEMORY);
  }
/* Open according configuration file. */
sprintf(char_temp->temp_string_a,
        "<USBDevSwp$Dir>.Devices.%04x_%04x",
        vendor_id,
        product_id);
if ((config_file=fopen(char_temp->temp_string_a, "r")) != NULL) {
  while(!feof(config_file)) {
    if ((config_file_line=get_file_line(config_file, char_temp->file_line)) != NULL) {
      if ((parameter=determine_config_parameter(&config_file_line, char_temp->parameter)) != NULL) {
        if (strcmp(parameter, "targetids") == 0) {
          if (!config_file_line) {
            fclose(config_file);
            return generate_error(USBDEVSWP_ERROR_PARAMS_TARGET);
            }
          if (sscanf(config_file_line,
                     "%x %x",
                     &configuration->target[configuration->number_of_targets].vendor_id,
                     &configuration->target[configuration->number_of_targets].product_id) != 2) {
            fclose(config_file);
            free(char_temp);
            return generate_error(USBDEVSWP_ERROR_PARAMS_TARGET);
            }
          configuration->number_of_targets++;
          }
        else if (strcmp(parameter, "control") == 0) {
          if (!config_file_line) {
            fclose(config_file);
            free(char_temp);
            return generate_error(USBDEVSWP_ERROR_PARAMS_CONTROL);
            }
          if (sscanf(config_file_line,
                     "%x %x %x %x",
                     &int_temp[0],
                     &int_temp[1],
                     &int_temp[2],
                     &int_temp[3]) != 4) {
            fclose(config_file);
            free(char_temp);
            return generate_error(USBDEVSWP_ERROR_PARAMS_CONTROL);
            }
          configuration->usb_control.bm_request_type=int_temp[0];
          configuration->usb_control.brequest=int_temp[1];
          configuration->usb_control.wvalue=int_temp[2];
          configuration->usb_control.windex=int_temp[3];
          configuration->usb_control.usage=true;
          }
        else if (strcmp(parameter, "message") == 0) {
          if (!config_file_line) {
            fclose(config_file);
            free(char_temp);
            return generate_error(USBDEVSWP_ERROR_PARAMS_MESSAGE);
            }
          if (sscanf(config_file_line,
                     "%d %d %s",
                     &configuration->message[configuration->number_of_messages].endpoint[USBDEVSWP_ENDPOINT_O],
                     &configuration->message[configuration->number_of_messages].endpoint[USBDEVSWP_ENDPOINT_I],
                     char_temp->temp_string_a) != 3) {
            fclose(config_file);
            free(char_temp);
            return generate_error(USBDEVSWP_ERROR_PARAMS_MESSAGE);
            }
          if ((configuration->message[configuration->number_of_messages].endpoint[USBDEVSWP_ENDPOINT_O] < 1) ||
              (configuration->message[configuration->number_of_messages].endpoint[USBDEVSWP_ENDPOINT_O] > 8) ||
              ((configuration->message[configuration->number_of_messages].endpoint[USBDEVSWP_ENDPOINT_I] < 1) &&
               (configuration->message[configuration->number_of_messages].endpoint[USBDEVSWP_ENDPOINT_I] != USBDEVSWP_NO_ENDPOINT)) ||
              (configuration->message[configuration->number_of_messages].endpoint[USBDEVSWP_ENDPOINT_I] > 8)) {
            /* illegal endpoint */
            fclose(config_file);
            free(char_temp);
            return generate_error(USBDEVSWP_ERROR_PARAMS_MESSAGE_EP);
            }
          configuration->message[configuration->number_of_messages].length=0;
          char_temp->temp_string_b[2]='\0';
          i=0;
          while((char_temp->temp_string_a[i] != '\0') && (char_temp->temp_string_a[i + 1] != '\0')) {
            char_temp->temp_string_b[0]=char_temp->temp_string_a[i];
            char_temp->temp_string_b[1]=char_temp->temp_string_a[i + 1];
            if (sscanf(char_temp->temp_string_b,
                       "%x",
                       &hex_temp) != 1) {
              fclose(config_file);
              free(char_temp);
              return generate_error(USBDEVSWP_ERROR_PARAMS_MESSAGE_HEX);
              }
            configuration->message[configuration->number_of_messages].message[configuration->message[configuration->number_of_messages].length]=hex_temp;
            configuration->message[configuration->number_of_messages].length++;
            i+=2;
            }
          configuration->number_of_messages++;
          }
        else if (strcmp(parameter, "") != 0) {
          fclose(config_file);
          free(char_temp);
          return generate_error(USBDEVSWP_ERROR_PARAM);
          }
        }
      }
    }
  fclose(config_file);
  /* Setup new target if required and possible. */
  if (configuration->number_of_targets > 0) {
    if ((configuration->selected_target < 0) ||
        (configuration->selected_target >= configuration->number_of_targets)) {
      configuration->selected_target=0;
      }
    configuration->new_vendor_id=configuration->target[configuration->selected_target].vendor_id;
    configuration->new_product_id=configuration->target[configuration->selected_target].product_id;
    }
  free(char_temp);
  return NULL;
  }
else {
  free(char_temp);
  return generate_error(USBDEVSWP_ERROR_DEVICE_FILE);
  }
}

#endif
