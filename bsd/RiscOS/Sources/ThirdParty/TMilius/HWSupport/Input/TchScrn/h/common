/** @file

  Contains some definitions, strcutures and procedures which are used by the driver
  itself and the calibration program.

  */
/* Created 29.12.2007 T. Milius
   Changed 06.04.2016 T. Milius Support of RPi 12" display added.
   Changed 06.04.2016 T. Milius Designed several structures more general
   Changed 04.06.2016 T. Milius Generell restructuring.
   Changed 10.07.2016 T. Milius RPi display 7" not 12" :-( */
/* Copyright (c) 2007-2016 by Thomas Milius Stade, Germany
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of the &lt;organization&gt; nor the
*       names of its contributors may be used to endorse or promote products
*       derived from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY Thomas Milius Stade, Germany ``AS IS'' AND ANY
* EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
* WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL Thomas Milius Stade, Germany BE LIABLE FOR ANY
* DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
* LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
* ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
* SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */
/* RISC OS */
/* Note: Used for application and module.
   So take care that module stack limit is not exceeded. */

#ifndef common_h
#define common_h

/* !!!!!!!!!! libraries !!!!!!!!!! */
/* ---------- ANSI-C ---------- */
#include <stdbool.h>
#include <stdio.h>
#include <string.h>

/* !!!!!!!!!!! definitions !!!!!!!!!! */

/** @name maximal rectangles

    Defines maximal base points and rectangles. */
/*@{*/
#define TOUCHSCREEN_MAX_CELLS_X 10
#define TOUCHSCREEN_MAX_CELLS_Y 10
/*@}*/

/** @name internal types of touchscreen

    The type determines how the touch information ios obtained */
/*@{*/
#define TOUCHSCREEN_TYPE_NOT_DEFINED 0
#define TOUCHSCREEN_TYPE_DWAV_EGALAX 1
#define TOUCHSCREEN_TYPE_DWAV_EGALAX_HID 2
#define TOUCHSCREEN_TYPE_DWAV_EGALAX_HID2 3
#define TOUCHSCREEN_TYPE_RPI_DISPLAY7 4
/*@}*/

/** States of button emulation */
#define TOUCHSCREEN_BUTTON_EMULATION_STATES 4


/* !!!!!!!!!! data structures !!!!!!!!!! */
typedef struct {
unsigned long x;
unsigned long y;
} point;

/* !!!!!!!!!! functions !!!!!!!!!! */
/** The function loads button change time and screen rectangle edges
    from the configuration file and stores them into data structures
    given by the caller.

    If the import has been performed properly TRUE is returned,
    else FALSE. */
bool load_settings(unsigned int *button_change_time,
                   unsigned int *max_x_cell,
                   unsigned int *max_y_cell,
                   point *screen_point)
{
char actual_line[200];
int i;
unsigned int temp_button_change_time;
unsigned int actual_x_edge;
unsigned int actual_y_edge;
unsigned long actual_edge_x_position;
unsigned long actual_edge_y_position;
FILE *settings_file;

if ((!button_change_time) ||
    (!max_x_cell) ||
    (!max_y_cell) ||
    (!screen_point)) return false;
if ((settings_file=fopen("Choices:TchScrn.Settings", "r")) == NULL) return false;
/* Button change time default */
for (i=0; i < TOUCHSCREEN_BUTTON_EMULATION_STATES; i++) {
  button_change_time[i]=40;
  }
*max_x_cell=0;
*max_y_cell=0;
while(!feof(settings_file)) {
  if (fgets(actual_line,
            199,
            settings_file)) {
    if (strncmp(actual_line, "ButEmuChange ", strlen("ButEmuChange ")) == 0) {
      temp_button_change_time=0;
      sscanf(actual_line,
             "%*s%*[ ]%d",
             &temp_button_change_time);
      if (temp_button_change_time > 0) {
        for (i=0; i < TOUCHSCREEN_BUTTON_EMULATION_STATES; i++) {
          button_change_time[i]=temp_button_change_time;
          }
        }
      }
    if (strncmp(actual_line, "ButEmuChange_State ", strlen("ButEmuChange_State ")) == 0) {
      i=-1;
      temp_button_change_time=0;
      sscanf(actual_line,
             "%*s%*[ ]%d%*[ ]%d",
             &i,
             &temp_button_change_time);
      if ((i >= 0) && (i <= TOUCHSCREEN_BUTTON_EMULATION_STATES)) {
        if (temp_button_change_time > 0) {
          button_change_time[i]=temp_button_change_time;
          }
        }
      }
    else if (strncmp(actual_line, "Edge ", strlen("Edge ")) == 0) {
      if (sscanf(actual_line,
                 "%*s%*[ ]%d%*[ ]%d%*[ ]%ld%*[ ]%ld",
                 &actual_x_edge,
                 &actual_y_edge,
                 &actual_edge_x_position,
                 &actual_edge_y_position) == 4) {
        if ((actual_x_edge <= TOUCHSCREEN_MAX_CELLS_X) &&
            (actual_y_edge <= TOUCHSCREEN_MAX_CELLS_Y)) {
          screen_point[(TOUCHSCREEN_MAX_CELLS_Y + 1)*actual_x_edge + actual_y_edge].x=actual_edge_x_position;
          screen_point[(TOUCHSCREEN_MAX_CELLS_Y + 1)*actual_x_edge + actual_y_edge].y=actual_edge_y_position;
          if (*max_x_cell < actual_x_edge) {
            *max_x_cell=actual_x_edge;
            }
          if (*max_y_cell < actual_y_edge) {
            *max_y_cell=actual_y_edge;
            }
          }
        }
      }
    }
  }
fclose(settings_file);
if ((*max_x_cell == 0) ||
    (*max_y_cell == 0)) return false;
return true;
}

#endif
