#!/bin/perl
#
# Copyright 2008 Castle Technology Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Author: sbrodie
# Last change: $Author: rool $
# Version: $Revision: 1.1 $

use POSIX "tmpnam";

# Work around for Windows "u:prodcommit" problems
# I have copied over some code from getstable. It is needed
# because FindBin does not seem to work when the script is
# invoked from WinCVS. This fix may well be
# a bit dodgy, but it seems to work.....

BEGIN { $0 = $1."\\".$2.$3 if ($0 =~ /^([A-Za-z]:)([^\\])(.*)$/);
  if ($^O eq "cygwin") {
    $UseParam1 = "u:/perllib";
  } elsif ($^O eq "MSWin32") {
    $UseParam1 = "u:/perllib";
  } else {
    require FindBin;
    $UseParam1 = "$FindBin::Bin/perllib";
    $UseParam1 = "$FindBin::Bin/perllib";
  }
 }

use lib "$UseParam1";
#use FindBin;
#use lib "$FindBin::Bin/perllib";

use Pace::CvsModules;
use Pace::CvsModules::Subproduct;
use Pace::CvsDirectory;
use Pace::CvsClientop;

my $script  = $0; $script  =~ s/^.*\///;
my @releases;
# Activate debugging with -x option.
my $debug=0;
my $force=0;
my $newmodulesfile = 0;
my $filename = 'modules';
my $tmpfile = '';
my $forceeditor = 0;

while ($_ = shift @ARGV) {
  $debug++, next if /^-x$/;
  $nocommit = 1, next if /^-n$/;
  $quiet = 1, next if /^-q$/;
  $force = 1, next if /^-f$/;
  $forceeditor = 1, next if /^-e$/;
  next if /^-s$/; # obsolete option - ignored to avoid error
  if (/^-([rD])$/) {
    my ($flag, $arg) = ($_, shift @ARGV);
    push @releases, {
      arg => $flag.' "'.$arg.'"',
      $flag, $arg
    };
    next;
  }
  &help(), exit 0 if /^-[?h](elp)?$/i;
  die("Unrecognised parameter: $_\n") if /^-/;
  die("Multiple filenames specified: $filename and $_\n") if $filename;
  $filename = shift @ARGV;
}

# Validate we got no more than 2 revisions to compare ...
die("Only two revision numbers/dates may be specified!\n") if @releases > 2;

print STDERR "$script: Investigating module list ...\n";
my $repo = &directory_repository();
die("Unable to establish location of modules file in CVS!\n") unless $repo;
$repo .= '/'.$filename;

if (@releases == 0) {
  # Find out what version we had checked out originally and pretend it was specified (revision '0' == newly added!)
  my @entry = grep { $_->name eq $filename ? $_->revision : () } &directory_entries();
  my $entry = $entry[0];
  print "What have you got?  ", $$entry{'revision'}, "\n" if $debug;
  push @releases, { arg => '-r '.$$entry{'revision'}, '-r' => $$entry{'revision'} } if $$entry{'revision'};
}

# Set a callback to deal with subproducts. prodcommit should not descend into
# subproducts, so the appropriate callback is subproduct_ignore
push_subproduct_callback(\&subproduct_ignore);

# Read the complete list of components from the old modules file
$oldmodules = (@releases > 0) ? &get_revision($releases[0], $repo) : undef;

if (@releases > 1) {
  # User specified two revisions explicitly
  # You really don't want to be committing a file with this log message!
  $nocommit = 1;
  $newmodules = &get_revision($releases[1], $repo);
}
else {
  $newmodules = &load_modules_file($filename);
}

die("$script: File $filename not found!\n") unless $newmodules;


# First of all, check that we are using an up to date version of the modules file
# and refuse to operate if it is not up to date (unless we were ignoring the file anyway)
#
if (@releases < 2) {
  open(PIPE, "cvs -nqf update $filename|") or finish("Unable to retrieve module file status");
  while (<PIPE>) {
    print STDERR if $debug;
    finish("Your modules files contains conflicts!  Resolve them, run cvs update, then prodcommit again")
      if (/\AC\s$filename\s*\Z/);
    # It has been newly added?
    $newmodulesfile=1, last if (/\AA\s$filename\s*\Z/);
    finish("The modules file is not up to date.  Run cvs update and then run prodcommit again")
      if (/\A[^M]\s$filename\s*\Z/);
  };
  close PIPE;
}

my $message = &compare_modules_files($oldmodules, $newmodules);
$message .= sprintf("Newly created modules file\n\n") if $newmodulesfile;
&finish("No changes in module list!") unless $message or $force;

if (!$message) {
  # It must have been forced - say so in the message
  $message .= "No component changes\n\n";
}

if ($nocommit) {  # Show changes and exit - like cvs uses -n
  print $message;
  exit 0;
}

&get_message($message);
die("$script: commit failed, bailing ... $!\n") if (system("cvs","commit","-F",$tmpfile));
exit 0;

# Single point of script termination on failure cases
sub finish {
  print @_;
  print "\n";
  exit 0;
};

#############################################################################
print("$script: complete.\n");
#############################################################################

#############################################################################
# Wrap things up neatly.
#
sub failed {
  die("$script: $_[0] failed: $!\n");
};

#############################################################################
# Get change log entry from user, either use the configured editor or prompt
# the user for successive lines of input.
#
sub get_message {
  my ($header, $line, $message, $editor) = (shift, 'ok', '', $ENV{'EDITOR'});
  
  unless ($quiet) {
    print $header, "Enter change log (blank line to end), \"ok\" to accept this message, ",
          "or hit enter to invoke ", $editor, "\n> ";
    $line = <STDIN>;
    chomp($line);
  }

  unless ($line eq 'ok' || $line eq '') {
    # Get user input directly, then pretend all was OK
    while ($line) {
      $header .= $line."\n";
      print("> ");
      $line = <STDIN>;
      chomp($line);
    }
    $line = 'ok';
  }

  # To get here, line is either 'ok' or empty.  'ok' means that
  # $header contains the complete message, empty means that we
  # want to launch the editor
  $tmpfile = &tmpnam();

  if ($^O eq "cygwin") {
    $tmpfile=`cygpath -w $tmpfile`;
    $tmpfile =~ tr/\\/\//;
    $tmpfile =~ tr/\n\r//d;
  }

  # if $forceeditor is set, we need to invoke the editor even if
  # quiet mode is set
  if (($quiet) && ($forceeditor)) {
    $line = "";
  }

  for (;;) {
    unlink($tmpfile) if $tmpfile;
    open(TMP,"> $tmpfile") || &failed("cannot open temporary file $tmpfile: $!");
    print TMP "\n", $header, "\n";
    close(TMP), last if $line;

    # Deal with using the configured editor.
    print TMP &commit_template();
    close(TMP);
#    system("$editor $tmpfile");
    my @statinfopre = stat $tmpfile;
    system("$editor $tmpfile");
    my @statinfopost = stat $tmpfile;
    if ($statinfopre[9] == $statinfopost[9]) {
      # File was never resaved after editing
      die("$script: Message file unchanged, script aborted\n");
    }
    open(TMP,"< $tmpfile") || &failed("cannot open editor file $tmpfile: $!");
    { local $/; $line = <TMP>; }
    close(TMP);
    $line =~ s/\015?\012/\n/g;
    $message = join("\n", grep !/^CVS:/, split(/\n/, $line));
    $header = $message, next if $message;
    print("No change log entered, (A)bort or (r)etry :");
    die("$script: aborted\n") if ($quiet || (&ask("ra","a")));
    $line = '';
  }
}

#############################################################################
# Ask for user input return position in $options string. Allow a default
# option if enter it hit.
#
sub ask {
  my ($options,$default) = @_;
  my $response;
  
  $options =~ tr/a-z/A-Z/;

  while(1) {
    $response = <STDIN>;
    chop($response);
    if ($response eq "") {
      $response = $default;
    }
    $response =~ tr/a-z/A-Z/;
    my $index=index($options,$response);
    if($index>=0) {
      return $index;
    };
    print("Not valid, try again :");
  };
}

# Extracts the specified revision of a file from CVS.  Used to obtain arbitrary
# revisions of the modules file to permit content comparisons.
sub get_revision
{
  my ($object, $file) = @_;  
  $file = $$object{'arg'} . ' ' . $file;
  print "Getting file: $file\n" if $debug;
  return &use_modules_list(undef, &clientop_checkout_object_readonly($file));
}

# The text which is added to the partial log message when the text is dumped
# into the user's text editor.
sub commit_template
{
  return "\n".
         "CVS: ----------------------------------------------------------------------\n".
         "CVS: Enter Log.  Lines beginning with 'CVS:'  are removed automatically    \n".
         "CVS: ----------------------------------------------------------------------\n".
         "\n";
}

# Tidy up our temporary file
END {
  unlink($tmpfile) if $tmpfile;
}

sub help
{
  print "Use perldoc $0 to view the help messages..\n\n";
  exec 'perldoc', $0;
}

__END__

=head1 NAME

prodcommit - commit product module's files to B<CVS>

=head1 SYNOPSIS

prodcommit [-e] [-f] [-n] [-q] [-h] [-x] [-r rev|-D datespec] [-r rev|-D datespec]

=head1 DETAILS

This script is used for modules files in the same way that
srccommit is used for committing source code (hence the name
prodcommit) where it primes the editor buffer with the differences that
have been made to the modules file allowing the buildmaster to check
over them (perhaps spot errors!) and not have to worry about typing out
complicated log messages.

The output message will list the component name, its old symbolic tag
and its new symbolic tag (where appropriate).  For an updated component
it will check to see if it is using a srccommit generated tag and test
the revision numbers and append \"(REGRESSED)\" in the log file to
indicate that the component version number has been reduced

If two revision numbers or dates are specified on the command line, the
output is a message showing the differences between the two revisions of
the modules files.  Multiple revision specs implies the I<-n> option to
prevent a commit.

If one revision specifier is given, then the log message reflects the
changes between the specified revision and the working copy of the modules
file.

If no revision specifiers are given, then the log message reflects the
changes between the head revision and the working copy of the modules
file.

The command line options are:

=item B<-h>

=over

Displays this help.

=back

=item B<-n>

=over

Shows the changes in the modules file but does not commit actually
commit the changes.  This option is I<implied> if two revisions
are specified (with either I<-r> or I<-D>).

=back

=item B<-q>

=over

Quiet mode - accept the default log message without prompting

=back

=item B<-f>

=over

Force mode - the modules file is forcibly committed even if no
changes are apparent to the file comparison routines.

=back

=item B<-e>

=over

Causes the editor to be invoked, even if quiet mode B<-q> is set

=back

=item B<-r revision> and B<-D datespec>

=over

This specifies that a given revision of the modules file should be
used as the basis for a comparison.  The specified revision or
datespec must be a valid parameter for cvs checkout.

=back


=head1 FILES

=item B<./modules>

The modules file to be processed. 

=head1 REVISION CONTROL

stewart.brodie@pace.co.uk

    $Author: rool $
    $Date: 2008/06/09 20:35:27 $
    $Revision: 1.1 $

=cut

