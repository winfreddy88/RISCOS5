#!/bin/perl -w
#
# Copyright 2008 Castle Technology Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# $Id: checkout,v 1.1 2008/06/09 20:35:27 rool Exp $
#

# Obtain the required standard packages
use File::Path;
use File::Spec;
use Cwd;

# Work around for Windows "u:checkout" problems
BEGIN { $0 = $1."\\".$2.$3 if ($0 =~ /^([A-Za-z]:)([^\\])(.*)$/); }

use FindBin;
use lib "$FindBin::Bin/perllib";

# Obtain the required Pace-specific packages
use Pace::Cvspass;
use Pace::Cvsrc;
use Pace::CvsClientop;
use Pace::CvsModules;
use Pace::CvsModules::Subproduct;
use Pace::CvsDirectory;

&main();

exit 0;

# Set up some useful defaults
sub initialise_checkout
{
  # Current version (updates automatically): 
  ($scriptversion = '$Revision: 1.1 $') =~ s/[^\d]+\s+([\d\.]+).*$/$1/;
  $user = $ENV{"LOGNAME"} || $ENV{"USER"} || $ENV{"USERNAME"};
  $localfile = 0;
  $riscos = 0;
  $debug = 0;
  $force = 0;
  $overwrite = 0;
  $obeyfile="update,feb";
  $pfx = "--- ";
  $release = "main";
  $SIG{'INT'} = 'gtfo';
  $SIG{'QUIT'} = 'gtfo';
  $SIG{'TERM'} = 'gtfo';
  $errorfile = '';
  $compression = &find_cvs_compression_option;
}

#
# This subroutine adds the passed string to the error log.
#
sub add_error_string_to_error_log
{
  return unless $errorfile;
  my $error_string = shift;

  if (open(ERROR_FILE,">> $errorfile")) # Open file for writing to.
  {
    # File open was successful
    print ERROR_FILE $error_string,"\n";
    close(ERROR_FILE);
  }
  else
  {
    # File open was unsuccessful
    print STDERR $pfx,"ERROR: open of errors file $errorfile failed\n";
    &gtfo();
  }    
}

sub error
{
  my ($error_string)=@_;
  print STDERR ($error_string);
  &add_error_string_to_error_log($error_string);
}

sub gtfo 
{
  exit(1);
}

sub clobber_old_modules_file
{
  my $module = shift;

  if (!$force && -d $module) {
    my $input = &backtick_execute("cvs -fnq -z9 update $module/modules");
    if ($input =~ m|\A[MC]\s(\S+)/modules\s*\Z|) {
      if ($1 eq $module) {
        &error($pfx. "ERROR: The modules file in $module contains local changes which would be\n".
                     "       lost if you continue the checkout. Use the -force option to ignore the changes\n".
                     "       and checkout the file anyway, or use -localfile to use this modules file as is.\n\n");
        &gtfo;
      }
    }
  }

  &delete_tree($module) if (-d $module);
}

sub set_product_name
{
  $product = shift;
  $errorfile = File::Spec->catdir('Products', split('/', $product), 'ERRORS');
  $cvsdir = "Products/".$product;
  $product;
}

sub main
{
  # Calling &error before set_product_name will just cause the error to be put
  # on stderr, and not in an errors file.
  &initialise_checkout;

  while ($_ = shift @ARGV) {
    $riscos = 1, next if /^-riscos$/i;
    $overwrite = 1, next if /^-overwrite$/i;
    $localfile = 1, next if /^-localfile$/i;
    $release = shift @ARGV, next if /^-r$/i;
    $reldate = shift @ARGV, next if /^-D$/;
    ++$debug, next if /^-d$/i;
    $force = 1, next if /^-force$/i;
    &usage(), &help(), exit 0 if /^-[?h](elp)?$/i;
    &error("Unrecognised parameter: $_\n"), &gtfo if /^-/;
    &error("Multiple product names specified! ($product and $_)\n"), &gtfo if $product;
    $product = &set_product_name($_);
  }

  &usage(), &help(), exit 1 unless $product;
  &error($pfx."ERROR: I don't know who you are - go away!\n") unless $user;
  &error("Release flag specified but no revision specified") unless $release;

  print $pfx."Build will create RISC OS compatible update files.\n" if $riscos;
  print $pfx."Release tag is ", ($reldate ? $reldate : $release), "\n";
  ($magictag = $user."_autobuild_".$product) =~ y|/|_|;
  
  print $pfx,$cvsdir,"\n";
  
  # Make sure we have a modules file ready to read.
  &obtain_modules_file($localfile,$cvsdir,$product,$release,\$reldate);

    # Set up a callback for subprojects. We will use one of the built-in 
    # callback functions. As a convenience, if we are using -localfile (and
    # only then) we will use the callback subproduct_expand_checkout_or_local,
    # which honours a pseudo-tag 'local' on subproducts.
        push_subproduct_callback(
        $localfile ?
            \&subproduct_expand_checkout_or_local :
            \&subproduct_expand);

  # The modules file - we will now obtain the modules file from wherever.  Notice
  # that the data structures will all be destroyed when this scalar goes out of
  # scope.
  my $modules = &load_modules_file("$cvsdir/modules");
  &error($pfx."ERROR: open of modules file failed\n") unless $modules;
  
  # debug code: Display all the components along with their relevant options
  $modules->show if $debug;

  # Create the obey file ready for all updated components to be added to it.
  &create_obey_file($obeyfile, $product, $release, $reldate) if $riscos;

  # Now check out all the modules one by one.
  $cvs_checkout_option = $cvs_rtag_option = $compression;
  $modules->iterator(\&checkout_module);

  # Finish off the obey file with a closing message,
  &finish_obey_file($obeyfile) if $riscos;
  
  print $pfx."done\n";
  &check_for_errors_file();
}

# A callback routine for the modules file iterator to checkout each module in turn.
# The first parameter is the CvsModulesEntry object.  Any other parameters are those
# specified in the call to the iterator.
sub checkout_module
{

  my $self = shift;
  my ($opt_dir, $dir_option, $temporary_dir, $repository, $dir_report) = ('', '', '', '', '');

    if ($self->can('opt_repos')) {
        my $opt_repos = $self->opt_repos;
      $repository = $opt_repos ? '-d '.&find_cvspass_repository($opt_repos) : '';
      if ($repository =~ /^-d \@/) {
        &error($pfx."ERROR: Authentication details missing for repository $opt_repos - login to that repository\n");
        &gtfo();
      }
    }

  # Check whether this component already exists in the source tree and which tag it has.
  return unless &does_component_need_updating($self, $repository);

  # Specified directory checkout?
  if ($self->can('opt_dir') && defined($self->opt_dir)) {
    $opt_dir = $self->opt_dir;
    $dir_report = " to directory ".$opt_dir;
    if ($opt_dir =~ m|/|) {
      my @path_components = split(/\//, $opt_dir);
      $opt_dir = pop @path_components;
      $temporary_dir = join('/', @path_components);
      &mkdir_tree($temporary_dir);
    }
    $dir_option = '-d '.$opt_dir;
  }

  # Build the command we need to execute
  my $checkout_ok = 1;
  print $pfx, " checking out ", $self->path, " version ", $self->tag, "$dir_report\n";
  my $system_string;
  if ($self->tag eq "TRUNK")
  {
    $system_string = "cvs -fq $repository $cvs_checkout_option co -P $dir_option ". $self->path;
  }
  else
  {
    $system_string = "cvs -fq $repository $cvs_checkout_option co -r ". $self->tag ." $dir_option ". $self->path;
  }

  # Execute the checkout
  if (&system_execute($system_string, $temporary_dir)) {
    &error($pfx."ERROR: cvs checkout " . $self->path . " version " . $self->tag . " failed... $!\n");
    $checkout_ok = 0;
  }
  else {
    # Update the obey file with this component's name.
    &update_obey_file($self->path, $obeyfile, $opt_dir) if $riscos;
    &overwrite_files($self->path, $self->tag, $repository, $temporarydir, $dir_option) if $overwrite;

    # Now cope with the tracking option.
    if ($self->track) {
      # Move the magic tag along to what it was that we just checked out
      if (&system_execute("cvs -fQ $repository $cvs_rtag_option tag -F $magictag " . $self->path))
      {
        &error($pfx."ERROR: cvs tag " . $self->path . " version " . $self->tag . " failed... $!\n");
      }
    }
  }

  unless ($checkout_ok) {
     &overwrite_files($self->path, $self->tag, $repository, $temporarydir, $dir_option) if $overwrite;
  }
}

# Overwrite files with version in CVS.
sub overwrite_files {
  my ($module, $version, $repository, $temporarydir, $dir_option) = @_;

  print $pfx, "Overwriting any modified files ...\n"; 
  if (&system_execute("cvs -fq $repository $compression update -C -r $version $dir_option $module", $temporarydir)) {
    &error($pfx."ERROR: cvs update ".$module." version ".$version." failed...!\n");
  }
  print $pfx, "Done!\n";
}  

# Ensure that the modules file is ready to be loaded
sub obtain_modules_file
{
  my ($localfile, $cvsdir, $product, $release, $reldate) = @_;

  if ($localfile) {
    print $pfx,"Using local product file $cvsdir/modules\n";
  }
  else # We want to check out the Product file.
  {
    my $tag;

    if ($$reldate) {
      $tag = '-D "' . $$reldate . '"';
      print $pfx,"checking out ",$product," as of $$reldate ...\n";
    }
    elsif ($release eq 'main' || $release eq 'HEAD') {
      # For main release, don't bother to force a sticky tag.
      $tag = '-A';
      print $pfx,"checking out ",$product," latest version ...\n";
    }
    else {
      $tag = '-r '.$release;
      print $pfx,"checking out ",$product," version $release ...\n";
    }

    # Delete the old version of the file in favour of our new files
    &clobber_old_modules_file($cvsdir);
    # Checkout the right one.
    if (&system_execute("cvs -f $compression co -f $tag $cvsdir")) {
      &error($pfx."ERROR: cvs checkout ".$cvsdir." failed: $!\n");
    }

    if ($$reldate) {
      my ($type, $thedate) = &directory_tag($cvsdir);
      if ($type eq 'D') {
         $thedate =~ s/(\d+)\.(\d+)\.(\d+)\./$1-$2-$3:/;
         $$reldate = 'as of '.$thedate;
      }
    }
  }
}

#
# This subroutine checks whether the module passed in already exists (i.e.
# has already been checked out). If so, it reads the existing tag and if it 
# is different to the one passed in it flags the component as needing 
# updating. It returns 0 if the component does not need updating, 1 otherwise.
#
sub does_component_need_updating
{
  return 1 if $overwrite;

  my ($self, $repository) = @_;
  my($component, $sticky_tag, $trackoptions) = ($self->path, $self->tag, $self->track);
  my ($directory);
  my $cvs_options = $compression;
  my $original_component = $component;

  # Do we need to search in a specified directory...?
  $component = $self->opt_dir if $self->can('opt_dir') && defined($self->opt_dir);

  # Does the $component directory already exist?
  return 1 unless -e $component;

  # Try and find the current sticky tag.
  my ($type, $oldtag) = &directory_tag($component);
  if ($type) {
    die "Unknown Tag file format: $type$oldtag\n" unless index('NT', $type) >= 0;
  }
  else {
    # Either: no tag file but a repository file, which means that it was off a branch... Naughty, naughty. Give it a tag of main
    # Or    : no tag or repository files. Something really screwy's going on. Call the tag 'untagged'.
    $oldtag = &directory_repository($component) ? 'main' : 'untagged';
  }

  if ($oldtag eq $sticky_tag) {
    # Tags match, no need to update component - unless it was an autotracking tag.
    if ($trackoptions) {
      $rdiff=&backtick_execute("cvs -f -Q $cvs_options $repository rdiff -f -s -r $magictag -r $sticky_tag $original_component");
      # Any output - or did the command fail? Force update if so
      return 1 if ($rdiff || ($? >> 8));
    }
    return 0;
  }
  else {
    # Tags do not match. Release the existing component.
    print $pfx."Removing existing component ",$component,".\n";
    &system_execute("cvs -fQ $cvs_options $repository release -d $component");
    return 1;
  }
}

sub backtick_execute
{
  my $command = shift;
  print "Executing: ", $command, "\n" if $debug;
  return `$command`;
}

sub system_execute
{
  my ($command, $in_directory) = @_;
  my $old_directory = '';

  if (defined($in_directory) && $in_directory) {
    $old_directory = &cwd();
    chdir $in_directory;
    print "In ", $in_directory, ": " if $debug;
  }

  print "Executing: ", $command, "\n" if $debug;
  my $result = system($command);
  $last_system_exit_code = ($result >> 8);

  chdir $old_directory if $old_directory;

  return $last_system_exit_code;
}

sub check_for_errors_file
{
  return unless -f $errorfile;
  print "*****************************************************************************\n";
  print "ERRORS encountered.  Check file: $errorfile for details\n";
  print "******************************************************************************\n";
}


#
# This routine can be called to change the repository that the sources are
# checked out of.  It permits you to specify the repository incompletely
# (from the @ onwards) so that the modules file isn't tied to one specific
# user.  The .cvspass is searched and an appropriate authentication token
# is prepended to the repository name automatically.
#
sub change_repository
{
  my $new_repository = shift;
  printf("Attempting to change repository to $new_repository\n") if $debug;
  return &find_cvspass_repository($new_repository);
}

# This routine deletes all the files below the pass in path.
sub delete_tree
{
  File::Path::rmtree(@_);
}

#
# Build a directory subtree, given the full path to a directory
# Works relative to current dir
#
sub mkdir_tree
{
  File::Path::mkpath(shift, $debug, 0777);
}

#
# This subroutine displays the usage message for this program.
#
sub usage
{
  print "This is version $scriptversion of the checkout script\n\n";
  print <<'.';
checkout [<-r revision>|<-D datespec>] [<-overwrite>] [<-help>] [<-riscos>] [<-localfile>] [<-force>] <name>

name            - name of the product
-r              - release tag for the product module
-D              - release date for the product module
-force          - overwrite the modules file even if it contains uncommitted changes
-localfile      - Search for the named product file locally, do not obtain from CVS
-riscos         - Create RISC OS compatible obey files.
-help           - Display help information.
-overwrite      - Overwrites any file modified by the user with the version in CVS.
.
}

#
# This subroutine displays the help messages for this program.
#
sub help
{
  print <<'.';

checkout checks out the product module and the components which incorporate
the product. All the components are checked out into the current directory.

If no release tag or date is specified, or the special release tag main is used, the
latest committed version of the product file is checked out, and that is used
to provide the list of components to be updated.  If a release date is specified,
then the modules file as of the specified date is used.  Relative date specifications
are valid (e.g. -D "1 week ago").  After the modules file has been checked out,
the absolute date is reported in future messages from this script.

If the release tag is a branch tag, the latest committed versions of the
modules on that branch are checked out.

-h displays this helpfile.

-localfile uses the product passed in as the name of a local file (i.e. the
same directory as the one that script is run from) to use as the Product
file. This allows development work to be done on a Product without having to
check the Product file into CVS, which is sometims desirable. Use of this
flag should be carefully monitored, as it can allow people to do naughty
non-source-controlled things.

-riscos causes a RISCOS-compliant obey file is created that can be run to 
allow incremental updates of source trees.

-force requests that any existing modules file is obliterated (even if it
does contain uncommitted changes) by the requested revision.

-overwrite causes any modified version to be overwritten by the version in CVS.
.
}

############################################################################################
############################################################################################
#
# All code below this point is specific to RISC OS build requirements and is activated
# only by the -riscos flag.
#

# This subroutine creates the update obey file. It adds RISC OS commands to
#  set the directory to the appropriate NFS mount and location before
#  attempting to start the copy.
sub create_obey_file
{
  my ($obey_filename, $product, $release, $reldate)=@_;

  if (open(OBEY_FILE,">".$obey_filename)) # Open file for writing to (create)
  {
    my $release_status = $reldate || ('at release '.$release);
    # File open was successful
    print OBEY_FILE <<"__end__";
| Auto-generated update obey file.
| This corresponds to product file $product $release_status.

| Description: Part of AutoBuild.
| Use:         Initiates copy of sources from NFS to RISC OS.
| Generated by Revision $scriptversion of checkout script.

echo Update    : Started auto-update of sources.
| Set a nice and high wimpslot for the process
wimpslot 8000k

NFS
mount <AutoBuild\$NFSServer>
dir <AutoBuild\$NFSDir>

| Now ensure that if there are no local copies of !EraseCVS and !Perl,
| Filer_Run !EraseCVS and !Perl on the NFS mount. This will later get
| overridden when Env/!Common is run.
Run <AutoBuild\$Dir>.BootThings
__end__
  }
  else
  {
    # File open was unsuccessful
    print STDERR $pfx,"ERROR: open of semaphore file failed\n";
    gtfo();
  }
}

#
# This subroutine adds a line to the end of an obey file. It is used to
#  create a list of components to be copied over under RISC OS, allowing only
#  these components to be copied.
#
sub update_obey_file
{
  my ($component, $obey_filename, $directory)=@_;

  # We need to search in a specified directory...
  $component="$directory.$component" if $directory;

  if (open(OBEY_FILE,">>".$obey_filename)) # Open file for writing to (append)
  {
    # Convert the component directory seperators from / to .
    my ($comp_copy)=($component);
    my ($tail)=($comp_copy);
    $comp_copy =~ s|/|\.|g; # Change from Unix to RISC OS file seperators.

    # File open was successful. 

    # Strip the initial directory from the front since Build$dir is one level in.
    $tail=~s@^([^/]+)/@@;
    $tail =~ s|/|\.|g;

    # Make it delete the existing component (if it exists)
    print OBEY_FILE "echo Update    : Wiping existing sources for component ".$tail.".\n";
    print OBEY_FILE "inet:bin.x wipe ";
    print OBEY_FILE "<AutoBuild\$DestinationDir>.".$tail;
    print OBEY_FILE " R F ~C ~V";
    print OBEY_FILE "\n";

    # Create the directory structure up to the required location.
    my($head, $tailt)=("", $component);
    # Strip the initial directory from the front since Build$dir is one 
    # level in.
    $tailt=~s@^([^/]+)/@@;
    while($tailt=~s@^([^/]+)/@@) 
    {
      $head.=".$1";
      print OBEY_FILE "cdir <AutoBuild\$DestinationDir>".$head."\n";
    };
#    print OBEY_FILE "do mkdir -p $tail\n";
          
    # Now put the command in to copy over the new sources from NFS.
    print OBEY_FILE "echo Update    : Copying the sources for component ".$tail." from NFS.\n";
    print OBEY_FILE "copy ";
    print OBEY_FILE $comp_copy;
    print OBEY_FILE " <AutoBuild\$DestinationDir>.".$tail;
    print OBEY_FILE " ~C F Q R ~V";
    print OBEY_FILE "\n";
    
    # Now erasecvs that component.
    print OBEY_FILE "echo Update    : Erasing CVS control files for component ".$tail.".\n";
    print OBEY_FILE "inet:bin.x erasecvs ";
    print OBEY_FILE "<AutoBuild\$DestinationDir>.".$tail;

    # Do Echo to split between components.
    print OBEY_FILE "\necho Update    : ";
    print OBEY_FILE "\n\n";
    close(OBEY_FILE);
  }
  else
  {
    # File open was unsuccessful
    print STDERR $pfx,"ERROR: open of update file failed\n";
    gtfo();
  }
  
}





# This subroutine finishes the update obey file. It adds a RISC OS message
#  stating that this is the end of the obey file.
sub finish_obey_file
{
  my ($obey_filename)=@_;

  if (open(OBEY_FILE,">>".$obey_filename)) # Open file for writing to (create)
  {
    # File open was successful
    print OBEY_FILE <<"__end__";

echo Update    : Setting system variables for the build phases.
| Set system vars ready for running srcbuild
Set Build\$Dir <AutoBuild\$DestinationDir>

|Run the ENV file.
Echo Update    : Running the Env file.
Do IfThere <AutoBuild\$DestinationDir>.Env.<AutoBuild\$EnvName> Then Obey <AutoBuild\$DestinationDir>.Env.<AutoBuild\$EnvName> Else <AutoBuild\$Dir>.!Error "Unable to run ENV file"

| Run srcbuild
Do Echo Update    : Starting off the build phases (running srcbuild)

|
|
|
|
|
|
|

Do If "<AutoBuild\$UseNewNamingScheme>" = "Yes" Then <AutoBuild\$Dir>.NewImgName  ELSE Do Inet:bin.x perl <Build\$Dir>.BuildSys.perl.ImageName -hack_round_silly_riscosism
Do Echo Update    : Build is called <Build\$ImageName>
Do srcbuild <AutoBuild\$Phases> -v


| End of Auto-generated update obey file.

__end__
  }
  else
  {
    # File open was unsuccessful
    print STDERR $pfx,"ERROR: open of semaphore file failed\n";
    gtfo();
  }
}

#
# All code above this point (until the same double line of hash marker) is specific to 
# RISC OS build requirements and is activated only by the -riscos flag.
#
############################################################################################
############################################################################################

__END__

=head1 NAME

checkout - obtain a set of sources for a given variant of a given product

=head1 SYNOPSIS

checkout product [I<-help>] [I<-r E<lt>revisionE<gt>>] [I<-localfile>] [I<-riscos>]

=head1 DETAILS

This script is used to checkout complete copies of the source code for
a product.  A specified revision of the product can be checkout by
supplying the I<-r> option to select the appropriate revision of the
I<modules> file.

The modules file to be loaded is normally checked out from B<CVS> and then
loaded as I<Products/B<product>/modules>.  If the I<-localfile> option was
used, then the file is not updated from B<CVS>, but is assumed to already
exist in the same directory as if it had been checked out.  If your file
has local changes that would be clobbered by updating it to the specified
revision, then an error is generated unless you specify I<-force> too.

The latest revision of the modules is used if neither I<-localfile> nor
I<-r> is supplied.  If a specific revision is required, supply the
revision number or symbolic tag that can be passed to B<cvs checkout>.

The I<-riscos> option is only of use for builds of RISC OS.  It is used to
construct a RISC OS-specific script which copies the sources from a UNIX
machine to a RISC OS machine and kicks off builds automatically.

The I<-force> option is used to force updates to the modules file, scrapping
any uncommitted changes that have been made to the modules file.

=head1 DEPENDENCIES

This script relies on several Pace-specific packages:

B<Pace::Cvspass>, B<Pace::Cvsrc>, B<Pace::CvsClientop>, B<Pace::CvsModules>,
B<Pace::CvsDirectory>

=head1 REVISION CONTROL

david.cotton@pace.co.uk, stewart.brodie@pace.co.uk

    $Author: rool $
    $Date: 2008/06/09 20:35:27 $
    $Revision: 1.1 $

=cut
