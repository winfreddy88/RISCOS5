#!/bin/perl
#
# Copyright 2008 Castle Technology Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# $Id: srccommit,v 1.1 2008/06/09 20:35:27 rool Exp $
#
#
# Commits source files, updating the version number if required, generating
# and applying the standard form tag to the component if the version number
# has changed.
#
# This script will run under Windows as well as UNIX - please remember to
# test it on both when making changes.  Use $windows to switch behaviour on
# different OSes.
#
# Options: -h            show the help message
#          -y            assume answers to all prompts
#          -c <version>  Create new VersionNum file with <version> number.
#          -m message    Log message
#          -F filename   Filename containing the log message
#          -d subdir     Put file in subdirectory (not with -c; do not use)
#          -A            Create Arm assembler version
#          -N            Permit nested VersionNum files
#          -C            Permit the creation of new VersionNum
#
# As of version 1.61, directory names starting with a digit will be prepended
# with an underscore to make them valid CVS tags.
#
# As of version 1.64, this was amended to TAG_ because underscore isn't valid either!
#
# As of version 1.65, this script will update configure.in/configure.ac too if it
# finds the magic marker in the file or if you pass the -a option.
#
use Getopt::Std;
use POSIX "tmpnam";

my $script  = $0;
$script  =~ s/^.*[\/:\\]//;
my $debug = 0;
my $vstyle = "auto";
my $admin = 'code@riscosopen.org';
my $version_file     = "VersionNum";
my $version_file_asm = "VersionASM";
my $configure_in     = 'configure.in';
my $configure_in_2   = 'configure.ac';
my $ac_init_line = undef;
my $seen_magic_marker = 0;
my $logdump = '.#srccommit_log.txt';
my $original_versionnum = undef;
my $original_versionasm = undef;
my $original_configfile = undef;
my $user = $ENV{"LOGNAME"} || $ENV{"USER"} || $ENV{"USERNAME"};
my $asm_version = 0;
my $tagable = 0;
my $windows = 0;
my $PermitNested = undef;
my $PermitCreate = undef;
my $PermitArm = undef;

$windows = 1 if ($^O eq 'MSWin32');
$clear_tz_after_localtime = ($^O eq 'cygwin');
my @ac_init_fields   = ();
#############################################################################

getopts('Dalqhyoc:m:F:d:N:C:A:');

if ($opt_D == 1) {
  $debug = $opt_D;
}
if ($opt_h == 1) {                      # help
  $opt_h = $opt_h;
  &usage();
}
if (defined($opt_q)) {
  $opt_y = 1 if ($opt_q);
}
if (defined($opt_d)) {                  # allow VersionNum to be in a subdir
  $version_file     = "$opt_d/$version_file";
  $version_file_asm = "$opt_d/$version_file_asm";
}
my $filelist_prefix = (defined($opt_l) && $opt_l) ? '' : 'CVS: ';

# Check for autoconf input files - prefer configure.ac to configure.in
$configure_in = $configure_in_2 if -e $configure_in_2;
$configure_in = '' unless -e $configure_in;

if (defined($opt_N)) {
  $PermitNested = $opt_N;
}
if (defined($opt_C)) {
  $PermitCreate = $opt_C;
}
if (defined($opt_A)) {
  $PermitArm = $opt_A ;
}

if (defined($opt_o)) {
  open (STDERR, ">&STDOUT");
  $|=1;
}

# Implement the -c option to create a new VersionNum file when the repository
# is not there (ie. in a directory tree you are about to import)

if (defined($opt_c)) {
  if (-f 'VersionNum') {
    print "\nA file 'VersionNum' already exists - overwrite it? (Y/n) :";
    exit 0 unless &ask("ny", "y");
  }

  &create_file('',0,'untitled'); # 'untitled' will be the short component name
  exit(0);
}

# This initialisation must be done after the check for CLI options
my ($CVSROOT,$FULLCVSROOT) = &get_repository();

#############################################################################
# Check for presence of the VersionNum file and create it if absent. If 
# adding on the trunk, don't have a minor version number. If adding on a
# branch, use keyword substitution to obtain the correct revision number for
# the minor version number.
#
&trysystem("cvs -q update $version_file");
$branch = get_branch();
$dir    = &get_directory();
$vdir   = (-e $version_file) ? '' : &nested_versionnum_check($dir);
if ($vdir) {
  print("\nWARNING: Another VersionNum file was found in $vdir\n\nAre you REALLY sure you want to create a nested VersionNum file? (y/N) :");
  if (&ask("yn", "n", $PermitNested)) {
    print("\nsrccommit is stopping because of the VersionNum file found higher up the directory hierarchy.\n");
    exit 0;
  }
}
if (! -e $version_file) {
  if (defined($opt_d)) {
    print("\nVersionNum not found, create in $dir/$opt_d (Y/n) :");
  } else {
    print("\nVersionNum not found, create in $dir (Y/n) :");
  }
  if (&ask("ny","y", $PermitCreate)) {
    printf("Do you want an ARM assembler version as well (y/N) :");
    if (&ask("ny","n", $PermitArm)) {
      $asm_version = 1;
    }

    if ($branch eq "TRUNK") {
      &create_file("",$asm_version,$dir);               # no minor version number
      trysystem("cvs add $version_file");
      if ($asm_version) {
        trysystem("cvs add $version_file_asm");
      }
    } else {
      &create_file('$'.'Revision:'.'$',$asm_version,$dir); # need substitution
      trysystem("cvs add -kv $version_file");
      if ($asm_version) {
        trysystem("cvs add -kv $version_file_asm");
      }
    }
    if ($asm_version) {
      trysystem("cvs commit -m \"created by $script.\" $version_file $version_file_asm");
    }
    else {
      trysystem("cvs commit -m \"created by $script.\" $version_file");
    }
    print("\n$script: $version_file file(s) created. You may need to modify ");
    print("your sources to make use of this file. Then re-run srccommit.\n");
    exit(0);
  } else {
    die("$script: aborted\n");
  }
}
#############################################################################

#############################################################################
# Find out about these sources. If working on the trunk, prompt for the major
# version number to be incremented. If on a branch, obtain the current revision
# and increment to find the next revision.
#
print("$script: investigating module....\n");

&strip_dynamic_dependencies();

($file_added,$file_removed,$file_modified) = &nq_update();
# load_versionnum_files will put original contents into $original_version(num|asm)
$mod_major = &load_versionnum_files($version_file, $version_file_asm, $configure_in); 
$mod_date  = &get_date();
if (-e $version_file_asm) {
  $version_asm = 1;
}

check_configure_in($configure_in, $original_configfile) if $configure_in && defined($original_configfile);

print("Module version $mod_major is on branch $branch.\n");
if ($branch eq "TRUNK") {
  print("Increment major version number (Y/n) :");
  if (&ask("ny","y")) {
    $mod_major = &increment_major_version($mod_major);
    $tagable = 1;
   }
} else {
  $mod_minor = &get_revision($version_file);
  $tagable = 1;
}
#############################################################################

#############################################################################
# Obtain a change log entry from the user. Create a tag based on version 
# numbers that will be in force when the commit is performed.
#
if (defined($opt_F)) {
  open(LOGFILE, '<'.$opt_F) || die("$script: Unable to open log file $opt_F");
  @messages = <LOGFILE>;
  close(LOGFILE);
  $message = join('', @messages);
} elsif (defined($opt_m)) {
  $message = $opt_m."\n";
} else {
  $message = get_message("$mod_major, $mod_minor",$dir,$file_added,
                        $file_removed,$file_modified);
}

if (open(LOGFILE, '>'.$logdump)) {
  print LOGFILE $message;
  close(LOGFILE);
}

$message .= "\nVersion $mod_major";
$message .= ", $mod_minor" if ($mod_minor ne "");

if ($tagable) {
  $tag = $dir;
  $tag =~ s#^.*/(.*)$#$1#;
  $tag .= "-".$mod_major;
  $tag .= "-".$mod_minor if ($mod_minor ne "");
  $tag =~ s/[.]/_/g;
  $tag = 'TAG_'.$tag if ($tag =~ /^[\d\_]/);
  $message .= ". Tagged as '$tag'\n";
} else {
  $message .= ". Not tagged\n";
}

#############################################################################

#############################################################################
print("$script: committing files....\n");
if ($branch eq "TRUNK") {
  &write_file($mod_major,"",$mod_date,$version_asm,$dir);
} else {
  &write_file($mod_major,$mod_minor,$mod_date,$version_asm,$dir);
}

$winfile='';
if ($windows) {
  $winfile=tmpnam();
  if (open(WINFILE, '>'.$winfile)) {
    print WINFILE $message;
    close WINFILE;
    trysystem("cvs","commit","-F",$winfile);
  }
  else {
    trysystem("cvs commit -m\"$message\"");
  }
}
else {
  trysystem("cvs","commit","-m",$message);
}
$lastres = $?;
unlink($winfile) if $winfile;
if ($lastres != 0) {
  &restore_versionnum_files($version_file, $version_file_asm, $configure_in);
  die("$script: commit failed, bailing ... (restoring previous $version_file)\n");
}

# Delete the temporarily dumped log message if the commit succeeded
unlink($logdump) unless $debug;

#############################################################################

#############################################################################
if ($tagable) {
  print("$script: tagging files with tag $tag ....\n");
  if (&trysystem("cvs tag $tag")) {
    print("$script: tagging of files failed\n");
  }
  else {
    print("$script: files successfully tagged with the tag $tag\n");
  }
}

#############################################################################
print("$script: complete.\n");
#############################################################################

#############################################################################
# Wrap things up neatly.
#
sub failed {
  die("$script: $_[0] failed: $!\n");
};

#############################################################################
# Check for dynamic dependencies, and warn the user about them.
#
sub strip_dynamic_dependencies {
  local *MAKEFILE;
  local *DIR;
  my ($entry,$loop,$nomoan);
  opendir(DIR, ".") || failed("opendir(.)");
  while(defined($loop=readdir(DIR))) {
    if($loop=~/^makefile(,...)?$/i) {
      $entry=$loop;
      last;
    };
    if($loop=~/^[Mm]akefile\.[ai][mn]$/) {
      $nomoan=1; # autoconf/automake component - don't whinge about lack of Makefile
    };
  };
  closedir(DIR);
  if(!defined($entry)) {
    print STDERR "Hmmm.  I can't find a makefile.  Never mind.\n" unless $nomoan;
    return;
  };
  my $found_dd_line=0;
  my $dd_present=0;
  open(MAKEFILE, "< $entry")||failed("open($entry)");
  while(<MAKEFILE>) {
    if($found_dd_line) {
      $dd_present=1;
      last;
    } elsif(/^\# Dynamic dependencies:$/) {
      $found_dd_line=1;
    };
  };
  close(MAKEFILE);
  if($dd_present) {
    print
"
There are dynamic dependencies in the file '$entry', and these should
not normally be committed to the repository.  Some makefiles will need
modifying to build correctly from clean without dynamic dependencies.

Remove dynamic dependencies from the makefile?  (Y/n) :";
    if(&ask("ny", "y")) {
      local *MFTMP;
       open(MAKEFILE, "<$entry")||failed("open($entry)");
       open(MFTMP, ">$entry~")||failed("open($entry~)");
      while(<MAKEFILE>) {
        print MFTMP $_;
        last if(/^\# Dynamic dependencies:$/);
      };
      close(MFTMP)||failed("close($entry~)");
      close(MAKEFILE)||failed("close($entry)");
      rename("$entry~", $entry)||failed("rename($entry~, $entry)");
      print

"
Dynamic dependencies removed.  This makefile is now untested, and
may not build from clean.

Commit it anyway?  (y/N) :";

    } else {
      print

"
Dynamic dependencies not removed.  Dynamic dependencies can cause
problems in some circumstances.

Do you still want to commit this module?  (y/N) :";

    };
    if(&ask("yn", "n")) {
      print "Script aborted.\n";
      exit(1);
    };
  };
};

#############################################################################
# Find out the state of checked out bits by doing a cvs -nq update and parsing
# the output. Return the files serperated by ':' so we can parse them later.
#
sub nq_update {
  my ($line, %files);
  
  open(PIPE,"cvs -nq update -d |") || failed("fork");
  while($line = <PIPE>) {
    if ($line =~ /^([A-Z\?]) (.*)$/) {
      my ($action, $filename) = ($1, $2);

      $action = 'U' if $action eq 'P';

      $files{$action} .= ':' if $files{$action};
      $files{$action} .= $filename;
    }
  }
  close(PIPE);

  if ($files{"C"}) {
    print "\n";
    printf("PROBLEM: Some files contain conflicts.  Remove the conflicts,\n");
    printf("         use \"cvs update\" to clear the conflict, and try again.\n\n> ");
    print join("\n> ", split(/:/,$files{"C"})) . "\n\n";
    die("$script: aborted\n");
  }

  if ($files{"U"} || $files{"P"}) {
    print "\n";
    printf("WARNING: Some files in your sandbox were not up to date.\n");
    printf("         You should issue a \"cvs update\" first to merge in the\n");
    printf("         third party changes and then run this script again.\n\n> ");
    print join("\n> ", split(/:/,$files{"U"})) . "\n\n";
    printf("Continue with the commit anyway? (y/N) : ");
    if (&ask("yn","n")) {
      die("$script: aborted\n");
    }
  }

  if ($files{"?"}) {
    print "\nFiles unknown to CVS detected:\n\n> " . join("\n> ", split(/:/, $files{"?"})) . "\n\n";
  }

  return ($files{"A"}, $files{"R"}, $files{"M"});
}

#############################################################################
# Sort out line formatting for inserting text in the editor. We want the text
# to wrap round nicely.
#
sub format_line {
  my ($prefix,$data,$length) = @_;
  my ($line,$lines,$file,@files);

  $lines = "";
  $line = $prefix;  
  @files = split(":",$data);
  foreach $file (@files) {
    if (length($line.$file)>70) {
      $lines .= "$line\n";
      $line = "$prefix";
    }
    $line .= $file.", ";
  }
  $lines .= "$line\n";
  
  return $lines;
}


#############################################################################
# Obtain the template log entry if there is one.
# the user for successive lines of input.
sub get_template {
  return 1 if (open(LOGTEMPLATE, "<CVS/Template"));
  return 1 if (open(LOGTEMPLATE, "cvs -d $FULLCVSROOT co -r HEAD -p CVSROOT/template_log_entry|"));
  return 0;
}

#############################################################################
# Get change log entry from user, either use the configured editor or prompt
# the user for successive lines of input.
#
sub get_message {
  my ($header,$dir,$added,$removed,$modified) = @_;
  my ($tmpfile, $line, $message, $editor, $predate, $postdate);
  
  $editor = $ENV{"EDITOR"};
  if ($opt_q) {
    $line = '';
  }
  else {
    print("Enter change log (blank line to end), or hit enter to invoke $editor.\n> ");
    $line = <STDIN>;
    chomp($line);
  }
  
  # Deal with using the configured editor.
  #
  if ($line eq "") {
editor_again:    
    $tmpfile = tmpnam();
    open(TMP,">$tmpfile") || failed("creation of editor file $tmpfile");
    if (open(DUMPFILE, '<'.$logdump)) {
      print TMP while (<DUMPFILE>);
      close(DUMPFILE);
      unlink($logdump);
    }
    if (&get_template()) {
      print TMP while (<LOGTEMPLATE>);
      close(LOGTEMPLATE);
    } 
    print TMP <<"EOB";

CVS: ----------------------------------------------------------------------
CVS: Enter Log.  Lines beginning with 'CVS:'  are removed automatically
CVS: 
CVS: Committing in $dir
CVS:
EOB
    if ($added ne "") {
      print(TMP $filelist_prefix . "Files added :\n");
      print(TMP &format_line($filelist_prefix . "   ",$added,72));
      print(TMP $filelist_prefix . "\n");
    }
    if ($removed ne "") {
      print(TMP $filelist_prefix . "Files removed :\n");
      print(TMP &format_line($filelist_prefix . "   ",$removed,72));
      print(TMP $filelist_prefix . "\n");
    }
    if ($modified ne "") {
      print(TMP $filelist_prefix . "Files modified :\n");
      print(TMP &format_line($filelist_prefix . "   ",$modified,72));
      print(TMP $filelist_prefix . "\n");
    }
    print TMP <<"EOB";
CVS: Version $header
CVS: ----------------------------------------------------------------------
EOB
    close(TMP);
    @statinfopre = stat $tmpfile;
    trysystem("$editor $tmpfile");
    @statinfopost = stat $tmpfile;
    if ($statinfopre[9] == $statinfopost[9]) {
      # File was never resaved after editing
      $message = '';
    }
    else {
      my (@loglines,$blanks);
      open(TMP,"<$tmpfile") || failed("read editor file $tmpfile");
      @loglines = <TMP>;
      close(TMP);
      foreach $_ (@loglines) {
        next if (/^CVS:/);
        chomp;
        s/\015$//;
        if (/^$/) {
          ++$blanks;
          next;
        }
        $message .= "\n" if $blanks;
        $message .= $_ . "\n";
        $blanks = 0;
      }
      $message .= "\n" if $blanks;
    }
    unlink($tmpfile);
    if ($message eq "") {
      print("No change log entered, (A)bort or (r)etry :");
      if (&ask("ra","a")) {
        die("$script: aborted\n");
      } else {
        goto editor_again;
      }
    }
  } else {
    
    # Get user input directly.
    #     
    while ($line ne "") {
      $message .= $line."\n";
      print("> ");
      $line = <STDIN>;
      chomp($line);
    }
  }
  $message =~ s/\015//g;
  return ($message);
}

#############################################################################
# Increment the major version number in the form "0.01" to obtain a value in
# the form "0.02". Prompt the user if the default is no good.
#
sub increment_major_version {
  my $version = $_[0];
  my $major;
  my @vcomp = split(/\./,$version);

  # RISC OS components are the only ones that wrap 0.99 -> 1.00
  # And are the only ones to strip leading zeroes
  #my $pad = ($FULLCVSROOT =~ m|/home/rool/cvsroot|);

  #if (@vcomp > 2 || !$pad) {
  if (@vcomp > 2) {
    $vcomp[scalar(@vcomp)-1]++;
    $version = join('.',@vcomp);
  }
  else {
    $version =~ s/(^\d*)[.](\d*)/$1$2/;
    $version += 1;
    $version = sprintf("%d.%02d",int($version/100),($version-int($version/100)*100));
  }


input_again:
  print("Enter new version number (default $version) :");
  if (defined($opt_y)) {
    $major = '';
    print "$version\n";
  }
  else {
    $major = <STDIN>;
    chomp($major);
  }
  if ($major =~ /[^0-9.]/) {
    print("'$version' is an invalid version number\n");
    goto input_again;
  }
  if ($major eq "") {
    return ($version);
  } else {
    return ($major);
  }
}

#############################################################################
# Obtain current date and return in the correct format for RISC OS modules.
#
sub get_date {
  my $now = localtime;
  my @parts = split(" ",$now);
  if ($clear_tz_after_localtime) { $ENV{'TZ'}=''; delete ($ENV{'TZ'}); } # Workaround for Cygwin Perl bug
  $date = sprintf("%02d %s %s",$parts[2], $parts[1], $parts[4]);
  return ($date);
}

#############################################################################
# Read the version number file to retreive the current major version number.
# Will set $original_versionasm and $original_versionnum to original file contents
# so they can be restored on exit.
#
sub load_versionnum_files {
  my ($file, $asmfile, $configfile) = @_;
  my ($line,$major,@contents);
  
  # Load the configure.in file is there was one
  if ($configfile && open(FILE,'< '.$configfile)) {
    # Not an error if it doesn't exist
    my @contents = <FILE>;
    $original_configfile = \@contents;
    close(FILE);
  }

  # Load the VersionASM file second
  if (open(FILE,'< '.$asmfile)) {
    # Not an error if it doesn't exist
    my @contents = <FILE>;
    $original_versionasm = \@contents;
    close(FILE);
  }

  # Load the VersionNum file first
  open(FILE,'< '.$file) || &failed("open $file to read version number");
  @contents = <FILE>;
  $original_versionnum = \@contents;
  close(FILE);

  # first line contains the interesting stuff
  $line = $contents[0];
  chomp($line);
  $line =~ m|^.*\((.*)\).*$|;                   # extract the bits
  $major = $1;
  
  if ($major eq "") {
    die("$script: cannot find major version number in $file, has the file been messed with ?\n");
  }
  
  return ($major);
}

#############################################################################
# Restore the original contents of VersionNum and VersionASM files
#
sub restore_versionnum_files {
  my ($file, $asmfile, $configfile) = @_;
  my ($line,$major,@contents);

  if (defined($original_versionnum) && open(FILE, '> '.$file)) {
    print FILE @$original_versionnum;
    close(FILE);
  }

  if (defined($original_versionasm) && open(FILE, '> '.$asmfile)) {
    print FILE @$original_versionasm;
    close(FILE);
  }

  if (defined($original_configfile) && open(FILE, '> '.$configfile)) {
    print FILE @$original_versionasm;
    close(FILE);
  }
}

#############################################################################
# Obtain the details to put into the first version number file.
#
sub create_file {
  my ($minor,$asm_version,$dir) = @_;
  my ($major,$date);
  my $defaultversion = $opt_c ? $opt_c : '0.00';
  
  $date  = &get_date();
    
  # get the version number to use
  #
input_again:
  print("Enter the initial version number in form n.nn (default $defaultversion) :");
  if (defined($opt_y)) {
    $major = '';
    print "$defaultversion\n";
  }
  else {
    $major = <STDIN>;
    chomp($major);
  }
  if ($major =~ /[^0-9.]/) {
    print("'$major' is an invalid version number\n");
    goto input_again;
  }
  if ($major eq "") {
    $major = $defaultversion;
  }
  &write_file($major,$minor,$date,$asm_version,$dir);
}

sub srccommit_version
{
  $_ = '$Revision: 1.1 $';

  return $1 if (/\:\s+(\S+)/);
  return 'unknown';
}

#############################################################################
# Write out the given details to the file and optionally an asm duplicate.
#
sub write_file {
  my ($major,$minor,$date,$asm,$dir) = @_;
  my $number = $major;
  my $appdate = $date;
  my $localdir = $dir;
  my $revision = &srccommit_version;

  $number = $number*100;

  $appdate =~ s/(\d+)\s(\S+)\s(\d\d)(\d\d)/$1\-$2\-$4/;

  $localdir =~ s#^.*/(.*)$#$1#;
  

  open(FILE,">$version_file") || &failed("open '$version_file' for writing");
print FILE <<"EOB";
/* ($major)
 *
 * This file is automatically maintained by srccommit, do not edit manually.
 * Last processed by srccommit version: $revision.
 *
 */
#define Module_MajorVersion_CMHG        $major
#define Module_MinorVersion_CMHG        $minor
#define Module_Date_CMHG                $date

#define Module_MajorVersion             "$major"
#define Module_Version                  $number
#define Module_MinorVersion             "$minor"
#define Module_Date                     "$date"

#define Module_ApplicationDate          "$appdate"

#define Module_ComponentName            "$localdir"
#define Module_ComponentPath            "$dir"

EOB
  if ($minor ne "") {
    print FILE "#define Module_FullVersion              \"$major ($minor)\"\n";
    print FILE "#define Module_HelpVersion              \"$major ($date) $minor\"\n";
  } else {
    print FILE "#define Module_FullVersion              \"$major\"\n";
    print FILE "#define Module_HelpVersion              \"$major ($date)\"\n";
  }

  $libmajor = $major;
  $libmajor =~ s/\./\:/g;
  $libmajor =~ s/\:0([0-9]+)/\:$1/g;
  print FILE "#define Module_LibraryVersionInfo       \"$libmajor\"\n";

  close(FILE);
  
  if ($asm) {
    open(FILE,">$version_file_asm") || &failed("open $version_file_asm");
print FILE <<"EOB";
;
; This file is automatically maintained by srccommit, do not edit manually.
; Last processed by srccommit version: $revision.
;
                        GBLS    Module_MajorVersion
                        GBLA    Module_Version
                        GBLS    Module_MinorVersion
                        GBLS    Module_Date
                        GBLS    Module_FullVersion
                        GBLS    Module_ApplicationDate
                        GBLS    Module_HelpVersion
                        GBLS    Module_ComponentName
                        GBLS    Module_ComponentPath
Module_MajorVersion     SETS    "$major"
Module_Version          SETA    $number
Module_MinorVersion     SETS    "$minor"
Module_Date             SETS    "$date"
Module_ApplicationDate  SETS    "$appdate"
Module_ComponentName    SETS    "$localdir"
Module_ComponentPath    SETS    "$dir"
EOB
    if ($minor ne "") {
      print FILE "Module_FullVersion      SETS    \"$major ($minor)\"\n";
      print FILE "Module_HelpVersion      SETS    \"$major ($date) $minor\"\n";
    } else {
      print FILE "Module_FullVersion      SETS    \"$major\"\n";
      print FILE "Module_HelpVersion      SETS    \"$major ($date)\"\n";
    }
    print FILE "                        END\n";
    close(FILE);
  }

  if (defined($original_configfile)) {
    my @fields = @{ $ac_init_fields[1] };
    if ("$minor" ne "") {
      $fields[1] = $major.'.'.$minor;
    }
    else {
      $fields[1] = $major;
    }
    my @new_file = @$original_configfile;
    if (defined($opt_a) && !$seen_magic_marker) {
      # The magic flag was given - add in the magic marker line just before the AC_INIT call
      splice(@new_file, $ac_init_line, 0, "dnl srccommit magic marker -- do not remove!\n");
      # Remember where we put it and that the AC_INIT is now one entry further along the list
      $ac_init_line++;
      $fields[0] = $localdir;
    }
    # Only update if the package name is the same as the component name
    if ($fields[0] eq $localdir) {
      $ac_init_fields[1] = '[' . join('],[', @fields) . ']';
      splice(@new_file, $ac_init_line, 1, join('', @ac_init_fields));
      open(FILE,"> $configure_in") || &failed("open $configure_in");
      print FILE @new_file;
      close(FILE);
    }
  }
}

#############################################################################
# Ask for user input return position in $options string. Allow a default
# option if enter it hit.
#
sub ask {
  my ($options,$default, $forceoption) = @_;
  my $response;
  
  $options =~ tr/a-z/A-Z/;

  while(1) {
    if (defined $forceoption) {
      $response = $forceoption;
      print "Using command line : $forceoption\n";
    }
    elsif (defined($opt_y)) {
      $response = '';
      print "$default\n";
    }
    else {
      $response = <STDIN>;
      chomp($response);
    }
    if ($response eq "") {
      $response = $default;
    }
    $response =~ tr/a-z/A-Z/;
    my $index=index($options,$response);
    if($index>=0) {
      return $index;
    };
    if (defined $forceoption) {
      print("Invalid value: $forceoption\n");
      exit 1;
    }
    print("Not valid, try again :");
  };
}

#############################################################################
# Get the next revision number from cvs status.
#
sub get_revision {
  my ($file) = @_;
  my ($revision,$branch,$line);
  
  open(PIPE,"cvs status $file |") || failed("fork of cvs status");
  while ($line = <PIPE>) {
    chomp($line);
    if ($line =~ /$\s*Repository\srevision:\s*(\S*)/) {
      $revision = $1;
    } elsif ($line =~ /$\s*Sticky\sTag:.*\(branch:\s(\S*)\)/) {
      $branch = $1;
    } elsif ($line =~ /$\s*Sticky\sTag:\s+(.*)\s+\(revision:\s(\S*)\)/) {
      die <<"EOT";
$script: This module has been checked out as $1 which is
a specific version.  You cannot commit back to a specific version, but
must first move to a line of development (either a branch or the trunk)
using the "cvs update..." command.

EOT
    }      
  }
  close(PIPE);
  
  if (!defined($revision) || !defined($branch)) {
    die("$script: Yuk: consistancy check failed for cvs status.\n");
  }
  
  if (length($revision) > length($branch)) {
    unless ((substr($revision,0,length($branch)) eq $branch) &&
        (substr($revision,length($branch)) =~ /^\.(\d+)$/)) {
      die("$script: Revision number not on branch, barf, barf...\n");
    }
    $revision = $branch.".".($1+1);
  } else {
    unless ((substr($branch,0,length($revision)) eq $revision) &&
        (substr($branch,length($revision)) =~ /^\.\d+$/)) {
      die("$script: Branch number not based on revision, barf, barf...\n");
    }
    $revision = $branch.".1";
  }
  
  return ($revision);
}

#############################################################################
# Get the branch name from the cvs control file.
#
sub get_branch {
  my ($branch, $input, $line, $tag);
  
  if (open(TAG,"CVS/Tag")) {
    $branch = <TAG>;
    chomp($branch);
    if ($branch =~ /^[TN](.*$)/) {
      $branch = $1;
    } else {
      $branch='TRUNK';
    }
    close(TAG);
  } else {
    $branch = "TRUNK";
  }
   
  return ($branch);
}

#############################################################################
# Get the directory name from the cvs control file.
#
sub get_directory {
  my ($dir,$input,$fullpath);
    
  # get the full path to the file in the repository
  open(REPOS,"CVS/Repository") || failed("cannot open CVS/Repository file");
  $dir = <REPOS>;
  close(REPOS);
  chomp($dir);
  $dir =~ s/\A$CVSROOT\/?//;
  
  return ($dir);
}

#############################################################################
# Get repository from CVS control file in preference to environment variable
# complain if we don't have either.
#
sub get_repository {
  my $cvsroot;
  
  if (open(ROOT,"CVS/Root")) {
    $cvsroot = <ROOT>;
    close(ROOT);
    chomp($cvsroot);
  } else {
    $cvsroot = $ENV{"CVSROOT"};
  }

  if ($cvsroot eq "") {
    die("$script: cannot establish a path to repository root. Need CVSROOT environment variable or CVS control files.\n");
  }

  return (canonify($cvsroot),$cvsroot);
}

#############################################################################
sub canonify {
  my ($dir)=@_;
  $dir=~s/\/\/+/\//g;
  $dir=~s/[^\/]$/$&\//;
  $dir=~s|:pserver:[^/]*||;
  $dir;
}

#############################################################################
sub trysystem {
  print STDERR "-- @_\n" if $debug;
  return system(@_) >> 8;
};

#############################################################################
#
# This routine looks up the directory hierarchy for VersionNum files to prevent
# nested VersionNum files from being created.
#

sub nested_versionnum_check {
  my ($dir)=@_;
  my @dirs = split('/', $dir);
  my $found = '';
  my $redir = $windows ? '2>nul:' : '2>/dev/null';

  while (!$found && @dirs > 1) {
    pop @dirs;
    $dir = join('/', @dirs);
    open(NVC, "cvs co -p $dir/$version_file $redir |") or die("Unable to execute cvs checkout check");
    $found = $dir if (<NVC>);
    close NVC;
  }

  return $found;
}

#############################################################################
#
# check to see if configure.in contains the appropriate cues that mean that
# we have to edit it.  On exit, $original_configfile may be modified to be
# undef to mean that we do not interfere with it (we just forget about it).
# Otherwise, @ac_init_fields is an array containing the three fields:
# $ac_init_fields[0] = "AC_INIT("
# $ac_init_fields[1] is a reference to the *unquoted* argument list, split on comma.
# $ac_init_fields[2] is ")<whitespace*><optional comment>$"
#
# $ac_init_line is the line number in @$original_configfile to update with
# the new version number information.
#
sub check_configure_in
{
  my ($filename, $contents) = @_;
  my ($i, $lines, @contents_copy);
  my $seen_magic = -1;

  return unless defined($contents) && @$contents;

  $lines = scalar @$contents;
  @contents_copy = @$contents;
  for ($i = 0; $i < $lines; ++$i) {
    if ($contents_copy[$i] =~ /^(\s*AC\_INIT\()(.*)(\)\s*(?:dnl.*)?)$/) {
      $ac_init_line = $i;
      @ac_init_fields = ($1, $2, $3);
      # De-quote the parameters
      my @ary = map { s/^\[(.*)\]$/$1/; $_; } split(/,/, $2);
      $ac_init_fields[1] = \@ary;
      if (@ary == 1) {
        # One parameter only - old interface, don't interfere with this file.
        $original_configfile = undef;
        return;
      }
    }
    elsif ($contents_copy[$i] =~ m/dnl srccommit magic marker/) {
      $seen_magic_marker = 1;
    }
  }

  # Didn't see AC_INIT, oh dear - stick head in sand time
  $original_configfile = undef, return unless defined $ac_init_line;

  if (!$seen_magic_marker) {
    # Didn't find the magic marker - let's look and see if the version number
    # in the AC_INIT call matches the existing major number and adopt the
    # file if it is.
    if (defined($opt_a)) {
      # The magic flag was given - allow the change to be made
    }
    else {
      $original_configfile = undef;
      return;
    }
  }
}


#############################################################################
#
# This routine outputs the help message
#
sub usage {
  die(
    "Usage: $script [options]\n\nOptions are:\n" .
    "  -h             show help message\n" .
    "  -y             accept all default answers (non-interactive mode)\n" .
    "  -c VERSION     create a new VersionNum with the given initial version\n" .
    "  -m MESSAGE     specifies the log message to be used\n" .
    "  -F LOGFILE     specifies the file containing the log message\n" .
    "  -d versiondir  VersionNum is in a subdirectory (obsolete - DO NOT USE)\n" .
    "  -o             Make the script redirect stderr to stdout (for WinCVS)\n" .
    "  -q             Quiet - do not prompt on CLI for log message (implies -y)\n" .
    "  -l             Include added/removed/changed file list in log message\n" .
    "  -a             Embed version number in autoconf input file (configure.in)\n" .
    "  -A <y|n>       Automatically create ARM assembler version\n".
    "  -C <y|n>       Automatically create new modules file where needed\n".
    "  -N <y|n>       Automatically permit nested modules files\n".
    "  -D             Enable debugging \n" .
    "\n"
  );
}


