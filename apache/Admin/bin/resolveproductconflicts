#!/bin/perl
#
# Copyright 2008 Castle Technology Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Author: sbrodie
# Last change: $Author: rool $
# Version: $Revision: 1.1 $

# This script is used for product's modules files to resolve conflicts in
# the modules file.  Its strategy is to take the latest version numbers
# in the case of a conflict.  Beware of branch differences.

die("This script is not yet implementation - still under development\n");







# Set this to 1 for full directory paths on output; 0 for just leafnames
# on components that appear in the updated list
my $report=0;
# Set this to 1 for the smart directory paths on output to detect
# clashes
my $smartmatch=1;
# Set this to 1 for full directory paths on output; 0 for just leafnames
# on components that appear in the added or removed list
my $report_add_remove=1;

# Activate debugging with -D and -x options.
my $debug=0;

use Getopt::Std;
use POSIX "tmpnam";

my $script  = $0; $script  =~ s/^.*\///;
my $usage = "Usage: $script [-h] [-n] [-q] [-s]\n".
  "  -h  Displays this help message\n".
  "  -n  Shows the changes in the modules file\n".
  "  -q  Quiet - accept the default log message without prompting\n".
  "  -s  Disable SmartMatch disambiguation of component leafnames\n";
my $admin = "code";
my $user = $ENV{"LOGNAME"};
$user = $ENV{"USER"} if($user eq '');
my $windows = 1 if ($^O eq 'MSWin32');

# Check the options - we only accept -h to request help.
getopts('hnqDxs');
if ($opt_h == 1) {			# help
  die($usage);
}
if ($opt_n == 1) {                      # don't commit - just list differences
}
if ($opt_D == 1) {
  $debug++;
}
if ($opt_s == 1) {
  $smartmatch = 0;
}
if ($opt_x == 1) {
  $debug++;
}

# Read output of diff from stdin

finish("$script: No modules file found!") unless -f 'modules';

print STDERR "$script: Investigating module list ...\n";

# First of all, check that we are using an up to date version of the modules file
# and refuse to operate if it is not up to date
#
open(PIPE, "cvs -nqf update modules|") or finish("Unable to retrieve module file status");
while (<PIPE>) {
  print STDERR if $debug;
  finish("Your modules files contains conflicts!  Resolve them, run cvs update, then prodcommit again")
    if (/\AC\smodules\s*\Z/);
  finish("The modules file is not up to date.  Run cvs update and then run prodcommit again")
    if (/\A[^M]\smodules\s*\Z/);
};
close PIPE;

# Read the complete list of components from the modules file
# so that we can determine duplicate leafnames
my @components;
open(MODULES, '<modules') or finish("Unable to open modules file!");
while (<MODULES>) {
  if (/<<<<<<</ || />>>>>>>/) {
    finish("Your modules files contains conflicts!  Resolve them, run cvs update, then prodcommit again");
  }
  if (/\A([^#]\S+)\s+(\S+)\s*(#?.*)?\Z/) {
    push @components,$1;
  }
}
close MODULES;

# Construct the list of all duplicated (occurs 2 or more times) leafnames
my @leafnames = map { &leaf_dir($_, 0) } @components;
my %counts = &uniqc(2, @leafnames);
# Extract only the leafnames that are duplicate
foreach $leaf (keys %counts) {
  my @newaliases = grep { &leaf_dir($_, 0) eq $leaf } @components;
  print "Duplicate components: \n  " . join("\n  ", @newaliases) . "\n" if $debug > 1;
  &createshortaliases(@newaliases) if $smartmatch;
}

if ($debug > 1) {
  print "Leafname aliases:\n";
  foreach $_ (keys %leafalias) {
    print $_ . " => " . $leafalias{$_} . "\n";
  } 
}

# The modules file is up to date so now check that it has been updated by performing
# a diff on the modules file with the current head of the trunk.  We are looking for
# lines no longer present (start with <) and new lines (start with >).  The regexps
# are used to split the line into the directory ($1) and tag ($2) parts which are
# then stored in the associative arrays %previous and %next.
#
open(PIPE, "cvs -qf diff modules|") or finish("Unable to retrieve version history");
while (<PIPE>) {
  print STDERR if $debug;
  if (/\A\<\s([^#]\S+)\s+(\S+)\s*(#?.*)?\Z/) {
    $previous{$1}=$2;
    print STDERR "Detected a removed component $1 (revision $2)\n" if $debug;
  }
  elsif (/\A\>\s([^#]\S+)\s+(\S+)\s*(#?.*)?\Z/) {
    $next{$1}=$2;
    print STDERR "Detected an added component $1 (revision $2)\n" if $debug;
  }
};
close PIPE;

# Check for components which simply moved around in the file
foreach $i (keys %previous) {
  if ($next{$i} eq $previous{$i}) {
    print STDERR "Difference noted but no change in component details: $i ($next{$i})\n" if $debug;
    delete $next{$i};
    delete $previous{$i};
  }
};

# Components can be removed, added or updated.  Keep a count so that
# we can generate a pretty output message
$updated = 0;
$new = 0;
$dead = 0;

foreach $i (keys %previous) {
  if ($next{$i}) {
    $updated++;                           # There was a newer tag inserted.
  }
  else {
    $dead++;                              # Component has been removed.
  }
};

foreach $i (keys %next) {
  $new++ unless $previous{$i};            # New component if no older tag
};

finish("No changes in module list!") unless ($new || $dead || $updated);

$message="";

if ($new) {
  $message .= sprintf("$new new component%s:\n", $new == 1 ? "" : "s");
  foreach $i (sort(keys %next)) {
    $message .= "  " . &dir_name($i,$report_add_remove) . " ($next{$i}) \n" unless $previous{$i};
  }
}

if ($updated) {
  $message .= sprintf("$updated updated component%s:\n", $updated == 1 ? "" : "s");
  foreach $i (sort(keys %next)) {
    next unless $previous{$i};
    $message .= "  " . &dir_name($i,$report)." ($previous{$i} -> $next{$i})";
    $message .= &check_regress($i, $previous{$i}, $next{$i});
    $message .= "\n";
  }
}

if ($dead) {
  $message .= sprintf("$dead removed component%s:\n", $dead == 1 ? "" : "s");
  foreach $i (sort(keys %previous)) {
    $message .= "  " . &dir_name($i,$report_add_remove) . " ($previous{$i})\n" unless $next{$i};
  }
}

if ($opt_n == 1) {  # Show changes and exit - like cvs uses -n
  print $message;
  exit 0;
}

$message = &get_message($message) unless $opt_q;

$winfile='';
if ($windows) {
  $winfile=tmpnam();
  if (open(WINFILE, '>'.$winfile)) {
    print WINFILE $message;
    close WINFILE;
    system("cvs","commit","-F",$winfile);
  }
  else {
    system("cvs commit -m\"$message\"");
  }
}
else {
  system("cvs","commit","-m",$message);
}
$lastres = $?;
unlink($winfile) if $winfile;
if ($lastres != 0) {
  die("$script: commit failed, bailing ...\n");
}

exit 0;

sub leaf_dir {
  my ($dir,$option)=@_;
  $dir =~ s/.+\/([^\/]+)\Z/$1/ unless $option;
  return $dir;
};

# The reported dir name
sub dir_name {
  my ($dir,$option)=@_;
  return $dir if $option;
  return $leafalias{$dir} if $leafalias{$dir};
  return leaf_dir($dir, $option);
};

sub path_dir {
  my ($dir)=@_;
  $dir =~ s/(.+)\/[^\/]+\Z/$1/;
  return $dir;
};

#
# All this messing about with substr is to stop module names like 
# c++cmd confusing # the perl regexp parser ... :-(
#
sub check_regress {
  my ($dir, $old, $new)=@_;
  my ($dirlen, $olddir, $newdir);

  $dir=leaf_dir($dir, 0);
  $dirlen = length($dir) + 1;

  return '' unless substr($old, 0, $dirlen) eq ($dir . '-');
  return '' unless substr($new, 0, $dirlen) eq ($dir . '-');

  $old = substr($old, $dirlen);
  $new = substr($new, $dirlen);

  return '' unless $old =~ /\d+[\d\_\-]+\Z/;
  return '' unless $new =~ /\d+[\d\_\-]+\Z/;

  $old =~ s/\-/\_/g;
  $new =~ s/\-/\_/g;

  if (&compare_rev($old, $new) > 0) {
    return '  (REGRESSED)'
  }

  return '';
};

# Compare two revision numbers.  Returns -1, 0 or 1 in a strcmp-like
# manner meaning "earlier than", "the same as" and "later than",
# depending on the relative values of the revision numbers.
# Works with branches too, although it takes no account of the dates
# on the differing branches.

# Note that this is using _ as the revision level separator because
# we are processing srccommit tags

sub compare_rev {
  my ($a,$b)=@_;
  @crev_a = split(/\_/,$a);
  @crev_b = split(/\_/,$b);

  while (@crev_a > 0) {
    my $result = (shift @crev_a) - (shift @crev_b);
    next unless $result;
    return -1 if $result < 0;
    return 1;
  }

  return -1 if (@crev_b > 0);
  return 0;
};


# Single point of script termination on failure cases
sub finish {
  print @_;
  print "\n";
  exit 0;
};

#############################################################################
print("$script: complete.\n");
#############################################################################

#############################################################################
# Wrap things up neatly.
#
sub failed {
  die("$script: $_[0] failed: $!\n");
};

#############################################################################
# Get change log entry from user, either use the configured editor or prompt
# the user for successive lines of input.
#
sub get_message {
  my ($header) = @_;
  my ($tmpfile, $line, $message, $editor, $predate, $postdate);
  
  print $header;
  $message='';
  $editor = $ENV{"EDITOR"};
  print("Enter change log (blank line to end), \"ok\" to accept this message, or hit enter to invoke $editor.\n");
  print("> ");
  $line = <STDIN>;
  chomp($line);
  
  # Deal with user accepting that message
  if ($line eq "ok") {
    return ($header);
  }

  # Deal with using the configured editor.
  #
  if ($line eq "") {
editor_again:    
    $tmpfile = tmpnam();
    open(TMP,">$tmpfile") || failed("cannot open editor file $tmpfile");
    print TMP "\n$header\n";
    print TMP <<"EOB";

CVS: ----------------------------------------------------------------------
CVS: Enter Log.  Lines beginning with 'CVS:'  are removed automatically
CVS: ----------------------------------------------------------------------
EOB
    close(TMP);
#    @statinfopre = stat $tmpfile;
    system("$editor $tmpfile");
#    @statinfopost = stat $tmpfile;
# File was never resaved after editing - perhaps user was happy with it?
#    if ($statinfopre[9] == $statinfopost[9]) {
#      $message = '';
#    }
#    else {
# Retain matching open brace ...
   {
      open(TMP,"<$tmpfile") || failed("cannot open editor file $tmpfile");
      while ($line = <TMP>) {
        chop($line);
        if ($line !~ /^CVS:/) {
          if ($line ne "") {
            $message .= $line."\n";
          }
        }
      }
      close(TMP);
    }
    unlink($tmpfile);
    if ($message eq "") {
      print("No change log entered, (A)bort or (r)etry :");
      if (&ask("ra","a")) {
        die("$script: aborted\n");
      } else {
        goto editor_again;
      }
    }
  } else {
    
    # Get user input directly.
    #     
    $message = $header;
    while ($line ne "") {
      $message .= $line."\n";
      print("> ");
      $line = <STDIN>;
      chop($line);
    }
  }
  return ($message);
}

#############################################################################
# Ask for user input return position in $options string. Allow a default
# option if enter it hit.
#
sub ask {
  my ($options,$default) = @_;
  my $response;
  
  $options =~ tr/a-z/A-Z/;

  while(1) {
    $response = <STDIN>;
    chop($response);
    if ($response eq "") {
      $response = $default;
    }
    $response =~ tr/a-z/A-Z/;
    my $index=index($options,$response);
    if($index>=0) {
      return $index;
    };
    print("Not valid, try again :");
  };
}

# Create the alias lists for the various duplicated leafname components
sub createshortaliases {
  my @components = @_;
  my $thisleaf = &leaf_dir($_[0], 0);
  my @dirs = map { &path_dir($_) } @components;
  # First, try the parent directory name - most times this will be sufficient
  if (&uniqc(2, map { &leaf_dir($_, 0) } @dirs) == 0) {
    # Whee! This was sufficient
    print "Next-level directory was sufficient ..\n  " . join("\n  ", @components) . "\n" if $debug > 1;
    foreach $_ (@components) {
      $leafalias{$_} = &leaf_dir(&path_dir($_), 0) . '/' . $thisleaf;
    }
  }
  elsif (&uniqc(2, map { (&splitpath($_))[0] } @components) == 0) {
    print "First components are unique though!\n" if $debug > 1;
    foreach $_ (@components) {
      my @comps = &splitpath($_);
      my $leaf = pop @comps;
      my $nextleaf = pop @comps;
      my $result;
      if (@comps > 1) {
        $result = "$comps[0]/.../$nextleaf/$leaf";
      }
      else {
        $result = $_;
      }
      $leafalias{$_} = $result;
      print "  $result\n" if $debug > 1;
    }
  }
  else {
    print "Oh dear - it wasn't - so we'll just use the full path here for now\n" if $debug > 1;
    foreach $_ (@components) {
      $leafalias{$_} = $_;
      print "  " . $_ . "\n" if $debug > 1;
    }
  }
}

# Execute "| sort | uniq -c | awk '$1 >= (first argument)'" over a list
sub uniqc {
  my %result;
  my ($min, @data) = @_;
  foreach $_ (@data) {
    $result{$_}++;
  }
  foreach $_ (keys %result) {
    delete $result{$_} unless $result{$_} >= $min;
  }
  return %result;
};


# Split a full pathname into its separate components
sub splitpath {
  return split('/', $_[0]);
};


