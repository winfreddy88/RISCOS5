#!/bin/perl
#
# Copyright 2008 Castle Technology Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#############################################################################
## $Id: srcnotify,v 1.1 2008/06/09 20:35:27 rool Exp $
## $Revision: 1.1 $
## $Date: 2008/06/09 20:35:27 $
#############################################################################
use POSIX "tmpnam";
# Work around for Windows "u:srcnotify" problems
BEGIN { $0 = $1."\\".$2.$3 if ($0 =~ /^([A-Za-z]:)([^\\])(.*)$/); }
use FindBin;
use File::Path;
use lib "$FindBin::Bin/perllib";
use Pace::CvsDirectory;
use Pace::CvsClientop;
#############################################################################
$usage = "Usage: $0 [options] [add|remove|exclude|list]\n"
    ."  -c <cvsroot>   Set the CVSROOT explicitly\n"
    ."  -q             Enable quiet mode\n"
    ."  -m <mailaddr>  Set mail address to use\n"
    ."  -r <branch>    Set branch to use\n"
    ."  -d <path>      Set directory for notification\n"
    ."  -s [No|Yes]    Set self-notification\n";
# extra unreported option -D enables debugging.

$user = $ENV{"LOGNAME"};
$user = $ENV{"USER"} if($user eq '');
$user = $ENV{"USERNAME"} if ($user eq '');
#
$tmpdir = tmpnam();
$leafname = "srcnotifications";
$notify_file = "CVSROOT/user-config/" . $leafname;
$quiet = 0;
$debug = 0;
$winnt = ($^O eq 'MSWin32');

# This value is used to parse the output of the attempted commit.
# If this phrase is found inside the output of the CVS command we
# execute, we assume that it succeeded and suppress the output (to
# avoid confusing the poor users) otherwise we assume failure and
# output the whole thing to aid debugging.
$checkregexp = 'building administrative';

# The same, but for the initial checkout of the current file
$checkexport = ' checkout:';

# Text to replace the empty string in reports
$entirerepos = 'the entire repository';

#
# Notifications file will be formated as
# 
# username:branch:path:selfnotify with a separate line for each notification
#
#############################################################################

#sort out the input arguments
while ($ARGV[0]=~/^-/) {
  $arg = shift(@ARGV);

  if ($arg eq '-h') {			# help
    die($usage);
  } elsif ($arg eq '-q') {		# quiet
    $quiet = 1;
  } elsif ($arg eq '-c') {		# CVSROOT
    $CVSROOT = shift(@ARGV);
  } elsif ($arg eq '-r') {		# branch
    $arg_branch = shift(@ARGV);
  } elsif ($arg eq '-d') {		# directory
    $arg_directory = shift(@ARGV);
  } elsif ($arg eq '-s') {		# self notification
    $self_notify = shift(@ARGV);
  } elsif ($arg eq '-m') {		# mail address
    $arg_mail = shift(@ARGV);
  } elsif ($arg eq '-D') {
    $debug++;                           # debugging level
  } else {
    die($usage);
  }
}

if ($debug) {
  print "Checking out $notify_file\nTemporary directory: $tmpdir\n";
}

$CVSROOT = &get_repository($CVSROOT);
$cvsrootparam = '-d ' . $CVSROOT;
$cvsrootparam =~ s/.$//; # strip trailing / put there by &canonify()

$cvsexec = "cvs -fQ -z9 $cvsrootparam ";

# sort out remaining arguments
#
$arg = shift(@ARGV);
if ($arg eq 'add') {
  $function = "add";
} elsif ($arg eq 'remove') {
  $function = "remove";
} elsif ($arg eq 'exclude') {
  $function = "exclude";
} elsif (!defined($arg) || $arg eq 'list') {
  $function = "list";
} else {
  die($usage);
}

$user = &get_user($arg_mail, $user);
die($usage."\nThe -m option is mandatory on Windows\n\n") unless $user;
&read_notifications($user);

# Do we have all the arguments we need to do a remove without prompting?
$have_all_args = $function eq 'remove' && defined($arg_branch) && defined($arg_directory) && defined($arg_mail);

if (($function eq "list") || ($function eq "remove")) {
  print("\n") unless $have_all_args;
  if (defined(@notifications)) {
    $i = 1;
    foreach $entry (@notifications) {
      ($b,$d,$s) = split(":",$entry);
      my $extra;

      if ($have_all_args) {
        if ($b =~ /$arg_branch/i && $user =~ /$arg_mail/i) {
          if ($d =~ /^-/) {
            $input = $i if ($d eq '-'.$arg_directory);
          }
          else {
            $input = $i if ($d eq $arg_directory);
          }
        }
      }

      if($d=~s/^-//) {
	$extra="Excluded";
      } else {
        $extra=&displayself($s);
      }
      if ($b =~ /^all$/i) {
        $b = &displaybranch($b);
      }
      printf("  $i) $b : %s : $extra\n", &displaydir($d)) unless $have_all_args && $function eq 'remove';
      $i++;
    }
    printf("\n") unless $have_all_args;
    if ($function eq "remove") {
      if (!defined($input) && !$have_all_args) {
        print("Which notification do you want to remove ? : ");
        $input = <STDIN>;
        chomp($input);
        if ($input>=$i || $input<1) {
          print("\nNot one of the options given !\n\n");
          exit(1);
        }
      }
      if (!defined($input)) {
        printf("\n  No notification exists for $arg_mail for %s (%s)\n\n", &displaydir($d), &displaybranch($b));
        exit(1);
      }

      ($b,$d,$s) = split(":",$notifications[$input-1]);
      $actualdirectory=$d;
      $d=$entirerepos unless $d;
      if($d=~s/^-//) {
        $logmessage=sprintf("Exclusion removed for $user on $d".
	      (defined($b)&&" ($b)"));
      } else {
	$logmessage=sprintf("Notification removed for $user on $d".
	      (defined($b)&&" ($b)"));
      };
      &modify_notifications($function,$b,$actualdirectory,$s,$logmessage);
      print "\n" . $logmessage . "\n\n";
    }
  } else {
    print("  No notifications currently registered.\n\n");
  }
} else {

  $branch    = &get_branch($arg_branch);
  $directory = &get_directory($arg_directory);
  if ($function eq "exclude") {
    $directory = "-".$directory;
    $self_notify = "No";
  } else {
    if ($self_notify =~ /yes/i) {
      $self_notify = 'Yes' ;
    }
    elsif ($self_notify =~ /no/i) {
      $self_notify = 'No';
    }
    else {
      $self_notify = &get_self_notification();
    }
  }
  
  foreach $entry (@notifications) {
    ($b,$d) = split(":",$entry);
    if (($b eq $branch) && ($d eq $directory)) {
      print("\nThis notification already exists !\n\n");
      exit(1);
    }
  }
  
  $logmessage='';
  $reportdirectory=$directory;
  $reportdirectory=~s/^-//;
  $reportdirectory=$entirerepos unless $reportdirectory;
  if($function eq "exclude") {
    $logmessage = "Exclusion added for $user on $reportdirectory".
	  (defined($branch)&&" ($branch)");
  } else {
    $logmessage = "Notification added for $user on $reportdirectory".
	  (defined($branch)&&" ($branch)");
  }

  &modify_notifications($function,$branch,$directory,$self_notify,$logmessage);
  print "\n" . $logmessage . "\n\n" if $logmessage;
}

exit 0;

#############################################################################
# functions
#
sub failed {
  my $diemsg="$0: $_[0] failed: $!\n";
  &cleanup();
  die $diemsg;
};

sub canonify {
  my ($dir)=@_;
  $dir=~s/\/\/+/\//g;
  $dir=~s/[^\/]$/$&\//;
  $dir;
};

# get repository from CVS control file in preference to environment variable
#
sub get_repository
{
  my ($cvsroot);
  
  $cvsroot = &clientop_set_repository(@_);
  if ($cvsroot eq "") {
    die("$0: cannot establish a path to repository root.\n".
	"  Need CVSROOT environment variable or CVS control files.\n");
  }

  return (canonify($cvsroot));
}

# get the branch name if not specified on the command line, default to TRUNK
#
sub get_branch
{
  my ($branch) = @_;
  my ($input,$line,$tag);
  
  if (!defined($branch)) {  
    ($type, $branch) = &directory_tag();
    $branch = 'TRUNK' unless $type =~ /^[NT]/;
    # if not in quiet mode, prompt the user
    #
    if (!$quiet) {
      print("Enter the branch to apply (default $branch,".
	    " 'All' for all branches) : ");
      $input = <STDIN>;
      chomp($input);
      $branch = $input if $input;
    }
  }

  $branch = 'all' if ($branch =~ /^\s*all\s*$/i);

  return ($branch);
}

# get the directory name if not specified on the command line
#
sub get_directory
{
  my $dir = shift;
  my ($input,$fullpath);
    
  if (!defined($dir)) {
    # get the full path to the file in the repository
    $dir = &directory_repository();
    # if not in quiet mode, prompt the user
    #
    if (!$quiet) {
      printf("Enter the directory to apply (default $dir) : ");
      $input = <STDIN>;
      chomp($input);
      if ($input ne "") {
        ($dir = $input) =~ s/\A\/+//;
        # check that this path exists if we can
        if ($CVSROOT !~ /^:/) {
          die "\nPath '$CVSROOT$dir' does not exist !\n\n" if (!(-x $CVSROOT.$dir) && (-x $CVSROOT));
        }
      }
    }
  }
  $dir =~ s/\A\/+//;
  return ($dir);
}

# see if the user wants to be informed when they commit things
#
sub get_self_notification
{
  if (!$quiet) {
    print("Do you want to be informed when you do commits (Y/n) :");
    if (&ask("ny","y")) {
      return ("Yes");
    }
  }
  return ("No");
}

# find out what mail address the user wishes to use
#
sub get_user {
  my($mail_addr, $env_user)=@_;
  return $mail_addr if defined $mail_addr;
  return $env_user;
};

# read notifications file
#
sub read_notifications
{
  my ($username) = @_;
  my ($line,$branch,$path,$user,$self_notify,$failed,$checkout,$command);

  $command = $cvsexec . "co -p -r HEAD $notify_file |"; 
  print "-- executing: " . $command . "\n" if $debug;
  open(NOTIFY,$command) ||
    failed("cannot read $notify_file");

  print "-- Looking for user $username ...\n" if $debug;
    
  while (<NOTIFY>)
  {
    $line=$_;
    $checkout.=$line;
    next if $failed;
    next if /\A[A-Z]\s/;
    $failed = 1 if (/$checkexport/i);
    $line =~ s/\015?\012/\n/;
    chomp($line);
    ($user,$branch,$path,$self_notify) = split(':', $line);
    next unless ($user && $self_notify);
    if ($username eq $user) {
      push(@notifications,$branch.":".$path.":".$self_notify);
    }
  }
  close(NOTIFY);
  
  print "-- Checkout report --\n$checkout-- End Checkout report --\n" if $debug;
  die $checkout if $failed;
}

# add or remove an entry from the notifications file.
#
sub modify_notifications
{
  my ($action,$branch,$directory,$self_notify,$logmessage) = @_;
  my ($line,$u,$b,$d,$handle_dev,$handle_ino,$dev,$ino,$command,@notifications,@lines);
  
  # checkout the srcnotifications file for real
  #
  if ($winnt || ($cvsrootparam !~ /:pserver:/)) {
    $command = $cvsexec . "co -d $tmpdir $notify_file";
  }
  else {
  # Client-server CVS on UNIX seems to have a bug relating to the use of
  # the co -d option to choose the checkout directory.  This code gets
  # around it.
    if ($tmpdir =~ /\A(.*)\/([^\/]+\Z)/) {
      $pathname=$1;
      $leafdir=$2;
    }
    else {
      failed("Unable to parse temporary filename! $tmpdir");
    }
    failed("Unable to change directory to $pathname") unless chdir $pathname;
    $command = $cvsexec . " co -d $leafdir $notify_file";
  }
  execute($command);
  failed("Unable to check out $notify_file") if ($? >> 8);
  
  open(NOTIFY,'<'.$tmpdir.'/'.$leafname) || failed("cannot open $leafname for reading");
  @lines = <NOTIFY>;
  close NOTIFY;

  # copy real file to temporary file, except for one to remove
  #
  foreach $line (@lines) {
    chomp $line;
    if (($action eq "add") || ($action eq "exclude")) {
      push(@notifications, $line);
    } else {
      # see if we need to remove this entry
      #
      my ($u,$b,$d) = split(":",$line);
      push(@notifications, $line) unless (($u eq $user) && ($b eq $branch) && ($d eq $directory));
    }
  }
  
  # append the one to be added to the end of the file
  #
  if (($action eq "add") || ($action eq "exclude")) {
    push(@notifications, "$user:$branch:$directory:$self_notify");
    print "$action: $user:$branch:$directory:$self_notify\n" if $debug;
  }

  open(NOTIFY,'>'.$tmpdir.'/'.$leafname) || failed("cannot open $leafname for writing");
  print NOTIFY join("\n", sort @notifications) . "\n";
  close(NOTIFY);
  
  # now move the temporary file over the old one - file handle follows file
  #
  chdir($tmpdir);
  $command = $cvsexec . "ci -m\"$logmessage\" $leafname";
  print "-- executing: $command\n" if $debug;
  open(TMP, $command . ' |') ||
    failed("Unable to commit new file");
  while (<TMP>) {
    $results.=$_;
    $ok = 1 if (/$checkregexp/i);
  }
  close TMP;
  print $results unless $ok && !$debug;
  &cleanup();
}

# Ask for user input return position in $options string. Allow a default
# option if enter it hit.
#
sub ask {
  my ($options,$default) = @_;
  my ($response);
  
  $options =~ tr/a-z/A-Z/;

  do {
    $response = <STDIN>;
    chomp($response);
    if ($response eq "") {
      $response = $default;
    }
    $response =~ tr/a-z/A-Z/;
    if (index($options,$response)<0) {
      print("Not valid, try again :");
    }
  } while (index($options,$response)<0);

  return index($options,$response);
}

sub cleanup {
  chdir; # Get out of the directory we're about to massacre ...
  if ($debug > 1) {
    print "** WARNING: Not deleting temporary directory $tmpdir\n";
  }
  else {
    &rmtree($tmpdir, $debug, 1);
  }
}

sub execute {
  print "-- executing: $_[0]\n" if $debug;
  system($_[0]);
}

sub displaybranch {
  return 'All branches' if ($_[0] =~ /\Aall\Z/i);
  return $_[0];
}

sub displaydir {
  return $entirerepos unless $_[0];
  return $_[0];
}

sub displayself {
  return 'No self notification' if ($_[0] =~ /\Ano\Z/i);
  return 'With self notification';
}


# Local Variables:
# mode:perl
# perl-indent-level: 2
# End:
