#!/bin/perl
#
# Copyright 2008 Castle Technology Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# $Id: tagproduct,v 1.1 2008/06/09 20:35:27 rool Exp $
#
# tagproduct reads the modules file and applies the given tag to the
# given components, moving the tag if necessary.  This enables buildmasters
# to apply a single tag across all the directories involved in a build to
# enable that revision of that directory to be matched back against the
# current modules file.
#

# Work around for Windows "u:tagproduct" problems
BEGIN { $0 = $1."\\".$2.$3 if ($0 =~ /^([A-Za-z]:)([^\\])(.*)$/); }

use FindBin;
use lib "$FindBin::Bin/perllib";
use Pace::Cvspass;
use Pace::Cvsrc;
use Pace::CvsClientop;
use Pace::CvsModules;
use Pace::CvsModules::Subproduct;
use Pace::CvsDirectory;

my ($script, $verbose, $tag, $ignore_slash_restriction, $tag_modules_too, $compression, $modules, $pretend);

($script = $0) =~ s/^.*\///;
$verbose = 1;
&usage(), exit 1 unless ($tag = &parse_cli_options());

# Transpose / to _ to make legal tags.  If any were found and -F not specified, die.
if ($tag =~ tr|/|_|) {
  die("$script: tag contains a / character - use $tag instead\n") unless $ignore_slash_restriction;
}

# Set a callback for any subproducts: check them out and expand them
push_subproduct_callback(\&subproduct_expand);

# Load in the modules file ...
$modules = &load_modules_file('modules', &clientop_set_repository());

# Find out any compression option we might need ... (and a -n if that was wanted)
$compression = &find_cvs_compression_option() . $pretend;

# Execute the following function for each module in the file ...
$modules->iterator(sub { my $self = shift; &tag_modules($self->path, $self->tag, $self->opt_repos); });

# Now tag the modules file itself - if requested and if we have a CVS control directory ...
&try_system("cvs -fQq $compression tag -F $tag modules") if ($tag_modules_too && -d 'CVS');

exit 0;

#############################################################################
sub tag_modules
{
  my ($path, $componenttag, $repos) = @_;
  $repos &&= '-d '.find_cvspass_repository($repos);
  &try_system("cvs -fQq $compression $repos rtag -a -f -F -r $componenttag $tag $path");
}
#############################################################################
sub try_system
{
  my $command = shift;
  print $command, "\n" if $verbose;
  system($command);
  die("$script: failed ($command)\n") if ($? >> 8);
}
#############################################################################
sub parse_cli_options
{
  for (;;) {
    my $arg = shift @ARGV;
    return $arg unless $arg =~ /^-(\S+)$/;
    my $opt = $1;
    $ignore_slash_restriction++, next if ($opt eq 'F');
    $tag_modules_too++, next if ($opt eq 'm');
    $pretend = ' -n', next if ($opt eq 'n');
    $verbose = 0, next if ($opt eq 'q');
    &usage();
    exit 0 if ($opt =~ /^[h\?](elp)?/i);
    die("$script: unknown option: $arg\n");
  }
}
#############################################################################
sub usage
{
  print STDERR "Usage: $script [-F] [-m] [-n] [-q] <symbolic tag>\n",
               "\n",
               "  -F    Force through use of / in tag after rewriting as _\n",
               "  -m    Tag the modules file as well if possible\n",
               "  -n    Do not really tag anything\n",
               "  -q    Quiet - do not echo all commands as they are echoed\n",
               "\n";
}
#############################################################################
