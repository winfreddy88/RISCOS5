/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/*                  Copyright 1997 Acorn Computers Ltd                  */
/*                                                                      */
/*  This material is the confidential trade secret and proprietary      */
/*  information of Acorn Computers. It may not be reproduced, used      */
/*  sold, or transferred to any third party without the prior written   */
/*  consent of Acorn Computers. All rights reserved.                    */
/*                                                                      */
/************************************************************************/

#include <stdlib.h>
#include <string.h>
#include "kernel.h"
#include "gadgets.h"
#include "constants.h"
#include "main.h"
#include "parse.h"
#include "file.h"
#include "build.h"
#include "msg.h"
#include "DebugLib/DebugLib.h"


/*
 * populate the stringset
 */
_kernel_oserror *
build_populate(int window, int gadget)
{
  _kernel_oserror *err=NULL;
  char *buffer=NULL;
  build_list_t *entry;
  int count = 0;

  /* count strings to malloc a buffer */
  entry = build_list;
  while (entry) {
    count += strlen(entry->name)+1;
    entry=entry->next;
  }

  if ((buffer=malloc(count))==NULL) {
    ERR_GOTO(err,msg_error_construct("mem"));
  }
  strcpy(buffer,"");

  entry = build_list;
  while (entry) {
    if (strlen(buffer)>0)	/* more than one, add , */
      strcat(buffer,",");
    strcat(buffer,entry->name);
    entry = entry->next;
  }

  ERR_GOTO(err,stringset_set_available(0,window,gadget,buffer));

  if (build_tree) {
    if (strstr(buffer,build_tree)!=NULL) {
      ERR_GOTO(err,stringset_set_selected(0,window,gadget,build_tree));
    }
  }

exit_gracefully:
  if (buffer)
    free(buffer);

  return (err);
}

/*
 * add an entry to the list of build directories
 */
_kernel_oserror *
build_add_entry(char *name)
{
  _kernel_oserror *err=NULL;
  build_list_t *entry;

  dprintf(("", "build_add_entry %s\n",name));

  /*
   * make sure it exists
   */
  if (file_exists(name)!=2) {
    ERR_RETURN(err,msg_error_construct("chk"));
  }

  /*
   * check for duplicates
   */
  entry = build_list;
  while (entry) {
    if (cstrcmp(entry->name,name)==0) {
      return (NULL);
    }
    entry=entry->next;
  }

  /*
   * add entry
   */
  if ((entry=malloc(sizeof(build_list_t)))==NULL) {
    ERR_RETURN(err,msg_error_construct("mem"));
  }

  entry->name = strdup(name);
  if (strlen(entry->name)>STRINGSET_LIMIT) {
    entry->name[STRINGSET_LIMIT] = 0;
  }
  entry->next = build_list;
  build_list = entry;

  return (err);
}

/*
 * remove an entry from the list of build directories
 */
_kernel_oserror *
build_remove_entry(char *name)
{
  _kernel_oserror *err=NULL;
  build_list_t *entry,*last=NULL;

  dprintf(("build_remove_entry %s\n",name));
  entry = build_list;
  while (entry)
  {
    if (cstrcmp(entry->name,name)==0)
      break;

    last=entry;
    entry=entry->next;
  }
  if (entry)
  {
    if (last)
      last->next = entry->next;
    else
      build_list = entry->next;

    if (entry->name)
      free(entry->name);
    free(entry);
  }

  return (err);
}

/*
 * free up all blocks
 */
_kernel_oserror *
build_free(void)
{
  build_list_t *entry,*last;

  entry = build_list;
  while (entry)
  {
    if (entry->name)
      free(entry->name);
    last = entry;
    entry=entry->next;
    free(last);
  }

  return (NULL);
}
