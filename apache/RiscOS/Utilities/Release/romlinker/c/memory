/* Copyright 2001 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * ROM Linker
 *
 * Copyright (C) Pace Micro Technology plc. 2001
 *
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>

#include "prgname.h"
#include "err.h"

#include "memory.h"

/* Allocate memory from heap - do not return if allocation failed */
void *safe_alloc(const unsigned long amount)
{
  void *result = malloc((size_t)amount);
  if (result == NULL) {
    err_fail("Out of memory attempting to allocate %lu bytes", amount);
  }
  return result;
}

void *safe_realloc(void *ptr, const unsigned long amount)
{
  ptr = realloc(ptr,(size_t)amount);
  if (!ptr && amount) {
    err_fail("Out of memory attempting to allocate %lu bytes", amount);
  }
  return ptr;
}

char *Strdup(const char *s1)
{
  if (s1 == NULL) {
    return NULL;
  }
  else {
    const size_t length = strlen(s1) + 1;
    char *const s2 = malloc(length);

    if (s2 == NULL) return NULL;
    return memcpy(s2, s1, length);
  }
}

static char memory_error_buffer[BUFSIZ];

void *fault_null(void *p, const char *error, ...)
{
  if (!p) {
    va_list ap;
    va_start(ap, error);
    vsprintf(memory_error_buffer, error, ap);
    va_end(ap);
    err_fail(memory_error_buffer);
  }

  return p;
}

const void *fault_null_const(const void *p, const char *error, ...)
{
  if (!p) {
    va_list ap;
    va_start(ap, error);
    vsprintf(memory_error_buffer, error, ap);
    va_end(ap);
    err_fail(memory_error_buffer);
  }

  return p;
}
