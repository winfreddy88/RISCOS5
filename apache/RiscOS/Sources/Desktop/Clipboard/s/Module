; Copyright 1998 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;
;  s.Module - standard module header and entries
;


Module_BaseAddr
        &       Start - Module_BaseAddr
        &       Initialise - Module_BaseAddr
        &       Finalise - Module_BaseAddr
        &       Service - Module_BaseAddr
        &       Title - Module_BaseAddr
        &       Help - Module_BaseAddr
        &       CommandTable - Module_BaseAddr
        &       ClipboardSWI_Base
        &       SWIHandler - Module_BaseAddr
        &       SWITable - Module_BaseAddr
        &       0 ; SWI decoding code
 [ International_Help <> 0
        &       MessagesFile - Module_BaseAddr
 |
        DCD     0
 ]

 [ :LNOT: No32bitCode
        DCD     ModuleFlags      - Module_BaseAddr
 ]

Help
        =       "Clipboard", 9, "$Module_MajorVersion ($Module_Date)"
        [ Module_MinorVersion <> ""
        =       " $Module_MinorVersion"
        ]
        =       0
Title
SWITable
        =       "Clipboard", 0
        =       "Put", 0
        =       "Get", 0
        =       "GetDataType", 0
      [ DragNDrop
        =       "StartDrag", 0
        =       "CatchDrop", 0
      ]
        =       0
        ALIGN

MessagesFile
        =       "Resources:$.Resources.Clipboard.Messages", 0
        ALIGN

 [ :LNOT: No32bitCode
ModuleFlags     DCD   ModuleFlag_32bit
 ]

      [ standalone
resourcefs_files
        ResourceFile  $MergedMsgs, Resources.Clipboard.Messages
        &       0
      ]

;-------------------------------------------------------------------

; Error symbol definitions
;   Global errors

        AddError UseDesk,   "UseDesk",   0
        AddError BadSWI,    "BadSWI",    &1E6
        AddError BadRead,   "BadRead",   &410
        AddError BadWrt,    "BadWrt",    &411

;   Module-specific errors

        AddError NotActive, "NotActive", 0
        AddError NoTask,    "NoTask",    0
        AddError RecDied,   "RecDied",   0

; LookupError - a simple veneer to MessageTrans_ErrorLookup
;
; On entry:
;   R0 -> tokenised error block
;   R1 -> mfd, or 0 for global messages

LookupError
        Push    "R2-R7, R14"
        MOV     R2, #0          ; internal buffer
        MOV     R3, #0
        MOV     R4, #0          ; no params supported
        MOV     R5, #0
        MOV     R6, #0
        MOV     R7, #0
        SWI     XMessageTrans_ErrorLookup
        Pull    "R2-R7, PC"

;-------------------------------------------------------------------
;
; Initialise - module initialisation entry
;

Initialise
        EntryS
        LDR     R0, [R12]
        TEQ     R0, #0
        MOVNE   R12, R0
        BNE     %FT01

        MOV     R0, #ModHandReason_Claim
        MOV     R3, #WorkspaceSize
        SWI     XOS_Module                      ; allocate workspace
        EXIT    VS
        STR     R2, [R12]
        MOV     R12, R2

01      MOV     R0, #0                          ; initialise workspace
        STR     R0, mystack
        STR     R0, mytaskhandle

      [ standalone
        ADR     R0, resourcefs_files
        SWI     XResourceFS_RegisterFiles       ; register resources, ignore errors
      ]

        ADR     R0, MessagesBlock
        ADR     R1, MessagesFile
        MOV     R2, #0
        SWI     XMessageTrans_OpenFile          ; open messages, ignore errors

        EXITS

TASK
        =       "TASK"
        ALIGN

;-------------------------------------------------------------------
;
; Finalise - module finalisation entry
;

Finalise
        EntryS
        Push    "R12"
        LDR     R12, [R12]

        LDR     R0, mytaskhandle
        CMP     R0, #0
        BLGT    CloseDown                       ; close down task if necessary

        ADR     R0, MessagesBlock
        SWI     XMessageTrans_CloseFile         ; close messages

      [ standalone
        ADR     R0, resourcefs_files
        SWI     XResourceFS_DeregisterFiles     ; remove resources
      ]

      [ UseDynamicAreas
        ; we need to remove any DAs still present
      ]

        MOV     R0, #ModHandReason_Free
        MOV     R2, R12
        SWI     XOS_Module                      ; free workspace

        Pull    "R12"
        MOV     R0, #0
        STR     R0, [R12]                       ; reset the private word

        EXITS

;-------------------------------------------------------------------
;
; Service - service call handler
;

        DCD     ServiceTable - Module_BaseAddr
Service MOV     R0, R0
        TEQ     R1, #Service_Reset
        TEQNE   R1, #Service_StartWimp
        TEQNE   R1, #Service_StartedWimp
        MOVNE   PC, R14
ServiceCode
        Push    "R14"
        LDR     R12, [R12]
        TEQ     R1, #Service_Reset
        BEQ     Svc_Reset
        TEQ     R1, #Service_StartWimp
        BEQ     Svc_StartWimp
        TEQ     R1, #Service_StartedWimp
        BEQ     Svc_StartedWimp
        MOV     PC, R14
ServiceTable
        DCD     0                       ; flags
        DCD     ServiceCode - Module_BaseAddr
        DCD     Service_Reset           ; &27 (table must be in numerical order)
        DCD     Service_StartWimp       ; &49
        DCD     Service_StartedWimp     ; &4A
        DCD     0                       ; terminator

Svc_Reset
        MOV     R14, #0
        STR     R14, mytaskhandle
        Push    "R0"
        ADR     R0, MessagesBlock
        SWI     XMessageTrans_CloseFile
        Pull    "R0, PC"

Svc_StartWimp
        LDR     R14, mytaskhandle
        TEQ     R14, #0
        MOVEQ   R14, #-1
        STREQ   R14, mytaskhandle
        ADREQ   R0, ClipboardCommand
        MOVEQ   R1, #0
        Pull    "PC"

Svc_StartedWimp
        LDR     R14, mytaskhandle
        CMP     R14, #-1
        MOVEQ   R14, #0
        STREQ   R14, mytaskhandle
        Pull    "PC"

;-------------------------------------------------------------------
;
; CommandTable - help and command keyword table
;

CommandTable
ClipboardCommand
        Command Desktop_Clipboard, 0, 0, International_Help
        =       0

        [ International_Help = 0
Desktop_Clipboard_Help
        =       "The Clipboard module provides support for the Desktop global "
        =       "clipboard.", 13, "Do not use *", 27, 0, ", use *Desktop "
        =       "instead.", 13
Desktop_Clipboard_Syntax
        =       27, 1, 0
        |
Desktop_Clipboard_Help
        =       "HCPBDCB", 0
Desktop_Clipboard_Syntax
        =       "SCPBDCB", 0
        ]
        ALIGN

Desktop_Clipboard_Code
        Entry
        LDR     R12, [R12]
        LDR     R14, mytaskhandle
        CMP     R14, #-1
        MOVEQ   R2, R0                           ; R2 -> command tail
        MOVEQ   R0, #ModHandReason_Enter
        addr    R1, Title, EQ
        SWIEQ   XOS_Module                      ; shouldn't return

        ADR     R0, ErrorBlock_UseDesk
        MOV     R1, #0
        MOV     R2, #0
        addr    R4, Title
        SWI     XMessageTrans_ErrorLookup
        EXIT

        MakeErrorBlock UseDesk

; ----------------------------------------------------------------------------------------------------------------------
; Neil's debugging routines

      [ debug
        InsertNDRDebugRoutines
      ]

        END
