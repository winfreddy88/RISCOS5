; Copyright 1999 Element 14 Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;
;  s.Action - routines to handle action blocks
;


;-------------------------------------------------------------------
;
; GetActionHandle - finds the action handle that a message/SWI was referring to
;
; On entry:
;   R11 = my_ref of last message sent as part of the transaction we're interested in
; On exit:
;   R11 -> action block for the transaction, or 0 if not found

GetActionHandle
        Entry   "R0"
        MOV     R14, R11
        ADR     R11, Actions - Act_Next
01      LDR     R11, [R11, #Act_Next]
        TEQ     R11, #0
        EXIT    EQ                      ; can't find it?
        LDR     R0, [R11, #Act_MyRef]
        Debug   tmp, "test yourref",r0
        TEQ     R14, R0
        BNE     %BT01                   ; try next block if it doesn't match
        EXIT


;-------------------------------------------------------------------
;
; NewAction - creates a new action block
;
; On exit:
;   R11 -> new action block

NewAction
        EntryS  "R0, R2, R3"
        ; Claim memory from RMA
        Debug   tmp, "New action"
        MOV     R0, #ModHandReason_Claim
        MOV     R3, #Act_Size
        SWI     XOS_Module
        STRVS   R0, [sp]
        EXIT    VS
        MOV     R11, R2
        ; Insert into action block list
        LDR     R0, Actions
        STR     R0, [R11, #Act_Next]
        STR     R11, Actions
        ; Initialise block
        MOV     R0, #0
        STR     R0, [R11, #Act_State]
        STR     R0, [R11, #Act_Task]
        STR     R0, [R11, #Act_Owner]
        STR     R0, [R11, #Act_Flags]
        STR     R0, [R11, #Act_Window]
        STR     R0, [R11, #Act_Icon]
        STR     R0, [R11, #Act_X]
        STR     R0, [R11, #Act_Y]
        STR     R0, [R11, #Act_BufAddr]
        STR     R0, [R11, #Act_BufLen]
        STR     R0, [R11, #Act_List]
        STR     R0, [R11, #Act_Name]
        STR     R0, [R11, #Act_TransCount]
        STR     R0, [R11, #Act_IntFlags]
        MOV     R0, #-1
        STR     R0, [R11, #Act_MyRef]
        STR     R0, [R11, #Act_DataRequestRef]
        EXITS


;-------------------------------------------------------------------
;
; DeleteAction - finish with an action block
;
; On entry:
;   R11 -> action block

DeleteAction
        EntryS  "R0, R2"
        ; Check it isn't a null pointer
        TEQ     R11, #0
        EXITS   EQ
        ; Find previous link in list
        ADR     R0, Actions - Act_Next
01      LDR     R2, [R0, #Act_Next]
        TEQ     R2, R11                 ; found a match?
        TEQNE   R2, #0                  ; or got to end of list?
        MOVNE   R0, R2
        BNE     %BT01
        TEQ     R2, R11                 ; if not a match, then we weren't in list
        EXITS   NE                      ; so probably a junk pointer; exit
        ; Remove link from list
        LDR     R2, [R11, #Act_Next]
        STR     R2, [R0, #Act_Next]
        ; Free temp file buffer
        LDR     R0, [R11, #Act_IntFlags]
        TST     R0, #1                  ; is don't-free-buffer bit set?
        LDREQ   R0, [R11, #Act_BufAddr]
        BLEQ    FreeMem
        ; Free data type list
        MOV     R0, #ModHandReason_Free
        LDR     R2, [R11, #Act_List]
        TEQ     R2, #0
        SWINE   XOS_Module              ; ignore errors
        ; Free proposed leafname
        MOV     R0, #ModHandReason_Free
        LDR     R2, [R11, #Act_Name]
        TEQ     R2, #0
        SWINE   XOS_Module              ; ignore errors
        ; Finally, free block
        MOV     R0, #ModHandReason_Free
        MOV     R2, R11
        SWINE   XOS_Module              ; ignore errors
        EXITS


;-------------------------------------------------------------------
;
; DeleteActions - free up all action blocks (for use when shutting down)
;

DeleteActions
        EntryS  "R0, R11"
        LDR     R11, Actions
        TEQ     R11, #0
        EXITS   EQ
01      LDR     R0, [R11, #Act_Next]
        BL      DeleteAction
        MOVS    R11, R0
        BNE     %BT01
        STR     R11, Actions
        EXITS


        END
