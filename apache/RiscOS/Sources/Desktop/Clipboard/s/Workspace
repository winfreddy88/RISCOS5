; Copyright 1999 Element 14 Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;
;  s.Workspace - main workspace layout
;


UserStackSize   *       1024

                ^       0, R12
MessagesBlock   #       16              ; Module's message file descriptor
mystack         #       4               ; Pointer to task's stack (in RMA)
mytaskhandle    #       4               ; Our task handle (0 if not active, -1 if starting)
OldUpcallHandler #      12              ; Handler workspace
OldExitHandler  #       12
OldErrorHandler #       12
MsgQueue        #       4               ; Linked list of Wimp messages waiting to be delivered (also our pollword)

ClipboardTask   #       4               ; Task handle of our client, or 0 if clipboard owner isn't a client of ours
ClipboardFlags  #       4               ; Flags as passed to Clipboard_Put
ClipboardType   #       4               ; Clipboard's data type, or address of data type list
ClipboardAddr   #       4               ;  ... and its address
ClipboardLen    #       4               ;  ... and its length
ClipboardName   #       4               ;  ... and a pointer to its proposed leafname

 [ DragNDrop
DragTask        #       4               ; Task handle of StartDrag task, or 0 if none
DragFlags       #       4               ; As passed to Clipboard_StartDrag
DragSpriteArea  #       4               ; Sprite area (if DragASprite) or renderer (if DragAnObject)
DragSprite      #       4               ; Sprite name (if DragASprite) or parameter block (if DragAnObject)
DragWindow      #       4               ; Source window handle (for determining move/copy status)
DragPtrBBox     #       16              ; Bounding box of pointer (screen-relative OS units)
DragOutlineBBox #       16              ; Initial bounding box of dragbox outline (screen-relative OS units)
DragRealBBox    #       16              ; Data's "real" bounding box (pointer-relative millipoints)
DragLen         #       4               ; Estimated size of data (for use in Message_DataSave)
DragType        #       4               ; Pointer to data types list
DragName        #       4               ; Pointer to proposed leafname
 ]

Actions         #       4               ; Head of singly-linked list of action structures

PollBlock       #       256             ; Poll block

WorkspaceSize   *       :INDEX: @


; Action block layout
;
; These contain all pertinent information about each ongoing data transfer operation being performed by the Clipboard,
; allowing operations to span calls to Wimp_Poll, while allowing multiple transactions to be performed at the same time - for
; example, when a Message_ClaimEntity 4 is broadcast, more than one task might request the clipboard data type concurrently;
; or when a drop transaction is being performed, we may be acting on behalf of both sender and receiver at the same time.
;
; One of these should be present for each clipboard or data type send or fetch and each drop send or fetch.
;
; Any one action can comprise a data load stage, a data save stage, or both; either stage may use either the new protocol
; (Clipboard_Get / Message_PutRequest / Clipboard_Put / Message_Paste protocol), or the old protocol (Message_DataRequest /
; Message_DataSave / Message_RAMFetch / Message_RAMTransmit / Message_DataSaveAck / Message_DataLoad / Message_DataLoadAck)

                ^       0
Act_Next        #       4               ; Link
Act_State       #       4               ; State word (see below)
Act_MyRef       #       4               ; my_ref field of last message sent
Act_Task        #       4               ; Task handle that data is being sent to
Act_Owner       #       4               ; Task handle of clipboard owner
Act_Flags       #       4               ; As passed to Clipboard_Get, Clipboard_GetDataType or Clipboard_CatchDrop, else 0
Act_Window      #       4               ; Destination window handle
Act_Icon        #       4               ;  ... and icon handle
Act_X           #       4               ;  ... and x co-ordinate
Act_Y           #       4               ;  ... and y co-ordinate
Act_BufAddr     #       4               ; Address of temporary buffer
Act_BufLen      #       4               ;  ... and its length
Act_List        #       4               ; Pointer to destination task's data type preferences
Act_Type        #       4               ; Filetype of clipboard data as sent by clipboard owner
Act_Name        #       4               ; Pointer to proposed leafname
Act_TransCount  #       4               ; Index into buffer to start from for next RAMTransmit
Act_DataRequestRef #    4               ; my_ref field of last DataRequest broadcast received (only used in State_PutRequest1)
Act_IntFlags    #       4               ; Internal flags:
                                        ;     Bit 0 set => don't free "temporary" buffer, since it's actually the clipboard!
Act_Size        *       :INDEX: @


; Action states
; These refer to the message most recently sent on behalf of this action.
; See also Doc.StateDiag

                        ^       0
State_None              #       1
State_DataSave          #       1
State_DataSaveAck       #       1
State_DataLoad          #       1
State_RAMFetch1         #       1
State_RAMFetch2         #       1
State_RAMTransmit       #       1
State_DataRequest1      #       1
State_DataRequest2      #       1
State_PutRequest1       #       1
State_PutRequest2       #       1
State_PutRequest3       #       1
State_Paste             #       1
State_FirstUnused       #       0


; Message queue block layout

                ^       0
MsgQ_Next       #       4
MsgQ_EventCode  #       4
MsgQ_Handle     #       4
MsgQ_Icon       #       4
MsgQ_MyRefPtr   #       4
MsgQ_Data       #       0
MsgQ_Size       *       :INDEX: @

                END
