/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* > unix.c (Not in branched tree) */

/**************************************************************************/
/*                                                                        */
/* Copyright [1997-2000] Pace Micro Technology PLC.  All rights reserved. */
/*                                                                        */
/* The copyright in this material is owned by Pace Micro Technology PLC   */
/* ("Pace").  This material is regarded as a highly confidential trade    */
/* secret of Pace.  It may not be reproduced, used, sold or in any        */
/* other way exploited or transferred to any third party without the      */
/* prior written permission of Pace.                                      */
/**************************************************************************/

#ifdef LAYERS
#include "layers.h"
#include "layers_dbg.h"
#endif

#include <dirent.h>

#include <string.h>
#include <stdio.h>

#include "encpriv.h"

int encoding__load_map_file(const char *leaf, UCS2 **ptable, int *pn_entries, int *palloc)
{
    DIR *dir;
    FILE *fh;
    int flen;
    char fname[1024];
    char *slash;
    struct dirent *dp;

    void *table;
    int n_entries;
    int alloc;

    char *s = getenv("UNICODE_DIR");
    if (s == NULL)
	s = "/usr/local/etc/unicode";

    *fname = '\0';
    strncat(fname, s, sizeof(fname)-1);
    if ( fname[ strlen(fname)-1 ] != '/' )
	strcat( fname, "/" );
    strncat(fname, "Encodings/", sizeof(fname)-1);
    strncat(fname, leaf, sizeof(fname)-1);

    /* We get to search the directory, because the leafname may be a prefix */
    slash = strrchr(fname, '/');
    if (!slash) return 0;

    *slash = '\0';
    slash++;

    dir = opendir(fname);
    if (!dir) return 0;

    while ((dp = readdir(dir)) != NULL) {
        if (strncmp(dp->d_name, slash, strlen(slash)) == 0) {
            *(slash - 1) = '/';
            *slash = '\0';
            strncat(fname, dp->d_name, sizeof(fname)-1);
            break;
        }
    }

    closedir(dir);

    fh = fopen(fname, "rb");
    if (!fh)
	return 0;

    fseek(fh, 0, SEEK_END);
    flen = ftell(fh);
    fseek(fh, 0, SEEK_SET);

    alloc = 1;
    n_entries = flen/2;
    table = encoding__alloc(flen);

    if (table)
    {
	if (fread(table, flen, 1, fh) != 1)
	{
	    encoding__free(table);
	    table = NULL;
	}
    }

    fclose(fh);

    *ptable = table;
    *pn_entries = n_entries;
    *palloc = alloc;

    return table != NULL;
}

int encoding_current_alphabet(void)
{
    return 0;
}

const UCS4 *encoding_alphabet_ucs_table(int a)
{
    return NULL;
}

/* eof unix.c */
