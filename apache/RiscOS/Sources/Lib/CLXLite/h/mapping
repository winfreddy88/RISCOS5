/* Copyright 2000 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
  Title:     Code to support mapping symbols
  $Revision: 1.2 $  LDS 16-Jan-91
*/

#ifndef __mapping_h
#define __mapping_h

#include "CLX/aof_.h"

typedef struct
{
    unsigned32 base;
    unsigned32 size;
    int type;
} map_entry;

typedef struct
{
    unsigned32 last_base;
    unsigned32 last_size;
    int last_entry;
    int last_type;
    int entries;
    map_entry entry[1];
} symbol_map;

symbol_map *mapping_init(const char *areaname, int32 attributes,
                         unsigned32 base, const char *strt,
                         const aof_symbol *symt, int nsyms);
/*
 * Prepare a map for an area. For the area, pass in the name,
 * the attributes and the base address from the area header.
 * Pass in the object file's symbol table by symt and nsyms.
 * Pass in the string table as strt.
 */

const map_entry *mapping_region(symbol_map *map, unsigned32 addr);
/*
 * Return the region enclosing the address addr. Addr should
 * either be the offset within the area, or the absolute
 * address if an absolute area. The returned entry will give
 * the base address of the enclosing area, and its size (the last
 * area will have size 0xFFFFFFFF). The type will be one of
 * 'a', 'd' or 't'.
 */

void mapping_final(symbol_map *map);
/*
 * Free the symbol map.
 */

#endif
