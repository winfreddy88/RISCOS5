/* Copyright 2009 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
  Title:        bytesex - endianness functions
  Copyright:    (C) 2009, RISC OS Open Limited
*/

#ifndef __bytesex_h
#define __bytesex_h

#ifndef int32
#  define int32 long int
#endif

typedef enum
{
  bytesex_WANT_LITTLE_ENDIAN,
  bytesex_WANT_BIG_ENDIAN
} bytesex_requirement;


extern bytesex_requirement bytesex_host(void);
/*
 * Returns bytesex_WANT_LITTLE_ENDIAN if the current host is little-endian,
 * else return bytesex_WANT_BIG_ENDIAN.
 */

extern void bytesex_reverse(int state);
/*
 * Sets whether byte sex reversing is enabled (nonzero argument) or disabled (zero argument).
 */

extern int bytesex_reversing(void);
/*
 * Returns nonzero if byte sex reversing is enabled.
 */

extern int bytesex_reverse_auto(bytesex_requirement mode);
/*
 * The argument is the endianness of the data that will be passed to
 * bytesex_hostval() - so this function turns on or off byte sex reversing
 * depending upon whether this matches the host's native endianness.
 */

extern int32 bytesex_hostval(int32 value);
/*
 * If byte sex reversing is enabled, this returns its argument with the
 * byte order within the word reversed - else it simply returns the
 * argument.
 */

#endif
