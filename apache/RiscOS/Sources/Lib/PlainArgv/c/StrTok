/* Copyright 2014 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "Desk.DeskMem.h"

#include "PlainArgv.StrTok.h"


typedef struct	{
	char*	base;
	char*	end;
	}
	strtok_block;

#define	end_FIRST ((char*) 1)


#define	RemoveThread								\
	{									\
	list_len--;								\
	list[ thread] = list[ list_len];					\
	list = Desk_DeskMem_Realloc( list, list_len*sizeof( strtok_block));	\
	}


char*	PlainArgv_StrTok( char* base)
	{
	static strtok_block*	list		= NULL;
	static int		list_len	= 0;
	
	int	thread;
	char*	next;
	
	if ( !base)	return NULL;
	
	for ( thread=0; thread<list_len; thread++)	{
		if ( list[ thread].base==base)	break;
		}
	
	if (thread==list_len)	{
		/*printf( "Creating new thread for base %p\n", base);
		*/
		thread = list_len;
		list_len++;
		list = Desk_DeskMem_Realloc( list, list_len*sizeof( strtok_block));
		list[ thread].base	= base;
		list[ thread].end	= end_FIRST;
		}
	
	
	if ( list[ thread].end == NULL)	{
		RemoveThread
		return NULL;
		}
	
	
	else if ( list[ thread].end == end_FIRST)	{
		next = list[ thread].base;
		}
	
	else	{
		*(list[ thread].end) = ' ';
		next = list[ thread].end + 1;
		}
	
	while ( *next && *next==' ')	next++;
	
	if ( *next==0)	{
		RemoveThread
		return NULL;
		}
	
	/* Find end of this token.	*/
		{
		char*	end = next;
		while ( *end && *end!=' ')	end++;
		if ( *end)	{
			list[ thread].end = end;
			*end = 0;
			}
		else	list[ thread].end = NULL;
		}
	
	return next;
	}
