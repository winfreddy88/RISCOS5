/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/************************************************************************/
/* File:    Dirs.c                                                      */
/* Purpose: Test harness for NBLib.                                     */
/*                                                                      */
/* Author:  Neil Bingham <mailto:nbingham@acorn.com>                    */
/* History: 0.01  Sun 08th November 1998                                */
/*                Created.                                              */
/************************************************************************/

#include "DirsTst.h"
#include "Main.h"
#include "Internal.h"


/************************************************************************/
/* nb_directory_create_TEST                                             */
/*                                                                      */
/* Test of nb_directory_create                                          */
/************************************************************************/
void nb_directory_create_TEST(void)
{
  _kernel_oserror	*er = NULL;
  unsigned int bits;

  display_title("nb_directory_create");

  bits = bits_to_set();

  printf("Enter source file:      ");
  scanf("%s", &path_1);
  printf("Enter destination file: ");
  scanf("%s", &path_2);

  er = nb_directory_create(bits, path_1, path_2);
  oserror_dump(er);
}


/************************************************************************/
/* nb_directory_exists_TEST                                             */
/*                                                                      */
/* Test of nb_directory_exists                                          */
/************************************************************************/
void nb_directory_exists_TEST(void)
{
  _kernel_oserror	*er = NULL;
  unsigned int bits;

  display_title("nb_directory_exists");

  bits = bits_to_set();

  printf("Enter location: ");
  scanf("%s", &path_1);
  printf("Enter filename: ");
  scanf("%s", &path_2);

  er = nb_directory_exists(bits, path_1, path_2);
  oserror_dump(er);
}


/************************************************************************/
/* nb_directory_lock_TEST                                               */
/*                                                                      */
/* Test of nb_directory_lock                                            */
/************************************************************************/
void nb_directory_lock_TEST(void)
{
  _kernel_oserror	*er = NULL;
  unsigned int bits;

  display_title("nb_directory_lock");

  bits = bits_to_set();

  printf("Enter location: ");
  scanf("%s", &path_1);
  printf("Enter file:     ");
  scanf("%s", &path_2);

  er = nb_directory_lock(bits, path_1, path_2);
  oserror_dump(er);
}


/************************************************************************/
/* nb_directory_unlock_TEST                                             */
/*                                                                      */
/* Test of nb_directory_unlock                                          */
/************************************************************************/
void nb_directory_unlock_TEST(void)
{
  _kernel_oserror	*er = NULL;
  unsigned int bits;

  display_title("nb_directory_unlock");

  bits = bits_to_set();

  printf("Enter location: ");
  scanf("%s", &path_1);
  printf("Enter file:     ");
  scanf("%s", &path_2);

  er = nb_directory_unlock(bits, path_1, path_2);
  oserror_dump(er);
}
