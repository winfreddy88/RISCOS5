; Copyright 2005 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; >HALLib.Hdr.HALMacros
; Copyright © Castle Technology ltd, 2005
; All rights reserved.


	; ********************************************************************************
	; *                                                                              *
	; * Output the comments at the start of the declaration to describe which HAL    *
	; * function is being called and what parameters it takes                        *
	; *                                                                              *
	; ********************************************************************************
	MACRO
	HAL_Comments	$outtype, $entry, $type0, $name0, $type1, $name1, $type2, $name2, $type3, $name3
	=	10, 10
	=	"/********************************************************************************", 10
	=	" *", 10
	=	" * Declaration for $entry", 10
	=	" *", 10
	=	" * Input"
  [ "$type0" = "" :LOR: "$type1" <> ""
	=	"s:", 10
  |
	=	":", 10
  ]
  [ "$type0" <> ""
	=	" *   $type0 $name0", 10
    [ "$type1" <> ""
	=	" *   $type1 $name1", 10
      [ "$type2" <> ""
	=	" *   $type2 $name2", 10
        [ "$type3" <> ""
	=	" *   $type3 $name3", 10
        ]
      ]
    ]
  |
	=	" *   None", 10
  ]
	=	" * Output:", 10
  [ "$outtype" = "void"
	=	" *   None", 10
  |
	=	" *   $outtype", 10
  ]
	=	" */", 10
	MEND


	; ********************************************************************************
	; *                                                                              *
	; * Output the HAL function pointer's prototype                                  *
	; *                                                                              *
	; ********************************************************************************
	MACRO
	HAL_Prototype	$outtype, $entry, $type0, $name0, $type1, $name1, $type2, $name2, $type3, $name3
	=	"$outtype $entry ("
  [ "$type0" = ""
	=	"void"
  |
	=	"$type0 $name0"
    [ "$type1" <> ""
	=	", $type1 $name1"
      [ "$type2" <> ""
	=	", $type2 $name2"
        [ "$type3" <> ""
	=	", $type3 $name3"
        ]
      ]
    ]
  ]
	=	")"
	MEND


	; ********************************************************************************
	; *                                                                              *
	; * Output the inline assembler for this HAL function                            *
	; *                                                                              *
	; ********************************************************************************
	MACRO
$magic	HAL_ARMCode	$outtype, $entry, $type0, $name0, $type1, $name1, $type2, $name2, $type3, $name3

	LCLS	inregs
	LCLS	outregs

	; Setup all the stuff relating to the inputs to this HAL routine
  [ "$type0" <> ""
        =	"        MOV     R0, $name0", 10
inregs	SETS	"R0"
    [ "$type1" <> ""
        =	"        MOV     R1, $name1", 10
inregs	SETS	"$inregs,R1"
      [ "$type2" <> ""
        =	"        MOV     R2, $name2", 10
inregs	SETS	"$inregs,R2"
        [ "$type3" <> ""
        =	"        MOV     R3, $name3", 10
inregs	SETS	"$inregs,R3"
        ]
      ]
    ]
inregs	SETS	"$inregs,R9"
  |
inregs	SETS	"R9"
  ]
	; Do the call to the HAL routine (with the static base in R9)
	=	"        MOV     R9, sb_$entry", 10

	; Set up the stuff relating to the output (if any) from this HAL routine
  [ "$magic" = ""
    [ "$outtype" = "void"
outregs	SETS	""
    |
outregs	SETS	"R0"
    ]
	=	"        BLX     pc_$entry, {$inregs}, {$outregs}, {R0-R3,R12,PC}", 10	; Note 1: the compiler removes entries from the last register
    [ "$outtype" <> "void"								; list (the one saying which registers are corrupted by the
	=	"        MOV     value, R0", 10						; BLX) based on which registers you list in the second
    ]											; register list (the ones output by the call).
  |											;
	=	"        BLX     pc_$entry, {$inregs}, {$magic}, {R0-R3,R12,PC}", 10	; Note 2: the compiler automatically adds LR to the last
	=	"        MOV     ((uint32_t *) &value)[0], R0", 10			; register list so we don't need to bother with that. We do
    [ "$magic" = "R0-R1" :LOR: "$magic" = "R0-R2" :LOR: "$magic" = "R0-R3"		; have to tell it that BLX corrupts flags (hence "PC").
	=	"        MOV     ((uint32_t *) &value)[1], R1", 10
    ]
    [ "$magic" = "R0-R2" :LOR: "$magic" = "R0-R3"
	=	"        MOV     ((uint32_t *) &value)[2], R2", 10
    ]
    [ "$magic" = "R0-R3"
	=	"        MOV     ((uint32_t *) &value)[3], R3", 10
    ]
  ]
	MEND


	; ********************************************************************************
	; *                                                                              *
	; * Output the declaration                                                       *
	; *                                                                              *
	; ********************************************************************************
	MACRO
$magic	HAL_Routine	$outtype, $entry, $type0, $name0, $type1, $name1, $type2, $name2, $type3, $name3

	LCLS	outdef

  [ "$magic" = "struct"
outdef	SETS	"__value_in_regs $outtype"
  |
outdef	SETS	"$outtype"
  ]

	; Output some comments
$magic	HAL_Comments	$outtype, $entry, $type0, $name0, $type1, $name1, $type2, $name2, $type3, $name3

	; Output the HAL function pointer's prototype
	=	"HAL_VARIABLE "
	HAL_Prototype	$outdef, "(*pc_$entry)", $type0, $name0, $type1, $name1, $type2, $name2, $type3, $name3
	=	";", 10

	; Output the extern declaration for the static base variable
	=	"HAL_VARIABLE uint32_t sb_$entry;", 10

	; Output the inline function prototype
	=	"HAL_FUNCTION inline "
	HAL_Prototype	$outdef, $entry, $type0, $name0, $type1, $name1, $type2, $name2, $type3, $name3

	; Output the inline function's body
	=	10, "{", 10
  [ "$outtype" <> "void"
 	=	"  $outtype value;", 10
  ]
	; The assembler generated depends mostly on the type/number of outputs
  [ "$magic" <> ""
	=	"  switch (sizeof value)", 10
	=	"  {", 10

	=	"    case 8:", 10, "      __asm", 10, "      {", 10
R0-R1	HAL_ARMCode	$outtype, $entry, $type0, $name0, $type1, $name1, $type2, $name2, $type3, $name3
	=	"      }", 10, "      break;", 10

    [ "$magic" = "struct"
	=	"    case 12:", 10, "      __asm", 10, "      {", 10
R0-R2	HAL_ARMCode	$outtype, $entry, $type0, $name0, $type1, $name1, $type2, $name2, $type3, $name3
	=	"      }", 10, "      break;", 10

	=	"    case 16:", 10, "      __asm", 10, "      {", 10
R0-R3	HAL_ARMCode	$outtype, $entry, $type0, $name0, $type1, $name1, $type2, $name2, $type3, $name3
	=	"      }", 10, "      break;", 10
    ]
	=	"  }", 10
  |
	=	"  __asm", 10, "  {", 10
	HAL_ARMCode	$outtype, $entry, $type0, $name0, $type1, $name1, $type2, $name2, $type3, $name3
	=	"  }", 10
  ]
  [ "$outtype" <> "void"
 	=	"  return(value);", 10
  ]
	=	"}", 10
	MEND


	END
