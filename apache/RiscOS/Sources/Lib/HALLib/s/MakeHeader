; Copyright 2005 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; >HALLib.s.MakeHeader
; Copyright © Castle Technology ltd, 2005
; All rights reserved.


	; All the magic lives in the HALMacros file. It attempts to make this file as
	; simple as possible to maintain.
	;
	GET	Hdr.HALMacros


	AREA	|HALHeader$$Data|, DATA, READONLY

	; ********************************************************************************
	; *                                                                              *
	; * This bit actually generates the C header file with function declarations for *
	; * all of the HAL routines as listed.                                           *
	; *                                                                              *
	; ********************************************************************************

	=	"/* >HALLib.h.HALLib", 10
	=	" * Copyright © Castle Technology ltd, 2005", 10
	=	" * All rights reserved.", 10
	=	" *", 10
	=	" * This file is generated automatically - do not edit!", 10
	=	" */", 10, 10

	=	"#include <stdint.h>", 10
	=	"#include <stddef.h>", 10
	=	"#include <stdbool.h>", 10, 10

	=	"#include ""Global/HALEntries.h""", 10, 10

	=	"#ifdef INCLUDE_DEFINITIONS", 10
	=	"#define HAL_VARIABLE", 10
	=	"#define HAL_FUNCTION extern", 10
	=	"#else", 10
	=	"#define HAL_VARIABLE extern", 10
	=	"#define HAL_FUNCTION", 10
	=	"#endif", 10, 10

	=	"#define HAL_LookupRoutine(name) _swix(OS_Hardware, _INR(8,9) | _OUTR(0,1), 1, EntryNo_##name, &pc_##name, &sb_##name)", 10, 10

        =	"typedef struct", 10
        =	"{", 10
        =	"  uint32_t sda, sdl;", 10
        =	"} HAL_IIC_Lines_t;", 10, 10

	=	"typedef struct", 10
	=	"{", 10
	=	"  unsigned addr:8;", 10
	=	"  unsigned :22;", 10
	=	"  unsigned checksumonly:1;", 10
	=	"  unsigned nostart:1;", 10
	=	"  union", 10
	=	"  {   unsigned checksum;", 10
	=	"      void *data;", 10
	=	"  } d;", 10
	=	"  unsigned len;", 10
	=	"} HAL_IIC_Transfer_t;", 10, 10

	=	"typedef struct", 10
	=	"{", 10
	=	"    int device;", 10
	=	"    union {", 10
	=	"       struct {", 10
	=	"         unsigned char *addr;", 10
	=	"         int maskandpolarity;", 10
	=	"       } bit;", 10
	=	"       struct {", 10
	=	"         int (*forme)(void *handle);", 10
	=	"         void *handle;", 10
	=	"       } func;", 10
	=	"    } sub;", 10
	=	"} HAL_IRQ_Descriptor_t;", 10, 10

	=	"typedef union", 10
	=	"{", 10
	=	"    struct", 10
	=	"    {", 10
	=	"        uint32_t flags;", 10
	=	"        volatile uint8_t *cmd;", 10
	=	"        volatile uint8_t *ctrl;", 10
	=	"        volatile uint8_t *bus_master_reg;", 10
	=	"        int int_device;", 10
	=	"        uint32_t available_pio_modes;", 10
	=	"        uint32_t available_dma_modes;", 10
	=	"        uint32_t available_ultradma_modes;", 10
	=	"        uint16_t dma_id;              // see OS_Hardware device spec", 10
	=	"        uint32_t dma_location;        //           """, 10
	=	"        const char *dma_description;  //           """, 10
	=	"        uint32_t dma_logical_channel; // or -1 to obtain at run-time", 10
	=	"    } bus;", 10
	=	"    struct", 10
	=	"    {", 10
	=	"        uint32_t buses;", 10
	=	"        uint16_t dma_id;", 10
	=	"        uint32_t dma_location;", 10
	=	"        const char *dma_description;", 10
	=	"    } group;", 10
	=	"} HAL_ATAInfo_t;", 10, 10

	=	"typedef struct", 10
	=	"{", 10
	=	"    uint32_t flags;", 10
	=	"    uint8_t pio_mode;  // (eg 0-4)", 10
	=	"    uint8_t dma_mode;  // (eg 0-2) 0xFF if none", 10
	=	"    uint8_t udma_mode; // (eg 0-5) 0xFF if none", 10
	=	"    uint8_t reserved;  // set to 0xFF", 10
	=	"} HAL_ATAMode_t;", 10


	; Notes:
	;
	; The HAL_Routine macro generates all of the stuff required for a declaration of the
	; relevant bits to go into the HALLib.h C header file. Much like a C function prototype,
	; it takes the type for the output of the function (may be void), the name of the HAL
	; routine onto which the function maps - this should match the name as found in
	; HALEntries.h (e.g. "EntryNo_HAL_Timers" but without the "EntryNo_" bit).
	;
	; It also takes zero to four entry parameters for the function declaration (their name
	; and their type).
	;
	; Example syntax:
	;
	;   <magic> HAL_Routine <type>, <HAL_RoutineName> [, <type>, <name> [, <type>, <name> [, <type>, <name> [, <type>, <name>]]]]
	;
	; The <magic> part is used to specify when a HAL routine returns a structure (in
	; registers) or a special case of a 64-bit type (e.g. long long) in registers R0-R1.
	;
	; For example:
	;
	;   struct HAL_Routine HAL_IIC_Lines_t, HAL_IICReadLines, int32_t, bus
	;
	; is used to define the function with prototype:
	;
	;   HAL_IIC_Lines_t HAL_IICReadLines(int32_t bus)
	;
	; If you use the "struct" magic flag, you will also need to ensure that the structure
	; is defined in the section above (note: HAL_IIC_Lines_t is already defined) or the
	; header file containing the definition is #included.
	;
	; Another example:
	;
	;   int64 HAL_Routine unsigned long long, HAL_ReadBigNumber, uint32_t, index
	;
	; is used to define the function with prototype:
	;
	;   unsigned long long HAL_ReadBigNumber(uint32_t index)
	;
	; where the value is returned from HAL_ReadBigNumber in R0 and R1 (as is normal in the
	; ATPCS calling standard for the HAL). The "int64" magic flag can be used to indicate
	; any of the normal 64-bit types in C (e.g. uint32_t) - it saves the macro from having
	; to understand the (infinate) number of ways of expressing them.
	;
	HAL_Routine	void,			HAL_Init,			uint32_t *, riscos_header
	HAL_Routine	int32_t,		HAL_IRQEnable,			int32_t, device
	HAL_Routine	int32_t,		HAL_IRQDisable,			int32_t, device
	HAL_Routine	void,			HAL_IRQClear,			int32_t, device
	HAL_Routine	int32_t,		HAL_IRQSource
	HAL_Routine	int32_t,		HAL_IRQStatus,			int32_t, device
	HAL_Routine	int32_t,		HAL_FIQEnable,			int32_t, device
	HAL_Routine	int32_t,		HAL_FIQDisable,			int32_t, device
	HAL_Routine	void,			HAL_FIQDisableAll
	HAL_Routine	void,			HAL_FIQClear,			int32_t, device
	HAL_Routine	int32_t,		HAL_FIQSource
	HAL_Routine	int32_t,		HAL_FIQStatus,			int32_t, device
	HAL_Routine	int32_t,		HAL_Timers
	HAL_Routine	int32_t,		HAL_TimerDevice,		int32_t, timer
	HAL_Routine	uint32_t,		HAL_TimerGranularity,		int32_t, timer
	HAL_Routine	uint32_t,		HAL_TimerMaxPeriod,		int32_t, timer
	HAL_Routine	void,			HAL_TimerSetPeriod,		int32_t, timer, uint32_t, period
	HAL_Routine	uint32_t,		HAL_TimerPeriod,		int32_t, timer
	HAL_Routine	uint32_t,		HAL_TimerReadCountdown,		int32_t, timer
	HAL_Routine	uint32_t,		HAL_CounterRate
	HAL_Routine	uint32_t,		HAL_CounterPeriod
	HAL_Routine	uint32_t,		HAL_CounterRead
	HAL_Routine	void,			HAL_CounterDelay,		uint32_t, microseconds
	HAL_Routine	uint32_t,		HAL_NVMemoryType
	HAL_Routine	uint32_t,		HAL_NVMemorySize
	HAL_Routine	uint32_t,		HAL_NVMemoryPageSize
	HAL_Routine	uint32_t,		HAL_NVMemoryProtectedSize
	HAL_Routine	void,			HAL_NVMemoryProtection,		bool, b
	HAL_Routine	uint32_t,		HAL_NVMemoryIICAddress
	HAL_Routine	int32_t,		HAL_NVMemoryRead,		uint32_t, addr, void *, buffer, uint32_t, n
	HAL_Routine	int32_t,		HAL_NVMemoryWrite,		uint32_t, addr, void *, buffer, uint32_t, n
	HAL_Routine	int32_t,		HAL_IICBuses
	HAL_Routine	uint32_t,		HAL_IICType,			int32_t, bus
;struct	HAL_Routine	HAL_IIC_Lines_t,	HAL_IICSetLines,		int32_t, bus, HAL_IIC_Lines_t, lines
struct	HAL_Routine	HAL_IIC_Lines_t,	HAL_IICReadLines,		int32_t, bus
struct	HAL_Routine	HAL_IRQ_Descriptor_t,	HAL_IICDevice,			int32_t, bus
;	HAL_Routine	int32_t,		HAL_IICTransfer,		int32_t, bus, uint32_t, n, HAL_IIC_Transfer_t *, transfer
	HAL_Routine	int32_t,		HAL_IICMonitorTransfer,		int32_t, bus
;	HAL_Routine				HAL_VideoFlybackDevice
;	HAL_Routine				HAL_Video_SetMode
;	HAL_Routine				HAL_Video_WritePaletteEntry
;	HAL_Routine				HAL_Video_WritePaletteEntries
;	HAL_Routine				HAL_Video_ReadPaletteEntry
;	HAL_Routine				HAL_Video_SetInterlace
;	HAL_Routine				HAL_Video_SetBlank
;	HAL_Routine				HAL_Video_SetPowerSave
;	HAL_Routine				HAL_Video_UpdatePointer
;	HAL_Routine				HAL_Video_SetDAG
;	HAL_Routine				HAL_Video_VetMode
;	HAL_Routine				HAL_Video_PixelFormats
;	HAL_Routine				HAL_Video_Features
;	HAL_Routine				HAL_Video_BufferAlignment
;	HAL_Routine				HAL_Video_OutputFormat
	HAL_Routine	int32_t,		HAL_MatrixColumns
	HAL_Routine	uint32_t,		HAL_MatrixScan,			int32_t, column
	HAL_Routine	uint32_t,		HAL_TouchscreenType
;	HAL_Routine				HAL_TouchscreenRead
;	HAL_Routine				HAL_TouchscreenMode
	HAL_Routine	uint32_t,		HAL_TouchscreenMeasure,		int32_t, measure
int64	HAL_Routine	uint64_t,		HAL_MachineID
	HAL_Routine	void *,			HAL_ControllerAddress,		uint32_t, controller
;	HAL_Routine				HAL_HardwareInfo
;	HAL_Routine				HAL_SuperIOInfo
;	HAL_Routine				HAL_PlatformInfo
;	HAL_Routine				HAL_CleanerSpace
;	HAL_Routine				HAL_UARTPorts
;	HAL_Routine				HAL_UARTStartUp
;	HAL_Routine				HAL_UARTShutdown
;	HAL_Routine				HAL_UARTFeatures
	HAL_Routine	uint8_t,		HAL_UARTReceiveByte,		int32_t, port, int32_t *, status
	HAL_Routine	void,			HAL_UARTTransmitByte,		int32_t, port, uint8_t, byte
	HAL_Routine	int32_t,		HAL_UARTLineStatus,		int32_t, port
	HAL_Routine	int32_t,		HAL_UARTInterruptEnable,	int32_t, port, uint32_t, eor, uint32_t, mask
	HAL_Routine	int32_t,		HAL_UARTRate,			int32_t, port, int32_t, baud16
	HAL_Routine	int32_t,		HAL_UARTFormat,			int32_t, port, int32_t, format
	HAL_Routine	void,			HAL_UARTFIFOSize,		uint32_t *, rx, uint32_t *, tx
	HAL_Routine	void,			HAL_UARTFIFOClear,		int32_t, port, int32_t, flags
	HAL_Routine	int32_t,		HAL_UARTFIFOEnable,		int32_t, port, int32_t, enable
	HAL_Routine	int32_t,		HAL_UARTFIFOThreshold,		int32_t, port, int32_t, threshold
	HAL_Routine	int32_t,		HAL_UARTInterruptID,		int32_t, port
	HAL_Routine	uint32_t,		HAL_UARTBreak,			int32_t, port, int32_t, enable
	HAL_Routine	int32_t,		HAL_UARTModemControl,		int32_t, port, uint32_t, eor, uint32_t, mask
	HAL_Routine	int32_t,		HAL_UARTModemStatus,		int32_t, port
	HAL_Routine	int32_t,		HAL_UARTDevice,			int32_t, port
;	HAL_Routine				HAL_Reset
;	HAL_Routine				HAL_DebugRX
;	HAL_Routine				HAL_DebugTX
;	HAL_Routine				HAL_PCIFeatures
;	HAL_Routine				HAL_PCIReadConfigByte
;	HAL_Routine				HAL_PCIReadConfigHalfword
;	HAL_Routine				HAL_PCIReadConfigWord
;	HAL_Routine				HAL_PCIWriteConfigByte
;	HAL_Routine				HAL_PCIWriteConfigHalfword
;	HAL_Routine				HAL_PCIWriteConfigWord
;	HAL_Routine				HAL_PCISpecialCycle
;	HAL_Routine				HAL_PCISlotTable
;	HAL_Routine				HAL_PCIAddresses
	HAL_Routine	size_t,			HAL_ATAControllerInfo,		int32_t, bus, union HAL_ATAInfo_t *, info, size_t, buflen
	HAL_Routine	void,			HAL_ATASetModes,		int32_t, bus, struct HAL_ATAMode_t *, dev0, struct HAL_ATAMode_t *, dev1
	HAL_Routine	bool,			HAL_ATACableID,			int32_t, bus
	HAL_Routine	void,			HAL_InitDevices,		uint32_t, flags
	HAL_Routine	void,			HAL_KbdScanSetup
	HAL_Routine	uint32_t,		HAL_KbdScan
	HAL_Routine	void,			HAL_KbdScanFinish
	HAL_Routine	void,			HAL_KbdScanInterrupt
;	HAL_Routine				HAL_PhysInfo
;	HAL_Routine				HAL_USBControllerInfo
;	HAL_Routine				HAL_MonitorLeadID
;	HAL_Routine				HAL_Video_Render
;	HAL_Routine				HAL_USBPortPower
;	HAL_Routine				HAL_USBPortStatus
;	HAL_Routine				HAL_USBPortIRQ
;	HAL_Routine				HAL_Video_IICOp
	HAL_Routine	void,			HAL_TimerIRQClear,		int32_t, timer
	HAL_Routine	int32_t,		HAL_TimerIRQStatus,		int32_t, timer


	=	10, "#undef HAL_VARIABLE", 10
	=	"#undef HAL_FUNCTION", 10

	; Stop the linker from leaving nulls at the end of the file
	WHILE ((. - |HALHeader$$Data|) :AND: 3) <> 0
	=	10
	WEND

	END
