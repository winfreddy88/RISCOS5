/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/******	str.h *************************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Modular Configure
Purpose:	String routines shared between multiple Configure plug-ins

History:
Date		Who	Change
----------------------------------------------------------------------------
08/12/1997	BJGA	Split from Common
			Renamed functions to str_foo convention
			Added these headers
29/04/1998	BJGA	str_cpy and str_ncpy can now cope with null source ptrs

\**************************************************************************/

#ifndef NULL
#define NULL 0
#endif
#include "str.h"

/******	str_cpy() *********************************************************\

Purpose:	Same as strcpy, but copes with control-termination
In:		Source and destination pointers
Out:		Result is null-terminated

\**************************************************************************/

char *str_cpy (char* s1, const char *s2)
{
  char *orig1;
  if (s1 == NULL) return NULL;
  
  orig1 = s1;
  
  if (s2 != NULL)
  {
    for ( ; *s2 > 31; *s1 = *s2, s1++, s2++);
  }
  
  *s1 = 0;
  
  return orig1;
}

/******	str_ncpy() ********************************************************\

Purpose:	A bit like strncpy, and copes with control-termination
In:		Source and destination pointers
		n:	the size of the buffer being copied into
Out:		Up to (n-1) characters are copied
		Result is null-terminated (even if filling the buffer)

\**************************************************************************/

char *str_ncpy (char* s1, const char *s2, int n)
{
  char *orig1;
  if (s1 == NULL) return s1;
  
  orig1 = s1;
  
  if (s2 != NULL)
  {
    for ( ; *s2 > 31 && s1 < orig1 + n - 1; *s1 = *s2, s1++, s2++);
  }
  
  *s1 = 0;
  
  return orig1;
}

/******	str_len() *********************************************************\

Purpose:	Same as strlen, but copes with control-termination
In:		String pointer
Out:		Length of string

\**************************************************************************/

int str_len (const char *s)  /*  */
{
  const char *orig;
  if (s == NULL) return 0;
  for (orig = s; (unsigned) *s > 31; s++);
  return s - orig;
}
