/* Copyright 2005 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Mutex.h                                           */
/*          (C) 2005 Castle Technology Ltd                    */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Simple mutex library for RTSupport threads.       */
/*                                                            */
/* Author:  B.Avison.                                         */
/*                                                            */
/* History: See source control log                            */
/**************************************************************/

#ifndef PRISMLIB_MUTEX_H
  #define PRISMLIB_MUTEX_H

  /* External inclusions */

  #include <stdbool.h>
  #include <stdint.h>

  /* Macros */

  /* New type definitions */

  typedef volatile uint32_t prismlib_mutex_pollword_t;

  typedef struct
  {
    prismlib_mutex_pollword_t pollword;
  }
  prismlib_mutex_t;

  typedef struct
  {
    prismlib_mutex_pollword_t writer_pollword;
    prismlib_mutex_pollword_t reader_pollword;
    volatile size_t readers;
    volatile size_t waiters;
  }
  prismlib_mutex_rw_t;

  /* Constants */

  /* Global variables */

  /* Inline function declarations */

  /* Function prototypes */

  prismlib_mutex_t    * prismlib_mutex_create
                        (
                          bool locked
                        );

  void                  prismlib_mutex_delete
                        (
                          prismlib_mutex_t * restrict m
                        );

  void                  prismlib_mutex_acquire
                        (
                          prismlib_mutex_t * restrict m
                        );

  void                  prismlib_mutex_release
                        (
                          prismlib_mutex_t * restrict m
                        );

  prismlib_mutex_rw_t * prismlib_mutex_rw_create
                        (
                          void
                        );

  void                  prismlib_mutex_rw_delete
                        (
                          prismlib_mutex_rw_t * restrict rw
                        );

  void                  prismlib_mutex_rw_acquire_read
                        (
                          prismlib_mutex_rw_t * restrict rw
                        );

  void                  prismlib_mutex_rw_release_read
                        (
                          prismlib_mutex_rw_t * restrict rw
                        );

  void                  prismlib_mutex_rw_acquire_write
                        (
                          prismlib_mutex_rw_t * restrict rw
                        );

  void                  prismlib_mutex_rw_release_write
                        (
                          prismlib_mutex_rw_t * restrict rw
                        );

#endif
