/* Copyright 2005 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    RLists.h                                          */
/*          (C) 2005 Tematic Ltd.                             */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Re-entrant linked list handling.                  */
/*                                                            */
/* Author:  B.Avison.                                         */
/*                                                            */
/* History: 14-Apr-2005 (ADH): Changed to local style.        */
/**************************************************************/

#ifndef PRISMLIB_RLISTS_H
  #define PRISMLIB_RLISTS_H

  /* External inclusions */

  #include <stddef.h>
  #include <stdbool.h>
  #include <stdint.h>

  /* PRISMLib inclusions */

  #include <PRISMLib/FuncTypes.h>

  /* New type definitions */

  typedef struct prismlib_rl_list
  {
    uint32_t opaque[11];
  }
  prismlib_rl_list_t;

  typedef struct prismlib_rl_step
  {
    void     * data;
    uint32_t   opaque[4];
  }
  prismlib_rl_step_t;

  /* Function prototypes */

  void prismlib_rl_create
       (
         prismlib_rl_list_t * restrict list,
         size_t                        data_size,

         prismlib_malloc_fn_ptr_t      malloc,
         prismlib_free_fn_ptr_t        free,
         prismlib_onevent_fn_ptr_t     atremoval,

         size_t                        cluster_size
       );

  void prismlib_rl_destroy
       (
         prismlib_rl_list_t * list
       );

  void prismlib_rl_start_walk
       (
         prismlib_rl_step_t * restrict step,
         prismlib_rl_list_t * restrict list,
         bool                          backwards
       );

  void prismlib_rl_start_walk_at
       (
         prismlib_rl_step_t * restrict step,
         prismlib_rl_list_t * restrict list,
         void               * restrict position
       );

  void prismlib_rl_next_step
       (
         prismlib_rl_step_t * step,
         bool                 backwards
       );

  void prismlib_rl_abort_walk
       (
         prismlib_rl_step_t * step
       );

  bool prismlib_rl_add_at_limit
       (
         prismlib_rl_list_t * restrict list,
         bool                          backwards,
         const void         * restrict data
       );

  bool prismlib_rl_add_adjacent
       (
         prismlib_rl_step_t * restrict step,
         bool                          backwards,
         const void         * restrict data
       );

  bool prismlib_rl_add_sorted
       (
         prismlib_rl_list_t * restrict list,
         const void         * restrict data,

         prismlib_sort_fn_ptr_t        later
       );

  void prismlib_rl_delink
       (
         prismlib_rl_step_t * step
       );

#endif /* PRISMLIB_RLISTS_H */

/* End of file */
