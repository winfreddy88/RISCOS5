/* Copyright 2005 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Interrupts.h                                      */
/*          (C) 2005 Castle Technology Ltd                    */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Simple macros to turn interrupts on and off.      */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 29-Apr-2005 (ADH): Created.                       */
/**************************************************************/

#ifndef PRISMLIB_INTERRUPTS_H
  #define PRISMLIB_INTERRUPTS_H

  /* External inclusions */

  #include <stdbool.h>
  #include <swis.h>

  /* Support functions - the __swi() macro is a hint
   * to the Norcroft compiler that the function is
   * instead just a single SWI call.
   *
   * Do not call these functions directly. Instead,
   * use the macros PRISMLIB_USR_INT_DISABLE and
   * PRISMLIB_USR_INT_RESTORE.
   */

  __swi(OS_IntOn)  void prismlib_interrupts_inline_inton  (void);
  __swi(OS_IntOff) void prismlib_interrupts_inline_intoff (void);

  /* PRISMLIB_SVC_INT_DISABLE turns off interrupts,
   * recording the previous state of interrupts, in
   * a manner suitable for code running in SVC mode.
   * It relies upon setting a local scope variable
   * "prismlib_ints_were_off". The previous state of
   * interrupts should be restored using macro
   * PRISMLIB_SVC_INT_RESTORE.
   *
   * Example use:
   *
   *   PRISMLIB_SVC_INT_DISABLE;
   */

  #define PRISMLIB_SVC_INT_DISABLE \
          int prismlib_ints_were_off = _kernel_irqs_disabled(); \
          _kernel_irqs_off()

  /* PRISMLIB_SVC_INT_ENABLE turns on interrupts,
   * recording the previous state of interrupts, in
   * a manner suitable for code running in SVC mode.
   * It relies upon setting a local scope variable
   * "prismlib_ints_were_off". The previous state of
   * interrupts should be restored using macro
   * PRISMLIB_SVC_INT_RESTORE.
   *
   * Always take extreme care when forcibly enabling
   * interrupts: callers of the software component
   * doing this must be aware that interrupts may be
   * switched on.
   *
   * Example use:
   *
   *   PRISMLIB_SVC_INT_ENABLE;
   */

  #define PRISMLIB_SVC_INT_ENABLE \
          int prismlib_ints_were_off = _kernel_irqs_disabled(); \
          _kernel_irqs_on()

  /* PRISMLIB_SVC_INT_RESTORE restores interrupts to
   * the previous state, recorded when using macro
   * PRISMLIB_SVC_INT_[DISABLE|ENABLE], in a manner
   * suitable for code running in SVC mode. The
   * macro relies upon local scope boolean
   * "prismlib_ints_were_off".
   *
   * Example use:
   *
   *   PRISMLIB_SVC_INT_RESTORE;
   */

  #define PRISMLIB_SVC_INT_RESTORE \
          if (prismlib_ints_were_off == 0) _kernel_irqs_on(); \
          else                             _kernel_irqs_off()

  /* PRISMLIB_USR_INT_DISABLE turns off interrupts,
   * recording the previous state of interrupts, in
   * a manner suitable for code running in USR mode.
   * It relies upon setting a local scope variable
   * "prismlib_ints_were_off". The previous state of
   * interrupts should be restored using macro
   * PRISMLIB_USR_INT_RESTORE.
   *
   * Example use:
   *
   *   PRISMLIB_USR_INT_DISABLE;
   */

  #define PRISMLIB_USR_INT_DISABLE \
          int prismlib_ints_were_off = _kernel_irqs_disabled(); \
          prismlib_interrupts_inline_intoff()

  /* PRISMLIB_USR_INT_ENABLE turns on interrupts,
   * recording the previous state of interrupts, in
   * a manner suitable for code running in USR mode.
   * It relies upon setting a local scope variable
   * "prismlib_ints_were_off". The previous state of
   * interrupts should be restored using macro
   * PRISMLIB_USR_INT_RESTORE.
   *
   * Always take extreme care when forcibly enabling
   * interrupts: callers of the software component
   * doing this must be aware that interrupts may be
   * switched on.
   *
   * Example use:
   *
   *   PRISMLIB_USR_INT_ENABLE;
   */

  #define PRISMLIB_USR_INT_ENABLE \
          int prismlib_ints_were_off = _kernel_irqs_disabled(); \
          prismlib_interrupts_inline_inton()

  /* PRISMLIB_USR_INT_RESTORE restores interrupts to
   * the previous state, recorded when using macro
   * PRISMLIB_USR_INT_[DISABLE|ENABLE], in a manner
   * suitable for code running in USR mode. The
   * macro relies upon local scope boolean
   * "prismlib_ints_were_off".
   *
   * Example use:
   *
   *   PRISMLIB_USR_INT_RESTORE;
   */

  #define PRISMLIB_USR_INT_RESTORE \
          if (prismlib_ints_were_off == 0) prismlib_interrupts_inline_inton(); \
          else                             prismlib_interrupts_inline_intoff()

#endif /* PRISMLIB_INTERRUPTS_H */

/* End of file */
