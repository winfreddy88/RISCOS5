/* Copyright 2005 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Locks.c                                           */
/*          (C) 2005 Tematic Ltd.                             */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Simple lock management to help functions that     */
/*          want to handle being re-entered.                  */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 29-Apr-2005 (ADH): Created.                       */
/**************************************************************/

#include <stdlib.h>

#include "Interrupts.h"

#include "Locks.h"

/**************************************************************/
/* prismlib_locks_lock()                                      */
/*                                                            */
/* Check a given lock. If unlocked, lock the item and return  */
/* 'true' to indicate success. If already locked, return      */
/* 'false' to indicate failure.                               */
/*                                                            */
/* Parameters:  Pointer to a prismlib_lock_t maintained by    */
/*              the caller.                                   */
/*                                                            */
/* Returns:     'true' if successfully now locked, 'false' if */
/*              already locked (i.e. 'false' on failure).     */
/*                                                            */
/* Re-entrancy: This function is re-entrant.                  */
/*                                                            */
/* Interrupts:  This function is interrupt-safe.              */
/*                                                            */
/* Assumes:     Execution in SVC mode.                        */
/**************************************************************/

bool prismlib_locks_lock(prismlib_lock_t * lock)
{
  /* Disable interrupts */

  PRISMLIB_SVC_INT_DISABLE;

  /* Check the lock state */

  if (lock == NULL || (lock != NULL && *lock != 0))
  {
    /* The item is locked; re-enable interrupts and return a
     * indication of the problem.
     */

    PRISMLIB_SVC_INT_RESTORE;
    return false;
  }
  else
  {
    /* Set the lock, re-enable interrupts and return an indication
     * that there is no problem.
     */

    (*lock) = 1;

    PRISMLIB_SVC_INT_RESTORE;
    return true;
  }
}

/**************************************************************/
/* prismlib_locks_unlock()                                    */
/*                                                            */
/* Check a given lock. If locked, unlock the item and return  */
/* 'true' to indicate success. If already unlocked, return    */
/* 'false' to indicate failure.                               */
/*                                                            */
/* This function is re-entrant and interrupt safe. Execution  */
/* in SVC mode is assumed.                                    */
/*                                                            */
/* Parameters:  Pointer to a prismlib_lock_t maintained by    */
/*              the caller.                                   */
/*                                                            */
/* Returns:     'true' if successfully now unlocked, 'false'  */
/*              if already unlocked (i.e. 'false' on          */
/*              failure).                                     */
/*                                                            */
/* Re-entrancy: This function is re-entrant.                  */
/*                                                            */
/* Interrupts:  This function is interrupt-safe.              */
/*                                                            */
/* Assumes:     Execution in SVC mode.                        */
/**************************************************************/

bool prismlib_locks_unlock(prismlib_lock_t * lock)
{
  /* Disable interrupts */

  PRISMLIB_SVC_INT_DISABLE;

  /* Check the lock state */

  if (lock != NULL && *lock != 0)
  {
    /* Unlock, re-enable interrupts and return an indication that
     * there is no problem.
     */

    (*lock) = 0;

    PRISMLIB_SVC_INT_RESTORE;
    return true;
  }
  else
  {
    /* The item is not locked; re-enable interrupts and return an
     * indication of the problem.
     */

    PRISMLIB_SVC_INT_RESTORE;
    return false;
  }
}
