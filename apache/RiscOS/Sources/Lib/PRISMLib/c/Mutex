/* Copyright 2005 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    Mutex.c                                           */
/*          (C) 2005 Castle Technology Ltd                    */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Simple mutex library for RTSupport threads.       */
/*                                                            */
/* Author:  B.Avison.                                         */
/*                                                            */
/* History: See source control log                            */
/**************************************************************/


/****************************************************************************/
/* External inclusions */
/****************************************************************************/

#include <stdlib.h>
#include <stdbool.h>
#include <stdint.h>

#include <Interface/RTSupport.h>
#include <AsmUtils/irqs.h>

#include "mutex.h"


/****************************************************************************/
/* Macros */
/****************************************************************************/


/****************************************************************************/
/* New type definitions */
/****************************************************************************/


/****************************************************************************/
/* File scope constants */
/****************************************************************************/

static const prismlib_mutex_pollword_t pollword_always_set = 1;


/****************************************************************************/
/* Exported global variables */
/****************************************************************************/


/****************************************************************************/
/* File scope global variables */
/****************************************************************************/


/****************************************************************************/
/* Exported inline function definitions */
/****************************************************************************/


/****************************************************************************/
/* File scope inline functions */
/****************************************************************************/

static inline prismlib_mutex_pollword_t swp(prismlib_mutex_pollword_t new_value, prismlib_mutex_pollword_t * restrict location)
{
  prismlib_mutex_pollword_t old_value;
  __asm { SWP old_value, new_value, [location] }
  return old_value;
}

__swi(RT_Yield) void yield(const prismlib_mutex_pollword_t * restrict pollword);


/****************************************************************************/
/* File scope function prototypes */
/****************************************************************************/


/****************************************************************************/
/* Exported function definitions */
/****************************************************************************/

/**
 * Create a simple mutex suitable for use with the RTSupport module.
 *
 * @param locked whether to create the mutex in an already-locked state
 * @return pointer to the mutex, or NULL if failed
 */

prismlib_mutex_t * prismlib_mutex_create(bool locked)
{
  prismlib_mutex_t * m = malloc(sizeof * m);
  if (m != NULL)
  {
    m->pollword = !locked;
  }
  return m;
}

/**
 * Finish with a simple mutex previously created using prismlib_mutex_create()
 *
 * @param m the mutex to delete
 */

void prismlib_mutex_delete(prismlib_mutex_t * restrict m)
{
  prismlib_mutex_acquire(m); /* paranoia - ensure nobody's waiting on us */
  free(m);
}

/**
 * Acquire (lock) a simple mutex previously created using prismlib_mutex_create()
 *
 * @param m the mutex to acquire
 */

void prismlib_mutex_acquire(prismlib_mutex_t * restrict m)
{
  while (swp(0, &m->pollword) == 0) yield(&m->pollword);
}

/**
 * Release (unlock) a simple mutex previously caquired using prismlib_mutex_acquire()
 *
 * @param m the mutex to release
 */

void prismlib_mutex_release(prismlib_mutex_t * restrict m)
{
  swp(1, &m->pollword);
  yield(&pollword_always_set); /* this has to be unconditional because we don't know if anyone is waiting on us */
}

/**
 * Create a simple reader-writer lock suitable for use with the RTSupport module.
 *
 * @return pointer to the rw lock, or NULL if failed
 */

prismlib_mutex_rw_t * prismlib_mutex_rw_create(void)
{
  prismlib_mutex_rw_t * rw = malloc(sizeof * rw);
  if (rw != NULL)
  {
    rw->writer_pollword = 1;
    rw->reader_pollword = 1;
    rw->readers = 0;
    rw->waiters = 0;
  }
  return rw;
}

/**
 * Finish with a rw lock previously created using prismlib_mutex_rw_create()
 *
 * @param rw the rw lock to delete
 */

void prismlib_mutex_rw_delete(prismlib_mutex_rw_t * restrict rw)
{
  prismlib_mutex_rw_acquire_write(rw); /* paranoia - ensure nobody's waiting on us */
  free(rw);
}

/**
 * Acquire (lock) a rw lock previously created using prismlib_mutex_rw_create() for reading
 *
 * @param rw the rw lock to acquire
 */

void prismlib_mutex_rw_acquire_read(prismlib_mutex_rw_t * restrict rw)
{
  int entry_irqs = ensure_irqs_off();
  while (rw->reader_pollword == 0)
  {
    rw->waiters++;
    yield(&rw->reader_pollword);
    rw->waiters--;
  }
  if (rw->readers++ == 0)
  {
    rw->writer_pollword = 0;
  }
  restore_irqs(entry_irqs);
}

/**
 * Release (unlock) a rw lock previously acquired using prismlib_mutex_rw_acquire_read()
 *
 * @param rw the rw lock to release
 */

void prismlib_mutex_rw_release_read(prismlib_mutex_rw_t * restrict rw)
{
  int entry_irqs = ensure_irqs_off();
  if (--rw->readers == 0)
  {
    rw->writer_pollword = 1;
    if (rw->waiters > 0)
    {
      yield(&pollword_always_set);
    }
  }
  restore_irqs(entry_irqs);
}

/**
 * Acquire (lock) a rw lock previously created using prismlib_mutex_rw_create() for writing
 *
 * @param rw the rw lock to acquire
 */

void prismlib_mutex_rw_acquire_write(prismlib_mutex_rw_t * restrict rw)
{
  int entry_irqs = ensure_irqs_off();
  while (rw->writer_pollword == 0)
  {
    rw->waiters++;
    yield(&rw->writer_pollword);
    rw->waiters--;
  }
  rw->reader_pollword = 0;
  rw->writer_pollword = 0;
  restore_irqs(entry_irqs);
}

/**
 * Release (unlock) a rw lock previously acquired using prismlib_mutex_rw_acquire_write()
 *
 * @param rw the rw lock to release
 */

void prismlib_mutex_rw_release_write(prismlib_mutex_rw_t * restrict rw)
{
  int entry_irqs = ensure_irqs_off();
  rw->writer_pollword = 1;
  rw->reader_pollword = 1;
  if (rw->waiters > 0)
  {
    yield(&pollword_always_set);
  }
  restore_irqs(entry_irqs);
}


/****************************************************************************/
/* File scope function definitions */
/****************************************************************************/


/****************************************************************************/
/* End of file */
/****************************************************************************/
