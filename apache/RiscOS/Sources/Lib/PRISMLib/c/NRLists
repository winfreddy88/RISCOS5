/* Copyright 2005 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    NRLists.c                                         */
/*          (C) 2005 Tematic Ltd.                             */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Manage doubly-linked lists. The structures given  */
/*          must have a next and prev word as the first and   */
/*          second items respectively; the list is recorded   */
/*          through a pointer to the head item.               */
/*                                                            */
/*          Simple, non-reentrant routines. For reentrancy,   */
/*          see RLists.c.                                     */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 10-Mar-2005 (ADH): Imported into PRISMLib from    */
/*                             the copy in the PRISM module.  */
/*          14-Apr-2005 (ADH): Renamed to RLists / _nrl_.     */
/**************************************************************/

#include <stdlib.h>
#include <kernel.h>

#ifdef TRACE2
  #define TRACE
#endif
#ifdef TRACE
  #define DEBUGLIB
#endif
#include <debuglib/debuglib.h>

#include <PRISM/PRISM.h>

#include "Errors.h"
#include "NRLists.h"

/* Local structures */

typedef struct list
{
  struct list * next;
  struct list * prev;

  /* ... */
}
list;

/**************************************************************/
/* prismlib_nrl_add_to_head()                                 */
/*                                                            */
/* Add an item to the head of the given list. The contents of */
/* the item are zero-initialised.                             */
/*                                                            */
/* Parameters:  Pointer to the head of the list pointer,      */
/*              updated on exit;                              */
/*                                                            */
/*              Size of the item to add in bytes.             */
/*                                                            */
/* Re-entrancy: Function must not be re-entered for the same  */
/*              list, but may be re-entered for other lists.  */
/*                                                            */
/* Threading:   Contents of list being operated upon must not */
/*              be externally modified whilst the function    */
/*              executes.                                     */
/*                                                            */
/* Interrupts:  Interrupts are not disabled during execution. */
/**************************************************************/

_kernel_oserror * prismlib_nrl_add_to_head
                  (
                    void         ** head,
                    const size_t    size
                  )
{
  list ** lhead = (list **) head;
  list  * new;

  dprintf(("Lists", "prismlib_nrl_add_to_head: Called (head = &%08X, size = %d)\n", (int) head, size));

  if (head == NULL)
  {
    return prismlib_make_error(prism_error_INVALID_PARAMETERS,
                               1,
                               "prismlib_nrl_add_to_head()");
  }

  new = calloc(size, 1);
  if (new == NULL) return prismlib_make_error(prism_error_MEMORY_EXHAUSTED, 0);

  dprintf(("Lists", "prismlib_nrl_add_to_head: New item is at &%08X\n", (int) new));

  if (*lhead != NULL)
  {
    (*lhead)->prev = new;
    new->next      = *lhead;
  }

  *lhead = new;

  dprintf(("Lists", "prismlib_nrl_add_to_head: Successful\n"));

  return NULL;
}

/**************************************************************/
/* prismlib_nrl_add_to_tail()                                 */
/*                                                            */
/* Add an item to the tail of the given list. The contents of */
/* the item are zero-initialised.                             */
/*                                                            */
/* Parameters:  Pointer to the head of the list pointer, may  */
/*              be updated on exit;                           */
/*                                                            */
/*              Pointer to a void *, updated to point to the  */
/*              new item on exit;                             */
/*                                                            */
/*              Size of the item to add.                      */
/*                                                            */
/* Re-entrancy: Function must not be re-entered for the same  */
/*              list, but may be re-entered for other lists.  */
/*                                                            */
/* Threading:   Contents of list being operated upon must not */
/*              be externally modified whilst the function    */
/*              executes.                                     */
/*                                                            */
/* Interrupts:  Interrupts are not disabled during execution. */
/**************************************************************/

_kernel_oserror * prismlib_nrl_add_to_tail
                  (
                    void         **          head,
                    void         ** restrict added,
                    const size_t             size
                  )
{
  list ** lhead = (list **) head;
  list  * new;

  dprintf(("Lists", "prismlib_nrl_add_to_tail: Called (head = &%08X, size = %d)\n", (int) head, size));

  if (head == NULL || added == NULL)
  {
    return prismlib_make_error(prism_error_INVALID_PARAMETERS,
                               1,
                               "prismlib_nrl_add_to_tail()");
  }

  new = calloc(size, 1);
  if (new == NULL) return prismlib_make_error(prism_error_MEMORY_EXHAUSTED, 0);

  dprintf(("Lists", "prismlib_nrl_add_to_tail: New item is at &%08X\n", (int) new));

  if (*lhead != NULL)
  {
    list * tail;

    for (tail = (*lhead); tail->next != NULL; tail = tail->next);

    tail->next = new;
    new->prev  = tail;
  }
  else
  {
    *lhead = new;
  }

  *added = new;

  dprintf(("Lists", "prismlib_nrl_add_to_tail: Successful\n"));

  return NULL;
}

/**************************************************************/
/* prismlib_nrl_add_at_given()                                */
/*                                                            */
/* Add an item before the given one in the list. The contents */
/* of the item are zero-initialised.                          */
/*                                                            */
/* Parameters:  Pointer to the head of the list pointer, may  */
/*              be updated on exit;                           */
/*                                                            */
/*              Pointer to a void *, updated to point to the  */
/*              new item on exit;                             */
/*                                                            */
/*              Pointer to item to add after (or NULL to add  */
/*              at the list's tail);                          */
/*                                                            */
/*              Size of the item to add.                      */
/*                                                            */
/* Re-entrancy: Function must not be re-entered for the same  */
/*              list, but may be re-entered for other lists.  */
/*                                                            */
/* Threading:   Contents of list being operated upon must not */
/*              be externally modified whilst the function    */
/*              executes.                                     */
/*                                                            */
/* Interrupts:  Interrupts are not disabled during execution. */
/**************************************************************/

_kernel_oserror * prismlib_nrl_add_at_given
                  (
                    void         **          head,
                    void         ** restrict added,
                    const void    *          position,
                    const size_t             size
                  )
{
  list ** lhead = (list **) head;
  list *  lpos  = (list  *) position;
  list *  new;

  dprintf(("Lists", "prismlib_nrl_add_at_given: Called (head = &%08X, position = &%08X, size = %d)\n", (int) head, (int) position, size));

  if (head == NULL || added == NULL)
  {
    return prismlib_make_error(prism_error_INVALID_PARAMETERS,
                               1,
                               "prismlib_nrl_add_at_given()");
  }

  if (position == NULL) return prismlib_nrl_add_to_tail(head, added, size);

  new = calloc(size, 1);
  if (new == NULL) return prismlib_make_error(prism_error_MEMORY_EXHAUSTED, 0);

  dprintf(("Lists", "prismlib_nrl_add_at_given: New item is at &%08X\n", (int) new));

  if (lpos->prev != NULL) lpos->prev->next = new;

  new->prev  = lpos->prev;
  lpos->prev = new;
  new->next  = lpos;

  *added = new;

  if (*lhead == lpos) *lhead = new;

  dprintf(("Lists", "prismlib_nrl_add_at_given: Successful\n"));

  return NULL;
}

/**************************************************************/
/* prismlib_nrl_remove()                                      */
/*                                                            */
/* Remove an item from the given list. If the item held any   */
/* pointers to any allocated memory (apart from other list    */
/* items), that memory should be freed before calling here.   */
/*                                                            */
/* Parameters:  Pointer to the head of the list pointer, may  */
/*              be updated on exit;                           */
/*                                                            */
/*              Pointer to the item to remove.                */
/*                                                            */
/* Re-entrancy: Function must not be re-entered for the same  */
/*              list, but may be re-entered for other lists.  */
/*                                                            */
/* Threading:   Contents of list being operated upon must not */
/*              be externally modified whilst the function    */
/*              executes.                                     */
/*                                                            */
/* Interrupts:  Interrupts are not disabled during execution. */
/**************************************************************/

_kernel_oserror * prismlib_nrl_remove
                  (
                    void ** head,
                    void  * item
                  )
{
  list ** lhead = (list **) head;
  list *  litem = (list *)  item;

  dprintf(("Lists", "prismlib_nrl_remove: Called (head = &%08X, item = &%08X)\n", (int) head, (int) item));

  if (head == NULL || item == NULL)
  {
    return prismlib_make_error(prism_error_INVALID_PARAMETERS,
                               1,
                               "prismlib_nrl_remove()");
  }

  if (litem->next != NULL) litem->next->prev = litem->prev;
  if (litem->prev != NULL) litem->prev->next = litem->next;
  else *lhead = litem->next;

  free(litem);

  dprintf(("Lists", "prismlib_nrl_remove: Successful\n"));

  return NULL;
}

/**************************************************************/
/* prismlib_nrl_remove_all()                                  */
/*                                                            */
/* Remove all items from the given list. If the items hold    */
/* any pointers to allocated memory (apart from other list    */
/* items), that memory should be freed before calling here.   */
/*                                                            */
/* Parameters:  Pointer to the head of the list pointer,      */
/*              updated on exit to be NULL.                   */
/*                                                            */
/* Re-entrancy: Function must not be re-entered for the same  */
/*              list, but may be re-entered for other lists.  */
/*                                                            */
/* Threading:   Contents of list being operated upon must not */
/*              be externally modified whilst the function    */
/*              executes.                                     */
/*                                                            */
/* Interrupts:  Interrupts are not disabled during execution. */
/**************************************************************/

_kernel_oserror * prismlib_nrl_remove_all(void ** head)
{
  list ** lhead = (list **) head;
  list  * item;

  dprintf(("Lists", "prismlib_nrl_remove_all: Called (head = &%08X)\n", (int) head));

  if (head == NULL)
  {
    return prismlib_make_error(prism_error_INVALID_PARAMETERS,
                               1,
                               "prismlib_nrl_remove_all()");
  }

  while (*lhead != NULL)
  {
    item = (*lhead)->next;
    free(*lhead);
    (*lhead) = item;
  }

  dprintf(("Lists", "prismlib_nrl_remove_all: Successful\n"));

  return NULL;
}

/**************************************************************/
/* prismlib_nrl_find()                                        */
/*                                                            */
/* Perform a simple linear search of the given list for the   */
/* given item.                                                */
/*                                                            */
/* Parameters:  Pointer to the head of the list;              */
/*                                                            */
/*              Pointer to the item to find.                  */
/*                                                            */
/* Returns:     'true' if found, else 'false'.                */
/*                                                            */
/* Re-entrancy: Function is re-entrant.                       */
/*                                                            */
/* Threading:   Contents of list being operated upon must not */
/*              be externally modified whilst the function    */
/*              executes.                                     */
/*                                                            */
/* Interrupts:  Interrupts are not disabled during execution. */
/**************************************************************/

bool prismlib_nrl_find
     (
       void * head,
       void * item
     )
{
  list * lhead = (list *) head;
  list * litem = (list *) item;
  bool   found = false;

  dprintf(("Lists", "prismlib_nrl_find: Called (head = &%08X, item = &%08X)\n", (int) head, (int) item));

  if (item == NULL) return false;

  for (; lhead != NULL; lhead = lhead->next)
  {
    if (lhead == litem)
    {
      found = true;
      break;
    }
  }

  dprintf(("Lists",
           "prismlib_nrl_find: Successful, found = %s\n",

           found == true ? "true" : "false"));

  return found;
}
