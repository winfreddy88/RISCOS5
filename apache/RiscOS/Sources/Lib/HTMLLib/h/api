/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * This file contains the definitions of the API for using the HTML2
 * parser libraries.
 */

#ifndef __html2_parser_api_
#define __html2_parser_api_

/*
 * This file includes a number of other files. See these for comments
 * on their content. You will need them _all_ in your include path
 * when compiling with the HTMLlib object file.
 */

#include "html2_ext.h"  /* All the HTML 2 tags  */
#include "tags.h"       /* All the tag #defines */
#include "struct.h"     /* The structures used  */

/* Function calls provided. */

/*
 * Initialise the HTML library. *MUST* be called before any other routines
 * in the library.
 */
extern void HtmlInit(void);

/*
 * Obtain the VersionNum details for this library. The string
 * returned is private to HTMLLib.
 */

extern const char *HtmlVersion(void);

/*
 * HtmlParse() is used to initialise the HTML parser for a document
 * to be parsed (the document need not actually be present). The
 * arguments passed in are:
 *
 *   (char *) url      - The full URL of the page to be parsed so
 *                       relative links may be established within the
 *                       document.
 *   (int) length      - The total length of the document (if known).
 *                       This is used oven the chunk size argument for
 *                       hourglass % calculation if it is non-zero.
 *   (int) type        - The type as defined in the return value from
 *                       HtmlIdentify. Typically this is 1 for HTML
 *                       and 2 for plain text (this ensure plain text
 *                       is PRE-formatted)
 *   (int) frames      - If the front end is displaying frames, this
 *                       should equal 1. This will suppress NOFRAMES
 *                       data. Otherwise set to 0.
 *   (int) objects     - If objects should be parsed, 1, else 0.
 *   (int) tables      - If tables should be parsed, 1, else 0.
 *   (int) scripts     - If scripts should be parsed, 1 (<noscript>
 *                       container contents will be ignored), else 0
 *                       (<script> contents ignored, <noscript>
 *                       contents parsed).
 *   (int) encoding    - The identifier of the encoding in use.
 *   (enco...)priority - The priority of that encoding choice.
 */
extern void *HtmlParse(char *url, int length, int type, int frames, int objects, int tables,
                       int scripts, int encoding, encoding_priority priority);

/*
 * HtmlGetStream() attempts to parse the next chunk of document in
 * the context of a previous document, or context created by HtmlParse().
 * The arguments passed in are:
 *
 *   (void *) streamtok - The context to parse in (provided from
 *                        HTMLParse()).
 *   (char **) document - A pointer to a pointer to the start of the
 *                        complete document (NOT the chunk to be
 *                        added).  As yet non-contiguous chunks are
 *                        not supported
 *   (int) size         - size of the chunk added.
 *   (int *) flags      - output destintation for reported flags
 *
 * The HStream returned is either
 *
 *    a) NULL if no new tokens are produced
 *    b) the first new token produced (if we weren't in a table to start with)
 * or c) the top level table token in which we started (in which case the
 *       HTML_GOT_MORE_IN_A_TABLE flag will be set).
 * flags are:
 */

#define HTML_GOT_MORE_IN_A_TABLE 1u

extern HStream *HtmlGetStream(void *streamtok, char **document, int size, unsigned int *flags);

/*
 * Specify a routine to be called when a META tag changes the encoding.
 * The routine is called with the new encoding number as the first parameter,
 * and the supplied handle as the second parameter.
 */
extern void HtmlSetEncodingCallback(void *st, void (*cb) (int, void *), void *handle);

/*
 * Free all the structures involved in the parsing of a document,
 * but not the actual generated token stream, which is freed later
 * with HtmlStreamFree.
 */
extern void HtmlEndParse(void *stream);

/*
 * Given a pointer to a HTML stream, this call will free up all memory
 * associated with the stream.
 */
extern void HtmlStreamFree(void *stream);

/*
 * Given a pointer to the start of a data stream, and the amount of
 * data in the stream, HTTPStripHeaders returns the offset into the
 * stream at which the data segment starts assuming HTTP style headers
 */
extern int HttpStripHeaders(char *stream, size_t stream_len);

/*
 * Given a pointer to the head of the data stream, the amount of data
 * currently in the stream, and a boolean flag to say if all the data
 * has been retrieved (done = 1 for complete stream, 0 for not), this call
 * attempts to understand the HTTP headers at the start of the stream,
 * indicating if a redirect is needed (return val = 302 and url becomes
 * a pointer to a buffer containing where to go to), authentication is
 * required (return val = 401), or the filetype of the document
 * derived from either the HTTP headers or the body data. If the
 * result is unknown, 0 is returned. If the filetype is known and no
 * redirect is needed, 200 is returned. (Yes these do look like the HTTP
 * response codes dont they :)
 *
 * If it is an HTML or text file, an encoding number is returned in
 * *encoding - 0 if the encoding is not specified.
 *
 * For redirections, the first parameter is the base URL of the fetch.
 * This is for broken redirections where the server doesn't specify
 * a full URL, and relativisation is needed.
 *
 * The value passed back in can parse is as defined below:
 */

#define TYPE_UNKNOWN     0
#define TYPE_HTMLFILE    1
#define TYPE_TEXTFILE    2
#define TYPE_IMAGEFILE   3

extern unsigned int HtmlIdentify(char *base_url, char *stream,
                                 size_t stream_len, char done,
                                 char **url, int *file_type,
                                 int *canparse, int *encoding);

/*
 * The signature of a SCRIPT handler function (see below).
 */
typedef char *HtmlScriptHandler(void *stream, HStream *script_element, void *handle);

/*
 * Set a handler function up for dealing with SCRIPT elements the moment they are reached.
 * As soon as <SCRIPT>...</SCRIPT> has been found, the handler function will be called.
 * It is passed the stream handle, a pointer to an HStream describing the script and the
 * specified private handle. It can return an string pointer (which must be a pointer
 * to an object allocated with HtmlMalloc) giving data that is to be run through the parser
 * before it continues (as per JavaScript's "document.write" method).
 */

extern void HtmlSetScriptCallback(void *stream, HtmlScriptHandler handler, void *handle);

/*
 * The siugnature of a BASE handler function (see below).
 */

typedef void HtmlBaseHandler(void *stream, const char *href, const char *target, void *handle);

/*
 * Set a handler function up for dealing with BASE elements the moment they are reached.
 * If a client is interested in whether or not a BASE HREF or TARGET was set, they must
 * install this handler (the information cannot be recovered otherwise).
 *
 * The function will be called cumulatively - you may be called once with just the
 * HREF information, then again with both the HREF and TARGET. It depends on how the
 * HTML source is structured.
 */

extern void HtmlSetBaseCallback(void *stream, HtmlBaseHandler handler, void *handle);

/*
 * Given a MIME charset name (terminated by a character not valid in a MIME
 * charset name, so a direct pointer into the Content-Type header field will do),
 * this returns the encoding number (the Internet MIB coded value if assigned).
 * This number can be passed to HtmlParse(). If the name is unknown or
 * unsupported, 0 is returned.
 */
extern int HTTPEncodingNumberFromName(const char *name);

/*
 * Allocate memory associated with a stream - pass as parent a pointer to
 * a HStream or TableStream belonging to that stream. Then when HtmlStreamFree
 * is called, this block will be freed with it. The allocated memory is
 * zero-initialised.
 */
extern void * HtmlMalloc(size_t size, void *parent);

/*
 * Free a block allocated with HtmlMalloc.
 */
extern void HtmlFree(void *block);

/*
 * Given a base URL (eg http://www.acorn.co.uk/) and a possibly relative URL
 * as found in an href attribute (eg home.html), return the absolute URL
 * (eg http://www.acorn.co.uk/home.html). The returned string is in a buffer
 * allocated with HtmlMalloc, which will be discarded when HtmlStreamFree is
 * called. See HtmlMalloc for details of "parent". Don't forget to check for
 * NULL returns - memory is, alas, finite.
 */
extern char *HtmlRelativiseURL(const char * restrict base, const char * restrict link, const void * restrict parent);

/*
 * Return the memory context of an object allocated with HtmlMalloc. This
 * allows, for example, easy identification of objects that are part of a
 * wider collection of blocks that are to be freed with HtmlFree. If zero
 * is returned, the block was either not allocated with HtmlMalloc in the
 * first place or has since been freed (either way, the guard word on the
 * block is not what was expected).
 */
extern unsigned int HtmlReturnContext(void *block);

/*
 * Given an OBJECT token, insert its alternative HTML after it.
 * Returns a pointer to the token after the OBJECT, after any
 * insertion.
 */
extern HStream *HtmlReplaceOBJECT(HStream *object);

/*
 * Given a string holding a way of specifying a colour in HTML,
 * returns a RISC OS colour number (0xBBGGRR00). If the given
 * string is invalid or contains an unknown colour name, a
 * value of 1 (i.e. an answer not of the form '0xBBGGRR00')
 * will be returned.
 */
extern unsigned int HtmlParseColour(const char *colour);

/*
 * Now functions to check attributes applying to an element.
 *
 * Attributes specific to an element first. Conventions are:
 *
 * Function name is Html<ELEMENT><attribute>(HStream *h);
 * The function must be passed an HStream whose tag field is <ELEMENT>.
 * String returns are static, must not be modified, and can be relied upon until
 * HtmlStreamFree is called.
 * If a string attribute is not present, NULL is returned.
 * If a colour is not present, NULL_COLOUR is returned.
 */

extern const char   *HtmlBODYonload         (const HStream * restrict h);
extern const char   *HtmlBODYonunload       (const HStream * restrict h);
extern const char   *HtmlBODYbackground     (const HStream * restrict h);
extern unsigned int  HtmlBODYtext           (const HStream * restrict h);
extern unsigned int  HtmlBODYbgcolour       (const HStream * restrict h);
extern unsigned int  HtmlBODYlink           (const HStream * restrict h);
extern unsigned int  HtmlBODYvlink          (const HStream * restrict h);
extern unsigned int  HtmlBODYalink          (const HStream * restrict h);

extern const char   *HtmlMETAhttp_equiv     (const HStream * restrict h);
extern const char   *HtmlMETAname           (const HStream * restrict h);
extern const char   *HtmlMETAcontent        (const HStream * restrict h);
extern const char   *HtmlMETAscheme         (const HStream * restrict h);

extern const char   *HtmlFORMaction         (const HStream * restrict h);
extern formmethod    HtmlFORMmethod         (const HStream * restrict h);
extern const char   *HtmlFORMenctype        (const HStream * restrict h);
extern const char   *HtmlFORMaccept_charset (const HStream * restrict h);
extern const char   *HtmlFORMonreset        (const HStream * restrict h);
extern const char   *HtmlFORMonsubmit       (const HStream * restrict h);
extern const char   *HtmlFORMtarget         (const HStream * restrict h);

extern inputtype     HtmlINPUTtype          (const HStream * restrict h);
extern const char   *HtmlINPUTname          (const HStream * restrict h);
extern const char   *HtmlINPUTvalue         (const HStream * restrict h);
extern bool          HtmlINPUTchecked       (const HStream * restrict h);
extern bool          HtmlINPUTdisabled      (const HStream * restrict h);
extern bool          HtmlINPUTreadonly      (const HStream * restrict h);
extern unsigned int  HtmlINPUTsize          (const HStream * restrict h);
extern unsigned int  HtmlINPUTmaxlength     (const HStream * restrict h);
extern const char   *HtmlINPUTsrc           (const HStream * restrict h);
extern const char   *HtmlINPUTalt           (const HStream * restrict h);
extern const char   *HtmlINPUTusemap        (const HStream * restrict h);
extern imgalign      HtmlINPUTalign         (const HStream * restrict h);
extern int           HtmlINPUTtabindex      (const HStream * restrict h);
extern const char   *HtmlINPUTonfocus       (const HStream * restrict h);
extern const char   *HtmlINPUTonblur        (const HStream * restrict h);
extern const char   *HtmlINPUTonselect      (const HStream * restrict h);
extern const char   *HtmlINPUTonclick       (const HStream * restrict h);
extern const char   *HtmlINPUTonchange      (const HStream * restrict h);
extern const char   *HtmlINPUTaccept        (const HStream * restrict h);

extern const char   *HtmlSELECTname         (const HStream * restrict h);
extern unsigned int  HtmlSELECTsize         (const HStream * restrict h);
extern bool          HtmlSELECTmultiple     (const HStream * restrict h);
extern bool          HtmlSELECTdisabled     (const HStream * restrict h);
extern int           HtmlSELECTtabindex     (const HStream * restrict h);
extern const char   *HtmlSELECTonfocus      (const HStream * restrict h);
extern const char   *HtmlSELECTonblur       (const HStream * restrict h);
extern const char   *HtmlSELECTonselect     (const HStream * restrict h);
extern const char   *HtmlSELECTonclick      (const HStream * restrict h);
extern const char   *HtmlSELECTonchange     (const HStream * restrict h);
extern const int    *HtmlSELECToptions      (const HStream * restrict h);

extern bool          HtmlOBJECTdeclare      (const HStream * restrict h);
extern bool          HtmlOBJECTshapes       (const HStream * restrict h);
extern int           HtmlOBJECTtabindex     (const HStream * restrict h);
extern const char   *HtmlOBJECTtype         (const HStream * restrict h);
extern const char   *HtmlOBJECTusemap       (const HStream * restrict h);
extern int           HtmlOBJECTvspace       (const HStream * restrict h);
extern int           HtmlOBJECThspace       (const HStream * restrict h);
extern imgalign      HtmlOBJECTalign        (const HStream * restrict h);
extern const char   *HtmlOBJECTarchive      (const HStream * restrict h);
extern int           HtmlOBJECTborder       (const HStream * restrict h);
extern const char   *HtmlOBJECTclassid      (const HStream * restrict h);
extern const char   *HtmlOBJECTcodebase     (const HStream * restrict h);
extern const char   *HtmlOBJECTcodetype     (const HStream * restrict h);
extern const char   *HtmlOBJECTdata         (const HStream * restrict h);
extern const char   *HtmlOBJECTstandby      (const HStream * restrict h);
extern HStream      *HtmlOBJECTstream       (const HStream * restrict h);
extern HStream      *HtmlOBJECTmapstream    (const HStream * restrict h);
extern HStream      *HtmlOBJECTparent       (const HStream * restrict h);

extern const char   *HtmlPARAMname          (const HStream * restrict h);
extern const char   *HtmlPARAMtype          (const HStream * restrict h);
extern const char   *HtmlPARAMvalue         (const HStream * restrict h);
extern paramtype     HtmlPARAMvaluetype     (const HStream * restrict h);

#define HtmlIMGusemap(h)    HtmlOBJECTusemap(h)
#define HtmlIMGmapstream(h) HtmlOBJECTmapstream(h)
#define HtmlIMGvspace(h)    HtmlOBJECTvspace(h)
#define HtmlIMGhspace(h)    HtmlOBJECThspace(h)
#define HtmlIMGborder(h)    HtmlOBJECTborder(h)

/*
 * Attributes applying to more than one element
 */

extern const char   *HtmlELEMENTname        (const HStream * restrict h);
extern int           HtmlELEMENTtabindex    (const HStream * restrict h);
extern const char   *HtmlELEMENTonfocus     (const HStream * restrict h);
extern const char   *HtmlELEMENTonblur      (const HStream * restrict h);
extern const char   *HtmlELEMENTonselect    (const HStream * restrict h);
extern const char   *HtmlELEMENTonclick     (const HStream * restrict h);
extern const char   *HtmlELEMENTonchange    (const HStream * restrict h);

#endif /* __html2_parser_api_ */
