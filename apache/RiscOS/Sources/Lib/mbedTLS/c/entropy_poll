/*
 *  Platform-specific and custom entropy polling functions
 *
 *  Copyright (C) 2006-2016, ARM Limited, All Rights Reserved
 *  Copyright (c) 2018, RISC OS Open Ltd
 *  SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may
 *  not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 *  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  This file is part of mbed TLS (https://tls.mbed.org)
 */

#if !defined(MBEDTLS_CONFIG_FILE)
#include "mbedtls/config.h"
#else
#include MBEDTLS_CONFIG_FILE
#endif

#include <string.h>

#ifndef RISCOS
#error "This is a platform specific file for RISC OS only"
#endif

#if defined(MBEDTLS_ENTROPY_C)

#include "mbedtls/entropy.h"
#include "mbedtls/entropy_poll.h"
#define UNUSED(k) (k)=(k) /* Silence warnings about unused args */

#if defined(MBEDTLS_TIMING_C)
#include "mbedtls/timing.h"
#endif
#if defined(MBEDTLS_HAVEGE_C)
#include "mbedtls/havege.h"
#endif
#if defined(MBEDTLS_ENTROPY_NV_SEED)
#include "mbedtls/platform.h"
#endif

#if !defined(MBEDTLS_NO_PLATFORM_ENTROPY)

#include <stdlib.h>

int mbedtls_platform_entropy_poll(void *data, unsigned char *output,
                                  size_t len, size_t *olen)
{
	size_t read_len;

	for (read_len = 0; read_len < len; read_len++)
	{
		output[read_len] = (unsigned char)rand();
	}

	*olen = len;
	UNUSED(data);

	return 0;
}
#endif /* !MBEDTLS_NO_PLATFORM_ENTROPY */

#if defined(MBEDTLS_TEST_NULL_ENTROPY)
int mbedtls_null_entropy_poll(void *data, unsigned char *output,
                              size_t len, size_t *olen)
{
	*olen = 0;

	if (len < sizeof(unsigned char))
	{
		return 0;
	}
	*olen = sizeof(unsigned char);
	UNUSED(data);
	UNUSED(output);

	return 0;
}
#endif

#if defined(MBEDTLS_TIMING_C)
int mbedtls_hardclock_poll(void *data, unsigned char *output,
                           size_t len, size_t *olen)
{
	unsigned long timer = mbedtls_timing_hardclock();

	*olen = 0;

	if (len < sizeof(unsigned long))
	{
		return 0;
	}

	memcpy(output, &timer, sizeof(unsigned long));
	*olen = sizeof(unsigned long);
	UNUSED(data);

	return 0;
}
#endif /* MBEDTLS_TIMING_C */

#if defined(MBEDTLS_HAVEGE_C)
int mbedtls_havege_poll(void *data, unsigned char *output,
                        size_t len, size_t *olen)
{
	mbedtls_havege_state *hs = (mbedtls_havege_state *)data;

	*olen = 0;

	if (mbedtls_havege_random(hs, output, len) != 0)
	{
		return MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
	}

	*olen = len;

	return 0;
}
#endif /* MBEDTLS_HAVEGE_C */

#if defined(MBEDTLS_ENTROPY_NV_SEED)
int mbedtls_nv_seed_poll(void *data, unsigned char *output,
                         size_t len, size_t *olen)
{
	unsigned char buf[MBEDTLS_ENTROPY_BLOCK_SIZE];
	size_t use_len = MBEDTLS_ENTROPY_BLOCK_SIZE;

	memset(buf, 0, MBEDTLS_ENTROPY_BLOCK_SIZE);

	if (mbedtls_nv_seed_read(buf, MBEDTLS_ENTROPY_BLOCK_SIZE) < 0)
	{
		return MBEDTLS_ERR_ENTROPY_SOURCE_FAILED;
	}

	if (len < use_len)
	{
		use_len = len;
	}

	memcpy(output, buf, use_len);
	*olen = use_len;
	UNUSED(data);

	return 0;
}
#endif /* MBEDTLS_ENTROPY_NV_SEED */

#endif /* MBEDTLS_ENTROPY_C */
