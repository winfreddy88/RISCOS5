/* Copyright 2011 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Test harness for large file extensions
 * Intended for use in debug builds where the file size check in fopen_common()
 * has been disabled, and where OFF32_MAX has been reduced to 31
 */

#define _LARGEFILE_SOURCE
#define _FILE_OFFSET_BITS 64

#include <stdio.h>
#include <errno.h>
#include "swis.h"

#define BUFSIZE 16

int main(void)
{
  FILE *f;
  char buffer[BUFSIZE];
  int i;
  char string[80];
  
  /* Writing beyond file pointer limit */
  
  errno = 0;
  f = fopen("myfile", "w");
  sprintf(string, "fopen errno = %d\n\r", errno);
  _swix(OS_Write0, _IN(0), string);
  if (f != NULL)
  {
    setvbuf(f, buffer, _IOFBF, BUFSIZE);
    
    for (i = 0; i < 34; i++)
    {
      errno = 0;
      int e = fputc(i, f);
      sprintf(string, "fputc %d=%d errno = %d\n\r", i, e, errno);
      _swix(OS_Write0, _IN(0), string);
    }
    
    errno = 0;
    fclose(f);
    sprintf(string, "fclose errno = %d\n\r", errno);
    _swix(OS_Write0, _IN(0), string);
  }
  
  /* Writing beyond file pointer limit, where the limit lies on a
   * buffer boundary */
  
  errno = 0;
  f = fopen("myfile", "w");
  sprintf(string, "fopen errno = %d\n\r", errno);
  _swix(OS_Write0, _IN(0), string);
  if (f != NULL)
  {
    setvbuf(f, buffer, _IOFBF, BUFSIZE);
    errno = 0;
    fseeko(f, 15, SEEK_SET);
    sprintf(string, "fseeko errno = %d\n\r", errno);
    _swix(OS_Write0, _IN(0), string);
    
    for (i = 15; i < 34; i++)
    {
      errno = 0;
      int e = fputc(i, f);
      sprintf(string, "fputc %d=%d errno = %d\n\r", i, e, errno);
      _swix(OS_Write0, _IN(0), string);
    }
    
    errno = 0;
    fclose(f);
    sprintf(string, "fclose errno = %d\n\r", errno);
    _swix(OS_Write0, _IN(0), string);
  }
  
  /* Reading beyond file pointer limit */
  
  errno = 0;
  f = fopen("myfile2", "r");
  sprintf(string, "fopen errno = %d\n\r", errno);
  _swix(OS_Write0, _IN(0), string);
  if (f != NULL)
  {
    setvbuf(f, buffer, _IOFBF, BUFSIZE);
    
    for (i = 0; i < 35; i++)
    {
      errno = 0;
      int c = fgetc(f);
      sprintf(string, "fgetc %d=%d errno = %d\n\r", i, c, errno);
      _swix(OS_Write0, _IN(0), string);
    }
    
    errno = 0;
    fclose(f);
    sprintf(string, "fclose errno = %d\n\r", errno);
    _swix(OS_Write0, _IN(0), string);
  }
  
  /* Reading beyond file pointer limit, when data has been written
   * up to a buffer boundary */
  
  errno = 0;
  f = fopen("myfile2", "r+");
  sprintf(string, "fopen errno = %d\n\r", errno);
  _swix(OS_Write0, _IN(0), string);
  if (f != NULL)
  {
    setvbuf(f, buffer, _IOFBF, BUFSIZE);
    
    for (i = 0; i < 16; i++)
    {
      errno = 0;
      int e = fputc(i, f);
      sprintf(string, "fputc %d=%d errno = %d\n\r", i, e, errno);
      _swix(OS_Write0, _IN(0), string);
    }
    errno = 0;
    fseeko(f, 0, SEEK_CUR);
    sprintf(string, "fseeko errno = %d\n\r", errno);
    _swix(OS_Write0, _IN(0), string);
    for (; i < 35; i++)
    {
      errno = 0;
      int c = fgetc(f);
      sprintf(string, "fgetc %d=%d errno = %d\n\r", i, c, errno);
      _swix(OS_Write0, _IN(0), string);
    }
    
    errno = 0;
    fclose(f);
    sprintf(string, "fclose errno = %d\n\r", errno);
    _swix(OS_Write0, _IN(0), string);
  }
  
  /* Reading beyond file pointer limit, when data has been written
   * up to NOT a buffer boundary */
  
  errno = 0;
  f = fopen("myfile2", "r+");
  sprintf(string, "fopen errno = %d\n\r", errno);
  _swix(OS_Write0, _IN(0), string);
  if (f != NULL)
  {
    setvbuf(f, buffer, _IOFBF, BUFSIZE);
    
    for (i = 0; i < /*13*/19; i++)
    {
      errno = 0;
      int e = fputc(i, f);
      sprintf(string, "fputc %d=%d errno = %d\n\r", i, e, errno);
      _swix(OS_Write0, _IN(0), string);
    }
    errno = 0;
    fseeko(f, 0, SEEK_CUR);
    sprintf(string, "fseeko errno = %d\n\r", errno);
    _swix(OS_Write0, _IN(0), string);
    for (; i < 35; i++)
    {
      errno = 0;
      int c = fgetc(f);
      sprintf(string, "fgetc %d=%d errno = %d\n\r", i, c, errno);
      _swix(OS_Write0, _IN(0), string);
    }
    
    errno = 0;
    fclose(f);
    sprintf(string, "fclose errno = %d\n\r", errno);
    _swix(OS_Write0, _IN(0), string);
  }
}
