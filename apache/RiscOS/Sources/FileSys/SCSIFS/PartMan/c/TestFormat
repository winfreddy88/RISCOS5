/* Copyright 2016 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include        "PMInclude.h"
#include        "FormatBits.h"
#include        "Format.h"
#include        "GPThdr.h"
#include        "scsisvce.h"
#include        "Diagnostic.h"

#define task_name "ftst"          /* the name of our task */
static _kernel_swi_regs reg;
// ID of our working disk
#define preventID 0


int main (int argc,char* argv[])
{
  _kernel_oserror * e=NULL;
  static int capacity=0;
  static int sectorsize=0;
  int ID,start;
  int dospart = 0;// dos partition to use
  int defect[20] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};

 testfileinit ();

 if(argc<3)
 {
   printf("Syntax: *fmat_tst <ID> <Offset> [<size>]\n\
   Where ID is SCSI drive ID, Offset is start LBA in drive\n\
   and size is the (optional) LBA size to format\n");
 }

 if(CheckBootDiscID(ID=atoi(argv[1]),start=atoi(argv[2]),true))
 {
   printf("Target drive contains the boot disc - aborting\n");
   return 0;
 }

 ReadDiscCapacity(ID=atoi(argv[1]), OverrideKey,&capacity,&sectorsize);


 if(argc==4)
   {
   int param=0;
   sscanf(argv[3],"%x",&param);
   if (!((param)&&(param>((2<<20)/sectorsize))&&(param<capacity)))
   {
     printf("If no size is given, to format the disc full size\n or set size (in hex) between %x and %x\n",((2<<20)/sectorsize),capacity);
     return NULL;
   }
   else
   {
     capacity=param;
   }
 }

 if(sectorsize>0)
 {
//   buf[0]=0;
//   ReadAcornPartitionName(ID,OverrideKey,04,buf,sectorsize);
//   testprint("buf:%s\n",buf);
   testprint("capacity to be used %x\n",capacity);
   printf("Formatting disc with single partition size %x sectors\n",capacity);

   //_swix(OS_Module,_INR(0,1) ,3, "SCSIFS");
   _swix(OS_ServiceCall,_INR(0,2),ID,Service_SCSIDetached,0x7);
   // write a empty MBR dos header just to ensure we're in control
   e=NukeBootSectors(ID);
   if(e) wimp_error(e);
   MakeAcornFormat(ID,OverrideKey,sectorsize,0,capacity,"SingleAcrn", defect,2,1);


   _swix(OS_ServiceCall,_INR(0,2),ID,Service_SCSIAttached,0x7);

 }
 else
 {
 printf("Suspect sector size %x found \n",sectorsize);
 }
(void) argc;
(void) argv;
(void) dospart;
printf("Completed\n");
}

void wimp_error(_kernel_oserror *er)
{
  /*
   * Generic routine to handle error reporting
   * through the wimp
   */

  if(er!=(_kernel_oserror *)NULL)
  {
   reg.r[0] = (int) er;
   reg.r[1] =       0;
   reg.r[2] = (int) task_name;
   _kernel_swi(Wimp_ReportError, &reg, &reg);
  }
}
