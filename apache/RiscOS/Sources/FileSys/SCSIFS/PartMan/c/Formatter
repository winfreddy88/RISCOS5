/* Copyright 2016 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include        "PMInclude.h"
#include        "GPThdr.h"
#include        "FormatDef.h"
#include        "FormatBits.h"
#include        "Format.h"
#include        "Diagnostic.h"

#define task_name "gpttst"          /* the name of our task */
#define MaxPartitions 7
extern _kernel_oserror  err;

_kernel_oserror * FormatPartition( int ID, FormatParamsp FP, int sectorsize)
{
testprint("FormatPartition ID:%x partn:%d name:%s\n",ID,FP->partition,(int)FP->discname);
// first read the partition spec
  GUIDPartn* myGP = ReturnGPTPartionInfo ( ID, FP->partition);
  if(myGP)
  {
   printGUIDpart(myGP);
   switch(FP->type)
    {
    case GUIDWinNorm:
      MakeDosFormat(ID,OverrideKey,sectorsize,myGP->StartLBA[0],myGP->EndLBA[0]-myGP->StartLBA[0]-1,myGP->EndLBA[0]-myGP->StartLBA[0]-1,FP->discname, NULL,-1,1);

  break;
  case GUIDFilecore:
      MakeAcornFormat(ID,OverrideKey,sectorsize,myGP->StartLBA[0],myGP->EndLBA[0]-myGP->StartLBA[0]-1,FP->discname, NULL,2,1);

    break;
  default:
    err.errnum=0;
    strncpy(err.errmess,"no known format",250);
    wimp_error(&(err));
    return &(err);
    }
  }
  return NULL;
}


