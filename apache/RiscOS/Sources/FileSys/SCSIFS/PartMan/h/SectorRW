/* Copyright 2016 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef SECTORRW_H
#define SECTORRW_H

// Access key to override disc reservations
#define OverrideKey (unsigned int)0xfc000003


// Read sector from scsi device
// assume Length is multiple of SecSize
_kernel_oserror * SecRead(int ID, unsigned int AccessKey, void *To, int Length, int LBA, int SecSize);

// write sector to scsi device
// assume Length is multiple of SecSize
_kernel_oserror * SecWrite(int ID, unsigned int AccessKey, void *From, int Length, int LBA, int SecSize);

// perform inquiry command and return type field
_kernel_oserror * Inquiry(int ID, unsigned int AccessKey,int* type);

// Check to see if this ID and partition base is the Boot Disc
// returns false if not boot disc,
// returns true if partial and scsiid matches
// returns true if it is a compete match.
bool CheckBootDiscID(int scsiid, int start, bool partial);

// return SCSIFS mounted disc number for scsi ID & partition start address
// or -1 if not currently mounted
void MountedDiscNum(int scsiID, int partLBA, int *scsifsID);
// return SCSI ID & partition start address for SCSIFS mounted disc number
// or -1 if not currently mounted
void MountedDiscLoc(int scsifsID, int *scsiid, int *start);


// read disc capacity & sector size
// set answers to 0 if error
_kernel_oserror * ReadDiscCapacity(int ID, unsigned int AccessKey,int* capacity,int* sectorsize);
 // buffered sector read/write for use with formatting
typedef struct{
 int ID;  		// scsi ID to use
 int SecSize;        	// size of secbuf
 int Where;        	// scsi block address
 int Length;		// length of data buffer there
 int SecsPerBuf;	// number of logical secs/physical sector(if > 1k)
 int Changed;		// set NZ if buffer has been changed
 unsigned int AccessKey;
 char *secbuf;          // ptr to actual buffer
 void* next;   		// ptr to next entry
}BufferedSec;
extern BufferedSec* BufStart;

void BufSecInit(void);
BufferedSec* BufSecNext(int Length);
void BufSecFlush(void);
_kernel_oserror * BufSecRead(int ID, unsigned int AccessKey, void *To, int Length, int Where, int SecSize, int *changed);
_kernel_oserror * BufSecChange(int ID, unsigned int AccessKey,void *From, int Length, int Where, int SecSize);
_kernel_oserror * BufSecWrite(void);
_kernel_oserror * BufSecBootWrite(void);
#endif
