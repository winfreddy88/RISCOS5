/* Copyright 2016 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef GPTHDR_H
#define GPTHDR_H
// h.GPThdr
//
// prototypes of GPT routines

#include "PMInclude.h"
#include "GPT.h"

void ReadGPTInfo(int device);
bool CheckGPTValid(int device);
bool GUIDValid(char * p);
int PartitionDisc(int device, int numpart, int partcount, int partn[]);
GUIDtype GetSetGUID(GUIDtype type, char guidbuf[GUIDLen]);
void EncodeGUID(char buf[GUIDLen], char* GUID);
void printUTF16LEname(char* name, char* buffer, int maxchars);
GUIDPartn* ReturnGPTPartionInfo ( int ID, int partition);
void freepointers(void);
void printGUIDpart(GUIDPartn*  gp);
void WriteDosBootSector(int device, int numpart, struct PartitionRecord *newpr,int disccapacity, int sectorsize);
void printLegacyPartition(struct PartitionRecord *  partn);
void printPartitionHeader(GPTHeader* altg);
extern GPTHeader* gpth;
extern GUIDPartn*  gpt;
_kernel_oserror * NukeBootSectors(int device);

#endif
