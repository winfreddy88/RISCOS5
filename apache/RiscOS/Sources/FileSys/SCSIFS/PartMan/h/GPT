/* Copyright 2016 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef GPT_H
#define GPT_H

//Taken from UEFI Spec v2.6, Jan 2016

#define GUIDLen 16               // 16 byte GUID buffer length


//Protective MBR partition record defining whole disk
typedef struct PartitionRecord {
   char   boot;                  // set 0, non bootable
   char   StartC;                // start CHS set to 0x000200
   char   StartH;                //
   char   StartS;                //
   char   OSType;                // set to 0xee - GPT Protective
   char   EndC;                  // CHS of last block on disk
   char   EndH;                  // or 0xffffff if disk too big
   char   EndS;                  // to represent
   char   StartLBA[4];           // set to 0x00000001, LBA of GPTHeader
   char   SizeLBA[4];            // size of disk -1, or 0xffffffff if disk too big
} PartitionRecord;


//Protective MBR  (Stored at LBA 0), and padded to LBASize with 0 bytes if
//  LBASize > 0x200
typedef struct ProtectiveMBR {
   char   BootCode[440];         // Unused by UEFI systems.
   int    UMBRSig;               // Set to zero.
   char   Unk1[2];               // Set to zero.
   // start of partn entry space. not word aligned
   char   Partition1[sizeof(struct PartitionRecord)];
   char   Partition2[sizeof(struct PartitionRecord)];
   char   Partition3[sizeof(struct PartitionRecord)];
   char   Partition4[sizeof(struct PartitionRecord)];
                                 // Array of four MBR partition records.
                                 // Contains: one Protective MBR partition record
                                 // and three partition records each set to zero.
   char   Sign[2];               // set as 0xaa55 (Sign[0]=0x55)
} ProtectiveMBR;

#define GPTPartNameCount 72/2
//GPT Partition Entry Array
typedef struct GUIDPartn {
   char  PTypeGUID[GUIDLen];     // PartitionTypeGUID. 0 = unused
   char  PUniqGUID[GUIDLen];     // Partitions own GUID
   int   StartLBA[2];            // starting LBA
   int   EndLBA[2];              // ending LBA
   int   Attributes[2];
   char  Name[GPTPartNameCount*2]; // null terminated UTF16LE partition name
   // 128 bytes so far. if GUIDPsize > 128 then fill to that size with null
}GUIDPartn;
// Attribute definitions, 2 ints
#define Attr_NoDriveLetter   (0x80000000,0)
#define Attr_Hdden           (0x40000000,0)
#define Attr_ShadowNorn      (0x20000000,0)
#define Attr_ReadOnly        (0x10000000,0)
#define Attr_CriticalPartn   (0,0x00000001)

//GPT Header (Stored at LBA 1, and echoed in last LBA of disk)
typedef struct GPTHeader {
   char  Sign[8];                // ASCII string 'EFI PART' (0x5452415020494645)
   int   Revisn;                 // 0x00010000 (revision 1.0)
   int   HeaderSize;             // Size in bytes of the GPT Header.
                                 // >= 92 and <= LBASize
   int   HeaderCRC32;            // CRC32 checksum for the GPT Header structure, computed by setting
                                 // this field to 0, and computing the 32-bit CRC for HeaderSize bytes.
   int   Resv0;                  // set to 0
   int   MyLBA[2];               // LBA containing this GPTHeader
   int   AltLBA[2];              // LBA containing the Alternate GPTHeader
   int   FirstOKLBA[2];          // first available LBA that a a GUIDPartn could use
   int   LastOKLBA[2];           // last available LBA that a a GUIDPartn could use
   char  DiscGUID[GUIDLen];      // unique GUID for this disk
   int   GUIDPArray[2];          // start LBA of the GUIDPartn array
   int   GUIDPnum;               // number of entries in the GUIDPartn array
   int   GUIDPsize;              // size of a GUIDPartn. (128*2n) (128, 256, 512, etc)
   int   GUIDPArrayCRC;          // CRC32 of GUIDPArray
//   int   Resv1[92/4];          // pad from 92 bytes to sector size set to 0
}GPTHeader;
#define GPTHdrSize(x) ((x>sizeof(struct GPTHeader))?x:sizeof(struct GPTHeader))


//Defined Partition Type GUIDs (PTypeGUID)
//Unused Entry 00000000-0000-0000-0000-000000000000
//EFI System Partition C12A7328-F81F-11D2-BA4B-00A0C93EC93B
//Partition containing a legacy MBR 024DEE41-33E7-11D3-9D69-0008C781F39F
#define GUID_unused "00000000-0000-0000-0000-000000000000"
#define GUID_EFISysPartn "C12A7328-F81F-11D2-BA4B-00A0C93EC93B"
#define GUID_LegacyMBR "024DEE41-33E7-11D3-9D69-0008C781F39F"
// this below is a 'basic data partition'
#define GUID_WinNormal "EBD0A0A2-B9E5-4433-87C0-6866672699C7"
// 'INVENTED' Filecore type partition "FilecoreType0001"
#define GUID_Filecore "656C6946-6F63-6572-5479-706530303031"
typedef enum {GUIDNew,GUIDUnknown,GUIDUnused,GUIDEfi,GUIDMbr,GUIDWinNorm,GUIDFilecore} GUIDtype;



//Bit fields in Partition Type GUIDs:
//Bit 0 Required Partition If this bit is set, the partition is required
//for the platform to function. The owner/creator of the partition indicates
//that deletion or modification of the contents can result in loss of
//platform features or failure for the platform to boot or operate. The
//system cannot function normally if this partition is removed, and it
//should be considered part of the hardware of the system. Actions such
//as running diagnostics, system recovery, or even OS install or boot
//could potentially stop working if this partition is removed. Unless OS
//software or firmware recognizes this partition, it should never be
//removed or modified as the UEFI firmware or platform hardware may
//become non-functional.
//Bit 1 No Block IO Protocol If this bit is set, then firmware must not
//produce an EFI_BLOCK_IO_PROTOCOL device for this partition.  By not
//producing an EFI_BLOCK_IO_PROTOCOL partition, file system mappings
//will not be created for this partition in UEFI.
//Bit 2 Legacy BIOS Bootable
//This bit is set aside by this specification to let systems with
//traditional PC-AT BIOS firmware implementations inform certain limited,
//special-purpose software running on these systems that a GPT partition
//may be bootable. For systems with firmware implementations conforming
//to this specification, the UEFI boot manager  must ignore this bit when
//selecting a UEFIcompliant application, e.g., an OS loader. Therefore
//there is no need for this specification to define the exact meaning of this bit.
//Bits 3-47 Undefined and must be zero. Reserved for expansion by future
//versions of the UEFI specification.
//Bits 48-63 Reserved for GUID specific use. The use of these bits will
//vary depending on the PartitionTypeGUID. Only the owner of the
//PartitionTypeGUID is allowed to modify these bits. They must be preserved
//if Bits 0-47 are modified.
#endif
