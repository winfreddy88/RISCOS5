/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*---------------------------------------------------------------------------*/
/* File:    sound.h                                                          */
/*---------------------------------------------------------------------------*/

#include <stdbool.h>

#define ReadCMOSSettings  1
#define WriteCMOSSettings 2

#define MAX_CHANNELS 64 /* currently dictated by component IDs */

typedef struct
{
  char token_suffix[6];
  char *name;
  int category;
  unsigned int index;
  int original_gain;     /* what to restore if the user SELECT-clicks Cancel */
  bool original_mute;
  int configured_gain;   /* what to show if the user ADJUST-clicks Cancel */
  bool configured_mute;
  int selected_gain;
  bool selected_mute;
  bool fixed;
  bool mono;
  bool muted_by_default;
  int mingain;
  int maxgain;
  int step;
} channel_t;

#define VIDC_CHANNEL     "O2s01", NULL, mixer_CATEGORY_HEADPHONES, 0, \
                         0, FALSE, \
                         0, FALSE, \
                         0, FALSE, \
                         FALSE, FALSE, FALSE, \
                         -21*16, 0*16, 3*16

typedef struct controller_list_entry
{
  struct controller_list_entry *next;
  int index; /* Index in string set */
  channel_t *channels;
  unsigned int nchannels;
  const char *mixer_id; /* ID to use with SoundCtrl; will be NULL if !multidevice */
  char config_id[1]; /* ID to use with config files; will be '0' if !multidevice */
} controller_list_entry_t;

extern controller_list_entry_t *original_controller;
extern controller_list_entry_t *configured_controller;
extern controller_list_entry_t *selected_controller;
extern controller_list_entry_t *controllers;
extern BOOL vidcmix;
extern BOOL multidevice;
extern unsigned int maxchannels;

void sound_detect_mix_mode(void);
void sound_enumerate_devices(void);
void sound_make_voices_menu(int window_id);
void sound_make_devices_menu(int window_id);
void sound_read_write_cmos_settings(int condition_code, int window_id);
void sound_read_choices(void);
void sound_save_choices(void);
int sound_reflect_gadget_state(int event_code, ToolboxEvent *event_block, IdBlock *id_block, void *handle);
void sound_reset_to_configured(int window_id);
void sound_reset_to_defaults(int window_id);
void sound_restore_original_settings(void);
