/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*---------------------------------------------------------------------------*/
/* File:    main.c                                                           */
/* Purpose: Main WIMP shell for Sound configuration                          */
/* Author:  Richard Leggett                                                  */
/* History: 29-Jan-98: RML: Begun.                                           */
/*          20-Mar-98: RML: Minor modifications.                             */
/*                                                                           */
/* Copyright © 1998 Acorn Computers Ltd., Cambridge, UK.                     */
/*---------------------------------------------------------------------------*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "toolbox.h"
#include "event.h"
#include "common.h"
#include "window.h"
#include "wimplib.h"
#include "defines.h"
#include "sound.h"

static MessagesFD messages_desc;
static IdBlock    idb;
static char       messages_string[255];
static ObjectId   config_window_id;
static unsigned int stretch_width;
static int        adjustment = 0;


/*---------------------------------------------------------------------------*
 * program_exit                                                              *
 *                                                                           *
 * Finished with this plug-in, so exit.                                      *
 *---------------------------------------------------------------------------*/

static void program_exit(void)
{
    exit(0);
}


/*---------------------------------------------------------------------------*
 * try_system_beep                                                           *
 *                                                                           *
 * Go 'toot'.                                                                *
 *---------------------------------------------------------------------------*/

static void try_system_beep(void)
{
    printf("\07");
}


/*-----------------------------------------------------------------------------------------------*/
/*                                          Event handlers                                       */
/*-----------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*
 * toolbox_error                                                             *
 *                                                                           *
 * Handler for errors from toolbox.                                          *
 *---------------------------------------------------------------------------*/

static int toolbox_error(int event_code, ToolboxEvent *event, IdBlock *id_block, void *handle)
{
    ToolboxErrorEvent *error_event = (ToolboxErrorEvent *)event;
    _kernel_oserror    err;

    strcpy(err.errmess, error_event->errmess);
    err.errnum = error_event->errnum;
    wimp_report_error(&err, 0, "Configure", 0, 0, 0);

    return 1;
}


/*---------------------------------------------------------------------------*
 * default_key_handler                                                       *
 *                                                                           *
 * Handler for key presses.                                                  *
 *---------------------------------------------------------------------------*/

static int default_key_handler(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
   int key_code = event->key_pressed.key_code;

   wimp_process_key(key_code);

   return 1;
}


/*---------------------------------------------------------------------------*
 * action_selected                                                           *
 *                                                                           *
 * Handler for when action buttons are clicked on.                           *
 *---------------------------------------------------------------------------*/

static int action_selected(int event_code, ToolboxEvent *event_block, IdBlock *id_block, void *handle)
{
    ActionButtonSelectedEvent *block = (ActionButtonSelectedEvent*) event_block;
    int                        icon = id_block->self_component;

    switch (icon)
    {
        case SetButton:
            sound_read_write_cmos_settings(WriteCMOSSettings, config_window_id);
            sound_save_choices();
            if ((block->hdr.flags & 1) == 0) program_exit();            /* Return or left button pressed */
            sound_reset_to_configured(config_window_id);
            break;
            
        case CancelButton:
            if ((block->hdr.flags & 1) == 0)                            /* Escape or left button pressed */
            {
                sound_restore_original_settings();
                program_exit();
            }
            sound_reset_to_configured(config_window_id);
            break;
            
        case DefaultButton:
            sound_reset_to_defaults(config_window_id);
            break;
            
        case TryButton:
            try_system_beep();
            break;
    }

    return 1;
}


/*---------------------------------------------------------------------------*
 * message_quit                                                              *
 *                                                                           *
 * Called when wimp quit message received.                                   *
 *---------------------------------------------------------------------------*/
 
static int message_quit(WimpMessage *event, void *handler)
{
    program_exit();
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * message_reopen                                                            *
 *                                                                           *
 * Called when we receive a message from Configure telling us to reopen our  *
 * window.                                                                   *
 *---------------------------------------------------------------------------*/

static int message_reopen(WimpMessage *event, void *handler)
{
    error_trap(toolbox_show_object(0, config_window_id, 0, 0, 0, 0), 0);

    return 1;
}


/*----------------------------------------------------------------------------------------------*/
/*                               Program startup & polling loop                                 */
/*----------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*
 * setup_sliders                                                             *
 *                                                                           *
 * Recreate sliders so that their state matches selected_controller          *
 *---------------------------------------------------------------------------*/

void setup_sliders(void)
{
    /* Delete current sliders */
    for (int i = 0; i < maxchannels*4; i++)
    {
        window_remove_gadget(0, config_window_id, i);
    }

    if (!selected_controller)
    {
        return;
    }

    ObjectTemplateHeader *object_template;
    error_trap(toolbox_template_lookup(0, "Window", (void **)&object_template), 0);
    
    const char *gadget_template[4];
    size_t gadget_template_size[4];
    error_trap(window_extract_gadget_info(0, object_template, TemplateLabel,  (void **)&gadget_template[0], (int *)&gadget_template_size[0]), 0);
    error_trap(window_extract_gadget_info(0, object_template, TemplateButton, (void **)&gadget_template[1], (int *)&gadget_template_size[1]), 0);
    error_trap(window_extract_gadget_info(0, object_template, TemplateSlider, (void **)&gadget_template[2], (int *)&gadget_template_size[2]), 0);
    error_trap(window_extract_gadget_info(0, object_template, TemplateOption, (void **)&gadget_template[3], (int *)&gadget_template_size[3]), 0);

    /* Work out memory footprint of largest gadget which we need to dynamically create */
    size_t max_template_size = (gadget_template_size[0] > gadget_template_size[1]) ? gadget_template_size[0] : gadget_template_size[1];
    if (gadget_template_size[2] > max_template_size) max_template_size = gadget_template_size[2];
    if (gadget_template_size[3] > max_template_size) max_template_size = gadget_template_size[3];
    char gadget[max_template_size];

    int my_adjustment = maxchannels * SLIDER_HEIGHT;

    if (!vidcmix)
    {
        /* Adjust for the 2 gadget height equivalent of OversamplingOption & SixteenBitOption */
        my_adjustment -= 2 * SLIDER_HEIGHT;
    }

    /* 1) Name field */
    memcpy(gadget, gadget_template[0], gadget_template_size[0]);
    ((Gadget *)gadget)->hdr.box.ymax += my_adjustment;
    ((Gadget *)gadget)->hdr.box.ymin += my_adjustment;
    for (int i = 0; i < selected_controller->nchannels; i++)
    {
        char token[11] = "Name";
        strcat(token, selected_controller->channels[i].token_suffix);
        char param[4];
        if (selected_controller->channels[i].token_suffix[4] == '1')
        {
            param[0] = '\0';
        }
        else
        {
            sprintf(param, " %d", selected_controller->channels[i].index + 1);
        }
        const char *name = messages_lookup_withparam(token, param);
        char label[strlen(name) + 1];
        strcpy(label, name);
        ((Gadget *)gadget)->hdr.box.xmin -= stretch_width;
        ((Gadget *)gadget)->hdr.box.ymax -= SLIDER_HEIGHT;
        ((Gadget *)gadget)->hdr.box.ymin -= SLIDER_HEIGHT;
        ((Gadget *)gadget)->hdr.component_id = i * 4;
        sprintf(token, "HelpL%s", selected_controller->channels[i].token_suffix);
        ((Gadget *)gadget)->hdr.help_message = (char *)messages_lookup_withparam(token, selected_controller->channels[i].name);
        ((Gadget *)gadget)->data.label.label = label;
        error_trap(window_add_gadget(0, config_window_id, (Gadget *)gadget, NULL), 0);
    }
    
    /* 2) Mono/stereo tote */
    memcpy(gadget, gadget_template[1], gadget_template_size[1]);
    ((Gadget *)gadget)->hdr.box.ymax += my_adjustment;
    ((Gadget *)gadget)->hdr.box.ymin += my_adjustment;
    for (int i = 0; i < selected_controller->nchannels; i++)
    {
        ((Gadget *)gadget)->hdr.box.ymax -= SLIDER_HEIGHT;
        ((Gadget *)gadget)->hdr.box.ymin -= SLIDER_HEIGHT;
        ((Gadget *)gadget)->hdr.component_id = 1 + i * 4;
        char token[11] = "HelpB";
        strcat(token, selected_controller->channels[i].token_suffix);
        ((Gadget *)gadget)->hdr.help_message = (char *)messages_lookup_withparam(token, selected_controller->channels[i].name);
        ((Gadget *)gadget)->data.button.validation = selected_controller->channels[i].mono ? "R2;Smono" : "R2;Sstereo";
        error_trap(window_add_gadget(0, config_window_id, (Gadget *)gadget, NULL), 0);
    }
    
    /* 3) Slider */
    memcpy(gadget, gadget_template[2], gadget_template_size[2]);
    ((Gadget *)gadget)->hdr.box.ymax += my_adjustment;
    ((Gadget *)gadget)->hdr.box.ymin += my_adjustment;
    for (int i = 0; i < selected_controller->nchannels; i++)
    {
        ((Gadget *)gadget)->hdr.box.ymax -= SLIDER_HEIGHT;
        ((Gadget *)gadget)->hdr.box.ymin -= SLIDER_HEIGHT;
        ((Gadget *)gadget)->hdr.component_id = 2 + i * 4;
        char token[12] = "HelpS";
        if (selected_controller->channels[i].fixed) strcpy(token, "HelpSF");
        strcat(token, selected_controller->channels[i].token_suffix);
        ((Gadget *)gadget)->hdr.help_message = (char *)messages_lookup_withparam(token, selected_controller->channels[i].name);
        ((Gadget *)gadget)->hdr.flags &= ~(Gadget_Faded | Slider_BarColour);
        ((Gadget *)gadget)->hdr.flags |= (selected_controller->channels[i].category >= 0 ? 10 : 11) << Slider_BarColourShift;
        if (selected_controller->channels[i].fixed) ((Gadget *)gadget)->hdr.flags |= Gadget_Faded;
        error_trap(window_add_gadget(0, config_window_id, (Gadget *)gadget, NULL), 0);
        error_trap(slider_set_bounds(7, config_window_id, 2+i*4, selected_controller->channels[i].mingain, selected_controller->channels[i].maxgain, selected_controller->channels[i].step), 0);
        error_trap(slider_set_value(0, config_window_id, 2 + i * 4, selected_controller->channels[i].selected_gain), 0);
    }
    
    /* 4) Mute option */
    memcpy(gadget, gadget_template[3], gadget_template_size[3]);
    ((Gadget *)gadget)->hdr.box.ymax += my_adjustment;
    ((Gadget *)gadget)->hdr.box.ymin += my_adjustment;
    for (int i = 0; i < selected_controller->nchannels; i++)
    {
        ((Gadget *)gadget)->hdr.box.ymax -= SLIDER_HEIGHT;
        ((Gadget *)gadget)->hdr.box.ymin -= SLIDER_HEIGHT;
        ((Gadget *)gadget)->hdr.component_id = 3 + i * 4;
        char token[12] = "HelpO";
        if (selected_controller->channels[i].fixed) strcpy(token, "HelpOF");
        strcat(token, selected_controller->channels[i].token_suffix);
        ((Gadget *)gadget)->hdr.help_message = (char *)messages_lookup_withparam(token, selected_controller->channels[i].name);
        ((Gadget *)gadget)->hdr.flags &= ~Gadget_Faded;
        if (vidcmix) ((Gadget *)gadget)->hdr.flags |= Gadget_Faded; /* Unmutable */
        if (selected_controller->channels[i].fixed) ((Gadget *)gadget)->hdr.flags |= Gadget_Faded;
        error_trap(window_add_gadget(0, config_window_id, (Gadget *)gadget, NULL), 0);
        error_trap(optionbutton_set_state(0, config_window_id, 3 + i * 4, selected_controller->channels[i].selected_mute), 0);
    }
}

/*---------------------------------------------------------------------------*
 * open_configure_window                                                     *
 *                                                                           *
 * Called to open the configure window on screen and register handlers.      *
 *---------------------------------------------------------------------------*/

static void open_configure_window(int at_x, int at_y)
{
    BBox bbox;
    int  screenx;
    int  screeny;
    WindowShowObjectBlock buffer;
    const ComponentId stretch_gadgets[] = { BeepGroup, VoicesStringSet };
    const ComponentId move_gadgets[] = { DefaultButton, VoicesLabel, QuietRadio, LoudRadio, BeepingErrorsOption };

    /* Create window */
    error_trap(toolbox_create_object(0, "Window", &config_window_id), 1);

    /* Register handlers for the configure window */
    error_trap(event_register_toolbox_handler(config_window_id, ActionButton_Selected, action_selected, NULL), 0);
    error_trap(event_register_toolbox_handler(config_window_id, OptionButton_StateChanged, sound_reflect_gadget_state, NULL), 0);
    error_trap(event_register_toolbox_handler(config_window_id, RadioButton_StateChanged, sound_reflect_gadget_state, NULL), 0);
    error_trap(event_register_toolbox_handler(config_window_id, Slider_ValueChanged, sound_reflect_gadget_state, NULL), 0);
    error_trap(event_register_toolbox_handler(config_window_id, StringSet_ValueChanged, sound_reflect_gadget_state, NULL), 0);
    error_trap(event_register_wimp_handler(-1, Wimp_EKeyPressed, default_key_handler, NULL), 0);
    
    error_trap(gadget_get_bbox(0, config_window_id, TemplateLabel, &bbox), 0);
    stretch_width = bbox.xmax - bbox.xmin;

    /* Do dynamic gadget creation and resizing */
    error_trap(window_remove_gadget(0, config_window_id, TemplateLabel), 0);
    error_trap(window_remove_gadget(0, config_window_id, TemplateButton), 0);
    error_trap(window_remove_gadget(0, config_window_id, TemplateSlider), 0);
    error_trap(window_remove_gadget(0, config_window_id, TemplateOption), 0);

    if (!vidcmix)
    {
        /* Adjust for the 2 gadget height equivalent of OversamplingOption & SixteenBitOption */
        adjustment = 2 * SLIDER_HEIGHT;

        /* And get rid of them */
        error_trap(window_remove_gadget(0, config_window_id, OversamplingOption), 0);
        error_trap(window_remove_gadget(0, config_window_id, SixteenBitOption), 0);
    }

    if (!multidevice)
    {
        /* Adjust for the height equivalent of DeviceStringSet */
        adjustment += STRINGSET_HEIGHT;

        /* And get rid of them */
        error_trap(window_remove_gadget(0, config_window_id, DeviceLabel), 0);
        error_trap(window_remove_gadget(0, config_window_id, DeviceStringSet), 0);
    }

    /* Calculate width of widest name */
    unsigned int widest_label = 0;
    for (controller_list_entry_t *controller = controllers; controller; controller = controller->next)
    {
        for (int i = 0; i < controller->nchannels; i++)
        {
            char token[11] = "Name";
            strcat(token, controller->channels[i].token_suffix);
            char param[4];
            if (controller->channels[i].token_suffix[4] == '1')
            {
                param[0] = '\0';
            }
            else
            {
                sprintf(param, " %d", controller->channels[i].index + 1);
            }
            const char *name = messages_lookup_withparam(token, param);
            char label[strlen(name) + 1];
            strcpy(label, name);
            unsigned int this_width = 0;
            _swix(Wimp_TextOp, _INR(0,2)|_OUT(0),
                 1,
                 label,
                 0,
                 &this_width);
            if (this_width > widest_label) widest_label = this_width;
        }
    }

    stretch_width = widest_label + /* fudge factor */ 16 - stretch_width;
    adjustment -= (maxchannels - 1) * SLIDER_HEIGHT;
    error_trap(window_get_extent(0, config_window_id, &bbox), 0);
    bbox.xmin -= stretch_width;
    bbox.ymax -= adjustment;
    error_trap(window_set_extent(0, config_window_id, &bbox), 0);

    error_trap(gadget_get_bbox(0, config_window_id, HardwareBox, &bbox), 0);
    bbox.xmin -= stretch_width;
    bbox.ymax -= adjustment;
    error_trap(gadget_move_gadget(0, config_window_id, HardwareBox, &bbox), 0);
    
    for (int i = 0; i < (sizeof stretch_gadgets / sizeof *stretch_gadgets); i++)
    {
        error_trap(gadget_get_bbox(0, config_window_id, stretch_gadgets[i], &bbox), 0);
        bbox.xmin -= stretch_width;
        error_trap(gadget_move_gadget(0, config_window_id, stretch_gadgets[i], &bbox), 0);
    }
    for (int i = 0; i < (sizeof move_gadgets / sizeof *move_gadgets); i++)
    {
        error_trap(gadget_get_bbox(0, config_window_id, move_gadgets[i], &bbox), 0);
        bbox.xmin -= stretch_width;
        bbox.xmax -= stretch_width;
        error_trap(gadget_move_gadget(0, config_window_id, move_gadgets[i], &bbox), 0);
    }
    if (multidevice)
    {
        error_trap(gadget_get_bbox(0, config_window_id, DeviceLabel, &bbox), 0);
        bbox.xmin -= stretch_width;
        bbox.xmax -= stretch_width;
        bbox.ymin -= adjustment;
        bbox.ymax -= adjustment;
        error_trap(gadget_move_gadget(0, config_window_id, DeviceLabel, &bbox), 0);

        error_trap(gadget_get_bbox(0, config_window_id, DeviceStringSet, &bbox), 0);
        bbox.xmin -= stretch_width;
        bbox.ymin -= adjustment;
        bbox.ymax -= adjustment;
        error_trap(gadget_move_gadget(0, config_window_id, DeviceStringSet, &bbox), 0);
    }

    error_trap(window_get_extent(0, config_window_id, &bbox), 0);

    /* Work out positioning (unless it was supplied in the command line) */
    if ((at_x==-1) && (at_y==-1))
    {
        error_trap(common_read_screensize(&screenx, &screeny), 0);
        at_y = (screeny + bbox.ymax - bbox.ymin) / 2;
        at_x = (screenx - bbox.xmax + bbox.xmin) / 2;
    }

    /* Show the window */
    buffer.visible_area.xmin = at_x;
    buffer.visible_area.ymax = at_y;
    buffer.visible_area.xmax = at_x + bbox.xmax - bbox.xmin;
    buffer.visible_area.ymin = at_y - bbox.ymax + bbox.ymin;
    buffer.xscroll = 0;
    buffer.yscroll = 0;
    buffer.behind = -1;
    error_trap(toolbox_show_object(0, config_window_id, 1, &buffer, 0, 0), 0);
}


/*---------------------------------------------------------------------------*
 * main_initialise                                                           *
 *                                                                           *
 * Initialise toolbox etc.                                                   *
 *                                                                           *
 * In: Nothing.                                                              *
 *                                                                           *
 * Returns: 1 if everything went okay, 0 otherwise                           *
 *---------------------------------------------------------------------------*/

static int main_initialise(void)
{
    static int mess_wanted[] = {Wimp_MQuit,
                                Wimp_MOpenConfigWindow,
                                0};
    static int tbox_wanted[] = {Toolbox_Error,
                                ActionButton_Selected,
                                OptionButton_StateChanged,
                                RadioButton_StateChanged,
                                Slider_ValueChanged,
                                StringSet_ValueChanged,
                                0};
    int        task_handle;
                                
    error_trap(toolbox_initialise(0, 310, mess_wanted, tbox_wanted,
                                  "<SndSetup$Dir>", &messages_desc, &idb,
                                  0, &task_handle, 0) ,1);
    error_trap(event_initialise(&idb), 0);
    error_trap(event_set_mask(Wimp_Poll_NullMask), 0);    
    messages_register(&messages_desc, messages_string);

    error_trap(event_register_message_handler(Wimp_MQuit, message_quit, NULL), 0);
    error_trap(event_register_message_handler(Wimp_MOpenConfigWindow, message_reopen, NULL), 0);
    error_trap(event_register_toolbox_handler(-1,Toolbox_Error,toolbox_error,NULL) ,0);

    return 1;
}
                                  

/*---------------------------------------------------------------------------*
 * main                                                                      *
 *                                                                           *
 * Main polling loop                                                         *
 *---------------------------------------------------------------------------*/

int main(int argc, char *argv[])
{
    WimpPollBlock wpb;
    int           event_code;
    int           openat_x = -1;
    int           openat_y = -1;

    /* Have we been passed any co-ordinates to open at? */
    if ((argc >= 4) && (strcmp(argv[1], "-openat")==0))
    {
        openat_x = atoi(argv[2]);
        openat_y = atoi(argv[3]);
    }

    /* Do main initialisation */
    if (!main_initialise()) return 0;
    sound_detect_mix_mode();
    sound_enumerate_devices();
    open_configure_window(openat_x, openat_y);
    sound_make_voices_menu(config_window_id);
    sound_make_devices_menu(config_window_id);
    sound_reset_to_configured(config_window_id);

    /* Poll loop */
    while (TRUE)
    {
        error_trap(event_poll(&event_code, &wpb, NULL), 0);
    }
    
    return 0;
}         

