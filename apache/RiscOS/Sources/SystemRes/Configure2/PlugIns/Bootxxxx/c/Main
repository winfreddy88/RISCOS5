/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/******	Main.c ************************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	BootApps/BootBoot/BootRun
This file:	Overall control

History:
Date		Who	Change
----------------------------------------------------------------------------
10/06/1998	BJGA	Created
11/06/1998	BJGA	Added Modifed flag and modified/unmodified title strings
12/06/1998	BJGA	Added ErrorBuffer; calls List_Read during initialisation
15/06/1998	BJGA	Added BootDiff/BootPath/BootHat and static_ReadVariables
19/06/1998	BJGA	Stores task handle for use in Wimp message handlers

\**************************************************************************/

/* CLib */
#include <stdlib.h>
/* Toolbox */
#include "event.h"
#include "wimplib.h"
#include "toolbox.h"
#include "window.h"
/* ConfigureLib */
#include "error.h"
#include "message.h"
#include "misc.h"
#include "str.h"
/* Local headers */
#include "List.h"
#include "Main.h"
#include "ToolboxE.h"
#include "WimpE.h"
#include "WimpM.h"

#define WimpVersion	((int) 380)

/* Global variables */

	int		MyTaskHandle;
	BOOL		Quit = FALSE;
	BOOL		Modified = FALSE;
	BOOL		Complain = TRUE;
	MessagesFD	messages;
	ObjectId	Window_Obj;
	ObjectId	Pane_Obj;
	ObjectId	DCS_Obj;
	int		BootDiff;
	char		*BootPath;
	char		*BootHat;
	char		*Title_Unmodified = NULL;
	char		*Title_Modified = NULL;
	_kernel_oserror	ErrorBuffer = { 0, "" };

/* Prototypes */

static void static_CreateWindows (void);
static void static_ReadVariables (void);


/******	main() ************************************************************\

In:		Command line option:
		  -openat x y
		    specifies initial position to open window at

\**************************************************************************/

int main (int argc, char *argv[])
{
  WimpPollBlock PollBlock;
  IdBlock IDBlock;

  error_initialise ();
  throw (toolbox_initialise (0, WimpVersion, WimpM_Messages, ToolboxE_Events,
  #if   APP == BOOTAPPS
    "<BootApps$Dir>",
  #elif APP == BOOTBOOT
    "<BootBoot$Dir>",
  #elif APP == BOOTRUN
    "<BootRun$Dir>",
  #endif
    &messages, &IDBlock, NULL, &MyTaskHandle, NULL));
  misc_parsearguments (argc, argv);
  throw (event_initialise (&IDBlock));
  throw (event_set_mask (WimpE_Mask));

  static_ReadVariables ();
  static_CreateWindows ();

  WimpM_Register ();
  WimpE_Register ();
  ToolboxE_Register ();

  error_recover_point();
  while (!Quit)
  {
    throw (event_poll (NULL, &PollBlock, NULL));
  }
  exit (EXIT_SUCCESS);
}

/******	static_CreateWindows() ********************************************\

Purpose:	Creates and opens window and pane

\**************************************************************************/

static void static_CreateWindows (void)
{
  int title_len;
  _kernel_oserror err_alloc = { 0, "Err_Alloc" };

  /* Create window objects */
  throw (toolbox_create_object (0, "Edit", &Window_Obj));
  throw (toolbox_create_object (0, "Pane", &Pane_Obj));
  throw (toolbox_create_object (0, "DCS", &DCS_Obj));

  /* Get modified and unmodified title strings */
  throw (window_get_title (0, Window_Obj, NULL, 0, &title_len));
  Title_Unmodified = malloc (title_len);
  Title_Modified = malloc (title_len + 2);
  if (!Title_Unmodified || !Title_Modified) message_error(messages, err_alloc);
  throw (window_get_title (0, Window_Obj, Title_Unmodified, title_len, NULL));
  str_cpy (Title_Unmodified, Title_Unmodified); /* null terminate */
  sprintf (Title_Modified, "%s *", Title_Unmodified);

  /* Nest pane in the main window */
  throw (WimpE_open_pane(NULL));

  /* Set up contents of pane */
  throw (List_Read (FALSE));

  /* Open main window */
  misc_openwindow (Window_Obj, TRUE);
}

/******	static_ReadVariables() ********************************************\

Purpose:	Reads system variable Boot$Path

\**************************************************************************/

static void static_ReadVariables (void)
{
  const char *var;
  const char *ptr_s;
  char *ptr_d;
  int diff;
  int diff_hat;
  _kernel_oserror e = { 0, "Err_Alloc" };

  var = getenv ("Boot$Path");
  BootPath = malloc (str_len (var) + 1);
  BootHat = malloc (str_len (var) + 1);
  if (!BootPath || !BootHat) message_error(messages, e);

  /* Copy first element of path only into BootPath */
  ptr_s = var;
  ptr_d = BootPath;
  while (*ptr_s != ',' && *ptr_s >= ' ')
  {
    *ptr_d = *ptr_s;
    ptr_s++;
    ptr_d++;
  }
  *ptr_d = '\0';

  /* Copy BootPath to BootHat, remove up to penultimate period */
  str_cpy (BootHat, BootPath);
  ptr_d = BootHat + str_len (BootHat) - 1;
  while (*(ptr_d - 1) != '.' && ptr_d > BootHat)
  {
    ptr_d--;
  }
  *ptr_d = '\0';

  /*  Calculate BootDiff, the maximum difference between canonicalised and
   *  path-relative versions of Boot: or Boot:^. paths (in either direction)
   */
  diff = abs (str_len (BootPath) - str_len ("Boot:"));
  diff_hat = abs (str_len (BootHat) - str_len ("Boot:^."));
  BootDiff = max(diff, diff_hat);
}
