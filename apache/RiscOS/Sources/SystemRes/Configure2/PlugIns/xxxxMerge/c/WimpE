/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/******	WimpE.c ***********************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Boot/Font/SysMerge
This file:	Wimp event code

History:
Date		Who	Change
----------------------------------------------------------------------------
29/05/1998	BJGA	Created
04/06/1998	BJGA	Added Redraw_Window_Request handler
05/06/1998	BJGA	Added Mouse_Click handler
09/06/1998	BJGA	Changed parameters to Merge_RedrawWindow

\**************************************************************************/

/* Toolbox */
#include "event.h"
#include "wimplib.h"
#include "toolbox.h"
#include "window.h"
/* ConfigureLib */
#include "misc.h"
/* Local headers */
#include "Main.h"
#include "Merge.h"
#include "WimpE.h"

static int static_RedrawWindowRequest (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle);
static int static_MouseClick (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle);
static int static_KeyPressed (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle);

int WimpE_Mask_NoNull =	Wimp_Poll_PointerLeavingWindowMask +
			Wimp_Poll_PointerEnteringWindowMask +
			Wimp_Poll_LoseCaretMask +
			Wimp_Poll_GainCaretMask +
			Wimp_Poll_PollWordNonZeroMask ;
int WimpE_Mask =	Wimp_Poll_NullMask +
			Wimp_Poll_PointerLeavingWindowMask +
			Wimp_Poll_PointerEnteringWindowMask +
			Wimp_Poll_LoseCaretMask +
			Wimp_Poll_GainCaretMask +
			Wimp_Poll_PollWordNonZeroMask ;


void WimpE_Register (void)
{
  throw (event_register_wimp_handler (-1, Wimp_ERedrawWindow, static_RedrawWindowRequest, NULL));
  throw (event_register_wimp_handler (-1, Wimp_EMouseClick, static_MouseClick, NULL));
  throw (event_register_wimp_handler (-1, Wimp_EKeyPressed, static_KeyPressed, NULL));
}

/******	static_RedrawWindowRequest() **************************************\

Purpose:	Handles Redraw_Window_Request event

\**************************************************************************/

static int static_RedrawWindowRequest (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  int pane_handle;
  throw (window_get_wimp_handle (0, Pane_Obj, &pane_handle));
  if (((WimpRedrawWindowRequestEvent *) event)->window_handle == pane_handle)
  {
    Merge_RedrawWindow (pane_handle, FALSE, 0, 0, 0, 0);
  }
  return 1;
}

/******	static_MouseClick() ***********************************************\

Purpose:	Handles Mouse_Click event

\**************************************************************************/

static int static_MouseClick (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  WimpGetWindowStateBlock pane;
  int wao_x;
  int wao_y;
  throw (window_get_wimp_handle (0, Pane_Obj, &(pane.window_handle)));
  throw (wimp_get_window_state (&pane));
  wao_x = pane.visible_area.xmin - pane.xscroll;
  wao_y = pane.visible_area.ymax - pane.yscroll;
  if ((((WimpMouseClickEvent *) event)->window_handle == pane.window_handle)
      && (((WimpMouseClickEvent *) event)->buttons & (Wimp_MouseButtonSelect | Wimp_MouseButtonAdjust)))
  {
    Merge_HandleMouseClick (pane.window_handle, ((WimpMouseClickEvent *) event)->mouse_x - wao_x,
        ((WimpMouseClickEvent *) event)->mouse_y - wao_y);
  }
  return 1;
}

/******	static_KeyPressed() ***********************************************\

Purpose:	Handles Key_Pressed event

\**************************************************************************/

static int static_KeyPressed (int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
  throw (wimp_process_key (event->key_pressed.key_code));
  return 1;
}
