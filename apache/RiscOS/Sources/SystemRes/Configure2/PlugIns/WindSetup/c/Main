/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/******	Main.c ************************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Windows configuration plug-in
This file:	Overall control

History:
Date		Who	Change
----------------------------------------------------------------------------
09/12/1997	BJGA	Split into Main, Settings, ToolboxE, WimpE & WimpM
			Added these headers

\**************************************************************************/

/* CLib */
#include <stdlib.h>
#include <string.h>
/* Toolbox */
#include "event.h"
#include "toolbox.h"
#include "window.h"
/* Common */
#include "error.h"
#include "misc.h"
#include "message.h"
/* Local headers */
#include "Settings.h"
#include "Main.h"  /* includes prototypes for this file */
#include "ToolboxE.h"
#include "WimpE.h"
#include "WimpM.h"

#define	WimpVersion	((int) 310)

/* Global variables */

	BOOL		quit = FALSE;
	ObjectId	mainwindow_id;
	MessagesFD	messages;

/* Static global variables */

static	WimpPollBlock	poll_block;
static	IdBlock		id_block;

/******	main() ************************************************************\

In:		Command line option:
		  -openat x y
		    specifies initial position to open window at

\**************************************************************************/

int main (int argc, char *argv[])
{
  int  screeny;
  ObjectTemplateHeader *objtemplate;
  WindowTemplate       *wintemplate;
  WimpWindow           *windef;

  error_initialise ();
  throw (toolbox_initialise (0, WimpVersion, wimpm_messages, toolboxe_events,
    "<WindSetup$Dir>", &messages, &id_block, NULL, NULL, NULL));
  misc_parsearguments (argc, argv);
  throw (event_initialise (&id_block));
  throw (event_set_mask (wimpe_mask));

  /* Register for messages and events */
  wimpm_register ();
  wimpe_register ();
  toolboxe_register ();

  /* Read the window object in by hand */
  throw (toolbox_template_lookup (0, "Windows", (void **)&objtemplate));
  if (objtemplate->object_class != Window_ObjectClass) {
    _kernel_oserror e = { 0, "" };

    strcpy (e.errmess, message_lookup_direct (messages,"Err_BadClass"));
    _swi (OS_GenerateError, _IN(0), &e);
  }
  wintemplate = objtemplate->body;
  windef = &wintemplate->window;
  screeny = _swi (OS_ReadModeVariable, _INR(0,1) | _RETURN(2), -1, 12) <<
            _swi (OS_ReadModeVariable, _INR(0,1) | _RETURN(2), -1, 5);

  /* Calculate the window height compared with the screen and
   * turn the vertical scrollbar on if it doesn't fit
   */
  if ((windef->visible_area.ymax - windef->visible_area.ymin) >= screeny) {
    windef->flags |= WimpWindow_VScroll;
  }
  else {
    windef->flags &= ~WimpWindow_VScroll;
  }
  throw (toolbox_create_object (Toolbox_CreateObject_InCore, objtemplate, &mainwindow_id));
  misc_openwindow (mainwindow_id, TRUE);
  settings_read (cmos_read);

  /* Go */
  error_recover_point();
  while (!quit) {
    throw (event_poll (NULL, &poll_block, NULL));
  }
  exit (EXIT_SUCCESS);
}
