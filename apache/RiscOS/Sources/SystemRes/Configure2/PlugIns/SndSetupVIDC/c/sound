/* Copyright 2003 Tematic Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
** sound.c
**
** Sound configuration.
**
** Cobbled together by Alan Wrigley using bits of Phoebe
** and bits of RISC OS 3.7 sound configuration code.
**
** Copyright Acorn Computers Ltd & RISCOS Ltd, distributed under licence
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "swis.h"


#include "sound.h"
#include "common.h"
#include "defines.h"
#include "main.h"

static int menu_to_voice_map[16];


/*---------------------------------------------------------------------------*
 * sound_make_voices_menu                                                    *
 *                                                                           *
 * Make a menu of voice modules available.                                   *
 *                                                                           *
 * In: window_id - Toolbox ID of the configuration window                    *
 *---------------------------------------------------------------------------*/

void sound_MakeVoicesMenu(int window_id)
{

  char  strings[1024];
  char* name;
  char* first = 0;
  char* name_local;
  int   i, m;

  memset(strings, 0, 1024);

  /* menu_to_voice_map maps from menu item number to internal voice number */
  for (m = 15; m >= 0; m--)
    menu_to_voice_map[m] = -1;

  /* Only read first 16 voices, as 16 is maximum value which can be stored in 4 CMOS bits */
  m = 0;
  for (i = 1; i <= 16; i++)
  {
    _swix(Sound_InstallVoice, _INR(0,1)|_OUTR(2,3), 2, i, &name, &name_local);
    if (name != 0)
    {
      if (strlen(strings) > 0) strcat(strings, ",");
      if (strlen(strings) == 0) first = name_local;
      strcat(strings, name_local);
      menu_to_voice_map[m++] = i;
    }
  }

  error_trap(stringset_set_available(0, window_id, VoicesStringset, strings), 0);
  error_trap(stringset_set_selected(0, window_id, VoicesStringset, first), 0);

}

static void SetVolumeIcon(int volume)
{

 error_trap(slider_set_value(0, WindowID, VolumeSlider, volume), 0);

}

void sound_ChangeVolume(int volume)
{

  int byte = read_cmos_value(CMOS_Volume);
  int volumes[] = {0x01, 0x13, 0x25, 0x37, 0x49, 0x5B, 0x6D, 0x7F};
  _kernel_swi_regs r;

  if ((volume >= 0) && (volume <= 7))
  {
    byte = (byte & 0x8f) | (volume << 4);
    write_cmos_value(CMOS_Volume, byte);
    r.r[0] = volumes[volume];
    _kernel_swi(Sound_Volume,&r,&r);

    SetVolumeIcon(volume);
  }

}

static void SetVoiceIcon(int voice)
{

  int n;

  error_trap(stringset_set_selected(0, WindowID, VoicesStringset, "*** None ***"), 0);
  for (n = 0; n < 15; n++)
  {
    if (menu_to_voice_map[n] == voice)
      error_trap(stringset_set_selected(1, WindowID, VoicesStringset, (char*)n), 0);
  }
}

/*---------------------------------------------------------------------------*
 * sound_change_voice                                                        *
 *                                                                           *
 * Change the system beep (channel 1) voice                                  *
 *                                                                           *
 * In: n = selection number from voices menu                                 *
 *---------------------------------------------------------------------------*/

void sound_ChangeVoice(int n)
{

  int byte = read_cmos_value(CMOS_Voice) + 1;
  int voice = menu_to_voice_map[n - 1];

  if ((voice >= 1) && (voice <= 16))
  {
    byte = (byte & 0xf0) | (voice - 1);
    write_cmos_value(CMOS_Voice, byte);
    _swix(Sound_AttachVoice, _INR(0,1), 1, voice);
  }

  /* Beep */
  SetVoiceIcon(n);
}


static void SetBellVolumeIcon(int state)
{

 error_trap(radiobutton_set_state(0, WindowID, QuietRadio, ~state), 0);
 error_trap(radiobutton_set_state(0, WindowID, LoudRadio, state), 0);

}

void sound_ChangeBellVolume(int state)
{

  int byte = read_cmos_value(CMOS_BellVolume);
  _kernel_swi_regs r;

  byte = (byte & 0xFD) | state;
  write_cmos_value(CMOS_BellVolume, byte);
  SetBellVolumeIcon(state);
  r.r[0] = 212;
  r.r[1] = (state) ? 0x80 : 0xd0;
  r.r[2] = 0;
  _kernel_swi(OS_Byte,&r,&r);

}

static void Set16BitIcon(int state)
{

  error_trap(optionbutton_set_state(0, WindowID, Option16bit, (state > 0)), 0);
  /* shade_gadget( !(state > 0), WindowID, OptionOversampled ); */

}

static void SetOversampledIcon(int state)
{

  error_trap(optionbutton_set_state(0, WindowID, OptionOversampled, (state > 0)), 0);

}

void sound_Change16Bit(int state)
{

  int byte = read_cmos_value(CMOS_PrintSound);
  byte = (state) ? (byte & 0x9F) | 0x20 : byte & 0x9F;
  write_cmos_value(CMOS_PrintSound, byte);
  Set16BitIcon(state);
}

void sound_ChangeOversampled(int state)
{

  int byte = read_cmos_value(CMOS_PrintSound);
  byte = (state) ? (byte & 0x7f) | 0x80 : byte & 0x7F;
  write_cmos_value(CMOS_PrintSound, byte);
  SetOversampledIcon(state);
}


void sound_GetCurrentValues(void)
{

  oldconfig.volume = (read_cmos_value(CMOS_Volume) >> 4) & 7;
  oldconfig.voice = (read_cmos_value(CMOS_Voice) & 0x0f) + 1;
  oldconfig.snd16bit = read_cmos_value(CMOS_PrintSound) & 0x60;
  oldconfig.oversampled = read_cmos_value(CMOS_PrintSound) & 0x80;
  oldconfig.loud = (read_cmos_value(CMOS_BellVolume) >> 1) & 1;
  SetVolumeIcon(oldconfig.volume);
  SetVoiceIcon(oldconfig.voice);
  SetBellVolumeIcon(oldconfig.loud);
  Set16BitIcon(oldconfig.snd16bit);
  SetOversampledIcon(oldconfig.oversampled);

}


void sound_SetDefaults(void)
{

/*
  SetCMOSDefaults();
  SetVolumeIcon(7);
  SetVoiceIcon(1);
  Set16BitIcon(0);
  SetBellVolumeIcon(1);
*/

  sound_ChangeVolume(7);
  sound_ChangeVoice(1);
  sound_Change16Bit(0);
  sound_ChangeOversampled(1);
  sound_ChangeBellVolume(1);
}
