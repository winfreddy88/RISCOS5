/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*---------------------------------------------------------------------------*/
/* File:    c.screen                                                         */
/* Purpose: Non WIMP, but screen specific code                               */
/* Author:  Richard Leggett                                                  */
/* History: 18-Nov-97: RML: Begun.                                           */
/*          25-Mar-98: RML: Added get_wimpslot_min code.                     */
/*          16-Apr-98: RML: Fixed crash if ScrSavers directory not present.  */
/*          23-Apr-98: RML: Changed order of resolutions to match display    */
/*                          manager.                                         */
/*          03-Jun-98: RML: Added code to read screensaver information from  */
/*                          their messages files.                            */
/*                                                                           */
/* Copyright © 1998 Acorn Computers Ltd., Cambridge, UK.                     */
/*---------------------------------------------------------------------------*/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "swis.h"
#include "Global/FileTypes.h"
#include "Interface/HighFSI.h"
#include "toolbox.h"
#include "gadgets.h"
#include "wimplib.h"
#include "window.h"
#include "menu.h"
#include "common.h"
#include "defines.h"

#define MAX_PATHNAME_LENGTH 256

typedef struct
{
    int load_address;
    int exec_address;
    int length;
    int attributes;
    int type;
    int filetype;
    char name[4];
} record;    

typedef struct saver_ref
{
    struct saver_ref *next;
    char             *saver_name;
    char             *saver_purpose;
    char             *saver_author;
    char             *saver_version;
    char             *file_name;
} saver_ref;


static saver_ref  *savers_list = NULL;
static saver_ref **savers_list_tail = NULL;

extern int  main_window_id, dpms_window_id, res_menu_id, col_menu_id, current_colours, current_res, hz_menu_id, current_hz, hz_menu_entries;

/*---------------------------------------------------------------------------*
 * get_saver_filename                                                        *
 *                                                                           *
 * Given an index, return the filename of the nth screen saver.              *
 *                                                                           *
 * In: n = index of saver.                                                   *
 *                                                                           *
 * Returns: Pointer to filename, or NULL if doesn't exist.                   *
 *---------------------------------------------------------------------------*/

char* get_saver_filename(int n)
{
    saver_ref *ref;
    int        i;

    ref = savers_list;
    for (i=1; i<n; i++)
    {
        ref = ref->next;
        if (ref==0) return NULL;
    }

    return ref->file_name;
}


/*---------------------------------------------------------------------------*
 * check_has_settings                                                        *
 *                                                                           *
 * Given the name of a screen blanker, check if there is a settings app/file *
 * to go with it.                                                            *
 *                                                                           *
 * In: blankername -> name of blanker.                                       *
 *                                                                           *
 * Returns: 1 if there is a settings app, 0 if not.                          *
 *---------------------------------------------------------------------------*/

int check_has_settings(int n)
{
    saver_ref *ref;
    char       filename[1024];
    int        i;
    int        type;

    if (n==0) return 1;

    ref = savers_list;
    for (i=1; i<n; i++)
    {
        ref=ref->next;
        if (ref==0) return 0;
    }
    
    strcpy(filename, ref->file_name);
    strcat(filename,".!SvrSetup");
    
    error_trap(_swix(OS_File, _INR(0,1)|_OUT(0), OSFile_ReadNoPath, filename, &type), 0);
    if ((type==2) || (type==1)) return 1;
     
    return 0;
}


/*---------------------------------------------------------------------------*
 * check_saver_path                                                          *
 *                                                                           *
 * Given a screensaver path, check it's in our list of savers.               *
 *                                                                           *
 * In: path -> pathname                                                      *
 *                                                                           *
 * Returns: 0 = saver not recognised.                                        *
 *          else pointer to saver name.                                      *
 *---------------------------------------------------------------------------*/

char* check_saver_path(char *path)
{
    saver_ref *ref;
    
    if (savers_list==0) return 0;

    ref = savers_list;
    while (ref->next)
    {
        if (strncmp(path, ref->file_name, strlen(path)-2)==0) return ref->saver_name;
        ref = ref->next;
    }
    if (strncmp(path, ref->file_name, strlen(path)-2)==0) return ref->saver_name;
    
    return 0;
}


/*---------------------------------------------------------------------------*
 * get_leafname                                                              *
 *                                                                           *
 * Find the leafname from a path (actually this will typically be leafname   *
 * plus a '.')                                                               *
 *                                                                           *
 * In: path -> pathname                                                      *
 *                                                                           *
 * Returns: pointer to leafname                                              *
 *---------------------------------------------------------------------------*/

char* get_leafname(char* path)
{
    int n;
        
    for (n=strlen(path)-3; n>=0; n--)
    {
        if (path[n]=='.') return path+n+1;
    }
        
    return path;
}


/*---------------------------------------------------------------------------*
 * ignore_string                                                             *
 *                                                                           *
 * Decide if a string in the choices file should be ignored (because we're   *
 * going to output an updated version)                                       *
 *                                                                           *
 * In: string -> the string                                                  *
 *                                                                           *
 * Returns: 1 if ignore, 0 not to ignore                                     *
 *---------------------------------------------------------------------------*/

static int ignore_string(char *string)
{
    if (strncmpa(string, "Set ScrSaver$Dir", 16)==0) return 1;
    if (strncmpa(string, "Unset ScrSaver$Dir", 18)==0) return 1;
    if (strncmpa(string, "SetEval ScrSaver$MinMem", 23)==0) return 1;
    if (strncmpa(string, "Blanktime",9)==0) return 1;
    
    return 0;
}


/*---------------------------------------------------------------------------*
 * write_screen_choices                                                      *
 *                                                                           *
 * Given a some commands to write, ammend the choices file.                  *
 *                                                                           *
 * In: set_command -> *Set ScrSaver$Dir or *Unset ScrSaver$Dir command.      *
 *     mem_command -> *SetEval ScrSaver$MinMem command (or NULL string).     *
 *     bt_command -> *Blanktime command (or NULL string).                    *
 *---------------------------------------------------------------------------*/

_kernel_oserror *write_screen_choices(const char *set_command, const char *mem_command, const char *bt_command)
{
    FILE *source_fp;
    FILE *dest_fp;
    char  string[256];
    int   more = 1;
    
    source_fp = fopen(ChoicesFileRO, "r");
    dest_fp = fopen(ScrapFile, "w");
    if (!dest_fp)
    {
        if (source_fp) fclose(source_fp);
        return common_error(messages_lookup("ChoicesFileNotOpen"));
    }

    /* Write the commands into the choices file */
    fputs(set_command, dest_fp);
    fputc(NewLine, dest_fp);

    if (strlen(mem_command) > 0)
    {
        fputs(mem_command, dest_fp);
        fputc(NewLine, dest_fp);
    }
    
    if (strlen(bt_command) > 0)
    {
        fputs(bt_command, dest_fp);
        fputc(NewLine, dest_fp);
    }

    /* Write out any other commands that were in the file */
    if (source_fp)
    {
        while(more)
        {
            more = (int)fgets(string, 256, source_fp);
            if (more)
            {
                if (!ignore_string(string)) fputs(string, dest_fp);
            }
        }
        fclose(source_fp);
    }

    /* Set filetype of the new file and move it into place */
    fclose(dest_fp);
    error_trap(_swix(OS_File, _INR(0, 2), OSFile_SetType, ScrapFile, FileType_Obey), 0);
    error_trap(_swix(OS_FSControl, _INR(0, 3),               /*  A        D        F */
                     FSControl_Copy, ScrapFile, ChoicesFile, (1<<9) | (1<<7) | (1<<1)), 0);

    return NULL;
}


/*---------------------------------------------------------------------------*
 * read_saver_messages_file                                                  *
 *                                                                           *
 * Read the purpose, author and version of a screensaver from its messages   *
 * file.                                                                     *
 *                                                                           *
 * In: ref -> saver_ref structure of the saver whose data we're reading.     *
 *---------------------------------------------------------------------------*/

static void read_saver_messages_file(saver_ref *ref)
{
    _kernel_oserror *e;
    char  purpose[128] = " ";
    char  author[128] = " ";
    char  version[128] = " ";
    char  string[128];
    char  filename[MAX_PATHNAME_LENGTH];
    char *buffer;
    int   messblk[4];
    int   type;
    int   buffsize;
    int   territory = _swi(Territory_Number, _RETURN(0));

    sprintf(filename, "%s.Message%d", ref->file_name, territory);
    e = _swix(OS_File, _INR(0,1)|_OUT(0), OSFile_ReadNoPath, filename, &type);
    if ((e != NULL) || (type != object_file))
    {
        /* No territory specific messages, try default ones */
        sprintf(filename, "%s.Messages", ref->file_name);
        e = _swix(OS_File, _INR(0,1)|_OUT(0), OSFile_ReadNoPath, filename, &type);
    }

    if ((e == NULL) && (type == object_file))
    {
        _swix(MessageTrans_FileInfo, _IN(1)|_OUT(2), filename, &buffsize);
        buffer = malloc(buffsize);
        if (buffer != NULL)
        {
            _swix(MessageTrans_OpenFile, _INR(0, 2), messblk, filename, buffer);

            if (!_swix(MessageTrans_Lookup, _INR(0,7), messblk, "_Purpose", string, sizeof(string), 0, 0, 0, 0))
            {
                strcpy(purpose, string);
            }
            if (!_swix(MessageTrans_Lookup, _INR(0,7), messblk, "_Author", string, sizeof(string), 0, 0, 0, 0))
            {
                strcpy(author, string);
            }
            if (!_swix(MessageTrans_Lookup, _INR(0,7), messblk, "_Version", string, sizeof(string), 0, 0, 0, 0))
            {
                strcpy(version, string);
            }

            _swix(MessageTrans_CloseFile, _IN(0), messblk);
            free(buffer);
        }
    }
    
    ref->saver_purpose = malloc(strlen(purpose) + 1);
    ref->saver_author = malloc(strlen(author) + 1);
    ref->saver_version = malloc(strlen(version) + 1);

    strcpy(ref->saver_purpose, purpose);
    strcpy(ref->saver_author, author);
    strcpy(ref->saver_version, version);
}


/*---------------------------------------------------------------------------*
 * construct_savers_list                                                     *
 *                                                                           *
 * Build a structure with the details of all screen savers.                  *
 *                                                                           *
 * In: dirname -> name of directory to scan.                                 *
 *     buffer_end -> end of buffer (buffer begins at dirname)                *
 *---------------------------------------------------------------------------*/

static void construct_savers_list(char *dirname, char *buffer_end)
{
    _kernel_oserror *e = NULL;
    saver_ref       *new_ref;
    char            *dirname_end;
    char            *leafname;
    int              pos = 0;
    int              num, type;
        
    dirname_end = dirname + strlen(dirname);
    
    while ((e == NULL) && (pos != -1))
    {
        /* Get next entry from directory */
        e = _swix(OS_GBPB, _INR(0,6)|_OUTR(3,4),
                           OSGBPB_ReadDirEntries, dirname, dirname_end+1, 1, pos,
                           buffer_end - (dirname_end+1), 0,
                           &num, &pos);

        if ((e == NULL) && (num > 0))
        {
            *dirname_end = '.';

            /* Find the type of the entry we've just read */
            e = _swix(OS_File, _INR(0,1)|_OUT(0), OSFile_ReadNoPath, dirname, &type);

            if ((e == NULL) && (type == object_directory))
            {
                /* It was a directory, so see if it's an app */
                leafname = get_leafname(dirname);
                if (leafname[0]!='!')
                {
                    /* Not an application, so scan this directory too */
                    construct_savers_list(dirname, buffer_end);
                }
                else
                {                
                    /* Found an application - assume it's a screen saver */
                    new_ref = malloc(sizeof(saver_ref));
                    new_ref->file_name = malloc(strlen(dirname)+1);
                    new_ref->saver_name = malloc(strlen(leafname));
                    new_ref->next = 0;
                    strcpy(new_ref->file_name, dirname);
                    strcpy(new_ref->saver_name, leafname+1);
                    read_saver_messages_file(new_ref);
                    *savers_list_tail = new_ref;
                    savers_list_tail = &new_ref->next;
                }
            }
            e = NULL; /* On error, carry on with the enumeration */
            *dirname_end = '\0';
        }
    }
}


/*---------------------------------------------------------------------------*
 * read_savers_list                                                          *
 *                                                                           *
 * Read list of screen savers.                                               *
 *                                                                           *
 * Returns: Memory required to construct a comma seperated string of all the *
 *          screen saver titles (useful for stringset_set_available).        *
 *---------------------------------------------------------------------------*/

static int read_savers_list(void)
{
    saver_ref *ref;
    char       buffer[1024];
    int        size = 0;
    int        type;
    
    savers_list = NULL;
    savers_list_tail = &savers_list;
    strcpy(buffer, SaversDirectory);
    
    error_trap(_swix(OS_File, _INR(0,1)|_OUT(0), OSFile_ReadNoPath, SaversDirectory, &type), 0);

    if (type) construct_savers_list(buffer, buffer+1024);

    if (savers_list==NULL) return 0;

    ref = savers_list;
    while (ref->next)
    {
        size += strlen(ref->saver_name)+1;
        ref = ref->next;
    }
    size += strlen(ref->saver_name)+1;
    size += 16;

    return size;
}   
  

/*---------------------------------------------------------------------------*
 * create_savers_menu                                                     *
 *                                                                           *
 * Build a menu string with the details of all available screen savers       *
 *                                                                           *
 *---------------------------------------------------------------------------*/

void create_savers_menu(void)
{
    saver_ref *ref;
    char *menustring;
    int   listsize;
    
    listsize = read_savers_list(); 
    if (savers_list==NULL)
    {
        error_trap(stringset_set_available(0, main_window_id, SaverTypeStringSet, DPMSString), 0);
        return;
    }

    menustring = malloc(listsize+16);
    if (!menustring) error_trap(common_error(messages_lookup("NotEnoughMemory")), 0);

    sprintf(menustring, "%s,", DPMSString);

    ref = savers_list;
    while (ref->next)
    {
        strcat(menustring, ref->saver_name);
        strcat(menustring, ",");
        ref=ref->next;
    }
    strcat(menustring, ref->saver_name);

    error_trap(stringset_set_available(0, main_window_id, SaverTypeStringSet, menustring), 0);
    free(menustring);
}


/*---------------------------------------------------------------------------*
 * parse_wimpslot_command                                                    *
 *                                                                           *
 * Given a WimpSlot command, find the value of -min.                         *
 * Called by get_wimpslot_min.                                               *
 *                                                                           *
 * In: cmd -> Wimpslot command tail (ie. excluding WimpSlot at start)        *
 *                                                                           *
 * Returns: value of min, else 0.                                            *
 *---------------------------------------------------------------------------*/

int parse_wimpslot_command(char *cmd)
{
    char *ptr;
    static const char args[] = "min,max,next";
    int   buffer[64];
    int   min;

    _swix(OS_ReadArgs, _INR(0,3), args, cmd, buffer, 256);
    _swix(OS_ReadUnsigned, _INR(0,1)|_OUT(2), 10, buffer[0], &min);
    
    if (!buffer[0]) return 0;
    
    ptr = (char*)buffer[0];
    ptr = ptr + strlen(ptr) - 1;
    if ((*ptr == 'K') || (*ptr == 'k')) min = min * 1024;
    min = min/1024;

    return min;
}

 
/*---------------------------------------------------------------------------*
 * get_wimpslot_min                                                          *
 *                                                                           *
 * Given the name of an obey file, search through and find a Wimpslot        *
 * command, then find the value of -min for that command.                    *
 *                                                                           *
 * In: filename -> name of obey file.                                        *
 *                                                                           *
 * Returns: value of min, else 0.                                            *
 *---------------------------------------------------------------------------*/

int get_wimpslot_min(char *filename)
{
    FILE *fp;
    char  string[1024];
    int   more = 1;
    
    fp = fopen(filename, "r");
    if (fp)
    {
        while (more)
        {
            /* Get the next line */
            more = (int)fgets(string, 1024, fp);
            if (more)
            {
                string[strlen(string)-1] = 0;
                /* Is it a WimpSlot command? */
                if (strncmpa(string, "WimpSlot", 8)==0)
                {
                     /* Yes, then parse it */
                     fclose(fp);
                     return parse_wimpslot_command(string+8);
                }
            }
        }
        
        fclose(fp);
    }

    return 0;
}


/*---------------------------------------------------------------------------*
 * warning_box                                                               *
 *                                                                           *
 * Pop up a wimp warning box.                                                *
 *---------------------------------------------------------------------------*/

void warning_box(char *string)
{
    _kernel_oserror e;
    e.errnum = 0;
    strcpy(e.errmess, string);
    wimp_report_error(&e, 0, messages_lookup("_TaskName"), 0, 0, 0);
}


/*---------------------------------------------------------------------------*
 * build_info_menu                                                           *
 *                                                                           *
 * Make the screensaver information menu.                                    *
 *                                                                           *
 * In: main_id = toolbox id of the main menu (from which Info comes)         *
 *     menu_id = toolbox id of the screensaver info menu.                    *
 *     window_id = toolbox id of the screensaver info window.                *
 *---------------------------------------------------------------------------*/

void build_info_menu(int main_id, int menu_id, int window_id)
{
    MenuTemplateEntry *entry;
    saver_ref   *ref;
    static char *menudata;
    char        *menuptr;
    int          n = 1;
    int          i;

    ref = savers_list;
    if (!ref)
    {
        error_trap(menu_set_fade(0, main_id, MainInfoSubMenu, 1), 0);
        return;
    }

    while (ref->next)
    {
        n+=1;
        ref = ref->next;
    }
    
    menudata = malloc(sizeof(MenuTemplateEntry) * n);
    menuptr = menudata;
    
    ref = savers_list;
    for (i=0; i<n; i++)
    {
        entry = (MenuTemplateEntry*)menuptr;
        entry->flags = Menu_Entry_SubMenu + Menu_Entry_GenerateSubMenuEvent;
        entry->component_id = i; 
        entry->text = ref->saver_name;
        entry->max_text = 255;
        entry->click_show = 0;
        entry->submenu_show = NULL;
        entry->submenu_event = 0;
        entry->click_event = 0;
        entry->help_message = NULL;
        entry->max_entry_help = 0;

        error_trap(menu_add_entry(0, menu_id, Menu_AddEntryAtEnd, menuptr, NULL), 0);
        error_trap(menu_set_sub_menu_show(0, menu_id, i, window_id), 0);
        
        ref = ref->next;
        menuptr = menuptr + sizeof(MenuTemplateEntry);
    }
}


/*---------------------------------------------------------------------------*
 * fill_in_saver_info                                                        *
 *                                                                           *
 * Fill in the screensaver information window.                               *
 *---------------------------------------------------------------------------*/
 
void fill_in_saver_info(int window_id, int entry)
{
    saver_ref *ref = savers_list;
    int        n;
    
    for (n=0; n<entry; n++)
    {
        if (ref->next) ref = ref->next;
    }
    
    error_trap(displayfield_set_value(0, window_id, InfoNameDisplay, ref->saver_name), 0);
    error_trap(displayfield_set_value(0, window_id, InfoPurposeDisplay, ref->saver_purpose), 0);
    error_trap(displayfield_set_value(0, window_id, InfoAuthorDisplay, ref->saver_author), 0);
    error_trap(displayfield_set_value(0, window_id, InfoVersionDisplay, ref->saver_version), 0);
}
