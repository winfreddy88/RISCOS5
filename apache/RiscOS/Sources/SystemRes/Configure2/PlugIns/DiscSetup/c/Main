/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/******	Main.c ************************************************************\

Project:	Ursula (RISC OS for Risc PC II)
Component:	Discs configuration plug-in
This file:	Overall control

History:
Date		Who	Change
----------------------------------------------------------------------------
23/06/1998	BJGA	Created
24/06/1998	BJGA	Added static_initMemorySizeVariables
15/06/1998	BJGA	Now reads total RAM size using documented call.

\**************************************************************************/

/* CLib */
#include <stdlib.h>
#include "swis.h"
#include "AsmUtils/clz.h"
/* Toolbox */
#include "event.h"
#include "toolbox.h"
/* Common */
#include "error.h"
#include "misc.h"
/* Local headers */
#include "Main.h"
#include "ToolboxE.h"
#include "WimpE.h"
#include "WimpM.h"

#define	WimpVersion	((int) 310)

/* Global variables */

	BOOL		Quit = FALSE;
	ObjectId	Window_Obj;
	MessagesFD	messages;
	const char	*StatusFile = "<Choices$Write>.Boot.PreDesk.DiscSetup";
	const char	*StatusFileRO = "Choices:Boot.PreDesk.DiscSetup";
	unsigned int	RAMFS_Limit;
	int		ADFS_Default_Buffer;

/* Prototypes */

void static_InitMemorySizeVariables (void);


/******	main() ************************************************************\

In:		Command line option:
		  -openat x y
		    specifies initial position to open window at

\**************************************************************************/

int main (int argc, char *argv[])
{
  WimpPollBlock poll_block;
  IdBlock id_block;

  error_initialise ();
  throw (toolbox_initialise (0, WimpVersion, WimpM_Messages, ToolboxE_Events,
    "<DiscSetup$Dir>", &messages, &id_block, NULL, NULL, NULL));
  misc_parsearguments (argc, argv);
  throw (event_initialise (&id_block));
  throw (event_set_mask (WimpE_Mask));

  WimpM_Register ();
  WimpE_Register ();
  ToolboxE_Register ();

  static_InitMemorySizeVariables ();

  error_recover_point();
  while (!Quit)
  {
    throw (event_poll (NULL, &poll_block, NULL));
  }
  exit (EXIT_SUCCESS);
}

/******	static_InitMemorySizeVariables() **********************************\

Purpose:	Initialises things related to total RAM size

\**************************************************************************/

void static_InitMemorySizeVariables (void)
{
  unsigned int PageSize, Log2PageSize;
  unsigned int RAM_Size;
  unsigned int DA_Size;
  int flags;
  _kernel_oserror *e;

  /* Get total RAM size (in bytes) */
  _swi (OS_ReadMemMapInfo, _OUTR(0,1), &PageSize, &RAM_Size);
  Log2PageSize = 1 + ctz(PageSize);

  /* This is the way ADFS does it, via an undocumented OS_SetEnv call:
  **
  ** RAM_Size = _swi (OS_SetEnv, _INR(0,7)|_RETURN(2), 0, 0, 0, 0, 0, 0, 0, 0);
  **
  */

  /* The default value for both ADFSBuffers and ADFSDirCache is 1/256th of */
  /* the total RAM, capped and collared by 255K and 4K */
  ADFS_Default_Buffer = RAM_Size >> (18 - Log2PageSize);
  ADFS_Default_Buffer = min(255, ADFS_Default_Buffer);
  ADFS_Default_Buffer = max(4, ADFS_Default_Buffer);

  /* See if PMP dynamic areas are available */
  e = _swix (OS_DynamicArea, _INR(0,1) | _OUT(4), 24, 5, &flags);
  if ((e == NULL) && (flags & (1<<20)))
  {
    /* Limited only by physical RAM */
    RAMFS_Limit = (RAM_Size >> (20 - Log2PageSize)) * 10;
  }
  else
  {
    /* Get RAMFS dynamic area max size (in bytes) */
    _swi (OS_DynamicArea, _INR(0,1) | _OUT(5), 2, 5, &DA_Size);
    DA_Size = DA_Size >> Log2PageSize; /* In pages */

    /* Clamp RAM_Size if the maximum size if the RAMFS dynamic area is smaller */
    if (DA_Size < RAM_Size) RAM_Size = DA_Size;

    /* RAMFS is limited by available memory, the RAMFS DA size, or by 128MB, whichever is smaller */
    RAMFS_Limit = (RAM_Size >> (20 - Log2PageSize)) * 10;
    if (RAMFS_Limit >= 1280) RAMFS_Limit = 1280;
  }
}
