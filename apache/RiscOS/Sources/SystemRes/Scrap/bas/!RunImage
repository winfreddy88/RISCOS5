REM > !Scrap.!Runimage

REM Copyright 2016 Castle Technology Ltd
REM
REM Licensed under the Apache License, Version 2.0 (the "License");
REM you may not use this file except in compliance with the License.
REM You may obtain a copy of the License at
REM
REM     http://www.apache.org/licenses/LICENSE-2.0
REM
REM Unless required by applicable law or agreed to in writing, software
REM distributed under the License is distributed on an "AS IS" BASIS,
REM WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
REM See the License for the specific language governing permissions and
REM limitations under the License.
REM

REM
REM Version 1.80  30-Sep-93  Bruce Cockburn
REM Version 1.81  08-Oct-93  Bruce Cockburn, Changed SWI calls to not look up the name
REM Version 1.82  28-Oct-93  Jonathan Roach, Moved scrap directories into
REM                          ScrapDirs. This is to make FSLock's job doable.
REM Version 1.83  19-Jan-94  Bruce Cockburn, Fixed error messages to use + instead of
REM                          ; for string concatenation.  Bug MED-02318.
REM Version 1.84  25-Mar-94  Bruce Cockburn, Corrected a spelling error reported by
REM                          Stuart Swales of Colton Software.
REM Version 1.85  16-May-94  Steve Cormie, Internationalised.
REM Version 1.86  07-Sep-94  Steve Cormie, version numbers brought up to date.
REM Version 1.87  08-Sep-94  Steve Cormie, moved version from !Boot/!Run into !Help file.
REM
:
Default$="ScrapDir"
Network$="ID"
ResultDir$="Wimp$ScrapDir"
ResultFile$="Wimp$Scrap"
MessageFile$="<Obey$Dir>.Messages"
:
OS_File%=&00008
OS_GetEnv%=&00010
OS_ReadVarVal%=&00023
OS_SetVarVal%=&00024
OS_GSTrans%=&00027
OS_FSControl%=&00029
OS_ReadMonotonicTime%=&00042
XOS_File%=&20008
XOS_ReadVarVal%=&20023
XEconet_ReadLocalStationAndNet%=&6000A
:
V%=FALSE: REM Verbose
:
BufferSize%=200
DIM Args$(9), Buffer% BufferSize%
Env$=FNShell_GetEnv

NumberOfArgs%=FNShell_Array(Args$(),Env$)
CASE NumberOfArgs% OF
  WHEN 1:
    IF FNShell_String_UC(Args$(1))="-HELP" THEN
      PROCGiveHelp
    ELSE
      PROCRun(Args$(1))
    ENDIF
  WHEN 2:
    IF FNShell_String_UC(Args$(2))="-BOOT" THEN
      PROCBoot(Args$(1))
    ELSE
      PROCGiveHelp
    ENDIF
  OTHERWISE: PROCGiveHelp
ENDCASE
IF V% THEN PRINT "The scrap directory <"+ResultDir$+"> has been set to """+FNReadVariable(ResultDir$)+"""."
END
:
DEF PROCGiveHelp
PRINT FNmessage_lookup("Syntax")
ENDPROC
:
DEF PROCRun(Dir$)
IF V% THEN PRINT "Scrap has been run"
IF V% THEN PRINT "Invocation string is """+Dir$+"""."
Dir$=FNGSTransAndCanonicalise(Dir$)
IF V% THEN PRINT "Invocation value is """+Dir$+"""."
CreateFailure$=FNCreatePermission(Dir$)
IF V% THEN PRINT "CreateFailure$="""+CreateFailure$+"""."
IF CreateFailure$="" THEN
  IF V% THEN PRINT "Invocation value is """+Dir$+"""."
  Scrap$=FNEvaluate
  IF V% THEN PRINT "Invocation value is """+Dir$+"""."
  IF V% THEN PRINT "Scrap evaluates to """+Scrap$+"""."
  PROCSetVariable(ResultDir$, Dir$+"."+Scrap$)
  PROCSetVariable(ResultFile$, Dir$+"."+Scrap$+".ScrapFile")
  OSCLI( "CDir "+Dir$+"."+Scrap$+" 1" )
ELSE
  ERROR EXT 6, FNmessage_lookup2("E00",Dir$,CreateFailure$)
ENDIF
ENDPROC
:
DEF PROCBoot(Dir$)
LOCAL Current$
IF V% THEN PRINT "Scrap has been booted"
IF V% THEN PRINT "Invocation string is """+Dir$+"""."
Dir$=FNGSTransAndCanonicalise(Dir$)
IF V% THEN PRINT "Invocation value is """+Dir$+"""."
CreateFailure$=FNCreatePermission(Dir$)
IF V% THEN PRINT "CreateFailure$="""+CreateFailure$+"""."
IF CreateFailure$="" THEN
  Scrap$=FNEvaluate
  IF V% THEN PRINT "Scrap evaluates to """+Scrap$+"""."
  Current$=FNReadVariable( ResultDir$ )
  REM Now check to see if Wimp$ScrapDir is already set
  IF (Current$ = "") OR (Current$ = "System:ScrapDir") OR (Current$ = FNReadVariable( "System$Dir" )+".ScrapDir") THEN
    PROCSetVariable(ResultDir$, Dir$+"."+Scrap$)
    PROCSetVariable(ResultFile$, Dir$+"."+Scrap$+".ScrapFile")
    OSCLI( "CDir "+Dir$+"."+Scrap$+" 1" )
  ENDIF
ELSE
  REM Do nothing
ENDIF
ENDPROC
:
REM Function to get the environment string
DEF FNShell_GetEnv
LOCAL A$
SYS OS_GetEnv% TO A$
WHILE (LEFT$(A$,1) <> " ") AND (LEN(A$) <> 0)
  A$=MID$(A$,2)
ENDWHILE
WHILE LEFT$(A$,1) = " "
  A$=MID$(A$,2)
ENDWHILE
WHILE RIGHT$(A$,1)=" "
  A$=LEFT$(A$)
ENDWHILE
IF FNShell_String_UC(LEFT$(A$,5))="-QUIT" THEN
  A$=MID$(A$,7)
  WHILE (LEFT$(A$,1) <> " ") AND (LEN(A$) <> 0)
    A$=MID$(A$,2)
  ENDWHILE
  WHILE LEFT$(A$,1) = " "
    A$=MID$(A$,2)
  ENDWHILE
ENDIF
=A$
:
REM Function to convert string to upper case
DEF FNShell_String_UC(A$)
LOCAL Z%
FOR Z%=1 TO LEN(A$)
  IF (ASC(MID$(A$,Z%,1)) >= ASC"a") AND (ASC(MID$(A$,Z%,1)) <= ASC"z") THEN
    MID$(A$,Z%,1)=CHR$(ASC(MID$(A$,Z%,1))-32)
  ENDIF
NEXT:=A$
:
REM Function to split string to array of strings and give number
DEF FNShell_Array(A$(),A$)
IF DIM(A$())<>1 ERROR EXT 7, FNmessage_lookup("E01")
LOCAL A%,B%
A%=0
B%=INSTR(A$," ")
WHILE B%<>0
  A%+=1
  A$(A%)=LEFT$(A$,B%-1)
  A$=MID$(A$,B%+1)
  WHILE LEFT$(A$,1) = " "
    A$=MID$(A$,2)
  ENDWHILE
  B%=INSTR(A$," ")
ENDWHILE
IF A$ <> "" THEN A%+=1: A$(A%)=A$
=A%
:
DEF FNGSTransAndCanonicalise(Dir$)
LOCAL Size%
SYS OS_GSTrans%, Dir$, Buffer%, BufferSize% TO ,, Size%; Flags%
IF (Flags% AND 2) = 0 THEN
  Buffer%?Size%=13
  Dir$=$Buffer%
ELSE
  ERROR EXT 4, FNmessage_lookup1("E02",Dir$)
ENDIF
SYS OS_FSControl%, 37, Dir$, Buffer%, 0, 0, BufferSize% TO ,,,,, Size%
IF Size% >= 1 THEN
  Size%=BufferSize%-Size%
  Buffer%?Size%=13
  Dir$=$Buffer%
ELSE
  ERROR EXT 5, FNmessage_lookup1("E03",Dir$)
ENDIF
REM Ensure ScrapDirs exists, but ignore any error as FSLock may have interfered
SYS XOS_File%, 8, Dir$,,, 0
=Dir$
:
DEF FNCreatePermission(Place$)
LOCAL Result$, Type%, UID%, UID$, Error%, Flags%: Result$=""
SYS OS_File%, 5, Place$ TO Type%
IF V% THEN PRINT "Type is "+Type%
IF (Type% AND 2) = 2 THEN
  REPEAT
    SYS OS_ReadMonotonicTime% TO UID%
    UID$=Place$+"."+STR$~(UID%)
    IF V% THEN PRINT "UID$="""+UID$+"""."
    SYS OS_File%, 5, UID$ TO Type%
  UNTIL Type%=0
  IF V% THEN PRINT "UID selected is """+UID$+"""."
  SYS XOS_File%, 7, UID$, 0, 0, 0, 1 TO Error%; Flags%
  IF V% THEN PRINT "Created """+UID$+"""."
  IF (Flags% AND 1) <> 1 THEN
    SYS OS_File%, 6, UID$
  ELSE
    Error%+=4
    WHILE Error%?0 <> 0
      Result$=Result$+CHR$(Error%?0)
      Error%+=1
    ENDWHILE
  ENDIF
ELSE
  Result$=FNmessage_lookup1("E04",Place$)
ENDIF
=Result$
:
DEF FNEvaluate
LOCAL Result$, Existance%, Station%, Network%, Flags%: Result$=""
SYS XOS_ReadVarVal%, "INet$LocalAddr", Buffer%, -1, 0, 0 TO ,, Existance%
IF V% PRINT "Existance%="+Existance%
IF Existance% < 0 THEN
  SYS OS_ReadVarVal%, "INet$LocalAddr", Buffer%, BufferSize%, 0, 0 TO ,, Size%,, Type%
  CASE Type% OF
    WHEN 0: Buffer%?Size%=13: Result$=Network$+$Buffer%
    WHEN 1: ERROR EXT 1, FNmessage_lookup1("E05","INet$LocalAddr")
    WHEN 2: ERROR EXT 2, FNmessage_lookup1("E06","INet$LocalAddr")
    OTHERWISE: ERROR EXT 3, FNmessage_lookup1("E07","INet$LocalAddr")
  ENDCASE
ELSE
  IF V% PRINT "INet$LocalAddr doesn't exist"
ENDIF
IF Result$ = "" THEN
  SYS XEconet_ReadLocalStationAndNet% TO Station%, Network%; Flags%
  IF V% PRINT "Station%="+Station%+" Network%="+Network%
  IF (Flags% AND 1) = 0 THEN
    Result$=Network$+RIGHT$("00"+STR$(Network%),3)+"!"+RIGHT$("00"+STR$(Station%),3)
  ENDIF
ENDIF
IF Result$ = "" THEN
  Result$=Default$
ENDIF
=Result$
:
DEF PROCSetVariable( Variable$, Value$ )
IF V% THEN PRINT "Setting <"+Variable$+"> to """+Value$+"""."
SYS OS_SetVarVal%, Variable$, Value$, LEN(Value$), 0, 4
ENDPROC
:
DEF FNReadVariable( Variable$ )
LOCAL Result$, Existance%: Result$=""
SYS XOS_ReadVarVal%, Variable$, Buffer%, -1, 0, 3 TO ,, Existance%
IF Existance% < 0 THEN
  SYS OS_ReadVarVal%, Variable$, Buffer%, BufferSize%, 0, 3 TO ,, Size%,, Type%
  CASE Type% OF
    WHEN 0: Buffer%?Size%=13: Result$=$Buffer%
    OTHERWISE: ERROR EXT 3, FNmessage_lookup1("E07",Variable$)
  ENDCASE
ENDIF
=Result$

DEF FNstring(a%)
  LOCAL a$
  a$=""
  WHILE ?a%>=ASC" " : a$+=CHR$?a% : a%+=1 : ENDWHILE
=a$

DEF FNmessage_lookup4(token$,p1$,p2$,p3$,p4$)
  LOCAL b%,t%
  DIM b% 256
  SYS "MessageTrans_OpenFile",b%,MessageFile$,0
  SYS "MessageTrans_Lookup",b%,token$,b%+16,240,p1$,p2$,p3$,p4$ TO ,,t%
  SYS "MessageTrans_CloseFile",b%
=FNstring(t%)

DEF FNmessage_lookup3(token$,p1$,p2$,p3$)=FNmessage_lookup4(token$,p1$,p2$,p3$,"")
DEF FNmessage_lookup2(token$,p1$,p2$)=FNmessage_lookup4(token$,p1$,p2$,"","")
DEF FNmessage_lookup1(token$,p1$)=FNmessage_lookup4(token$,p1$,"","","")
DEF FNmessage_lookup(token$)=FNmessage_lookup4(token$,"","","","")
