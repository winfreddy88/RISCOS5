/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdio.h>
#include <stdlib.h>

#include "kernel.h"
#include "swis.h"
#include "Global/Services.h"
#include "Global/RISCOS.h"

#include "sigfind.h"
#include "patch.h"

static int app_size(void)
{
  _kernel_swi_regs r;

  _kernel_swi(OS_GetEnv,&r,&r);

  return r.r[1];
}

_kernel_oserror *patch_init(const char *cmd_tail, int podule_base, void *pw)
{
  sigfind_init();

  UNUSED(cmd_tail);
  UNUSED(podule_base);
  UNUSED(pw);

  return NULL;
}

void patch_services(int service_number, _kernel_swi_regs *r, void *pw)
{
  int searchsize, AIFsize;

  /* Need second pass (patch) of unknown compression */
  if ((service_number != Service_UKCompression) || (r->r[0] != 1)) return;

  searchsize = app_size() - AppSpaceStart;
  if (((int *)r->r[2])[4] == 0xef000011) /* looks pretty much like an AIF header */
  {
    AIFsize = ((int *)r->r[2])[5] + ((int *)r->r[2])[6];
    if (AIFsize < searchsize) searchsize = AIFsize;
    if (sigfind_find((char *)r->r[5], (int *)r->r[2], searchsize))
    {
      sigfind_patch();
      /* Don't claim it - another patcher may want a go :-( */
    }
  }

  UNUSED(pw);
}

_kernel_oserror *patch_commands(const char *arg_string, int argc, int cmd_no, void *pw)
{
  if (cmd_no == CMD_PatchStats) sigfind_stats();

  UNUSED(pw);
  UNUSED(argc);
  UNUSED(cmd_no);
  UNUSED(arg_string);
  
  return NULL;
}
