/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* defs.h */

#define DEBUG           0
#define REALLY_DO_REMAP 1

/* compiler pacifier */
#define UNUSED(k)       (k)=(k)

/* exit code on error */
#define ErrorReturnCode 257

/* Caution! these defs are valid for RISC OS 3.50, 3.60, 3.70, 3.71.
   Where possible, OS_ReadSysInfo 6 is used in preference to this pixie dust.
   Make sure valid for all ROM versions supported by given release of ROMPatch!
 */

#define CAMstart              0x1e02000  /* soft CAM */
#define ARMA_Cleaner_flipflop 0x178      /* StrongARM cache maintenance */
#define L1PT                  0x2c0c000  /* MMU level 1 page table */

#define ROMstart              0x3800000
#define ROMphysstart                0x0
#define ROMlimit               0x400000  /* Largest ROM patchable */

#define ROMsections(k)      ((k) >> 20)  /*  1M MMU sections      */
#define ROMlpages(k)        ((k) >> 16)  /* 64k MMU large pages   */
#define ROMpages(k)         ((k) >> 12)  /*  4k MMU (small) pages */

typedef unsigned char uint8;
typedef unsigned int uint32;
typedef unsigned short uint16;

typedef struct
{
  uint32 logaddr;
  uint32 PPL;     /* 'page protection level' - protection and flags */
} camentry_t;

/* for logical to physical address translation, via OS_Memory */
typedef struct
{
  uint32 pagenumber;
  uint32 logaddr;
  uint32 physaddr;
} osmemoryblock_t;

/* one entry of patch list */
typedef struct
{
  uint32 *logaddr;
  uint32 oldval;
  uint32 newval;
} patchentry_t;

/* layout of the data in module, to be set by C */
typedef struct
{
  uint32 nextpageneeded;     /* next page number needed to grow area */
  uint32 firstpagenotneeded; /* first page number not needed (determines fully grown) */
  uint32 DAN;                /* dynamic area number */
  uint32 flipflop;           /* StrongARM cache maintenance */
  uint32 sections;           /* used entries in L1PTentries */
  uint32 kernL1PT;           /* address of kernel L1PT entries for ROM */
  uint32 L1PTentries[4];     /* 'unpatch' values of the sections */
} moduledata_t;

/* procedure that returns list of patches
     - patch list terminated by {0,0,0} entry
     - returning NULL means no patches (allows conditional patches)
     - handle is abstract value for passing any data
     - proc must be capable of being called more than once */
typedef patchentry_t * (*patchlist_proc)(void *handle);

/* one entry of list of recognised ROMs */
typedef struct
{
  const uint32   *romcrc;       /* ROM checksum and CRC's */
  uint8           writeprotect; /* whether ROM supports ROM-space write protection */
  uint8           trustsum;     /* whether ROM checksum is correct or not */
  uint16          romsize;      /* the ROM size in MB */
  const char     *patchname;    /* for dynamic Area */
  patchlist_proc *patchlist;    /* list of patch applier procs, terminated by NULL */
} ROMentry_t;
