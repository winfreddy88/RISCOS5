/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdlib.h>

#include "os.h"
#include "osbyte.h"

#include "wimp.h"
#include "draganobject.h"

#include "toolbox.h"
#include "window.h"
#include "gadget.h"
#include "draggable.h"

#include "ModUtils.h"
#include "Gadgets.h"

bool dragginganobject;
bool ourdrag;
extern toolbox_o InternetObject;

bool SmallDragHandler(wimp_event_no event_code, wimp_block *event,
    	    	      toolbox_block *id, void *handle)
{
    if (id->this_cmp != (toolbox_c) handle)
    	return FALSE;

    if (event->pointer.buttons != wimp_DRAG_ADJUST &&
        event->pointer.buttons != wimp_DRAG_SELECT)
        return FALSE;

    if (readCMOS(osbyte_CONFIGURE_DRAG_ASPRITE) & osbyte_CONFIGURE_DRAG_ASPRITE_MASK)
    {
        os_register_block r;
        os_box box;
        wimp_window_state wstate;
    	wimp_i icon[2];
    	wimp_window_info *winfo;
    	wimp_icon ploticon;
    	wimp_w w;
    	int xoff, yoff;

    	dragginganobject = TRUE;

    	gadget_get_icon_list(0, id->this_obj, id->this_cmp, icon, sizeof icon);

    	winfo=(wimp_window_info *)malloc(2048);
    	if (!winfo)
    	    return FALSE;

    	w = window_get_wimp_handle(0, id->this_obj);

    	winfo->w = w;
    	wimp_get_window_info(winfo);
    	ploticon.flags = winfo->icons[icon[0]].flags;
    	ploticon.data  = winfo->icons[icon[0]].data;

        r.registers[1] = (int) &ploticon;

        gadget_get_bbox(0, id->this_obj, id->this_cmp, &box);
        wstate.w = event->pointer.w;
        wimp_get_window_state(&wstate);
        xoff = wstate.visible.x0 - wstate.xscroll;
        yoff = wstate.visible.y1 - wstate.yscroll;
        box.x0 += xoff;
        box.x1 += xoff;
        box.y0 += yoff;
        box.y1 += yoff;

        r.registers[4] = -box.x0;
        r.registers[5] = -box.y0;
        ploticon.extent = box;

        draganobject_start(draganobject_HPOS_LEFT |
                           draganobject_VPOS_BOTTOM |
                           draganobject_NO_BOUND |
                           draganobject_BOUND_POINTER |
                           draganobject_DROP_SHADOW |
                           draganobject_SWI_FUNCTION,
                           (draganobject_function) Wimp_PlotIcon,
                           &r,
                           &box,
                           0);

        free(winfo);
    }
    else
    {
        wimp_drag drag;
        int xoff, yoff;
        wimp_window_state wstate;
        wimp_pointer pointer;

    	dragginganobject = FALSE;
        drag.w = event->pointer.w;
        drag.type = wimp_DRAG_USER_FIXED;
        gadget_get_bbox(0, id->this_obj, id->this_cmp, &drag.initial);

        wstate.w = event->pointer.w;
        wimp_get_window_state(&wstate);
        xoff = wstate.visible.x0 - wstate.xscroll;
        yoff = wstate.visible.y1 - wstate.yscroll;
        drag.initial.x0 += xoff;
        drag.initial.x1 += xoff;
        drag.initial.y0 += yoff;
        drag.initial.y1 += yoff;

        wimp_get_pointer_info(&pointer);

        drag.bbox.x0 = 0;
        drag.bbox.y0 = 0;
        drag.bbox.x1 = 0;
        drag.bbox.y1 = 0;

        wimp_drag_box(&drag);
    }

    ourdrag = TRUE;

    return TRUE;
}

bool SmallDragFinish(wimp_event_no event_code, wimp_block *event,
    	    	     toolbox_block *id, void *handle)
{
    toolbox_action action;
    draggable_action_drag_ended *drag=(draggable_action_drag_ended *) &action.data;
    wimp_pointer pointer;

    if (!ourdrag)
    	return FALSE;

    ourdrag = FALSE;

    if (dragginganobject)
    	draganobject_stop();

    wimp_get_pointer_info(&pointer);

    action.size = 16 + sizeof(draggable_action_drag_ended);
    action.action_no = action_DRAGGABLE_DRAG_ENDED;
    action.flags = 0;
    drag->ids.wimp.w = pointer.w;
    drag->ids.wimp.i = pointer.i;
    drag->pos = pointer.pos;
    toolbox_raise_toolbox_event(0, InternetObject, internet_Extra, &action);

    return TRUE;
}
