/* Copyright 2005 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/*! \file ScreenFX
 *
 * (C) 2005 Tematic. All rights reserved.
 *
 * \brief  ScreenFX public API.
 *
 * The ScreenFX module programs palette brightness and
 * supremacy values to perform various effects such as fading
 * the screen brightness between normal and black, or fading
 * the graphics plane in and out of visibility over a video
 * plane.
 *
 * \par    Author:
 *         A.D.Hodgkinson, K.Bracey
 *
 * \par    History:
 *         - 18-Aug-2005 (ADH): Created.
 *         - 24-Aug-2005 (ADH): Better Doxygen output.
 */
/*! \mainpage ScreenFX public API.
 *
 * See the 'Modules' page for the major sections of the
 * interface. See the 'Globals' page for all defined items,
 * optionally grouped by item type.
 */
/**************************************************************/

/* The comments that describe this file are intended for use
 * with Doxygen, or any compatible documentation generator.
 * Ports of Doxygen are available for a variety of different
 * platforms, including RISC OS.
 */

#ifndef SCREENFX_SCREENFX__
  #define SCREENFX_SCREENFX__

  #include <kernel.h>

  /// \defgroup swi SWI interface
  ///
  /// A description of the programmer interface for
  /// ScreenFX.

  /************************************************************/
  /*@{*/  /* (Magic Doxygen comment to group following items) */
  /************************************************************/

  /*! \interface  ScreenFX_Fade
   *  \brief      SWI &58440: Smoothly fade red, green, blue and
   *              supremacy values.
   *
   * \par  On entry
   * R0 = Flags:
   * \par
   *    - Bit 0: If set, block while fading, else fade in background
   *             (see ::SCREENFX_FADE_BLOCK)
   *    - Bit 1: If set, don't trigger callbacks when doing a blocking fade,
   *             else callbacks will trigger roughly after each VSync
   *             (see ::SCREENFX_FADE_NOCALLBACKS)
   *    - Bit 3: If set, allow Escape to cancel the fade at any time; only
   *             relevant for blocking fades - note bit 3, not bit 2
   *             (see ::SCREENFX_FADE_ALLOWESCAPE)
   *    - Other bits are reserved and must be set to zero.
   * \par
   * R1 = Fade left hand end point, 32-bit, &BBGGRRSS<br>
   * R2 = Fade right hand end point, 32-bit, &BBGGRRSS<br>
   * R3 = Duration of fade in centiseconds
   *
   * \par  On exit
   * All registers preserved unless R0:3 set on entry, in which case:<br>
   * R0 = Flags:
   * \par
   *    - Bit 3: If set, operation ended early due to an escape condition.
   *             If clear, operation completed normally.
   *    - Other bits are reserved and must be ignored.
   * \par
   * All other registers preserved<br>
   * Flags are corrupted
   *
   * \par  Interrupts
   * Interrupt status is not altered
   *
   * \par  Processor mode
   * Processor is in SVC mode
   *
   * \par  Re-entrancy
   * SWI is not re-entrant
   *
   * \par  Use
   * RISC OS supports mappings for the brightness levels of each of the three
   * colour components of red, green and blue. In a 32bpp screen mode or when
   * setting up a user defined palette, 256 shades of red, green and blue are
   * available. The actual brightness that these shades show on the screen is
   * programmable. Normally, the mapping is simple - a value of zero leads to
   * zero brightness, whilst a value of 255 leads to full brightness, with a
   * linear distribution of values in between. So, RISC OS uses four tables of
   * 256 values to describe the brightness of red, green and blue, and the
   * supremacy of the whole graphics plane relative to an underlying video
   * plane. Note that with supremacy, a value of 0 indicates that the graphics
   * plane is opaque and 255 means that it is fully transparent.
   *
   * \par
   * The ScreenFX_Fade SWI call implements a smooth fade between whatever the
   * current R, G, B and S tables are, to a new final set of values for the R,
   * G, B and S tables. It allows you to specify the left and right hand end
   * points of a straight line graph describing displayed intensity for each
   * of the four channels. For example, if we consider the red channel alone
   * as a table with 256 entries, the lowest entry is usually set to a
   * brightness level of 0, whilst the highest entry is usually set to 255 for
   * full brightness, with a linear spread of values between. In this case the
   * "left hand end point" value is the zero and the "right hand end point" is
   * 255. We could thus invert the red channel by reversing the end point
   * values - specify a left hand end point of 255 and a right hand end point
   * of zero. We could alternatively make all red values the same intensity by
   * setting the left and right hand end points to the same value.
   *
   * \par
   * The value of R1 on entry gives the left hand end point for each of the
   * four channels packed into a 32-bit word. R2 gives the right hand end
   * point and R3 gives the overall duration of the fade in centiseconds.
   * Fading is implemented on VSync events, so the number of steps actually
   * shown to get from the current screen setting to the target screen setting
   * in the given time depends on both the duration of the fade and the
   * refresh rate of the current screen mode.
   *
   * \par
   * Normally, fades run in the background on VSync events. To block during a
   * fade, set R0:0 on entry. The SWI call will not return until the fade has
   * completed. Callbacks will normally be triggered after VSyncs when waiting
   * for a blocking fade to complete, unless R0:1 is set. During a blocking
   * fade the Escape key is normally disabled. To allow it to cancel the fade
   * just as if SWI ::ScreenFX_Cancel had been called, set R0:3 on entry. The
   * escape key is explicitly enabled with OS_Byte 229 for the duration of the
   * fade. The old escape state is restored afterwards.
   *
   * \par
   * If a fade is already in progress when a new fade is requested, the old
   * fade is cancelled. The new fade will continue where the old fade left
   * off. The duration will be a percentage of the value given in R3, based on
   * the remaining percentage of time that the old fade had been running. For
   * example, if an old fade was 40% complete, the new fade will last for 40%
   * of the value given in R3. This is based around the idea that fades go
   * from current settings to a target, and that most common interruptions
   * will be when a fade in one direction is followed by a fade reverting to
   * the original settings shortly after; the length of time this should take
   * depends on the "distance" the second fade has to go, which is greater if
   * the first fade had almost completed, or short if the first fade had only
   * just started.
   *
   * \par
   * To program an absolute setting quickly, set R3 to zero on entry. The
   * change will occur on the next VSync. Doing this also aborts any existing
   * fade activity. To cancel any in progress fade without changing whatever
   * RGBS values it had reached, use SWI ::ScreenFX_Cancel.
   *
   * \par  Related SWIs
   * ScreenFX_Cancel
   *
   * \par  Related vectors
   * None
   */

  /*! \interface  ScreenFX_Cancel
   *  \brief      SWI &58441: Cancel a fade operation.
   *
   * \par  On entry
   * R0 = Flags (reserved, set to zero)
   *
   * \par  On exit
   * All registers preserved<br>
   * Flags are corrupted
   *
   * \par  Interrupts
   * Interrupt status is not altered
   *
   * \par  Processor mode
   * Processor is in SVC mode
   *
   * \par  Re-entrancy
   * SWI is not re-entrant
   *
   * \par  Use
   * This SWI call abandons any operation started with SWI ScreenFX_Fade.
   * R, G, B values and supremacy levels are left at the values to which they
   * had most recently been programmed.
   *
   * \par
   * The SWI does nothing if there is no fade in progress when it is called.
   *
   * \par  Related SWIs
   * ScreenFX_Fade
   *
   * \par  Related vectors
   * None
   */

  /*! \interface  ScreenFX_Reset
   *  \brief      SWI &58442: Cancel a fade operation and reset
   *              to default screen settings.
   * \par  On entry
   * R0 = Flags (reserved, set to zero)
   *
   * \par  On exit
   * All registers preserved<br>
   * Flags are corrupted
   *
   * \par  Interrupts
   * Interrupt status is not altered
   *
   * \par  Processor mode
   * Processor is in SVC mode
   *
   * \par  Re-entrancy
   * SWI is not re-entrant
   *
   * \par  Use
   * This SWI internally calls ScreenFX_Cancel then programs the screen
   * gamma and supremacy with the default linear tables, holding value
   * 0 at index 0 through to value 255 at index 255.
   *
   * \par  Related SWIs
   * ScreenFX_Fade<br>
   * ScreenFX_Cancel
   *
   * \par  Related vectors
   * None
   */

  /*! \interface  ScreenFX_Status
   *  \brief      SWI &58443: Read the current ScreenFX module
   *              status.
   *
   * \par  On entry
   * R0 = Flags (reserved, set to zero)
   *
   * \par  On exit
   * R0 = Activity flags:
   * \par
   *    - Bit 0: If set, a ::ScreenFX_Fade operation is in progress in
   *             the background (see ::SCREENFX_STATUS_FADERUNNING)
   *    - Bit 1: If set, a ::ScreenFX_CrossFade operation is in progress
   *             in the background (see
   *             ::SCREENFX_STATUS_CROSSFADERUNNING)
   *    - Other bits are reserved and must be ignored.
   * \par
   * R1 = Current left hand end point, 32-bit, &BBGGRRSS<br>
   * R2 = Current right hand end point, 32-bit, &BBGGRRSS<br>
   * R3 = Remaining time for the current operation if one is in progress,
   *      else zero<br>
   * R4 = Pointer to the R-G-B-S tables for the current values<br>
   * All other registers are preserved<br>
   * Flags are corrupted
   *
   * \par  Interrupts
   * Interrupt status is not altered
   *
   * \par  Processor mode
   * Processor is in SVC mode
   *
   * \par  Re-entrancy
   * SWI is not re-entrant
   *
   * \par  Use
   * This call reports the current status of the screen display and indicates
   * whether or not a fade operation is in progress.
   *
   * \par
   * Since RISC OS provides no way to read the current programmed hardware
   * values, the ScreenFX module will always assume linear tables from 0 to
   * 255 when it starts, and maintain the notion of current settings based on
   * an internal soft copy thereafter.
   *
   * \par
   * The values on exit provided in R1 and R2 have the same meaning as those
   * supplied on entry to SWI ScreenFX_Fade. In addition, a pointer to the
   * base of the RGBS tables is provided in R4. Each table consists of 256
   * 8-bit entries, with each table appearing in memory directly after any
   * previous table, in the order of red, green, blue and supremacy. The whole
   * table pointed to by R4 is therefore 1024 bytes long, as four sets of 256
   * byte long entries. The first entry of each table corresponds to a value
   * written into screen memory in 32bpp of zero for that channel and the last
   * entry corresponds to a value in screen memory of 255 for that channel.
   *
   * \par  Related SWIs
   * ScreenFX_Fade
   *
   * \par  Related vectors
   * None
   */

  /*! \interface  ScreenFX_CrossFade
   *  \brief      SWI &58444: Smoothly fade red, green and blue values to
   *              achieve a visual cross-fade between two images dithered
   *              into one screen bank.
   *
   * \par  On entry
   * R0 = Flags:
   * \par
   *    - Bit 0: If set, block while fading, else fade in background
   *             (see ::SCREENFX_CROSSFADE_BLOCK)
   *    - Bit 1: If set, don't trigger callbacks when doing a blocking fade,
   *             else callbacks will trigger roughly after each VSync
   *             (see ::SCREENFX_CROSSFADE_NOCALLBACKS)
   *    - Bit 2: If set, fade to the low half of each colour component,
   *             else, fade to the high half of each colour component
   *             (see ::SCREENFX_CROSSFADE_TOLOWER)
   *    - Bit 3: If set, allow Escape to cancel the fade at any time; only
   *             relevant for blocking fades
   *             (see ::SCREENFX_CROSSFADE_ALLOWESCAPE)
   *    - Other bits are reserved and must be set to zero.
   * \par
   * R1 = Duration of fade in centiseconds
   *
   * \par  On exit
   * All registers preserved unless R0:3 set on entry, in which case:<br>
   * R0 = Flags:
   * \par
   *    - Bit 3: If set, operation ended early due to an escape condition.
   *             If clear, operation completed normally.
   *    - Other bits are reserved and must be ignored.
   * \par
   * All other registers preserved<br>
   * Flags are corrupted
   *
   * \par  Interrupts
   * Interrupt status is not altered
   *
   * \par  Processor mode
   * Processor is in SVC mode
   *
   * \par  Re-entrancy
   * SWI is not re-entrant
   *
   * \par  Use
   * In ScreenFX, a cross-fade is defined as the ability to fade
   * between having one image visible and another image visible, such
   * that during the fade both images will be simultaneously seen on
   * screen in varying proportions as the fade progresses.
   *
   * \par
   * Cross-fading between two images may be accomplished by having a
   * rendered copy of each image, then calculating on a pixel by pixel
   * basis a merged image to paint to the screen representing the
   * various stages of a fade from one image to the other. This takes
   * a great deal of CPU power and RAM bandwidth. An alternative
   * mechanism uses hardware graphics planes, having one image on a
   * plane "above" another image, then gradually making the top plane
   * transparent to reveal the other image. This uses much less CPU
   * power but requires specific hardware support for at least two
   * full screen graphics planes with translucency on at least one.
   *
   * \par
   * ScreenFX provides support for an unusual alternative that makes
   * use of the gamma tables supported by the Risc PC, Iyonix, and most
   * other RISC OS computers produced after the Risc PC. The easiest
   * example uses a 32bpp (16.7M colour) screen mode. In this mode,
   * each pixel is made up of 8-bit colour components for red, green
   * and blue, plus an 8-bit supremacy channel. Ignoring the latter, we
   * could consider the screen to contain, rather than one image of 8
   * bits per colour component, two images, each with 4 bits per colour
   * component. One image is painted into the upper 4 bits of each
   * colour component in screen RAM, whilst the other is painted into
   * the lower 4 bits. In effect, there are two images of 12bpp each,
   * occupying the 24bpp colour parts of a 32bpp screen mode.
   *
   * \par
   * Special drawing code is needed to produce such a display. At
   * the simplest level, it is very easy to paint two images into
   * the upper or lower 4 bits using a small piece of custom copy code
   * taking a 24bpp source, and not much harder to introduce simple
   * dithering to make the 12bpp result look better. ScreenFX does not
   * provide custom drawing routines; clients are responsible for
   * arranging the screen RAM contents appropriately before starting a
   * cross-fade operation.
   *
   * \par
   * Once the two 12bpp images are present in screen RAM, the user will
   * see the upper 4 bits image quite clearly, with the lower 4 bits
   * (assuming normal gamma table programming) appearing as a ghost
   * image on top. ScreenFX provides cross-fade functions where the
   * gamma tables get programmed to make the upper or lower 4 bits of
   * each colour component visible, occupying a full range of 16
   * brightness levels independently. By moving smoothly from one table
   * showing the upper 4 bits to another table showing the lower 4 bits
   * or vice versa, a smooth cross fade effect is achieved with no
   * special hardware support requirements and very low demand on the
   * host CPU. Control of whether the upper or lower bits of each
   * colour component are ultimately visible is controlled with flag
   * bit 2 of R0 on entry. The other flag bits of R0 are analogous to
   * the same bits in R0 on entry to SWI ::ScreenFX_Fade.
   *
   * \par
   * ScreenFX can program tables for 256, 32K or 16M colour modes. In
   * 256 colours, it uses just one bit per colour component per image
   * giving only 8 colours in total for each, using only only 6 of the
   * 8 bits per pixel available with each colour component given equal
   * weight. In 32K colour modes, of the 5 bits per colour component
   * available, only four are used; bits 0-1 for the 'low' image and
   * 2-3 for the 'high' image. Bit 4 is ignored, giving 64 colours for
   * each image. The 16.7M colour mode operation is by far the most
   * simple, where ScreenFX uses 4 bits per colour component to give
   * 4096 colours per image with no wastage.
   *
   * \par
   * In 256 colour modes, a linear greyscale palette (colour zero is
   * black, colour 255 is white) must be used to get a correct mapping
   * between pixel byte values and gamma table entries. Other palettes
   * can be programmed for unusual effects. ScreenFX does not alter
   * the palette itself. ScreenFX only supports 256, 32K and 16M colour
   * modes for crossfades - attempting to start a cross-fade in another
   * colour depth will result in error &81D900,
   * ::screenfx_error_INVALID_COLOUR_DEPTH.
   *
   * \par
   * The success of the technique depends on screen resolution and the
   * quality of any dithering algorithms used. Certain material may be
   * specially constructed to only use the 8, 64 or 4096 colours
   * available, in which case the results should be excellent.
   *
   * \par
   * Cross-fading always occurs equally for R, G and B channels, and
   * since an unusual table is being set up, cross fading to or from a
   * normal gamma table from or to the high or low part of the colour
   * components will only be successful if the normal table contains
   * all zero values (black). It is generally best to program the gamma
   * tables for black, paint in the two images, then either cross fade
   * or do an instant setting to make one of the two images visible,
   * then cross fade to the other image and replace the first once the
   * second is fully visible ready for the next transition.
   *
   * \par
   * If a previous fade is interrupted, the new fade duration will be
   * scaled back according to the calculated "distance" to get from
   * the current gamma tables to the target tables, just as with SWI
   * ::ScreenFX_Fade.
   *
   * \par  Related SWIs
   * ScreenFX_Fade<br>
   * ScreenFX_Cancel
   *
   * \par  Related vectors
   * None
   */

  /************************************************************/
  /*@}*/  /* (Magic Doxygen comment to end grouping of items) */
  /************************************************************/

  /// \defgroup swidefs SWI related definitions
  ///
  /// Various constants used when calling the SWI interface
  /// from 'C'.

  /************************************************************/
  /*@{*/  /* (Magic Doxygen comment to group following items) */
  /************************************************************/

  /*! \brief  Flags for ::ScreenFX_Fade - block whilst
   *          fading.
   */

  #define SCREENFX_FADE_BLOCK              (1u<<0)

  /*! \brief  Flags for ::ScreenFX_Fade - don't trigger
   *          callbacks while blocked (only relevant if
   *          ::SCREENFX_FADE_BLOCK is also set).
   */

  #define SCREENFX_FADE_NOCALLBACKS        (1u<<1)

  /*! \brief  Flags for ::ScreenFX_Fade - allow Escape key to
   *          cancel a fade (only relevant if
   *          ::SCREENFX_FADE_BLOCK is also set).
   */

  #define SCREENFX_FADE_ALLOWESCAPE        (1u<<3)

  /*! \brief  Exit flags for ::ScreenFX_Status - a fade effect
   *          is running.
   */

  #define SCREENFX_STATUS_FADERUNNING      (1u<<0)

  /*! \brief  Exit flags for ::ScreenFX_Status - a cross-fade
   *          effect is running.
   */

  #define SCREENFX_STATUS_CROSSFADERUNNING (1u<<1)

  /*! \brief  Flags for ::ScreenFX_CrossFade - block whilst
   *          fading.
   */

  #define SCREENFX_CROSSFADE_BLOCK         (1u<<0)

  /*! \brief  Flags for ::ScreenFX_CrossFade - don't trigger
   *          callbacks while blocked (only relevant if
   *          ::SCREENFX_CROSSFADE_BLOCK is also set).
   */

  #define SCREENFX_CROSSFADE_NOCALLBACKS   (1u<<1)

  /*! \brief  Flags for ::ScreenFX_CrossFade - cross-fade to
   *          the lower bits of each colour component, rather
   *          than the upper bits.
   */

  #define SCREENFX_CROSSFADE_TOLOWER       (1u<<2)

  /*! \brief  Flags for ::ScreenFX_CrossFade - allow Escape
   *          key to cancel a fade (only relevant if
   *          ::SCREENFX_CROSSFADE_BLOCK is also set).
   */

  #define SCREENFX_CROSSFADE_ALLOWESCAPE   (1u<<3)

  /************************************************************/
  /*@}*/  /* (Magic Doxygen comment to end grouping of items) */
  /************************************************************/

  /// \defgroup cli Command line interface
  ///
  /// A description of the command line interface for ScreenFX.

  /************************************************************/
  /*@{*/  /* (Magic Doxygen comment to group following items) */
  /************************************************************/

  /*! \interface  ScreenFXFade
   *  \brief      A command line interface to SWI ::ScreenFX_Fade.
   *
   * \par  Syntax
   * \code
   * *ScreenFXFade [-block] [-escape] <left &BBGGRRSS> <right &BBGGRRSS> <duration, cs>
   * \endcode
   *
   * \par  Use
   * The first parameter is an optional switch which if present sets bit 0 of
   * R0 on entry to SWI ::ScreenFX_Fade, causing a blocking fade rather than
   * one which runs in the background. The second is a switch which if present
   * sets bit 3 of R0 on entry to SWI ::ScreenFX_Fade, allowing Escape to
   * interrupt a fade in the same way as if SWI ::ScreenFX_Cancel had been
   * called. It is only relevant during blocking operations; it is ignored for
   * background fades. The next two mandatory parameters are the 32-bit RGBS
   * values giving the destination R, G, B and transparency values for the
   * fade represented as 9 character entities with a mandatory leading "&",
   * each consisting of four pairs of two digit upper or lower case hex
   * values, or a decimal specifier (though it's usually much easier to use
   * hex!). The last parameter is a duration value in centiseconds.
   *
   * \par  Related commands
   * ScreenFXCancel
   */

  /*! \interface  ScreenFXCrossFade
   *  \brief      A command line interface to SWI ::ScreenFX_CrossFade.
   *
   * \par  Syntax
   * \code
   * *ScreenFXFade [-block] [-escape] [-low] <duration, cs>
   * \endcode
   *
   * \par  Use
   * The first parameter is an optional switch which if present sets bit 0 of
   * R0 on entry to SWI ::ScreenFX_CrossFade, causing a blocking fade rather
   * than one which runs in the background. The second is a switch which if
   * present sets bit 3 of R0 on entry to SWI ::ScreenFX_CrossFade, allowing
   * Escape to interrupt a fade in the same way as if SWI ::ScreenFX_Cancel
   * had been called. It is only relevant during blocking operations; it is
   * ignored for background fades. The next parameter sets bit 2 of R0 on
   * entry if present, to fade to the low half of colour components. It is
   * relevant for both blocking and background fades, as is the final
   * parameter, which specifies the duration value in centiseconds.
   *
   * \par  Related commands
   * ScreenFXFade<br>
   * ScreenFXCancel
   */

  /*! \interface  ScreenFXCancel
   *  \brief      A command line interface to SWI ::ScreenFX_Cancel.
   *
   * \par  Syntax
   * \code
   * *ScreenFXCancel
   * \endcode
   *
   * \par  Use
   * There are no parameters.
   *
   * \par  Related commands
   * ScreenFXFade
   */

  /*! \interface  ScreenFXReset
   *  \brief      A command line interface to SWI ::ScreenFX_Reset.
   *
   * \par  Syntax
   * \code
   * *ScreenFXReset
   * \endcode
   *
   * \par  Use
   * There are no parameters.
   *
   * \par  Related commands
   * ScreenFXFade<br>
   * ScreenFXCancel
   */

  /*! \interface  ScreenFXStatus
   *  \brief      A command line interface to SWI ::ScreenFX_Status.
   *
   * \par  Syntax
   * \code
   * *ScreenFXStatus
   * \endcode
   *
   * \par  Use
   * There are no parameters. The precise output depends upon the Messages
   * file settings for the current locale, but is of the form:
   *
   * \par
   * \code
   * ScreenFX 0.01 (18-Aug-2005) status:
   *
   * RGBS left endpoint    &BBGGRRSS
   * RGBS right endpoint   &BBGGRRSS
   * Fade in progress      1 (Yes)
   * Time to completion    20cs
   * \endcode
   *
   * \par
   * The ordering of items above is not expected to change, even if the
   * wording does; note the locale-independent use of a number as well as
   * a locale-dependent string for the "Fade in progress" indication.
   *
   * \par  Related commands
   * ScreenFXFade
   */

  /************************************************************/
  /*@}*/  /* (Magic Doxygen comment to end grouping of items) */
  /************************************************************/

  /// \defgroup errors Error related definitions
  ///
  /// Private error numbers for ScreenFX. ScreenFX uses PRISMLib
  /// to share public range error numbers from PRISM.

  /************************************************************/
  /*@{*/  /* (Magic Doxygen comment to group following items) */
  /************************************************************/

  #define SCREENFX_ERROR_BASE (0x81D900) ///< 0x81D900 to 0x81D91F.
  #define SCREENFX_OFFSET     0          ///< Start offset within allocation.
  #define SCREENFX_SIZE       0x20       ///< Keep within allocation.

  enum
  {
    screenfx_error_MIN                    = SCREENFX_ERROR_BASE
                                          + SCREENFX_OFFSET,

    screenfx_error_INVALID_COLOUR_DEPTH,    ///< A requested operation cannot proceed in the current screen mode's colour depth.

    screenfx_error_MAX                    = SCREENFX_ERROR_BASE
                                          + SCREENFX_SIZE
  };

  /************************************************************/
  /*@}*/  /* (Magic Doxygen comment to end grouping of items) */
  /************************************************************/

#endif /* SCREENFX_SCREENFX__ */

/* In the exported copy of this file, SWI numbers will follow. */

