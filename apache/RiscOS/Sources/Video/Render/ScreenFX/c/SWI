/* Copyright 2005 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    SWI.c                                             */
/*          (C) 2005 Tematic                                  */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: SWI implementations.                              */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 18-Aug-2005 (ADH): Created.                       */
/**************************************************************/

#include "Effect.h"

#include "SWI.h"

/**************************************************************/
/* swi_fade()                                                 */
/*                                                            */
/* Implement SWI ScreenFX_Fade.                               */
/*                                                            */
/* Parameters:  Pointer to a register block.                  */
/*                                                            */
/* Re-entrancy: Function is not re-entrant.                   */
/*                                                            */
/* Threading:   Function is not thread-safe.                  */
/**************************************************************/

_kernel_oserror * swi_fade(_kernel_swi_regs * r)
{
  dprintf(("SWI",
           "swi_fade: Called with registers at &%08X:\n"
           "          Flags &%08X, left RGBS &%08X, right RGBS &%08X, duration %u\n",

           TOINT(r),
           r->r[0], r->r[1], r->r[2], r->r[3]));

  dprintf(("SWI", "swi_fade: Starting fade...\n"));

  PRISMLIB_RETERR(effect_start_fade((uint32_t) r->r[1],
                                    (uint32_t) r->r[2],
                                    (uint32_t) r->r[3]));

  /* Was this a blocking call? */

  if ((r->r[0] & SCREENFX_FADE_BLOCK) != 0)
  {
    bool escaped = effect_block
    (
      (uint32_t) r->r[3],
      (r->r[0] & SCREENFX_FADE_NOCALLBACKS) != 0 ? true : false,
      (r->r[0] & SCREENFX_FADE_ALLOWESCAPE) != 0 ? true : false
    );

    if ((r->r[0] & SCREENFX_FADE_ALLOWESCAPE) != 0)
    {
      r->r[0] = escaped ? SCREENFX_FADE_ALLOWESCAPE : 0;
    }
  }

  dprintf(("SWI", "swi_fade: Successful\n"));
  return NULL;
}

/**************************************************************/
/* swi_cancel()                                               */
/*                                                            */
/* Implement SWI ScreenFX_Cancel.                             */
/*                                                            */
/* Parameters:  Pointer to a register block.                  */
/*                                                            */
/* Re-entrancy: Function is not re-entrant.                   */
/*                                                            */
/* Threading:   Function is not thread-safe.                  */
/**************************************************************/

_kernel_oserror * swi_cancel(_kernel_swi_regs * r)
{
  dprintf(("SWI",
           "swi_cancel: Called with registers at &%08X:\n"
           "            Flags &%08X\n",

           TOINT(r),
           r->r[0]));

  (void) r;

  /* Cancel any currently running effect */

  dprintf(("SWI", "swi_cancel: Exiting through effect_cancel()...\n"));
  return effect_cancel(false);
}

/**************************************************************/
/* swi_reset()                                                */
/*                                                            */
/* Implement SWI ScreenFX_Reset.                              */
/*                                                            */
/* Parameters:  Pointer to a register block.                  */
/*                                                            */
/* Re-entrancy: Function is not re-entrant.                   */
/*                                                            */
/* Threading:   Function is not thread-safe.                  */
/**************************************************************/

_kernel_oserror * swi_reset(_kernel_swi_regs * r)
{
  dprintf(("SWI",
           "swi_reset: Called with registers at &%08X:\n"
           "            Flags &%08X\n",

           TOINT(r),
           r->r[0]));

  (void) r;

  /* Cancel any currently running effect */

  PRISMLIB_RETERR(effect_cancel(false));

  /* Reset the gamma and supremacy tables */

  dprintf(("SWI", "swi_reset: Exiting through effect_reset()...\n"));
  return effect_reset();
}

/**************************************************************/
/* swi_status()                                               */
/*                                                            */
/* Implement SWI ScreenFX_Status.                             */
/*                                                            */
/* Parameters:  Pointer to a register block.                  */
/*                                                            */
/* Re-entrancy: Function is not re-entrant.                   */
/*                                                            */
/* Threading:   Function is not thread-safe.                  */
/**************************************************************/

_kernel_oserror * swi_status(_kernel_swi_regs * r)
{
  dprintf(("SWI",
           "swi_status: Called with registers at &%08X:\n"
           "            Flags &%08X\n",

           TOINT(r),
           r->r[0]));

  (void) r;

  /* Activity flags */

  r->r[0] = 0;

  if (fade_running != screenfx_effect_type_NONE)
  {
    uint32_t now;
    int32_t  run_for;

    switch (fade_running)
    {
      case screenfx_effect_type_FADE:      r->r[0] |= SCREENFX_STATUS_FADERUNNING;      break;
      case screenfx_effect_type_CROSSFADE: r->r[0] |= SCREENFX_STATUS_CROSSFADERUNNING; break;
    }

    /* Read the current time */

    PRISMLIB_RETERR(_swix(OS_ReadMonotonicTime,
                          _OUT(0),

                          &now));

    /* Work out how long the fade has been running */

    run_for = now - fade_start_at;

    /* Bound the result */

    if      (run_for < 0)             run_for = 0;
    else if (run_for > fade_duration) run_for = fade_duration;

    /* Return the remaining time */

    r->r[3] = fade_duration - run_for;
  }
  else
  {
    r->r[3] = 0;
  }

  /* Current left hand end point */

  r->r[1] = effect_pack(current_r[0],
                        current_g[0],
                        current_b[0],
                        current_s[0]);

  /* Current right hand end point */

  r->r[2] = effect_pack(current_r[255],
                        current_g[255],
                        current_b[255],
                        current_s[255]);

  /* Pointer to base of RGBS tables */

  r->r[4] = (uint32_t) current_table;

  /* All done */

  dprintf(("SWI", "swi_status: Successful\n"));
  return NULL;
}

/**************************************************************/
/* swi_crossfade()                                            */
/*                                                            */
/* Implement SWI ScreenFX_CrossFade.                          */
/*                                                            */
/* Parameters:  Pointer to a register block.                  */
/*                                                            */
/* Re-entrancy: Function is not re-entrant.                   */
/*                                                            */
/* Threading:   Function is not thread-safe.                  */
/**************************************************************/

_kernel_oserror * swi_crossfade(_kernel_swi_regs * r)
{
  dprintf(("SWI",
           "swi_crossfade: Called with registers at &%08X:\n"
           "               Flags &%08X, significant bits %u, duration %u\n",

           TOINT(r),
           r->r[0], r->r[1], r->r[2]));

  dprintf(("SWI", "swi_crossfade: Starting fade...\n"));

  PRISMLIB_RETERR(effect_start_crossfade((r->r[0] & SCREENFX_CROSSFADE_TOLOWER) != 0 ? true : false,
                                         (uint32_t) r->r[1]));

  /* Was this a blocking call? */

  if ((r->r[0] & SCREENFX_CROSSFADE_BLOCK) != 0)
  {
    bool escaped = effect_block
    (
      (uint32_t) r->r[1],
      (r->r[0] & SCREENFX_CROSSFADE_NOCALLBACKS) != 0 ? true : false,
      (r->r[0] & SCREENFX_CROSSFADE_ALLOWESCAPE) != 0 ? true : false
    );

    if ((r->r[0] & SCREENFX_CROSSFADE_ALLOWESCAPE) != 0)
    {
      r->r[0] = escaped ? SCREENFX_CROSSFADE_ALLOWESCAPE : 0;
    }
  }

  dprintf(("SWI", "swi_crossfade: Successful\n"));
  return NULL;
}

/* End of file */
