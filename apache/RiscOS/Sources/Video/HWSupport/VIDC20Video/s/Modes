; Copyright 2012 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

GV_SetMode ROUT
        ; => r0 = VIDC Type 3 mode list
        Push    "r0-r3, r5"

        SUB     sp, sp, #PrepTableSize
        MOV     r4, r0
        MOV     r1, sp
        BL      CalculateTimings

        ; Set default palette munge format, may be modified by control list items
        MOV     r5, #Munge_32K
        STRB    r5, PaletteMunge

        ; Work through any control list items
        ADD     r5, r4, #VIDCList3_ControlList
10
        LDR     r0, [r5, #0]
        CMP     r0, #ControlList_Terminator
        BEQ     %FT15
        LDR     r2, [r5, #4]
        MOV     r1, sp
        BL      ProcessControlListItem
        ADD     r5, r5, #8
        B       %BT10
15

        ; Find the VCO settings
        MOV     r1, sp
        PrepValueLDR r2, Reg_PseudoHCLK

        LDRB    r1, IsMedusa
        MOVS    r1, r1
        LDRNE   r1, =24000              ; Medusa => 24MHz oscillator
        LDREQ   r1, =32000              ; Others => 32MHz oscillator
        LDR     r0, [r4, #VIDCList3_PixelRate]
        BL      CalculateVCO

        MOV     r5, r1                  ; Keep Reg_Control bits
        MOV     r1, sp
        ORR     r0, r0, #Reg_FSyn
        PrepValueSTR r0, Reg_FSyn

        ; Formulate the control register
        MOV     r0, r4
        BL      CalculateFIFO

        LDR     r1, [r4, #VIDCList3_PixelDepth]
        CMP     r1, #4
        MOVNE   lr, #Munge_None
        STRNEB  lr, PaletteMunge        ; clear munge setting if not 16bpp mode
        MOVGT   r1, #6                  ; 32bpp => 6 for some reason
        ORR     r0, r0, r1, LSL #CR_LBPPShift

        LDR     r1, [r4, #VIDCList3_SyncPol]
        TST     r1, #SyncPol_Interlace
        ORRNE    r0, r0, #CR_Interlace

        ORR     r0, r0, r5

        ORR     r0, r0, #Reg_Control    ; Test = 0, PowerDown = 0, DUP = 0
        MOV     r1, sp
        PrepValueSTR r0, Reg_Control

        ; Adjust for VRAM
        MOV     r1, sp
        PrepValueLDR r2, Reg_DataControl
        BIC     r2, r2, #DCR_BusBits
        LDRB    r14, MegsVRAM
        CMP     r14, #2                 ; If using dual bank VRAM
        ORRCS   r2, r2, #DCR_Bus63_0    ; then data on all 64 bits
        ORRCC   r2, r2, #DCR_Bus31_0    ; else for 32-bit wide VRAM or DRAM-only, bottom 32 bits only
        BCC     %FT20

        ; For dual bank VRAM the HDWR value needs to be halved
        LDR     r14, =DCR_HDWRBits
        AND     r3, r2, r14             ; Just the HDWR bits
        BIC     r2, r2, r14             ; Knock off HDWR bits
        TST     r3, #1                  ; See if bottom bit would get knocked off
        ORRNE   r2, r2, #DCR_HDis       ; If so, then disable HDis mechanism (for eg mode 29)
        ORREQ   r2, r2, r3, LSR #1      ; Otherwise, put bits back one bit further down
20
        PrepValueSTR r2, Reg_DataControl

        ; Hide the pointer
        MOV     r0, #Reg_VCursorStart :OR: 0
        PrepValueSTR r0, Reg_VCursorStart
        MOV     r0, #Reg_VCursorEnd :OR: 0
        PrepValueSTR r0, Reg_VCursorEnd
        LDR     r0, [r4, #VIDCList3_VertiDisplaySize]
        STR     r0, DisplayHeight       ; Keep for cursor clipping

        ; Set the registers taking softcopies where needed elsewhere
        LDR     r0, DevDesc
        LDR     r0, [r0, #HALDevice_Address]
        MOV     r3, sp
        ADD     r4, sp, #PrepTableSize
25
        LDR     r2, [r3], #4
        CMP     r2, #-1                 ; Leave unchanged
        BEQ     %FT30

        AND     r5, r2, #&FF000000      ; Extract register address

        TEQ     r5, #Reg_PseudoHCLK
        BEQ     %FT30                   ; For safety

        TEQ     r5, #Reg_HSyncWidth
        STREQ   r2, SoftHSyncWidth      ; For DPMS

        TEQ     r5, #Reg_HDisplayStart
        BICEQ   r14, r2, #&FF000000
        ADDEQ   r14, r14, #1            ; Adjust N-18 to N-17
        STREQ   r14, PtrHAdjust         ; For pointer

        TEQ     r5, #Reg_VSyncWidth
        STREQ   r2, SoftVSyncWidth      ; For DPMS

        TEQ     r5, #Reg_VDisplayStart
        BICEQ   r14, r2, #&FF000000
        STREQ   r14, PtrVAdjust         ; For pointer

        TEQ     r5, #Reg_External
        STREQ   r2, SoftExternal        ; For power save

        TEQ     r5, #Reg_FSyn
        STREQ   r2, SoftFSyn            ; For power save
        LDREQ   r14, =FSyn_ResetValue :OR: Reg_FSyn
        STREQ   r14, [r0]
        LDREQ   r14, =FSyn_ClearR :OR: FSyn_ClearV :OR: FSyn_ForceLow :OR: FSyn_ForceHigh
        ORREQ   r2, r2, r14
        BICEQ   r2, r2, #FSyn_ForceHigh ; Force all but this test bit on
        STREQ   r2, [r0]                ; Offer sacrifice to god of VCO stability
        BICEQ   r2, r2, r14             ; Remove all test bits

        TEQ     r5, #Reg_Control
        STREQ   r2, SoftControl         ; For allsorts

        Debug   rg, "Program reg", r2
        STR     r2, [r0]
30
        TEQ     r3, r4
        BNE     %BT25

        ; Now some memory controller stuff
        LDR     r5, BaseOfIOMD
        
        ; Compute FSIZE properly
        PrepValueLDR r2, Reg_VDisplayEnd
        PrepValueLDR r3, Reg_VDisplayStart
        PrepValueLDR r4, Reg_VCycle
        BIC     r2, r2, #&FF000000
        BIC     r3, r3, #&FF000000
        BIC     r4, r4, #&FF000000
        SUB     r2, r2, r3              ; Displayed = end - start
        SUB     r4, r4, r2              ; Flyback = total - displayed
        ADD     r4, r4, #1              ; Adjust N-2 to N-1
        Debug   rg, "Reg FSIZE", r4
        STRB    r4, [r5, #IOMD_FSIZE]

        ; Make sure video DMA is enabled
        LDRB    r0, [r5, #IOMD_VIDCR]
        BIC     r0, r0, #IOMD_VIDCR_Dup
        ORR     r0, r0, #IOMD_VIDCR_Enable
        Debug   rg, "Reg VIDCR", r0
        STRB    r0, [r5, #IOMD_VIDCR]

        ADD     sp, sp, #PrepTableSize
        MOV     r4, #0                  ; Claim
        Pull    "r0-r3, r5, pc"

GV_VetMode ROUT
        ; => r0 = VIDC Type 3 mode list
        ;    r1 = mode workspace (?)
        ; <= r0 = 0 if acceptable, otherwise not
        Push    "r1-r3,r5-r8"

        LDR     r1, [r0, #VIDCList3_Type]
        TEQ     r1, #3
        MVNNE   r0, #0                  ; Off to a bad start
        BNE     %FT90
        Debug   vm, "Type 3 list"

        LDR     r1, [r0, #VIDCList3_PixelDepth]
        CMP     r1, #5
        MVNHI   r0, #0                  ; Too many log2bpp
        BHI     %FT90
        Debug   vm, "Is <= 32bpp"

        ; Convert pixel depth to default PixelFormat value
        ; r1 = Log2BPP
        ; r2 = ModeFlags
        ; r3 = NColour
        CMP     r1, #3
        MOVEQ   r2, #ModeFlag_FullPalette
        MOVNE   r2, #0
        MOV     r5, #1
        MOV     r3, r5, LSL r1 ; log2bpp -> bpp
        RSB     r3, r5, r5, LSL r3 ; bpp -> ncolour
        ; Check the control list for some unsupported settings
        ADD     r5, r0, #VIDCList3_ControlList
10
        LDR     r6, [r5], #4
        CMP     r6, #-1
        BEQ     %FT20
        LDR     r7, [r5], #4
        CMP     r6, #ControlList_NColour
        MOVEQ   r3, r7
        BEQ     %BT10
        CMP     r6, #ControlList_ModeFlags
        MOVEQ   r2, r7
        BEQ     %BT10
        CMP     r6, #ControlList_ExtraBytes
        BNE     %FT11
        CMP     r7, #0
        MVNNE   r0, #0
        BNE     %FT90
        B       %BT10
11
        CMP     r6, #ControlList_Interlaced
        BNE     %BT10
        CMP     r7, #0
        BNE     %FT90
        B       %BT10

20
        Debug   vm, "Control list OK"

        ; Make sure the pixel format matches an acceptable one
        ADRL    r5, PixelFormats
        ADD     r6, r5, #PixelFormats_End-PixelFormats
30
        LDMIA   r5!, {r7-r8,r14}
        CMP     r7, r3
        CMPEQ   r8, r2
        CMPEQ   r14, r1
        BEQ     %FT40
        CMP     r5, r6
        BNE     %BT30
        MVN     r0, #0
        B       %FT90
40
        Debug   vm, "Pixel format OK"                

        LDR     r1, [r0, #VIDCList3_PixelRate]
        LDR     r14, =8000              ; In kHz, see Risc PC TRM page 1-16
        CMP     r1, r14
        MVNCC   r0, #0                  ; Too slow
        BCC     %FT90
        Debug   vm, "Is >= 8MHz"
        
        LDR     r14, =110000            ; In kHz, see Risc PC TRM page 1-16
        CMP     r1, r14
        MVNHI   r0, #0                  ; Too fast
        BHI     %FT90
        Debug   vm, "Is <= 110MHz"

        BL      BandwidthCheck
        TEQ     r1, #0
        MVNNE   r0, #0                  ; Bus meltdown
        BNE     %FT90
        Debug   vm, "Is <= memory BW"

        SUB     sp, sp, #PrepTableSize
        MOV     r1, sp
        BL      CalculateTimings

        ; Check the registers fit
        PrepValueLDR r2, Reg_HCycle
        PrepValueLDR r3, Reg_HSyncWidth
        ORR     r2, r2, r3
        PrepValueLDR r3, Reg_HBorderStart
        ORR     r2, r2, r3
        PrepValueLDR r3, Reg_HDisplayStart
        ORR     r2, r2, r3
        PrepValueLDR r3, Reg_HDisplayEnd
        ORR     r2, r2, r3
        PrepValueLDR r3, Reg_HBorderEnd
        ORR     r2, r2, r3
        PrepValueLDR r3, Reg_VCycle
        ORR     r2, r2, r3

        BIC     r2, r2, #&FF000000      ; Address bits
        MOVS    r2, r2, LSR #14         ; Counter bits
        MVNNE   r0, #0                  ; Overflowed
        BNE     %FT85
        Debug   vm, "14 bit counters OK"

        PrepValueLDR r2, Reg_VSyncWidth
        PrepValueLDR r3, Reg_VBorderStart
        ORR     r2, r2, r3
        PrepValueLDR r3, Reg_VDisplayStart
        ORR     r2, r2, r3
        PrepValueLDR r3, Reg_VDisplayEnd
        ORR     r2, r2, r3
        PrepValueLDR r3, Reg_VBorderEnd
        ORR     r2, r2, r3

        BIC     r2, r2, #&FF000000      ; Address bits
        MOVS    r2, r2, LSR #13         ; Counter bits
        MVNNE   r0, #0                  ; Overflowed
        BNE     %FT85
        Debug   vm, "13 bit counters OK"
        
        MOV     r0, #0                  ; Nice mode, we'll take it
85        
        ADD     sp, sp, #PrepTableSize
90
        MOV     r4, #0                  ; Claim
        Pull    "r1-r3,r5-r8, pc"

BandwidthCheck
        ; => r0 = VIDC Type 3 mode list
        ; <= r1 = 0 if in range
        Push    "r2-r3, lr"
        LDR     r2, [r0, #VIDCList3_PixelDepth]
        LDR     r3, [r0, #VIDCList3_PixelRate]
        CMP     r2, #3                  ; 8bpp
        SUBCS   r14, r2, #3
        MOVCS   r3, r3, LSL r14         ; kHz => kB/s
        RSBCC   r14, r2, #3
        MOVCC   r2, #1
        MOVCC   r2, r2, LSL r14
        SUBCC   r2, r2, #1
        ADDCC   r3, r3, r2              ; Round up before truncate
        MOVCC   r3, r3, LSR r14         ; kHz => kB/s

        LDRB    r2, IsMedusa
        TEQ     r2, #0
        MOVEQ   r2, #3                  ; Oddball entry for A7000/A7000+
        LDRNEB  r2, MegsVRAM
        ADR     r14, BandwidthLimits
        LDR     r1, [r14, r2, LSL #2]
        Debug   vm, "Desired BW", r3
        Debug   vm, "Permitted BW", r1
        CMP     r3, r1
        MVNHI   r1, #0                  ; Bandwidth limit exceeded
        MOVLS   r1, #0
        Pull    "r2-r3, pc"

BandwidthLimits
        DCD     38000                   ; No VRAM, Medusa
        DCD     76000                   ; 1MB VRAM
        DCD     152000                  ; 2MB VRAM
        DCD     80000                   ; No VRAM, A7000/A7000+
        DCD     304000                  ; 4MB VRAM, not real (RPCEmu)
        DCD     -1
        DCD     -1
        DCD     -1
        DCD     608000                  ; 8MB VRAM, not real (RPCEmu)

VCO_Min *       55000                   ; Minimum VCO frequency (in kHz)
VCO_Max *       110000                  ; Maximum VCO frequency (in kHz)
fpshf   *       11                      ; Shift value for fixed point arithmetic
                        ^ 0, sp
BestDInOrOutOfRange     # 4
BestRInOrOutOfRange     # 4
BestVInOrOutOfRange     # 4
BestDInRange            # 4
BestRInRange            # 4
BestVInRange            # 4
BestRangeError          # 4
BestVCOValuesStack      * :INDEX: @

CalculateVCO
        ; => r0 = target frequency (kHz)
        ;    r1 = RCLK frequency (kHz)
        ;    r2 = HCLK frequency (kHz or -1 to use VCLK/RCLK)
        ; <= r0 = b0-b15 of Reg_FSyn
        ;    r1 = b0-b4 of Reg_Control
        Push    "r4-r12, lr"
        CMP     r2, #-1
        BEQ     %FT05

        ; Use HCLK
        SUB     r1, r2, r2, LSR #2                                      ; HCLK * 3/4
        CMP     r0, r1
        MOVLO   r1, #CR_HCLK :OR: ((2-1) :SHL: CR_PixelDivShift)        ; If < 3/4 HCLK, use divide by 2
        MOVHS   r1, #CR_HCLK :OR: ((1-1) :SHL: CR_PixelDivShift)        ; Else use divide by 1
        LDR     r0, =(63 :SHL: FSyn_RShift) :OR: (1 :SHL: FSyn_VShift)  ; Minimum V, maximum R
        Pull    "r4-r12, pc"
05
        ; Use VCLK/RCLK
        SUB     sp, sp, #BestVCOValuesStack
        MOV     r12, #-1                ; Smallest error for values in or out of VCO range
        MOV     r11, #-1                ; Smallest error for values in VCO range
        STR     r11, BestDInRange
        STR     r11, BestVInRange
        STR     r11, BestRInRange
        STR     r11, BestDInOrOutOfRange
        STR     r11, BestVInOrOutOfRange
        STR     r11, BestRInOrOutOfRange
        STR     r11, BestRangeError
        MOV     r5, r1                  ; r5 = RCLK frequency, either 24MHz or 32MHz
        LDR     r1, =VCO_Min            ; r1 = minimum VCO frequency (in kHz)
        LDR     r2, =VCO_Max            ; r2 = maximum VCO frequency (in kHz)
        MOV     r3, #1                  ; r3 = D
10
        MOV     r4, #1                  ; r4 = R
15
        MUL     r6, r0, r3              ; r6 = xD
        MUL     r7, r6, r4              ; r7 = xRD
        ADD     r7, r7, r5, LSR #1      ; r7 = xRD + vref/2
        DivRem  r8, r7, r5, r9          ; r8 = (xRD + vref/2) DIV vref = V value

        TEQ     r4, #1                  ; If R=1 then V must be 1, else it's no good
        BNE     %FT20
        TEQ     r8, #1
        BNE     %FT50
        BEQ     %FT25
20
        CMP     r8, #2                  ; If R<>1 then V must be in range 2..64
        RSBCSS  r7, r8, #64
        BCC     %FT50                   ; V out of range, so skip
25
        MUL     r7, r5, r8              ; r7 = V * vref
        MOV     r7, r7, LSL #fpshf      ; r7 = (V * vref) << fixedpointshift
        DivRem  r9, r7, r4, r14         ; r9 = ((V * vref) << fixedpointshift) / R = VCO frequency << fixedpointshift
        MOV     r6, r9
        DivRem  r7, r9, r3, r14         ; r7 = output frequency << fixedpointshift
        SUBS    r7, r7, r0, LSL #fpshf
        RSBCC   r7, r7, #0              ; r7 = absolute error << fixedpointshift

        TEQ     r4, #1                  ; If R=1 then no need to check VCO range
        BEQ     %FT27                   ; because VCO won't be used, so it's a 1st class citizen

        CMP     r6, r1, LSL #fpshf      ; Test if VCO freq >= min
        RSBCSS  r14, r6, r2, LSL #fpshf ; and <= max
        BCC     %FT40                   ; not in range, so not a first class citizen
27
        CMP     r7, r11
        BHI     %FT40                   ; Worse than the best case for in VCO range, so ignore
        BCC     %FT30                   ; is definitely better than the best case for in or out

        LDR     r14, BestRInRange       ; Is equal best for in, so check R value
        CMP     r4, r14                 ; Is newR < bestR
        BCS     %FT40                   ; Is greater or equal R value (ie. not higher comp. freq., so not best)
30
        MOV     r11, r7
        STR     r3, BestDInRange
        STR     r4, BestRInRange
        STR     r8, BestVInRange
        MOV     r14, #0
        B       %FT45
40
        RSBS    r14, r6, r1, LSL #fpshf ; r14 = min-this, if this<min
        SUBCC   r14, r6, r2, LSL #fpshf ; else r14 = this-max, ie r14 = how much this is outside range

        CMP     r7, r12
        BHI     %FT50                   ; Worse than the best case for in or out of VCO range, so ignore
        BCC     %FT45                   ; Is definitely better than the best case for in or out

        LDR     r9, BestRangeError      ; Is equal best for in or out, so check error
        CMP     r14, r9
        BCS     %FT50                   ; Not lower error, so skip
45
        MOV     r12, r7
        STR     r3, BestDInOrOutOfRange
        STR     r4, BestRInOrOutOfRange
        STR     r8, BestVInOrOutOfRange
        STR     r14, BestRangeError
50
      [ :LNOT: DontUseVCO               ; If we don't use the VCO, R has to be 1
        ADD     r4, r4, #1
        CMP     r4, #16                 ; R goes from 2 to 16 (was 2 to 64)
        BLS     %BT15
      ]
        ADD     r3, r3, #1
        CMP     r3, #8                  ; D goes from 1 to 8
        BLS     %BT10

        ADR     r2, BestDInRange
        LDR     r3, [r2]
        CMP     r3, #-1
        ADDEQ   r2, r2, #BestDInOrOutOfRange - BestDInRange
        LDREQ   r3, [r2]                ; r3 = Best D
        LDR     r4, [r2, #BestRInRange - BestDInRange]  ; r4 = Best R
        LDR     r5, [r2, #BestVInRange - BestDInRange]  ; r5 = Best V

        SUBS    r4, r4, #1              ; Values in FSyn are N-1

      [ VCOStartFix
        ; Do *not* do the very slow trick - this will stall the VCO and it may not restart
        ; properly later (we don't give a fig for power consumption)
        MOVEQ   r4, #3
        MOVEQ   r5, #8                  ; After sub below, (7+1)/(3+1) so VCO runs at twice ref clock
      |
        MOVEQ   r4, #63                 ; If R=V=1 then use max R
        MOVEQ   r5, #2                  ; and min V to make VCO go really slow
      ]
        SUB     r5, r5, #1              ; For both V and R
        ASSERT  FSyn_RShift = 0
        ORR     r0, r4, r5, LSL #FSyn_VShift

        SUB     r3, r3, #1              ; D is also stored as N-1
        MOV     r1, r3, LSL #CR_PixelDivShift
        ASSERT  CR_VCLK = 0
        ORREQ   r1, r1, #CR_RCLK        ; If using VCO then set for VCLK, else RCLK

        ADD     sp, sp, #BestVCOValuesStack
        Pull    "r4-r12, pc"

CalculateFIFO
        ; => r0 = VIDC Type 3 mode list
        ; <= r0 = b8-10 of Reg_Control
        Entry   "r2-r3"
        LDR     r2, [r0, #VIDCList3_PixelDepth]
        LDR     r3, [r0, #VIDCList3_PixelRate]
        MOV     r2, r3, LSL r2                  ; Peak memory b/w x 1E3 bits/sec

        ; Find applicable FIFO load position by means of a binary chop on 3 bits
        ADR     r3, FIFOLoadTable

        LDR     r0, [r3, #4*4]
        CMP     r2, r0                          ; Chop
        MOVLS   r14, #0                         ; If <=, then bottom half
        MOVHI   r14, #4                         ; else top half
        ADDHI   r3, r3, #4*4                    ; and advance table pointer  

        LDR     r0, [r3, #2*4]
        CMP     r2, r0                          ; Chop
        ORRHI   r14, r14, #2
        ADDHI   r3, r3, #2*4

        LDR     r0, [r3, #1*4]
        CMP     r2, r0                          ; Chop
        ORRHI   r14, r14, #1

        MOV     r0, r14, LSL #CR_FIFOLoadShift
        EXIT

        ; Table has a minimum of 4, otherwise 800 x 600 x 1bpp wont work
FIFOLoadTable
        DCD     0                               ; Dummy entry (not used)
        DCD     0                               ; Never use 0
        DCD     0                               ; Use 1 up to (and including) here
        DCD     0                               ; Use 2 up to (and including) here
        DCD     0                               ; Use 3 up to (and including) here
        DCD     60000 :SHL: 3                   ; Use 4 up to (and including) here
        DCD     75000 :SHL: 3                   ; Use 5 up to (and including) here
        DCD     90000 :SHL: 3                   ; Use 6 up to (and including) here
                                                ; else use 7        
CalculateTimings
        ; => r0 = VIDC Type 3 mode list
        ;    r1 = space to prepare register updates in
        Push    "r4, r6-r8, lr"

        MOV     r2, #-1
        MOV     r3, r1
        ADD     r4, r1, #PrepTableSize
10
        STR     r2, [r3], #4            ; Default to unchanged marker
        TEQ     r3, r4
        BNE     %BT10

        ; Horizontal timings
        LDR     r2, [r0, #VIDCList3_HorizSyncWidth]
        BIC     r2, r2, #1              ; Must be even
        SUB     r2, r2, #8              ; Horiz parameters start off at N-8
        ORR     r14, r2, #Reg_HSyncWidth
        PrepValueSTR r14, Reg_HSyncWidth

        LDR     r4, [r0, #VIDCList3_HorizBackPorch]
        ADD     r2, r2, r4
        BIC     r2, r2, #1              ; Must be even
        SUB     r2, r2, #4              ; HBSR is N-12 => N-8-4
        ORR     r14, r2, #Reg_HBorderStart
        PrepValueSTR r14, Reg_HBorderStart

        LDR     r4, [r0, #VIDCList3_HorizLeftBorder]
        ADD     r2, r2, r4
        BIC     r2, r2, #1              ; Must be even
        SUB     r2, r2, #6              ; HDSR is N-18 => N-12-6
        ORR     r14, r2, #Reg_HDisplayStart
        PrepValueSTR r14, Reg_HDisplayStart

        LDR     r4, [r0, #VIDCList3_HorizDisplaySize]
        BIC     r4, r4, #1              ; Must be even
        LDR     r7, [r0, #VIDCList3_PixelDepth]
        MOV     r6, r4, LSL r7          ; Number of bits in one displayed raster
        ANDS    r8, r6, #31
        MOVNE   r8, #DCR_HDis           ; If line length not multiple of 32 then set HDis bit
        ORR     r8, r8, r6, LSR #5      ; Number of words in one displayed raster
        ORR     r8, r8, #DCR_VRAMOff :OR: DCR_Bus31_0 :OR: DCR_Sync
        ORR     r8, r8, #Reg_DataControl
        PrepValueSTR r8, Reg_DataControl

        ADD     r2, r2, r4              ; HDER is also N-18
        ORR     r14, r2, #Reg_HDisplayEnd
        PrepValueSTR r14, Reg_HDisplayEnd

        LDR     r4, [r0, #VIDCList3_HorizRightBorder]
        ADD     r2, r2, r4
        ADD     r2, r2, #6              ; HBER is N-12 => N-18+6
        BIC     r2, r2, #1              ; Must be even
        ORR     r14, r2, #Reg_HBorderEnd
        PrepValueSTR r14, Reg_HBorderEnd

        LDR     r4, [r0, #VIDCList3_HorizFrontPorch]
        ADD     r2, r2, r4
        ADD     r2, r2, #4              ; HCR is N-8 => N-12+4
        BIC     r2, r2, #3              ; Must be multiple of 4
        ORR     r14, r2, #Reg_HCycle
        PrepValueSTR r14, Reg_HCycle

        ADD     r2, r2, #8              ; HIR is N/2 => N-8+8/2
        MOV     r2, r2, LSR #1
        ORR     r14, r2, #Reg_HInterlace
        PrepValueSTR r14, Reg_HInterlace

        ; Vertical timings
        LDR     r2, [r0, #VIDCList3_VertiSyncWidth]
        SUB     r2, r2, #2              ; Vert parameters all N-2
        ORR     r14, r2, #Reg_VSyncWidth
        PrepValueSTR r14, Reg_VSyncWidth

        LDR     r4, [r0, #VIDCList3_VertiBackPorch]
        ADD     r2, r2, r4
        ORR     r14, r2, #Reg_VBorderStart
        PrepValueSTR r14, Reg_VBorderStart

        LDR     r4, [r0, #VIDCList3_VertiTopBorder]
        ADD     r2, r2, r4
        ORR     r14, r2, #Reg_VDisplayStart
        PrepValueSTR r14, Reg_VDisplayStart

        LDR     r4, [r0, #VIDCList3_VertiDisplaySize]
        ADD     r2, r2, r4
        ORR     r14, r2, #Reg_VDisplayEnd
        PrepValueSTR r14, Reg_VDisplayEnd

        LDR     r4, [r0, #VIDCList3_VertiBottomBorder]
        ADD     r2, r2, r4
        ORR     r14, r2, #Reg_VBorderEnd
        PrepValueSTR r14, Reg_VBorderEnd

        LDR     r4, [r0, #VIDCList3_VertiFrontPorch]
        ADD     r2, r2, r4
        ORR     r14, r2, #Reg_VCycle
        PrepValueSTR r14, Reg_VCycle

        ; Sync type
        LDR     r4, [r0, #VIDCList3_SyncPol]

        MOV     r6, r1
        MOV     r0, #1
        SWI     XOS_ReadSysInfo
        MOV     r1, r6                  ; Preserve prep value table

        LDR     r14, =Reg_External :OR: Ext_DACsOn :OR: Ext_ERegExt
        TEQ     r2, #1                  ; Composite sync requested
        ORREQ   r14, r14, #Ext_InvertCompVSYNC :OR: Ext_InvertCompHSYNC
        MOVEQ   r4, #0                  ; Don't invert composite sync
        TST     r4, #SyncPol_InvertHSync
        ORRNE   r14, r14, #Ext_InvertHSYNC
        TST     r4, #SyncPol_InvertVSync
        ORRNE   r14, r14, #Ext_InvertVSYNC
        PrepValueSTR r14, Reg_External

        Pull    "r4, r6-r8, pc"

ProcessControlListItem
        ; => r0 = item number
        ;    r1 = space to prepare register updates in
        ;    r2 = argument for item
        Debug   rg, "Control item", r0, r2
        CMP     r0, #(CIEnd - CIStart):SHR:2
        ADDCC   pc, pc, r0, LSL #2
        MOVCS   pc, lr
CIStart
        MOV     pc, lr                  ; NOP
        B       ProcessControlList_LCDMode
        B       ProcessControlList_LCDDualPanelMode 
        B       ProcessControlList_LCDOffset0       
        B       ProcessControlList_LCDOffset1       
        B       ProcessControlList_HiResMode        
        B       ProcessControlList_DACControl       
        B       ProcessControlList_RGBPedestals     
        B       ProcessControlList_ExternalRegister 
        B       ProcessControlList_HClockSelect
        MOV     pc, lr                  ; RClockFrequency
        MOV     pc, lr                  ; DPMSState
        MOV     pc, lr                  ; Interlaced
        MOV     pc, lr                  ; OutputFormat
        MOV     pc, lr                  ; ExtraBytes
        B       ProcessControlList_NColour
        B       ProcessControlList_ModeFlags
CIEnd

ProcessControlList_LCDMode           
ProcessControlList_LCDDualPanelMode  
ProcessControlList_LCDOffset0
ProcessControlList_LCDOffset1
        ! 0,    "No support for digital LCD panel drive"
        MOV     pc, lr

ProcessControlList_HiResMode
        TEQ     r2, #0
        MOVNE   r2, #Ext_HiResMono
        MOV     r3, #Ext_HiResMono
        B       %FT10

ProcessControlList_DACControl               
        TEQ     r2, #0
        MOVNE   r2, #Ext_DACsOn
        MOV     r3, #Ext_DACsOn
        B       %FT10

ProcessControlList_RGBPedestals             
        MOV     r2, r2, LSL #Ext_PedsShift
        AND     r2, r2, #Ext_PedsOn
        MOV     r3, #Ext_PedsOn
        B       %FT10

ProcessControlList_ExternalRegister         
        AND     r2, r2, #&FF
        MOV     r3, #&FF
10
        PrepValueLDR r0, Reg_External
        BIC     r0, r0, r3              ; Remove these bits
        ORR     r0, r0, r2              ; Insert these replacements
        PrepValueSTR r0, Reg_External
        MOV     pc, lr                

ProcessControlList_HClockSelect
        PrepValueSTR r2, Reg_PseudoHCLK ; Not a real VIDC register 
        MOV     pc, lr

ProcessControlList_NColour
        CMP     r2, #4096
        MOVLT   r2, #Munge_4K
        STRLTB  r2, PaletteMunge
        MOV     pc, lr

ProcessControlList_ModeFlags
        TST     r2, #ModeFlag_64k
        MOVNE   r2, #Munge_64K
        STRNEB  r2, PaletteMunge
        MOV     pc, lr

        END
