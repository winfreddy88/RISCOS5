; Copyright 2012 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; Registers in VIDC20
Reg_PaletteEntries  *       &00000000
Reg_PaletteAddress  *       &10000000   ; Counter used in palette programming
Reg_LCDOffset0      *       &30000000
Reg_LCDOffset1      *       &31000000
Reg_BorderColour    *       &40000000   ; A bit more palette
Reg_PointerColour   *       &50000000

Reg_HCycle          *       &80000000
Reg_HSyncWidth      *       &81000000
Reg_HBorderStart    *       &82000000
Reg_HDisplayStart   *       &83000000
Reg_HDisplayEnd     *       &84000000
Reg_HBorderEnd      *       &85000000
Reg_HCursorStart    *       &86000000   ; Used in pointer programming
Reg_HInterlace      *       &87000000

Reg_PseudoHCLK      *       &88000000   ; Hold for ControlList_HClockSelect

Reg_VCycle          *       &90000000
Reg_VSyncWidth      *       &91000000   ; Needed to set up FSIZE register in IOMD
Reg_VBorderStart    *       &92000000   ; First register affected by *TV
Reg_VDisplayStart   *       &93000000
Reg_VDisplayEnd     *       &94000000
Reg_VBorderEnd      *       &95000000
Reg_VCursorStart    *       &96000000
Reg_VCursorEnd      *       &97000000   ; Last register affected by *TV

Reg_External        *       &C0000000
Reg_FSyn            *       &D0000000
Reg_Control         *       &E0000000
Reg_DataControl     *       &F0000000

; Bits in Reg_DataControl
DCR_VRAMOff         *       0 :SHL: 18
DCR_VRAMDiv1        *       1 :SHL: 18
DCR_VRAMDiv2        *       2 :SHL: 18
DCR_VRAMDiv4        *       3 :SHL: 18
DCR_BusBits         *       3 :SHL: 16
DCR_Bus31_0         *       1 :SHL: 16
DCR_Bus63_32        *       2 :SHL: 16
DCR_Bus63_0         *       3 :SHL: 16
DCR_HDis            *       1 :SHL: 13
DCR_Sync            *       1 :SHL: 12
DCR_HDWRBits        *       &3FF
DCR_HDWRShift       *       0

; Bits in Reg_Control
CR_DualPanel        *       1 :SHL: 13
CR_Interlace        *       1 :SHL: 12
CR_FIFOLoadShift    *       8
CR_LBPP0            *       0 :SHL: 5
CR_LBPP1            *       1 :SHL: 5
CR_LBPP2            *       2 :SHL: 5
CR_LBPP3            *       3 :SHL: 5
CR_LBPP4            *       4 :SHL: 5
CR_LBPP5            *       6 :SHL: 5   ; Spot the gap!
CR_LBPPShift        *       5
CR_PixelDivShift    *       2
CR_VCLK             *       0 :SHL: 0
CR_HCLK             *       1 :SHL: 0
CR_RCLK             *       2 :SHL: 0

; Bits in Reg_FSyn
FSyn_VShift         *       8
FSyn_RShift         *       0
FSyn_ClearV         *       1 :SHL: 15
FSyn_ForceLow       *       1 :SHL: 14
FSyn_ClearR         *       1 :SHL: 7
FSyn_ForceHigh      *       1 :SHL: 6
FSyn_ResetValue     *       FSyn_ClearV :OR: FSyn_ClearR :OR: \
                            FSyn_ForceLow :OR: \
                            (63 :SHL: FSyn_RShift) :OR: \
                            (0 :SHL: FSyn_VShift)

; Bits in Reg_External
Ext_HSYNCbits       *       3 :SHL: 16
Ext_InvertHSYNC     *       1 :SHL: 16
Ext_CompHSYNC       *       2 :SHL: 16
Ext_InvertCompHSYNC *       3 :SHL: 16
Ext_VSYNCbits       *       3 :SHL: 18
Ext_InvertVSYNC     *       1 :SHL: 18
Ext_CompVSYNC       *       2 :SHL: 18
Ext_InvertCompVSYNC *       3 :SHL: 18
Ext_HiResMono       *       1 :SHL: 14
Ext_LCDGrey         *       1 :SHL: 13
Ext_DACsOn          *       1 :SHL: 12
Ext_PedsOn          *       7 :SHL: 8
Ext_PedsShift       *       8
Ext_ERegShift       *       4
Ext_ECKOn           *       1 :SHL: 2
Ext_ERegBits        *       3 :SHL: 0
Ext_ERegRed         *       0 :SHL: 0
Ext_ERegGreen       *       1 :SHL: 0
Ext_ERegBlue        *       2 :SHL: 0
Ext_ERegExt         *       3 :SHL: 0   ; Use this for lowest power

; Enough slots to hold the non palette timing/control registers
PrepTableWords      *       32 + 4
PrepTableSize       *       4 * PrepTableWords
        MACRO
        PrepValueSTR $reg, $vidcreg, $cc
        ASSERT    $vidcreg >= Reg_HCycle
      [ $vidcreg < Reg_External
        STR$cc    $reg, [r1, #($vidcreg - Reg_HCycle) :SHR: (24 - 2)]
      |
        STR$cc    $reg, [r1, #(32 * 4) + (($vidcreg - Reg_External) :SHR: (28 - 2))]
      ]
        MEND
        MACRO
        PrepValueLDR $reg, $vidcreg, $cc
        ASSERT    $vidcreg >= Reg_HCycle
      [ $vidcreg < Reg_External
        LDR$cc    $reg, [r1, #($vidcreg - Reg_HCycle) :SHR: (24 - 2)]
      |
        LDR$cc    $reg, [r1, #(32 * 4) + (($vidcreg - Reg_External) :SHR: (28 - 2))]
      ]
        MEND

; Video DMA control
SAMLength           *       512*4       ; SAM length in bytes for 1 bank of VRAM

        END
