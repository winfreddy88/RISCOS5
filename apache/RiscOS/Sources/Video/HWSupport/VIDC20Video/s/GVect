; Copyright 2012 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        MACRO
        GVEntry $name
        ASSERT  . - GVTableStart = GraphicsV_$name * 4
        B       GV_$name
        MEND

        MACRO
        RIEntry $name
        ASSERT  . - ReadInfo_Table = GVReadInfo_$name * 4
        B       RI_$name
        MEND

GraphicsVHandler
        Push    "lr"
        LDRB    lr, GVinstance
        EOR     lr, r4, lr, LSL #24  ; If not our display, the check below will fail
        CMP     lr, #(GVTableEnd - GVTableStart) / 4
        ADDLO   pc, pc, lr, LSL #2
        Pull    "pc"
GVTableStart
        Pull    "pc"                    ; Complete
        Pull    "pc"                    ; VSync
        GVEntry SetMode
        Pull    "pc"                    ; SetInterlace (deprecated)
        GVEntry SetBlank             
        GVEntry UpdatePointer        
        GVEntry SetDMAAddress        
        GVEntry VetMode              
        GVEntry DisplayFeatures      
        Pull    "pc"                    ; FramestoreAddress    
        GVEntry WritePaletteEntry    
        GVEntry WritePaletteEntries  
        GVEntry ReadPaletteEntry
        Pull    "pc"                    ; Render
        GVEntry IICOp
        Pull    "pc"                    ; SelectHead
        Pull    "pc"                    ; StartupMode
        GVEntry PixelFormats
        GVEntry ReadInfo
        
GVTableEnd

GV_SetBlank
        ; => r0 = 0/1 for unblank/blank
        ;    r1 = DPMS state 0 = H & V        1 = V only
        ;                    2 = H only       3 = no syncs
        Push    "r2"
        LDR     r2, DevDesc
        LDR     r2, [r2, #HALDevice_Address]
        LDR     r14, BaseOfIOMD

        TEQ     r0, #0
        BEQ     %FT10

        ; Blank
        TST     r1, #1                  ; If HSyncs should be off, set maximal HSyncWidth
        LDRNE   r4, =Reg_HSyncWidth + ((1:SHL:14) -1)
        STRNE   r4, [r2]

        TST     r1, #2                  ; If VSyncs should be off, set maximal VSyncWidth
        LDRNE   r4, =Reg_VSyncWidth + ((1:SHL:13) -1)
        STRNE   r4, [r2]

        LDR     r4, SoftExternal
        AND     r14, r1, #3
        TEQ     r14, #3                 ; If both syncs off make them low (less power)
        BICEQ   r4, r4, #Ext_HSYNCbits :OR: Ext_VSYNCbits
        ORREQ   r4, r4, #Ext_InvertHSYNC :OR: Ext_InvertVSYNC
        BIC     r4, r4, #Ext_DACsOn     ; Always turn off the DACs
        STR     r4, [r2]

        LDRB    r4, [r14, #IOMD_VIDCR]  ; Disable video DMA
        BIC     r4, r4, #IOMD_VIDCR_Enable   
        B       %FT20
10
        ; Unblank
        LDR     r4, SoftExternal
        STR     r4, [r2]

        TST     r1, #1                  ; If HSyncs were turned off,
        LDRNE   r4, SoftHSyncWidth      ; then restore from soft copy
        STRNE   r4, [r2]

        TST     r1, #2                  ; If VSyncs were turned off,
        LDRNE   r4, SoftVSyncWidth      ; then restore from soft copy
        STRNE   r4, [r2]

        LDRB    r4, [r14, #IOMD_VIDCR]  ; Enable video DMA
        ORR     r4, r4, #IOMD_VIDCR_Enable   
20
        STRB    r4, [r14, #IOMD_VIDCR]
        MOV     r4, #0                  ; Claim
        Pull    "r2, pc"

        LTORG
        
                ^ 0
PtrWidth        # 1                     ; Unpadded width in bytes (2bpp)
PtrHeight       # 1                     ; Unpadded height in pixels
                # 2
PtrBuffLogical  # 4
PtrBuffPhysical # 4

GV_UpdatePointer ROUT
        ; => r0 = flags b0 = 0/1 to disable/enable pointer
        ;               b1 = 0/1 for no change/update
        ;    r1 = x
        ;    r2 = y
        ;    r3 = pointer shape structure
        ;
        ; The top left of the pointer bitmap is 0,0 and the top left of the screen
        ; is also 0,0. The 2bpp bitmap is padded to 32 pixels wide and aligned to >= 256 bytes.
        Push    "r1-r2, r5"
        LDR     r14, DevDesc
        LDR     r14, [r14, #HALDevice_Address]

        TST     r0, #1
        BEQ     %FT05

        ; Pointer on, clip and update x
        LDR     r4, PtrHAdjust
        ADDS    r1, r1, r4
        MOVLT   r1, #0                  ; x = x + adjust, clamped to 0

        CMP     r1, #1:SHL:14           ; VIDC has 14 bits for cursor start
        MOVGE   r1, #1:SHL:14
        SUBGE   r1, r1, #1

        ORR     r1, r1, #Reg_HCursorStart
        STR     r1, [r14]
        
        ; Pointer on, clip and update y
        LDRB    r4, [r3, #PtrHeight]
        LDR     r5, [r3, #PtrBuffPhysical]

        CMP     r2, #0                  ; If -ve y
        BICLT   r2, r2, #1              ; TEMP FUDGE - really ought to have two copies, one offset by 1 row
                                        ; because VIDC can only cope with 16 byte aligned data pointer
        ADDLT   r4, r4, r2              ; Reduce height
        SUBLT   r5, r5, r2, LSL #3      ; and advance data pointer (8 bytes per row) to clip pointer to 0
        MOVLT   r2, #0
        CMP     r4, #0
        BLE     %FT05                   ; Pointer off if clipped to oblivion

        LDR     r1, DisplayHeight
        SUB     r1, r1, r2              ; If display_height - y < pointer height
        CMP     r1, r4
        MOVLT   r4, r1                  ; Clip pointer height
        CMP     r4, #0
        BLE     %FT05                   ; Pointer off if clipped to oblivion

        LDR     r1, PtrVAdjust
        ADD     r2, r2, r1              ; y = y + adjust

        ORR     r1, r2, #Reg_VCursorStart
        STR     r1, [r14]

        ADD     r2, r2, r4              ; y = y + height
        ORR     r1, r2, #Reg_VCursorEnd
        STR     r1, [r14]

        LDR     r14, BaseOfIOMD         ; Repoint DMA
        STR     r5, [r14, #IOMD_CURSINIT]
        B       %FT10
05
        ; Pointer off
        MOV     r4, #Reg_VCursorStart :OR: 0
        STR     r4, [r14]
        MOV     r4, #Reg_VCursorEnd :OR: 0
        STR     r4, [r14]
10
        MOV     r4, #0                  ; Claim
        Pull    "r1-r2, r5, pc"

GV_SetDMAAddress ROUT
        ; => r0 = 0 set start address of current video display
        ;         1 set start address of total video buffer
        ;         2 set end address (exclusive) of total video buffer
        ;         3 set start address of VDU buffer (per OS_Byte 112)
        ;    r1 = physical address
        CMP     r0, #3
        BCS     %FT20                   ; Uninteresting reason, but claim it anyway

        CMP     r0, #1
        BEQ     %FT01
        BHI     %FT02
00
        ; DAG = 0 program VInit
        STR     r1, VidInitSoftCopy     ; Keep for VEnd check
        LDR     r4, VidEndSoftCopy
        CMP     r1, r4
        LDR     r4, BaseOfIOMD
        ORRCS   r0, r1, #IOMD_DMA_L_Bit ; VidInit >= VidEnd then set L bit
        STRCS   r0, [r4, #IOMD_VIDINIT]
        STRCC   r1, [r4, #IOMD_VIDINIT]
        MOV     r0, #0                  ; Preserve regs
        B       %FT20
01        
        ; DAG = 1 program VStart
        LDR     r4, BaseOfIOMD
        STR     r1, [r4, #IOMD_VIDSTART]
        B       %FT20
02
        ; DAG = 2 program VEnd
        Push    "r1-r2"
        LDRB    r2, MegsVRAM
        CMP     r2, #1
        MOVCC   r2, #16                 ; DRAM-only, subtract 16 (quadword)
        MOVEQ   r2, #SAMLength/2        ; 1 bank of VRAM, subtract 1/2 SAM
        MOVHI   r2, #SAMLength          ; 2 banks of VRAM, subtract 1/2 SAM * 2
        SUB     r1, r1, r2
        STR     r1, VidEndSoftCopy      ; Keep for VInit check
        LDR     r2, VidInitSoftCopy
        CMP     r2, r1
        ORRCS   r2, r2, #IOMD_DMA_L_Bit ; VidInit >= VidEnd then set L bit
        LDR     r4, BaseOfIOMD
        STR     r2, [r4, #IOMD_VIDINIT]
        STR     r1, [r4, #IOMD_VIDEND]
        Pull    "r1-r2"
20
        MOV     r4, #0
        Pull    "pc"
        
GV_DisplayFeatures
        ; <= r0 = features
        ;    r1 = colour depths supported
        ;    r2 = buffer alignment needed
        MOV     r0, #GVDisplayFeature_HardwareScroll+GVDisplayFeature_HardwarePointer+GVDisplayFeature_InterlaceWithProgressiveFramestore
        MOV     r1, #2_111111           ; 1/2/4/8/16/32 bpp
        MOV     r2, #32                 ; Alignment for DMA
        MOV     r4, #0                  ; Claim
        Pull    "pc"

GV_PixelFormats
        ; <= r0 = pointer to pixel format list
        ;    r1 = number of formats
        ADR     r0, PixelFormats
        MOV     r1, #(PixelFormats_End-PixelFormats)/GVPixelFormat_Size
        MOV     r4, #0
        Pull    "pc"

        ASSERT  GVPixelFormat_NColour = 0
        ASSERT  GVPixelFormat_ModeFlags = 4
        ASSERT  GVPixelFormat_Log2BPP = 8
        ASSERT  GVPixelFormat_Size = 12

PixelFormats
        DCD     1,0,0                   ; 1bpp
        DCD     3,0,1                   ; 2bpp
        DCD     15,0,2                  ; 4bpp
        DCD     255,ModeFlag_FullPalette,3 ; 8bpp
        DCD     4095,0,4                ; 4K
        DCD     65535,0,4               ; 32K
        DCD     65535,ModeFlag_64k,4    ; 64K
        DCD     -1,0,5                  ; 16M
PixelFormats_End

GV_ReadInfo ROUT
        Push    "r0-r4"
        CMP     r0, #(ReadInfo_TableEnd - ReadInfo_Table) / 4
        ADDLO   pc, pc, r0, LSL #2
        Pull    "r0-r4,pc"
ReadInfo_Table
        RIEntry Version
        RIEntry ModuleName
        RIEntry DriverName
        RIEntry HardwareName
        RIEntry ControlListItems
ReadInfo_TableEnd

        GBLA    VersionBCD
VersionBCD SETBCD Module_Version

VersionBCDVal DCD VersionBCD<<8

ControlListItems
        DCD     ControlList_Interlaced
        DCD     ControlList_ExtraBytes
        DCD     ControlList_NColour
        DCD     ControlList_ModeFlags
        DCD     ControlList_HiResMode
        DCD     ControlList_DACControl
        DCD     ControlList_RGBPedestals
        DCD     ControlList_ExternalRegister
        DCD     ControlList_HClockSelect        
        DCD     ControlList_Terminator
ControlListItems_End

RI_Version
        ADR     r3, VersionBCDVal
        MOV     r4, #4
        B       %FT10

RI_ModuleName
RI_DriverName
        ADRL    r3, VIDC20_TitleString
        B       %FT05

RI_HardwareName
        LDR     r3, DevDesc
        LDR     r3, [r3, #HALDevice_Description]
05
        MOV     r4, #0
06
        LDRB    r0, [r3, r4]
        ADD     r4, r4, #1
        TEQ     r0, #0
        BNE     %BT06
        B       %FT10

RI_ControlListItems
        ADRL    r3, ControlListItems
        MOV     r4, #ControlListItems_End-ControlListItems
10
        TEQ     r4, #0
        Pull    "r0-r4,pc", EQ
        CMP     r4, r2
        SUB     lr, r2, r4
        MOVLT   r2, r4
        STR     lr, [sp, #8]
20
        SUBS    r2, r2, #1
        LDRGEB  r0, [r3], #1
        STRGEB  r0, [r1], #1
        BGT     %BT20
        MOV     r4, #0
        STR     r4, [sp, #16]
        Pull    "r0-r4,pc"

        END
        
