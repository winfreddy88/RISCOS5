; Copyright 2012 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

GV_IICOp ROUT
        ; => r0 = b0-15 offset to start at
        ;         b16-23 base address of IIC device
        ;    r1 = pointer to buffer
        ;    r2 = number of bytes to transfer
        ; <= r0 = 0 or error
        ;    r1 = advanced by number of bytes transferred
        ;    r2 = number of bytes not transferred
        AND     r4, r0, #&FF:SHL:16
        CMP     r4, #&A1:SHL:16         
        MOVNE   r0, #IICStatus_NoACK
        BNE     %FT30                   ; Only reads of EDID please

        Push    "r5-r6"
        MOV     r4, r0, LSL #16
        MOV     r4, r4, LSR #16         ; Start point

        LDRB    r0, IdentityBits
        TST     r0, #3                  ; Only ID[0] is valid
        MOVEQ   r0, #2_1000             ; Separate syncs on H & V
        MOVNE   r0, #2_0101             ; Composite sync on H, no sync on green, serrations on V

        ADR     r5, BaseEDIDTable
10
        CMP     r4, #SizeOfEDIDData
        BCS     %FT20                   ; Hit ceiling

        LDRB    r6, [r5, r4]

        TEQ     r4, #&14                ; Mix monitor sync into video input definition byte
        ORREQ   r6, r6, r0

        TEQ     r4, #&7F                ; Adjust the table checksum
        SUBEQ   r6, r6, r0
        ANDEQ   r6, r6, #&FF

        STRB    r6, [r1], #1
        ADD     r4, r4, #1
        SUBS    r2, r2, #1
        BNE     %BT10
20
        MOV     r0, #IICStatus_Completed
        Pull    "r5-r6"
30
        ; Claim and return
        MOV     r4, #0
        Pull    "pc"

BaseEDIDTable
        DCQ     &00FFFFFFFFFFFF00       ; Header
        DCW     0, 0                    ; Undefined manufacturer and product
        DCD     0                       ; Empty serial number
        DCW     &04FF                   ; Model year 1994
        DCW     &0201                   ; Table format 1.2
        DCB     2_01110000              ; Analogue 0.7Vpp, black or pedestal, syncs ORR'd in later
        DCB     0, 0                    ; Undefined aspect
        DCB     120                     ; Gamma 2.2
        DCB     2_11111100              ; DPMS, undefined colour type, sRGB, no timing data
        DCB     0, 0, 0, 0, 0
        DCB     0, 0, 0, 0, 0           ; No chromacity data
        DCB     0, 0, 0                 ; No established timing
        DCW     &0101, &0101
        DCW     &0101, &0101
        DCW     &0101, &0101
        DCW     &0101, &0101            ; No standard timings
        DCB     0, 0, 0, &10            ; Dummy descriptor
        DCB     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DCB     0, 0, 0, &10            ; Dummy descriptor
        DCB     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DCB     0, 0, 0, &10            ; Dummy descriptor
        DCB     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DCB     0, 0, 0, &10            ; Dummy descriptor
        DCB     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DCB     0                       ; Extension flag
        DCB     &CC                     ; Checksum
        ASSERT  (.-BaseEDIDTable) = SizeOfEDIDData

DetectMonitorID ROUT
        ; => r12 = workspace
        ; <= r0  = 2_33221100 id bits encoded as below
        ;    r12 = preserved
        Push    "r1-r10, lr"

        LDR     r3, BaseOfIOMD
        LDRB    r0, IsMedusa
        MOVS    r0, r0
        LDREQ   r1, =IOMD_CLINES
        LDRNE   r1, =IOMD_MonitorType - IOMD_Base
        ADD     r3, r3, r1

        LDR     r0, DevDesc
        LDR     r0, [r0, #HALDevice_Address]

        ; Prepare normal (r1) and inverted HSYNC (r2)
        LDR     r1, =Reg_External + Ext_InvertCompVSYNC + Ext_DACsOn + Ext_ERegExt
        ORR     r2, r1, #Ext_InvertHSYNC

        ; Do normal
        STR     r1, [r0]                ; => normal
        LDRB    r4, [r3]                ; Read CLine base value

        AND     r4, r4, #&0F            ; only use bits 0..3
        MOV     r5, #0                  ; bits 0..3   = bits which have ever changed
                                        ; bits 4..7   = bits whose deinverted value was high last time
                                        ; bits 8..11  = bits whose deinverted value just went high-low
                                        ; bits 12..15 = bits whose deinverted value just went high-low-low
                                        ; bits 16..19 = bits which could be hsync
                                        ;  ie after every high-low there was low-low (after deinversion)
                                        ; bits 20..23 = bits which are definitely random
        MOV     r10, #&0F               ; used inside CheckBits
        MOV     r9, #256                ; number of iterations
20
        ; Iterate
        STR     r2, [r0]                ; => inverted
        LDRB    r6, [r3]                ; Read CLine inputs with inverted sync

        STR     r1, [r0]                ; => normal
        LDRB    r7, [r3]                ; Read CLine inputs with normal sync

        AND     r6, r6, #&0F
        AND     r7, r7, #&0F
        EOR     r8, r6, r4              ; Bits which have changed from steady value to inverted one
        ORR     r5, r5, r8              ; OR into mask of bits which have ever changed
        EOR     r8, r7, r4              ; Bits which have changed from steady value to normal one
        ORR     r5, r5, r8              ; OR into mask of bits which have ever changed
        EOR     r6, r6, #&0F            ; Deinvert inverted value
        BL      CheckBits               ; Call check routine with first value
        MOV     r6, r7
        BL      CheckBits               ; Call check routine with second value
        SUBS    r9, r9, #1
        BNE     %BT20

        ; Restore normality
        STR     r1, [r0]

        ; Process result
        BIC     r4, r4, r5              ; Don't put port value in for bits that have changed
        BIC     r5, r5, r5, LSR #16     ; Make bits 0..3 of r5 indicate random bits

        ANDS    r2, r4, #1              ; For each bit pair 00 => low, 01 => high, 10 => Hsync, 11 => random
        TST     r5, #1:SHL:16
        MOVNE   r2, #2:SHL:0
        TST     r5, #1
        MOVNE   r2, #3:SHL:0

        TST     r4, #2
        ORRNE   r2, r2, #1:SHL:2
        TST     r5, #2:SHL:16
        ORRNE   r2, r2, #2:SHL:2
        TST     r5, #2
        ORRNE   r2, r2, #3:SHL:2

        TST     r4, #4
        ORRNE   r2, r2, #1:SHL:4
        TST     r5, #4:SHL:16
        ORRNE   r2, r2, #2:SHL:4
        TST     r5, #4
        ORRNE   r2, r2, #3:SHL:4

        TST     r4, #8
        ORRNE   r2, r2, #1:SHL:6
        TST     r5, #8:SHL:16
        ORRNE   r2, r2, #2:SHL:6
        TST     r5, #8
        ORRNE   r2, r2, #3:SHL:6
90
        MOV     r0, r2
        Pull    "r1-r10, pc"

CheckBits ROUT
        AND     r8, r10, r5, LSR #12            ; Bits that were H-L-L
        BIC     r8, r8, r6                      ; Bits that are H-L-L-L
        ORR     r5, r5, r8, LSL #16             ; OR into bits that could be hsync
        ORR     r8, r5, r5, LSR #4
        AND     r8, r6, r8, LSR #8              ; Bits that just went H-L-H or H-L-L-H
        AND     r8, r8, r5, LSR #16             ; Bits that just went H-L-H or H-L-L-H and could have been hsync
        ORR     r5, r5, r8, LSL #20             ; They're definitely random now
        BIC     r5, r5, r8, LSL #16             ; and they're definitely not hsync now
        AND     r8, r5, #&FF:SHL:4              ; Get H bits, and H-L bits
        BIC     r8, r8, r6, LSL #4              ; Knock out bits that were H and are now H
        BIC     r8, r8, r6, LSL #8              ; Knock out bits that were H-L and are now H
        BIC     r5, r5, #&FF:SHL:8              ; Knock out all H-L and H-L-L bits
        ORR     r5, r5, r8, LSL #4              ; Put in new H-L and H-L-L bits
        BIC     r5, r5, #&F:SHL:4               ; Knock out old H bits
        ORR     r5, r5, r6, LSL #4              ; Put in new H bits
        BIC     r5, r5, r5, LSR #20             ; Knock out H bits if we know it's random
        MOV     pc, lr

        END
        