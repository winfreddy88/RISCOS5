; Copyright 2012 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

VSyncHandler
        Push    "r4, r9, lr"

      [ debugsy
        LDR     r1, VSyncCounts
        ADD     r1, r1, #1
        STR     r1, VSyncCounts
      ]

        ; Prepare r4 for the GraphicsV call before r12 gets trashed
        LDRB    r4, GVinstance
        MOV     r4, r4, LSL #24
        ORR     r4, r4, #GraphicsV_VSync

        ; Clear that interrupt (NB. HAL call might trash r12)
        LDR     r0, DevDesc
        LDR     r0, [r0, #HALDevice_Device]
        LDR     r9, ClearVSyncSB
        MOV     lr, pc
        LDR     pc, ClearVSyncFn

        ; Do flyback side effects
        MRS     r9, CPSR
        ASSERT  SVC32_mode :OR: IRQ32_mode = SVC32_mode
        ORR     lr, r9, #SVC32_mode
        MSR     CPSR_c, lr
        Push    "r9, lr"
        MOV     r9, #GraphicsV
        SWI     XOS_CallAVector
        Pull    "r9, lr"
        MSR     CPSR_c, r9
        
        Pull    "r4, r9, pc"

        END
