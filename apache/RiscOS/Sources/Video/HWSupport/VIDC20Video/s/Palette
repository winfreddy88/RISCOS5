; Copyright 2012 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

GV_WritePaletteEntry_AltEntry
        Push    "lr"

GV_WritePaletteEntry ROUT
        ; => r0 = type (0 = normal, 1 = border, 2 = pointer)
        ;    r1 = palette entry 0xBBGGRRSS
        ;    r2 = index
        Push    "r5"
        AND     r4, r1, #&F0            ; Effective 0x000000S0
        MOV     r14, r1, LSR #8
        ORR     r14, r14, r4, LSL #20   ; VIDC20 ordering 0x0SBBGGRR
        
        LDR     r5, DevDesc
        LDR     r5, [r5, #HALDevice_Address]

        CMP     r0, #1
        BCC     %FT00
        BEQ     %FT01
02
        ; 2 = pointer
        SUB     r4, r2, #1
        CMP     r4, #3
        BCS     %FT20                   ; Colours 1...3 only (0 is transparent)
        ADD     r14, r14, r4, LSL #28   ; Index in bits 28/29
        ADD     r14, r14, #Reg_PointerColour
        STR     r14, [r5]
        B       %FT20
01
        ; 1 = border
        CMP     r2, #0
        BHI     %FT20
        ADD     r14, r14, #Reg_BorderColour
        STR     r14, [r5]
        B       %FT20
00
        ; 0 = normal
        CMP     r2, #255
        BHI     %FT20

        LDRB    r4, PaletteMunge
        ADD     pc, pc, r4, LSL #2
        NOP
 
        B       WriteNormalPaletteEntry
        B       Write4KPaletteEntry
        B       Write32KPaletteEntry
        B       Write64KPaletteEntry

WriteNormalPaletteEntry
        ADR     r4, SoftPalette
        STR     r14, [r4, r2, LSL #2]

        CMP     r2, #0
        MOVEQ   r4, #-1                 ; Force write to Reg_PaletteAddress
        LDRNE   r4, NextAutoIndex

        TEQ     r4, r2                  ; Is auto increment in sync?
        ADDNE   r4, r2, #Reg_PaletteAddress
        STRNE   r4, [r5]
        ASSERT  Reg_PaletteEntries = 0
        STR     r14, [r5]

        ADD     r4, r2, #1
        AND     r4, r4, #&FF
        STR     r4, NextAutoIndex       ; Track hardware auto increment
20
        MOV     r4, #0
        Pull    "r5, pc"

        ; In 16bpp modes the VIDC20 hardware performs the palette/gamma lookup
        ; using the following logic:
        ;
        ; The red channel is indexed using bits 0-7 of the pixel
        ; The green channel is indexed using bits 4-11
        ; The blue channel is indexed using bits 8-15
        ; The supremacy channel is indexed using bits 12-15
        ;
        ; This allows for some flexibility in terms of colour channels (4K, 32K
        ; and 64K are all supported) but requires some extra work at our end
        ; to set things up so that decode works as expected 
Write4KPaletteEntry
        ADR     r4, MungeTable4K
        B       WriteMungePaletteEntry

Write32KPaletteEntry
        ADR     r4, MungeTable32K
        B       WriteMungePaletteEntry

Write64KPaletteEntry
        ADR     r4, MungeTable64K
        ; Fall through...

WriteMungePaletteEntry ROUT
        Push    "r0-r3, r6-r8"
        ; In:
        ;       r0 = 0 if GV_WritePaletteEntry
        ;       r2 = palette index
        ;       r4 -> munge table
        ;       r5 = VIDC registers
        ;       r14 = desired 0x0SBBGGRR value
        ; Stack must contain R5+LR (if r0=0) or just LR (if r0!=0)
        ; Out:
        ;       r4 = 0
        ;
        ; We're given 256 entries as input, but we want to have fewer entries as
        ; output. Check if the top bits of the palette index match the lower,
        ; this should reduce things using a roughly even distribution.
        ADR     r7, SoftPalette
        MOV     r6, #-1
10
        LDRB    r0, [r4], #1
        LDRB    r1, [r4], #1
        AND     r3, r2, r0              ; Mask out the N high bits
        CMP     r1, #1
        ORRNE   r8, r3, r3, LSR r1      ; And replicate down
        CMPEQ   r8, #128
        MOVEQ   r8, #255                ; Or expand &80 to &FF for 1 bit data
        LDRB    r1, [r4], #1
        CMP     r8, r2
        BNE     %FT30                   ; Skip this channel if the index isn't valid
        ; Good, we want to write this entry
        ; Except, we want to write it to N different registers
        MOV     r0, r0, LSR r1
        MOV     r6, #0
20
        ORR     r8, r6, r3, LSR r1
        STRB    r14, [r7, r8, LSL #2]   ; Update softcopy
        ADD     r6, r6, #1              ; Increment index
        TST     r6, r0
        ADDNE   r6, r6, r0              ; Skip the bits which are used to decode the channel
        CMP     r6, #&100
        BLO     %BT20
30
        MOV     r14, r14, LSR #8
        ADD     r7, r7, #1
        TST     r7, #3
        BNE     %BT10

        ; The palette update will have touched a lot of registers. The easiest
        ; way to apply the change is to flush all the registers to the hardware.

        ; Skip register update if this wasn't a single entry write
        Pull    "r0"
        MOV     r4, #0
        CMP     r0, #0
        Pull    "r1-r3, r6-r8, pc", NE

        CMP     r6, #-1                 ; Did we actually update anything?
        BLNE    FlushSoftPalette

        Pull    "r1-r3, r6-r8"
        Pull    "r5, pc"

FlushSoftPalette ROUT
        ; => r5 = VIDC registers
        ; <= r1-r3 corrupt
        ADR     r3, SoftPalette
        MOV     r2, #Reg_PaletteAddress
        STR     r2, [r5]
        MOV     r2, #0
        STR     r2, NextAutoIndex
50
        LDR     r1, [r3], #4
        ADD     r2, r2, #1
        ASSERT  Reg_PaletteEntries = 0
        STR     r1, [r5]
        CMP     r2, #&100
        BNE     %BT50
        MOV     pc, lr


GV_WritePaletteEntries ROUT
        ; => r0 = type (0 = normal, 1 = border, 2 = pointer)
        ;    r1 = array of palette entries 0xBBGGRRSS
        ;    r2 = first index
        ;    r3 = number of entries to write
        CMP     r3, #0
        MOVEQ   r4, #0
        Pull    "pc", EQ

        Push    "r1-r3, r5-r6"

        ADDS    r14, r2, r3
        BCS     %FT40
        CMP     r14, #256
        BHI     %FT40                   ; More than there are entries in the chip

        CMP     r0, #0
        BNE     %FT20

        ; 0 = normal
        LDRB    r6, PaletteMunge
        ADD     pc, pc, r6, LSL #2
        NOP
   
        B       WriteNormalPaletteEntries
        B       Write4KPaletteEntries
        B       Write32KPaletteEntries
        B       Write64KPaletteEntries

WriteNormalPaletteEntries
        LDR     r6, DevDesc
        LDR     r6, [r6, #HALDevice_Address]

        CMP     r2, #0
        MOVEQ   r4, #-1                 ; Force write to Reg_PaletteAddress
        LDRNE   r4, NextAutoIndex

        TEQ     r4, r2                  ; Is auto increment in sync?
        ADDNE   r4, r2, #Reg_PaletteAddress
        STRNE   r4, [r6]

        ADD     r4, r2, r3
        AND     r4, r4, #&FF
        STR     r4, NextAutoIndex       ; Track hardware auto increment

        MOV     r5, r1
        ADR     r14, SoftPalette
        ADD     r2, r14, r2, LSL #2 
10
        LDR     r1, [r5], #4            ; Palette entry
        AND     r14, r1, #&F0           ; Effective 0x000000S0
        MOV     r1, r1, LSR #8
        ORR     r1, r1, r14, LSL #20    ; VIDC20 ordering 0x0SBBGGRR
        STR     r1, [r2], #4
        ASSERT  Reg_PaletteEntries = 0
        STR     r1, [r6]
        SUBS    r3, r3, #1
        BNE     %BT10
        B       %FT40
20
        ; 1 = border
        ; 2 = pointer
        MOV     r5, r1
30
        LDR     r1, [r5], #4            ; Palette entry
        BL      GV_WritePaletteEntry_AltEntry
        ADD     r2, r2, #1
        SUBS    r3, r3, #1
        BNE     %BT30
40
        MOV     r4, #0                  ; Claim
        Pull    "r1-r3, r5-r6, pc"

Write4KPaletteEntries
        ADR     r0, MungeTable4K
        B       WriteMungePaletteEntries

Write32KPaletteEntries
        ADR     r0, MungeTable32K
        B       WriteMungePaletteEntries

Write64KPaletteEntries
        ADR     r0, MungeTable64K
        ; Fall through...

WriteMungePaletteEntries ROUT
        ; Just call WriteMungePaletteEntry lots of times
        ; But use R0 != 0 to prevent register flush until the end
        LDR     r5, DevDesc
        LDR     r5, [r5, #HALDevice_Address]
10
        LDR     r14, [r1], #4
        MOV     r4, r0
        AND     r6, r14, #&F0           ; Effective 0x000000S0
        MOV     r14, r14, LSR #8
        ORR     r14, r14, r6, LSL #20   ; VIDC20 ordering 0x0SBBGGRR
        Push    "pc"
        B       WriteMungePaletteEntry
        NOP                             ; PC+8 or PC+12
        SUBS    r3, r3, #1
        ADD     r2, r2, #1
        BNE     %BT10

        ; All writes performed, now flush the registers
        BL      FlushSoftPalette

        MOV     r0, #0
        MOV     r4, #0
        Pull    "r1-r3, r5-r6, pc"

        MACRO
        MungeEntry  $channel,$lowbit,$count
        DCB     (&FF00>>$count) :AND: &FF ; Significant high bits from palette index
        DCB     $count ; Bit count
        DCB     (8-$count)+MungeShift_$channel-$lowbit ; Right shift amount to convert to VIDC palette index
        MEND

MungeShift_R * 0 ; Red channel indexed using bits 0-7 of colour
MungeShift_G * 4 ; 4-11
MungeShift_B * 8 ; 8-15
MungeShift_S * 12 ; 12-15

MungeTable4K
        MungeEntry R,0,4
        MungeEntry G,4,4
        MungeEntry B,8,4
        MungeEntry S,12,4

MungeTable32K
        MungeEntry R,0,5
        MungeEntry G,5,5
        MungeEntry B,10,5
        MungeEntry S,15,1

MungeTable64K
        MungeEntry R,0,5
        MungeEntry G,5,6
        MungeEntry B,11,5
        MungeEntry S,0,0

        ALIGN


GV_ReadPaletteEntry ROUT
        ; => r0 = type (0 = normal, 1 = border, 2 = pointer)
        ;    r1 = palette entry 0xBBGGRRSS
        ;    r2 = index
        ; <= r1 = effective 0xBBGGRRSS
        CMP     r0, #0

        ; 1 = border
        ; 2 = pointer
        BICHI   r1, r1, #&0F            ; Effective 0xBBGGRRS0
        BHI     %FT10

        ; 0 = normal
        ; VIDC20 has only 4 bits of supremacy
        ; Index 0...15 have individual supremacy
        ;       16...255 use those from index 0
        CMP     r2, #16
        LDRCS   r4, SoftPalette
        MOVCC   r4, r1, LSL #20         ; SoftPalette uses 0x0SBBGGRR
        AND     r4, r4, #&0F000000      ; Effective 0x0S000000
        BIC     r1, r1, #&FF            ; Effective 0xBBGGRR00
        ORR     r1, r1, r4, LSR #20
10
        ; Claim and return
        MOV     r4, #0
        Pull    "pc"

        END
        