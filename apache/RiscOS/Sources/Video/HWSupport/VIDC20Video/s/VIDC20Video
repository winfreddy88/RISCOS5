; Copyright 2012 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:ModHand
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors
        GET     Hdr:GraphicsV
        GET     Hdr:HALEntries
        GET     Hdr:HALDevice
        GET     Hdr:Proc
        GET     Hdr:MsgTrans
        GET     Hdr:NDRDebug
        GET     Hdr:IO.IOMD
        GET     Hdr:VduExt
        GET     Hdr:VIDCList

        GET     VersionASM
        
                ; Switches
                GBLL debug
                GBLL debugvd            ; Video start
                GBLL debugvm            ; Vet mode
                GBLL debugrg            ; Register set
                GBLL debugsy            ; Sync
debug           SETL {FALSE}
debugvd         SETL debug :LAND: {FALSE}
debugvm         SETL debug :LAND: {TRUE}
debugrg         SETL debug :LAND: {TRUE}
debugsy         SETL debug :LAND: {FALSE}

                GBLL DontUseVCO
DontUseVCO      SETL {FALSE}

                GBLL VCOStartFix
VCOStartFix     SETL {TRUE}

                ; Workspace
                ^ 0, wp
WSStart         # 0
DevDesc         # 4                     ; Hardware access
BaseOfIOMD      # 4
ClearVSyncFn    # 4
ClearVSyncSB    # 4
VidInitSoftCopy # 4                     ; IOMD DMA
VidEndSoftCopy  # 4                     
SoftHSyncWidth  # 4                     ; Register soft copies
SoftVSyncWidth  # 4
SoftControl     # 4
SoftExternal    # 4
SoftFSyn        # 4
VSyncCounts     # 4                     ; General info
NextAutoIndex   # 4
PtrHAdjust      # 4
PtrVAdjust      # 4
DisplayHeight   # 4
MegsVRAM        # 1
IsMedusa        # 1
IdentityBits    # 1
GVinstance      # 1
PaletteMunge    # 1
                # 3
SoftPalette     # 256*4                 ; Full copy of main palette/gamma table
WSStop          # 0
WSSize          * (WSStop - WSStart)

ReqdAPIMajor    * 0                     ; Version understood
NullFunction    * 0                     ; Unimplemented
SizeOfEDIDData  * 128                   ; Table of fake EDID data

Munge_None      * 0
Munge_4K        * 1
Munge_32K       * 2
Munge_64K       * 3

        AREA    |VIDC20Video$$Code|, CODE, READONLY, PIC

Module_BaseAddr
        DCD     0                                       ; No start
        DCD     VIDC20_Init - Module_BaseAddr
        DCD     VIDC20_Final - Module_BaseAddr
        DCD     0                                       ; No services we recognise
        DCD     VIDC20_TitleString - Module_BaseAddr
        DCD     VIDC20_HelpString - Module_BaseAddr
        DCD     0
        DCD     0, 0, 0, 0                              ; No SWIs
      [ :LNOT: No32bitCode
        DCD     0                                       ; No messages
        DCD     VIDC20_ModuleFlags - Module_BaseAddr
      ]

VIDC20_TitleString
        DCB     "VIDC20Video", 0

VIDC20_HelpString
        DCB     "VIDC20Video", 9
        DCB     "$Module_HelpVersion"
        DCB     0
        ALIGN

      [ :LNOT: No32bitCode
VIDC20_ModuleFlags
        DCD ModuleFlag_32bit
      ]

      [ debug
        InsertNDRDebugRoutines
      ]

        GET     Regs.s
        GET     GVect.s
        GET     Modes.s
        GET     Palette.s
        GET     MonitorID.s
        GET     VSync.s

VIDC20_Init ROUT
        Push    "r8-r9, r12, lr"
        MOV     r1, #0
10
        LDR     r0, =(HALDeviceType_Video + HALDeviceVideo_VDU) :OR: (ReqdAPIMajor:SHL:16)
        MOV     r8, #OSHW_DeviceEnumerate
        SWI     XOS_Hardware
        Pull    "r8-r9, r12, pc", VS

        CMP     r1, #-1                 ; Enumerated with no matches
        BEQ     %FT95

        LDRB    r3, [r2, #HALDevice_ID + 0]
        LDRB    r4, [r2, #HALDevice_ID + 1]
        ORR     r4, r3, r4, LSL #8
        TEQ     r4, #HALDeviceID_VDU_VIDC20
        BNE     %BT10                   ; Want VIDC

        LDR     r3, [r2, #HALDevice_Device]
        CMP     r3, #-1
        BEQ     %BT10                   ; Want an interrupt

        MOV     r4, r2
        Debug   vd, "Device descriptor at", r4
        LDR     r2, [r4, #HALDevice_Description]
        DebugS  vd, "Is", r2

        MOV     r0, #9                  ; Read controller base
        MOV     r1, #4:SHL:8            ; SSpace
        SWI     XOS_Memory
        Pull    "r8-r9, r12, pc", VS
        MOVS    r5, r1
        Debug   vd, "IOMD at", r5
        BEQ     %FT95

        LDR     r2, [r12]
        CMP     r2, #0
        BNE     %FT20                   ; Already got workspace

        MOV     r0, #ModHandReason_Claim
        LDR     r3, =WSSize
        SWI     XOS_Module
        Pull    "r8-r9, r12, pc", VS

        STR     r2, [r12]
20
        MOV     r12, r2

        ; Workspace init
        STR     r4, DevDesc
        STR     r5, BaseOfIOMD
        MOV     r1, #0
        STR     r1, ClearVSyncFn
      [ debugsy
        STR     r1, VSyncCounts
      ]
        STR     r1, VidInitSoftCopy
        STR     r1, VidEndSoftCopy
        STRB    r1, PaletteMunge
        ADR     r3, SoftPalette
        MOV     r14, #256
30
        STR     r1, [r3], #4
        SUBS    r14, r14, #1
        BNE     %BT30     
        MOV     r1, #-1
        STR     r1, NextAutoIndex

        ; Which IOMD based platform is it
        LDRB    r3, [r5, #IOMD_ID0]
        LDRB    r14, [r5, #IOMD_ID1]
        ORR     r3, r3, r14, LSL #8
        LDR     r14, =IOMD_Original
        TEQ     r3, r14
        MOVNE   r14, #0
        MOVEQ   r14, #1
        STRB    r14, IsMedusa           ; Otherwise it's 7500/7500FE

        ; Read VRAM detected
        MOV     r0, #8:OR:(2:SHL:8)
        SWI     XOS_Memory
        MUL     r1, r2, r1              ; Pages * page size
        MOV     r1, r1, LSR #20         ; In megs
        STRB    r1, MegsVRAM

        ; Activate
        LDR     r1, [r4, #HALDevice_Activate]
        TEQ     r1, #NullFunction
        MOVEQ   r0, #0
        MOVNE   r0, r4
        MOVNE   lr, pc
        MOVNE   pc, r1
        MOVS    r0, r0                  ; Check for boolean success
        BEQ     %FT90
        Debug   vd, "Activated OK"

        ; Inspect the monitor id
        BL      DetectMonitorID
        STRB    r0, IdentityBits
        Debug   vd, "Monitor id", r0

        ; Request a GraphicsV driver number
        MOV     r0, #ScreenModeReason_RegisterDriver
        MOV     r1, #0
        ADRL    r2, VIDC20_TitleString
        SWI     XOS_ScreenMode
        BVS     %FT90
        STRB    r0, GVinstance
        Debug   vd, "GraphicsV driver #", r0

        ; Claim the corresponding device vector
        LDR     r0, [r4, #HALDevice_Device]
        ADR     r1, VSyncHandler
        MOV     r2, r12
        SWI     XOS_ClaimDeviceVector
        BVS     %FT87

        ; Claim GraphicsV
        MOV     r0, #GraphicsV
        ADRL    r1, GraphicsVHandler
        SWI     XOS_Claim
        BVS     %FT85

        ; Keep fast copy of VSync clear routine address
        LDR     r0, [r4, #HALDevice_Device]
        MOV     r8, #OSHW_LookupRoutine
        MOV     r9, #EntryNo_HAL_IRQClear
        SWI     XOS_Hardware
        STRVC   r0, ClearVSyncFn
        STRVC   r1, ClearVSyncSB
        Debug   vd, "HAL_IRQClear at", r0, r1
        
        ; Enable it
        LDRVC   r0, [r4, #HALDevice_Device]
        MOVVC   r8, #OSHW_CallHAL
        MOVVC   r9, #EntryNo_HAL_IRQEnable
        SWIVC   XOS_Hardware
        Debug   vd, "Claimed everything, setting MODE"

        ; Let the OS know that we're ready
        MOVVC   r0, #ScreenModeReason_StartDriver
        LDRVCB  r1, GVinstance
        SWIVC   XOS_ScreenMode

        Pull    "r8-r9, r12, pc", VC
80
        ; Free GraphicsV
        MOV     r0, #GraphicsV
        ADRL    r1, GraphicsVHandler
        MOV     r2, r12
        SWI     XOS_Release
85
        ; Free device
        LDR     r0, [r4, #HALDevice_Device]
        ADR     r1, VSyncHandler
        SWI     XOS_ReleaseDeviceVector
87
        ; Free GraphicsV driver number
        MOV     r0, #ScreenModeReason_DeregisterDriver
        LDRB    r1, GVinstance
        SWI     XOS_ScreenMode
90
        ; Free workspace
        MOV     r0, #ModHandReason_Free
        SWI     XOS_Module

        LDR     r0, [sp, #2*4]
        MOV     r1, #0
        STR     r1, [r0]                ; Zap private word
95
        ; Error exit
        ADR     r0, ErrorBlock_BadHard
        MOV     r1, #0
        MOV     r2, #0
        SWI     XMessageTrans_ErrorLookup
        Pull    "r8-r9, r12, pc"

        MakeErrorBlock BadHard

VIDC20_Final
        Push    "r10, lr"
        MOV     r10, r12                ; Keep address of the private word

        LDR     r12, [r12]
        CMP     r12, #0
        Pull    "r10, pc", EQ

        ; Tell the OS we're leaving
        MOV     r0, #ScreenModeReason_StopDriver
        LDRB    r1, GVinstance
        SWI     XOS_ScreenMode

        ; Deactivate
        LDR     r4, DevDesc
        LDR     r1, [r4, #HALDevice_Deactivate]
        TEQ     r1, #NullFunction
        MOVNE   r0, r4
        MOVNE   lr, pc
        MOVNE   pc, r1
        Debug   vd, "Deactivated OK"

        ; Set up stack like an error exit to initialisation would have
        Push    "r8-r9, r10, lr"
        STR     pc, [sp, #3*4]
        B       %BT80
        NOP                             ; PC+8 or PC+12
        CLRV
        Pull    "r10, pc"

        END
