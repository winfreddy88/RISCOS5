/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "swis.h"

#include "Global/FileTypes.h"
#include "Global/Sprite.h"
#include "Interface/HighFSI.h"

#include "main.h"

static _kernel_oserror *squash_alloc_fail(void)
{
    /* Global 'out of memory' message lookup */
    return _swix(MessageTrans_ErrorLookup, _INR(0,2), "    NoMem", 0, 0);
}

_kernel_oserror *squash_decompress_file(const char *fname)
{
    _kernel_oserror *err;
    int fhandle, object, type;
    int input_size, work_size;
    int header[5];
    char *input, *workspace;
  
    /* Get info, want a sprite or a squash file */
    err = _swix(OS_File, _INR(0,1)|_OUT(0)|_OUT(4)|_OUT(6),
                OSFile_ReadWithType, fname,
                &object, &input_size, &type);
    if (err != NULL) return err;
    if (object != object_file) type = -1;
  
    switch (type)
    {
      case FileType_Sprite:
          /* Uncompressed sprite */
          sprites = malloc(input_size + SpriteAreaCBsize);
          if (sprites == NULL) return squash_alloc_fail();
          *(int *)(saEnd    + (int)sprites) = input_size + SpriteAreaCBsize;
          *(int *)(saNumber + (int)sprites) = 0;
          *(int *)(saFirst  + (int)sprites) = saExten;
          *(int *)(saFree   + (int)sprites) = saExten;
          return _swix(OS_SpriteOp, _INR(0,2), 256 + SpriteReason_LoadSpriteFile, sprites, fname);
  
      case FileType_Squash:
          /* Squashed one */
          err = _swix(OS_Find, _INR(0,1)|_OUT(0),
                      open_read | open_mustopen | open_nodir, fname,
                      &fhandle);
          if (err != NULL) return err;
    
          /* Pre-read the header to see how big the original sprites were */
          header[1] = 0;
          err = _swix(OS_GBPB, _INR(0,3), OSGBPB_ReadFromPTR, fhandle, header, sizeof(header));
          _swix(OS_Find, _INR(0,1), OSFind_Close, fhandle);
          if (err != NULL) return err;
          err = _swix(Squash_Decompress, _INR(0,1)|_OUT(0), 1<<3, -1, &work_size);
          if (err != NULL) return err;
          sprites = malloc(header[1] + SpriteAreaCBsize);
          input = malloc(input_size);
          workspace = malloc(work_size);
          if ((sprites == NULL) || (input == NULL) || (workspace == NULL))
          {
              free(sprites);
              free(input);
              free(workspace);
              return squash_alloc_fail();
          }
    
          /* If there's enough memory for the output sprites, there must be enough for the
           * input compressed version too, so just load the whole lot in one.
           */
          err = _swix(OS_File, _INR(0,3), OSFile_Load, fname, input, 0);
          if (err == NULL)
          {
              *(int *)(saEnd + (int)sprites) = header[1] + SpriteAreaCBsize;
              err = _swix(Squash_Decompress, _INR(0,5), 1<<2, workspace,
                          &input[sizeof(header)], input_size - sizeof(header),
                          sprites + 1, header[1] + SpriteAreaCBsize - sizeof(int));
          }
          free(input);
          free(workspace);
          if (err != NULL) free(sprites);
          return err;
  
      default:
          /* Dunno */
          return _swix(OS_File, _INR(0,2), OSFile_MakeError, fname, object);
    }
}
