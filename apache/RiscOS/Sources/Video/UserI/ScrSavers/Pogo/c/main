/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*---------------------------------------------------------------------------*/
/* File:    c.main                                                           */
/* Purpose: Pogo stick screen saver.                                         */
/* Author:  Mark Moir                                                        */
/* History: 14-Nov-97: RML: Shell created.                                   */
/*          20-Feb-98: MM : Pogo stick version.                              */
/*---------------------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "Global/OsBytes.h"
#include "Global/Sprite.h"
#include "Global/VduExt.h"

#include "wimp.h"
#include "wimplib.h"
#include "swis.h"
#include "toolbox.h"
#include "event.h"
#include "window.h"

#include "main.h"
#include "squash.h"
#include "saver.h"

#define POGO_SQUASH_FLAG        10000 /* Hit the ground, the spring is squashed */
#define COORDS_MAX              (sizeof(coords) / sizeof(coords[0]))
#define COORD_GAIN_X            2
#define COORD_GAIN_Y            3

static MessagesFD messages_desc;
static IdBlock    idb;
static int        screenw, screenh;
static int        xeig, yeig;
static int        spr_height, spr_width;
typedef struct    { int x, y; } coord_t;
static coord_t    coords[] = { { 0,5+POGO_SQUASH_FLAG }, { 0,19+POGO_SQUASH_FLAG },
                               { 1,33 }, { 1,48 },
                               { 2,62 }, { 2,75 } , { 2,85 },
                               { 3,93 }, { 3,99 },
                               { 4,103 }, { 4,106 },
                               { 5,107 }, { 5,106 },
                               { 4,103 }, { 4,99 },
                               { 3,93 }, { 3,85 },
                               { 2,75 }, { 2,62 }, { 2,48 },
                               { 1,33 },
                               { 0,19+POGO_SQUASH_FLAG }, { 0,5+POGO_SQUASH_FLAG }
                             };
static int        x_pos, y_pos, c_pos, x_calc, last_x, last_y;
static int        delay_start, delay_length;
static enum       { LEFT_TO_RIGHT, RIGHT_TO_LEFT } animation;
static int        saver_initialised = 0;
int              *sprites = 0;

static int check_time(void);
static void unplot_sprite(int x, int y);
static void plot_sprite(int x, int y, const char *name);
static void pogo_stick_animation(void);
static void set_up_starts(void);

/*---------------------------------------------------------------------------*
 * program_exit                                                              *
 *                                                                           *
 * Finished with this plug-in, so exit.                                      *
 *---------------------------------------------------------------------------*/

void program_exit(void)
{
    saver_exit();
    exit(0);
}


/*---------------------------------------------------------------------------*
 * null_event                                                                *
 *                                                                           *
 * Null event handler - we do all our animation etc. here.                   *
 *---------------------------------------------------------------------------*/

int null_event(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    if (!saver_initialised)
    {
        saver_error_trap(event_set_mask(Wimp_Poll_PollWord), 0);
        saver_initialised = 1;
    }
  
    if (check_time())
    {
        pogo_stick_animation();
    }
  
    return 1;
}


/*---------------------------------------------------------------------------*
 * pogo_stick_animation                                                      *
 *                                                                           *
 * Displays the frames of animation at the current position                  *
 *---------------------------------------------------------------------------*/

static void pogo_stick_animation(void)
{
    int temp_x, temp_y;
  
    if (animation == LEFT_TO_RIGHT)
    {
        /* Calculate the new coordinates from current position */
        x_calc += (coords[c_pos].x * COORD_GAIN_X);
        temp_x = x_calc;
        temp_y = y_pos + (coords[c_pos].y * COORD_GAIN_Y);
    
        saver_write_bank();
        unplot_sprite(last_x, last_y);

        /* Check the y coordinate to see if we want to use the squashed bottom of the
           pogo stick rather than the extended one.  Simple way of flagging the sprite to
           use */
        if (temp_y >= POGO_SQUASH_FLAG)
        {
            temp_y -= (COORD_GAIN_Y * POGO_SQUASH_FLAG);
            plot_sprite(temp_x, temp_y, "rights");
        }
        else
        {
            plot_sprite(temp_x, temp_y, "right");
        }
        saver_read_bank();

        c_pos++;
        if (c_pos >= COORDS_MAX)
        {
            x_pos = temp_x;
            x_calc = x_pos;
            if (x_pos > screenw)
            {
                animation = RIGHT_TO_LEFT;
                set_up_starts();
                if (y_pos > screenh)
                  y_pos = saver_rnd(screenh) / 2;
            }
            c_pos = 0;
        }
    }
    else
    {
        /* Calculate the new coordinates from current position */
        x_calc -= (coords[c_pos].x * COORD_GAIN_X);
        temp_x = x_calc;
        temp_y = y_pos + (coords[c_pos].y * COORD_GAIN_Y);

        saver_write_bank();
        unplot_sprite(last_x, last_y);
    
        /* Check the y coordinate to see if we want to use the squashed bottom of the
           pogo stick rather than the extended one.  Simple way of flagging the sprite to
           use */
        if (temp_y >= POGO_SQUASH_FLAG)
        {
            temp_y -= (COORD_GAIN_Y * POGO_SQUASH_FLAG);
            plot_sprite(temp_x, temp_y, "lefts");
        }
        else
        {
            plot_sprite(temp_x, temp_y, "left");
        }
        saver_read_bank();
    
        c_pos--;
        if (c_pos < 0)
        {
            x_pos = temp_x;
            x_calc = x_pos;
            if (x_pos < -200)
            {
                animation = LEFT_TO_RIGHT;
                set_up_starts();
                if (y_pos > screenh)
                  y_pos = saver_rnd(screenh) / 2;
            }
            c_pos = COORDS_MAX - 1;
        }
    }

    /* Keep the last plot point so it can be unplotted. Strictly speaking this describes
     * where to unplot the one in the other bank, but the movement is small enough that
     * this is near enough.
     */
    last_x = temp_x;
    last_y = temp_y;
}


/*---------------------------------------------------------------------------*
 * unplot_sprite                                                             *
 *                                                                           *
 * Plots a black rectangle where the last pogo was drawn                     *
 *---------------------------------------------------------------------------*/

static void unplot_sprite(int x, int y)
{
    /* Pick black */
    _swix(ColourTrans_SetGCOL, _IN(0)|_IN(3)|_IN(4), 0, 0, 0);

    /* Rectangle fill */
    _swix(OS_Plot, _INR(0,2), OSPlot_Move,          x, y);
    _swix(OS_Plot, _INR(0,2), OSPlot_RectangleFill, spr_width, spr_height);
}


/*---------------------------------------------------------------------------*
 * plot_sprite                                                               *
 *                                                                           *
 * Plots sprite in any mode (correct colours etc.)                           *
 *---------------------------------------------------------------------------*/

static void plot_sprite(int x, int y, const char *name)
{
    char        pal[256];
    int         scale[16];
    int         log, sprtype = 0x100;
    int         mode, mask;
  
    _swix(OS_SpriteOp, _INR(0,2)|_OUTR(5,6), 256 + SpriteReason_ReadSpriteSize,
          sprites, name, &mask, &mode);
    _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), mode, VduExt_NColour, &log);
  
    if (log > 15)
    {
        _swix(Wimp_ReadPixTrans, _INR(0,2)|_INR(6,7), sprtype, sprites, name, scale, pal);
        _swix(ColourTrans_SelectTable, _INR(0,5), mode, -1, -1, -1, pal, 0);
    }
    else
    {
        _swix(Wimp_ReadPixTrans, _INR(0,2)|_INR(6,7), sprtype, sprites, name, scale, pal);
    }
  
    _swix(OS_SpriteOp, _INR(0,7), 256 + SpriteReason_PutSpriteScaled,
          sprites, name, x, y, mask ? 8 : 0, scale, pal);
}


/*---------------------------------------------------------------------------*
 * check_time                                                                *
 *                                                                           *
 * Decides whether the next frame of animation should be displayed (makes    *
 * the code independant of processor speed.                                  *
 *---------------------------------------------------------------------------*/

static int check_time(void)
{
    int timenow;
  
    _swix(OS_ReadMonotonicTime, _OUT(0), &timenow);
  
    if ((timenow - delay_start) > delay_length)
    {
        delay_start = timenow;
    
        return(1);
    }
    return(0);
}


/*---------------------------------------------------------------------------*
 * redraw                                                                    *
 *                                                                           *
 * Handle redraw events - do nothing!                                        *
 *---------------------------------------------------------------------------*/

int redraw(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    WimpRedrawWindowBlock block;
    int more;
    
    wimp_update_window(&block, &more);
  
    while (more)
    {
        wimp_get_rectangle(&block, &more);
    }
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * gain_pointer                                                              *
 *                                                                           *
 * Pointer has entered my window - turn it off!                              *
 *---------------------------------------------------------------------------*/

int gain_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    saver_hide_pointer();

    return 1;
}


/*---------------------------------------------------------------------------*
 * lose_pointer                                                              *
 *                                                                           *
 * Pointer has left my window - switch it back on again!                     *
 *---------------------------------------------------------------------------*/

int lose_pointer(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    saver_show_pointer();

    return 1;
}


/*---------------------------------------------------------------------------*
 * pollword                                                                  *
 *                                                                           *
 * Handle pollword non-zero events                                           *
 *---------------------------------------------------------------------------*/

int pollword(int event_code, WimpPollBlock *event, IdBlock *id_block, void *handle)
{
    program_exit();
      
    return 1;
}

/*---------------------------------------------------------------------------*
 * message_quit                                                              *
 *                                                                           *
 * Called when wimp quit message received.                                   *
 *---------------------------------------------------------------------------*/
 
int message_quit(WimpMessage *event, void *handler)
{
    program_exit();
    
    return 1;
}


/*---------------------------------------------------------------------------*
 * set_up_starts                                                             *
 *                                                                           *
 * Sets up the variables for each animation                                  *
 *---------------------------------------------------------------------------*/
 
static void set_up_starts(void)
{
    int spr_xeig, spr_yeig, mode;

    if (animation == LEFT_TO_RIGHT)
    {
        _swix(OS_SpriteOp, _INR(0,2)|_OUTR(3,4)|_OUT(6), 256 + SpriteReason_ReadSpriteSize,
              sprites, "right", &spr_width, &spr_height, &mode);
        _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), mode, VduExt_XEigFactor, &spr_xeig);
        _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), mode, VduExt_YEigFactor, &spr_yeig);
        spr_width = spr_width << spr_xeig;
        spr_height = spr_height << spr_yeig;     /* Keep in OS units */

        x_pos = -spr_width;                      /* Start off screen */
        c_pos = 0;
        x_calc = x_pos;
        delay_length = 5;                        /* Delay between frames (centi-seconds) */
    }
  
    if (animation == RIGHT_TO_LEFT)
    {
        _swix(OS_SpriteOp, _INR(0,2)|_OUTR(3,4)|_OUT(6), 256 + SpriteReason_ReadSpriteSize,
              sprites, "left", &spr_width, &spr_height, &mode);
        _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), mode, VduExt_XEigFactor, &spr_xeig);
        _swix(OS_ReadModeVariable, _INR(0,1)|_OUT(2), mode, VduExt_YEigFactor, &spr_yeig);
        spr_width = spr_width << spr_xeig;
        spr_height = spr_height << spr_yeig;     /* Keep in OS units */

        x_pos = screenw;
        c_pos = COORDS_MAX - 1;
        x_calc = x_pos;
        delay_length = 5;                        /* Delay between frames (centi-seconds) */
    }
  
    _swix(OS_ReadMonotonicTime, _OUT(0), &delay_start);
}

/*---------------------------------------------------------------------------*
 * main_initialise                                                           *
 *                                                                           *
 * Initialise the toolbox, work out the screensize, load and decompress the  *
 * sprites, open the window.                                                 *
 *                                                                           *
 * Globals: screenw, screenh, window_toolbox_id, window_wimp_handle,         *
 *          task_handle                                                      *
 *---------------------------------------------------------------------------*/

static int main_initialise(void)
{
    int task_handle;
    int main_window;

    /* Initialise toolbox */
    saver_error_trap(toolbox_initialise(0, 310, 0, 0, "<BlankTask$Dir>", &messages_desc, &idb,
                                  0, &task_handle, 0), 1);
    saver_error_trap(event_initialise(&idb), 0);
    saver_error_trap(event_set_mask(Wimp_Poll_PollWord +
                                    Wimp_Poll_PollWordHighPriority), 0);    

    /* Register event handlers */
    saver_error_trap(event_register_message_handler(Wimp_MQuit, message_quit, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_ENull, null_event, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_ERedrawWindow, redraw, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPollWordNonZero, pollword, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPointerEnteringWindow, gain_pointer, NULL), 0);
    saver_error_trap(event_register_wimp_handler(-1, Wimp_EPointerLeavingWindow, lose_pointer, NULL), 0);

    /* Open the covering window */
    saver_read_screensize(&screenw, &screenh, &xeig, &yeig);
    saver_error_trap(toolbox_create_object(0, "Window", &main_window), 1);
    saver_open_covering_window(main_window);

    saver_error_trap(squash_decompress_file("<BlankTask$Dir>.Frames"), 1);

    saver_decide_double_buffering();

    saver_set_rnd_seed();
    y_pos = last_y = saver_rnd(screenh) / 2;
    animation = LEFT_TO_RIGHT; /* Animation type: pogo stick left-to-right or pogo stick right-to-left */
  
    set_up_starts();
  
    return 1;
}


/*---------------------------------------------------------------------------*
 * main                                                                      *
 *                                                                           *
 * Main polling loop.                                                        *
 *---------------------------------------------------------------------------*/

int main(int argc, char **argv)
{
    WimpPollBlock  wpb;
    int            event_code;
    int           *pollword = NULL;

    if (argc>1) pollword = (int*) atoi(argv[1]);
    if (!pollword) program_exit();
    if (!main_initialise()) program_exit();
  
    while (1)
    {
        saver_error_trap(event_poll(&event_code, &wpb, pollword), 0);
    }
  
    return 0;
}
