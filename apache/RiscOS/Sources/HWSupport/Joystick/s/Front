; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.Front

;;-----------------------------------------------------------------------------
;; Joystick device driver.
;;
;; Change list
;; 0.01           SMC   Created
;; 0.02 12-Mar-92 SMC   No longer refuses to initialise if the message file can't
;;                        be opened (now only opened if required).
;;                      Read location twice when checking for hardware.
;; 0.03 08-Feb-93 SMC   Use Hdr: to get headers.
;; 0.04 14-Jan-94 SMC   Don't free workspace in finalisation (could break RMTidy).
;; 0.09 31-Mar-94 WT    Analogue support added, and digital support rewritten
;;                      for Kryten/Morris joystick interface board.
;; 0.10 12-May-94 WT    Analogue support altered to support optional returning
;;                      of the full 16-bit value for analogue joysticks.
;; 0.20  2-Feb-95 JRH   Changed addresses and bit patterns for Falcon
;;
;;-----------------------------------------------------------------------------

        AREA    |Joystick$$Code|, CODE, READONLY, PIC
Module_BaseAddr

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:IO.IOMDL
        GET     Hdr:ModHand
        GET     Hdr:MsgTrans
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors
        GET     Hdr:NdrDebug
        GET     Hdr:OsBytes
        GET     Hdr:Services
        GET     Hdr:Podule
        GET     Hdr:PoduleReg
        GET     Hdr:Joystick
        GET     VersionASM

        GBLL    hostvdu
        GBLL    debugmod
        GBLL    debugtmp
        GBLL    debugwt
debug           SETL   {FALSE}                  
debugmod        SETL   {FALSE}                  ; Module debug
debugtmp        SETL   {FALSE}                  ; Temporary debug
debugwt         SETL   {FALSE}                  ; Misc debugging by WT
hostvdu         SETL   {FALSE}                  

        GBLL    CanHaveDigital
CanHaveDigital  SETL {FALSE}

; ---------------------------------------------------------------------------
; On Omega machines there is no digital joystick and hence no auto-detect support.
;
 [ CanHaveDigital
DigitalUpBit            *       1 :SHL: 0
DigitalDownBit          *       1 :SHL: 1
DigitalLeftBit          *       1 :SHL: 2
DigitalRightBit         *       1 :SHL: 3
DigitalFireBit          *       1 :SHL: 4
DetectAnaDigiBit        *       1 :SHL: 5       ; Bits in IOMD_CLINES register
DetectHardwareBit       *       1 :SHL: 6       ; Bits in IOMD_CLINES register

DigitalJoystickAddress  *       &88c00004       ; hardwired to podule 0 EASI space
        ! 1, "Don't poke hardwired podule addresses please"
AnalogueJoyFire         *       DigitalJoystickAddress
        ! 1, "OSByte128 handler doesn't respect analogue/digital selection"
 |
AnaloguePoduleSlot      *       8               ; Must be the NIC because that's where
                                                ; the ADC inputs are wired
                        ^       0
AnalogueJoyID           #       4               ; Simple podule ID reg
AnalogueJoyFire         #       4               ; Fire button latch reg
 ]

AnalogueIrqReg          *       IOMD_ATODICR 
AnalogueStatusReg       *       IOMD_ATODSR  
AnalogueControlReg      *       IOMD_ATODCC  
AnalogueChan1Count      *       IOMD_ATODCNT1
AnalogueChan2Count      *       IOMD_ATODCNT2
AnalogueChan3Count      *       IOMD_ATODCNT3
AnalogueChan4Count      *       IOMD_ATODCNT4

AnalogueJoyCnt          *       &0f
AnalogueJoyDchg         *       &f0
AnalogueJoy0Cnt         *       &03
AnalogueJoy1Cnt         *       &0C
AnalogueJoy0Dchg        *       &30
AnalogueJoy1Dchg        *       &C0
AnalogueChn1Cnt         *       &01
AnalogueChn2Cnt         *       &02
AnalogueChn3Cnt         *       &04
AnalogueChn4Cnt         *       &08
AnalogueChn1Dchg        *       &10
AnalogueChn2Dchg        *       &20
AnalogueChn3Dchg        *       &40
AnalogueChn4Dchg        *       &80

Joy0_Completed          *       3 :SHL: 0
Joy1_Completed          *       3 :SHL: 2
Chn1_Completed          *       1 :SHL: 4
Chn2_Completed          *       1 :SHL: 5
Chn3_Completed          *       1 :SHL: 6
Chn4_Completed          *       1 :SHL: 7
Any_Completed           *      15 :SHL: 4

AnalogueJoy0Fire        *       &0f :SHL: 0
AnalogueJoy1Fire        *       &0f :SHL: 8
AnalogueAdvalFireA      *       1 :SHL: 0
AnalogueAdvalFireB      *       1 :SHL: 8

UpCode                  *       &00040          ; 64 in byte 0
DownCode                *       &000C0          ; -64 in byte 0 (signed)
LeftCode                *       &0C000          ; -64 in byte 1 (signed)
RightCode               *       &04000          ; 64 in byte 1
FireCode                *       &10000          ; 1 in byte 2

MaxADCChannel           *       4               ;Highest logical ADC channel

; ---------------------------------------------------------------------------
;       Workspace layout

                        ^       0, wp
message_file_open       #       4
message_file_block      #       4*4
magic_chan_one          #       4
magic_chan_two          #       4
magic_chan_three        #       4
magic_chan_four         #       4
range_chan_one          #       4       ;Split XXXXYYYY where XXXX is max-min, YYYY is min
range_chan_two          #       4       ;
range_chan_three        #       4       ;
range_chan_four         #       4       ;
range_polarity          #       1       ;Stores the polarity of each axis
misc_flags              #       1
adc_numchanstosample    #       1
adc_lastconversion      #       1
iomd_address            #       4
simple_podule_address   #       4

defaultrange            *       &1000   ;These happen to suit Quickshot Warrior (cheap & nasty!)
defaultmin              *       &30     ;PC-compatible joysticks

NoJoystickFlag          *       1 :SHL: 0 ;These are misc flags!
FirstTimeFlag           *       1 :SHL: 1
CalibrateFlag           *       1 :SHL: 2
AnalogueFlag            *       1 :SHL: 3
RstChan1Flag            *       1 :SHL: 4
RstChan2Flag            *       1 :SHL: 5
RstChan3Flag            *       1 :SHL: 6
RstChan4Flag            *       1 :SHL: 7
RstFlags                *      15 :SHL: 4

polarity_chan_one       *       1 :SHL: 0
polarity_chan_two       *       1 :SHL: 1
polarity_chan_three     *       1 :SHL: 2
polarity_chan_four      *       1 :SHL: 3
default_polarities      *       &A      ;ie reverse Y-axes only (suits most PC joysticks)

max_running_work   *       :INDEX:@

        ! 0, "Module workspace is &":CC:(:STR:(:INDEX:@)):CC:" bytes"


        LNK     ModHead.s

