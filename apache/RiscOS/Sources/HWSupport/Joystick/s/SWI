; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.SWI

Title
SWInames
        DCB     "Joystick",0
        DCB     "Read",0
        DCB     "CalibrateTopRight",0
        DCB     "CalibrateBottomLeft",0
        DCB     0
        ALIGN

; --------------------------------------------------------------------------------------------------
; There are only three SWIs.  As this is unlikely to change we don't need a jump table
; and can save some space.

SWIhandler
        Push    "r1-r5,lr"

        MOV     r4, r12                         ; Just in case it's the first time...
        LDR     r12,[r12]                       ; Get workspace from private word

        CMP     r11, #3
        ADDCC   pc, pc, r11, LSL #2             ; Jumptable calculation
        BCS     %FT01
        B       AreWeAnaOrDigi                  ; Oh look! it's a jumptable after all...
        B       Calib_SWIS                      ; If it's the calibrationTL SWI, then go do it...
        B       Calib_SWIS                      ; If it's the calibrationBR SWI, then go do it...

01      ADR     r0, ErrorBlock_BadSWI           ; Uh Oh!
        addr    r4, Title
        BL      msgtrans_errorlookup
        Pull    "r1-r5,pc",VS

; ---------------------------------------------------------------------------
ErrorBlock_BadSWI
        DCD     ErrorNumber_ModuleBadSWI
        DCB     "BadSWI",0
        ALIGN

ErrorBlock_BadJoystick
        DCD     ErrorBase_Joystick + 1
        DCB     "BadJoy",0
        ALIGN

; ---------------------------------------------------------------------------
AreWeAnaOrDigi
        ; Don't upset R0 or R4!
        LDRB    r2, misc_flags
        TST     r2, #CalibrateFlag
        BNE     %FT05

      [ CanHaveDigital
        TST     r2, #AnalogueFlag               ; Check the ana/digi flag
        BEQ     Joystick_ReadDigSWICode         ; Bleugh. Digital sticks are no good for flight-sims!
      ]

        Debug   wt,"Analogue-read code"
        TST     r2, #FirstTimeFlag              ; Check the first time flag if we're analogue
        BEQ     %FT20                           ; Not first time, so don't set the ticky thing going
        BL      StartTickyRoutine               ; If set, special case...
        Debug   wt,"Ticky tick tick started"
05
        MOV     r0, #0                          ; Dummy value to return from the SWI (centred joystick)
        Pull    "r1-r5,pc"                      ; All done, let's go

Joystick_ReadAnaSWICode
        ; In:   r0 = Joystick number
20      MOV     r5, r0, LSR #8                  ; R5 contains the flag info now
        AND     r0, r0, #&FF                    ; Mask off the flags from R0

        CMP     r0, #1
        ADRHI   r0,ErrorBlock_BadJoystick       ; It's not a valid joystick ( >1 )
        BLHI    msgtrans_errorlookup
        Pull    "r1-r5,pc",VS                   ; Return if error

        ; Now sort out the fire buttons
        LDR     r3, simple_podule_address
        LDR     r4, [r3, #AnalogueJoyFire]      ; Latch and read
        LDR     r4, [r3, #AnalogueJoyFire]
        CMP     r0, #0                          ; Joystick 0??
        ANDEQ   r3, r4, #AnalogueJoy0Fire       ; YES - Pick out Joystick 0 fire buttons
        EOREQ   r3, r3, #AnalogueJoy0Fire       ; YES - Invert them
        ANDNE   r3, r4, #AnalogueJoy1Fire       ; NO  - Pick out Joystick 1 fire buttons
        EORNE   r3, r3, #AnalogueJoy1Fire       ; NO  - Invert them
        MOV     r4, r3, LSL #16                 ; Result in byte 2 of R4

        ; Do twiddling to go from raw to 16 or 8 bits scaled
        LDREQ   r1, magic_chan_one              ; Read the X channel
        LDREQ   r2, magic_chan_two              ; Read the Y channel
        LDRNE   r1, magic_chan_three            ; Read the X channel
        LDRNE   r2, magic_chan_four             ; Read the Y channel
        MOV     r3, #&ff
        ORR     r3, r3, r3, LSL #8              ; Now we have &ffff in r3
        AND     r1, r1, r3                      ; Clear the top 16 bits from r1...
        AND     r2, r2, r3                      ; ... and from R2.

        ; Now scale to cover the entire 16-bit range (0 -> &ffff)
        BL      ExpandRange                     ; NB: This routine needs the joystick number in R0!

        TST     r5, #Joystick_Read_16BitFlag :SHR: 8
        BNE     %FA30                           ; Sixteen, so jump

        ; 8 bit case
        MOV     r3, r1, LSR #8
        TST     r3, #1<<7                       ; bit 7 set?
        BICNE   r3, r3, #1<<7                   ; Clear top bit then.
        EOREQ   r3, r3, #&ff                    ; Nope, so invert all bits.
        MOV     r1, r3                          ; r1 := 8 bit X result

        MOV     r3, r2, LSR #8
        TST     r3, #1<<7                       ; bit 7 set?
        BICNE   r3, r3, #1<<7                   ; Clear top bit then.
        EOREQ   r3, r3, #&ff                    ; Nope, so invert all bits.
        MOV     r2, r3                          ; r2 := 8 bit X result

        ; Put the values into the result word if 8-bit values wanted
        MOV     r0, r4
        ORR     r0, r0, r2                      ; Put the Y in the result
        ORR     r0, r0, r1, LSL #8              ; Put the X in the result
        Pull    "r1-r5,pc"                      ; All done, let's go

30
        ; 16 bit case
        MOV     r0, r2                          ; Put the Y axis value in R0
        ORR     r0, r0, r1, LSL #16             ; Put the X axis value in R0
        MOV     r1, r4, LSR #16                 ; Put switch bits in R1, bottom byte
        ADD     sp, sp, #4                      ; Junk stacked R1
        Pull    "r2-r5,pc"                      ; End of story

      [ CanHaveDigital
Joystick_ReadDigSWICode
        ; In:   r0 = Joystick number - can't get 16-bit values from digital
        Debug   wt,"Digital-read code"
        LDR     r1, =DigitalJoystickAddress
        LDR     r2, [r1]                        ; Latch in the current state
        LDR     r2, [r1]                        ; Read it (top 16 bits are junk)
        Debug   wt,"Register contents are",R2
        CMP     r0, #1                          ; Make sure joystick number is 0 or 1
        MOVEQ   r2, r2, LSR #8                  ; Push the joy1 bits into the low byte
        AND     r2, r2, #&ff                    ; Assume we mean joy 0 then
        CMPNE   r0, #0                          ; But did we?
        ADRNE   r0, ErrorBlock_BadJoystick      ; Nope, so error & quit
        BLNE    msgtrans_errorlookup
        Pull    "r1-r5,pc",VS

        ;At this point, we have the joystick info in the low byte of r2
        MOV     r0, #0                          ; Clear R0!
        TST     r2, #DigitalUpBit               ; Put up/down state in byte 0
        ORREQ   r0, r0, #UpCode
        TST     r2, #DigitalDownBit
        ORREQ   r0, r0, #DownCode
        TST     r2, #DigitalLeftBit             ; Put left/right state in byte 1
        ORREQ   r0, r0, #LeftCode
        TST     r2, #DigitalRightBit
        ORREQ   r0, r0, #RightCode
        TST     r2, #DigitalFireBit             ; And finally the fire bit (in byte 2)
        ORREQ   r0, r0, #FireCode
        Debug   wt,"Done calculatin'"
        Pull    "r1-r5,pc"                      ; All done, let's go
      ]

; ---------------------------------------------------------------------------
StartTickyRoutine
        Push    "lr"
        LDRB    r1, misc_flags
        Debug   wt,"Starting Ticky routine: Misc flags are ",r1
        BIC     r1, r1, #FirstTimeFlag          ; Clear the first-time flag
        STRB    r1, misc_flags
        MOV     r0, #EventV
        addr    r1, TickerRoutine
        MOV     r2, r4                          ; Puts the private word in R2
        SWI     XOS_Claim
        MOV     r0, #OsByte_EnableEvent
        MOV     r1, #Event_VSync
        SWI     XOS_Byte
        CLRV
        Pull    "pc"


; ---------------------------------------------------------------------------
ExpandRange
        ; On entry, R0=joystick number, R1=Xval, R2=Yval, R3=&ffff, R4=fires, R5=16-bit flag
        ; On exit,  R0=joystick number, R1=scaled Xval, R2=scaled Yval, R3=&ffff, R4=fires, R5=16-bit flag
        Push    "r0,r3-r6,lr"
        Debug   wt,"Expanding range!"
        CMP     r0, #0                          ;Joystick 0 or 1?
        LDREQ   r4, range_chan_one
        LDRNE   r4, range_chan_three
        Debug   wt,"X was ",r1
        Debug   wt,"Range is ",r4
        AND     r5, r4, r3                      ;R5=min calib
        SUBS    r6, r1, r5                      ;R6=value-min
        MOVMI   r6, #0                          ; Don't allow R6 < 0
        RSB     r6, r6, r6, LSL #16             ;R6=((value-min)<<16) - (value-min)
        MOV     r4, r4, LSR #16                 ;R4=calib range
        DivRem  r1, r6, r4, r5                  ;R1=R6/calib range. R5 is corrupted
        CMP     r1, r3
        MOVPL   r1, r3                          ;Impose an FFFF max
        CMP     r1, #0
        MOVMI   r1, #0                          ;and a 0 min

        Debug   wt,"X is ",r1

        ; Now do the Y-values
        CMP     r0, #0                          ;Joystick 0 or 1?
        LDREQ   r4, range_chan_two
        LDRNE   r4, range_chan_four
        AND     r5, r4, r3                      ;R5=min calib
        SUBS    r6, r2, r5                      ;R6=value-min
        MOVMI   r6, #0                          ; Don't allow R6 < 0
        RSB     r6, r6, r6, LSL #16             ;R6=((value-min)<<16) - (value-min)
        MOV     r4, r4, LSR #16                 ;R4=calib range
        DivRem  r2, r6, r4, r5                  ;R2=R6/calib range. R5 is corrupted
        CMP     r2, r3
        MOVPL   r2, r3                          ;Impose an FFFF max
        CMP     r2, #0
        MOVMI   r2, #0                          ;and a 0 min


        ; Ranges done, now invert R1,R2 if necessary
        LDRB    r4, range_polarity
        CMP     r0, #0
        BNE     %FT40

        TST     r4, #polarity_chan_one          ;ie X
        MVNNE   r1, r1                          ;invert r1 if so
        ANDNE   r1, r1, r3
        TST     r4, #polarity_chan_two          ;ie Y
        MVNNE   r2, r2                          ;invert r2 if so
        ANDNE   r2, r2, r3
        Pull    "r0,r3-r6,pc"

40      TST     r4, #polarity_chan_three        ;ie X
        MVNNE   r1, r1                          ;invert r1 if so
        ANDNE   r1, r1, r3
        TST     r4, #polarity_chan_four         ;ie Y
        MVNNE   r2, r2                          ;invert r2 if so
        ANDNE   r2, r2, r3
        Pull    "r0,r3-r6,pc"

; ---------------------------------------------------------------------------
Calib_SWIS
        ; R2 to R5 and LR are pushed, as is R1 (separately)
        ; Need optional checks here to determine axis polarity.
        LDRB    r2, misc_flags
        TST     r2, #FirstTimeFlag              ; Check the first time flag if we're analogue
        BEQ     %FT48                           ; Not first time, so don't set the ticky thing going
        BL      StartTickyRoutine               ; If set, special case...
        Debug   wt,"Ticky tick tick started"
        MOV     r0, #OsByte_Wait
        SWI     XOS_Byte                        ; Wait for a VSync so we get some sensible values...
        SWIVC   XOS_Byte                        ; Wait for a VSync so we get some sensible values...
        SWIVC   XOS_Byte                        ; Wait for a VSync so we get some sensible values...

48      MOV     r1, #&ff
        ORR     r1, r1, r1, LSL #8              ;R1 is &ffff
        LDRB    r2, misc_flags
        TST     r2, #CalibrateFlag
        BNE     %FT50                           ;This is the second calibration!

        ORR     r2, r2, #CalibrateFlag          ;I'm 'aving a CALIBRATE!
        STRB    r2, misc_flags
        LDR     r2, magic_chan_one              ;Take snaphots
        AND     r2, r2, r1
        STR     r2, range_chan_one
        LDR     r2, magic_chan_two              ;Take snaphots
        AND     r2, r2, r1
        STR     r2, range_chan_two
        LDR     r2, magic_chan_three            ;Take snaphots
        AND     r2, r2, r1
        STR     r2, range_chan_three
        LDR     r2, magic_chan_four             ;Take snaphots
        AND     r2, r2, r1
        STR     r2, range_chan_four

        Pull    "r1-r5,pc"


        ; Right, munge stuff to get range-min pairs & polarities
50      BIC     r2, r2, #CalibrateFlag          ;Clear the calibrate flag
        STRB    r2, misc_flags

        MOV     r2, #0                          ;Clear R2 ready to accept polarity flags
        LDR     r3, magic_chan_one
        AND     r3, r3, r1
        LDR     r4, range_chan_one              ;Previous reading
        MOV     r5, #polarity_chan_one
        BL      DoRanging
        STR     r3, range_chan_one

        LDR     r3, magic_chan_two
        AND     r3, r3, r1
        LDR     r4, range_chan_two              ;Previous reading
        MOV     r5, #polarity_chan_two
        BL      DoRanging
        STR     r3, range_chan_two

        LDR     r3, magic_chan_three
        AND     r3, r3, r1
        LDR     r4, range_chan_three            ;Previous reading
        MOV     r5, #polarity_chan_three
        BL      DoRanging
        STR     r3, range_chan_three

        LDR     r3, magic_chan_four
        AND     r3, r3, r1
        LDR     r4, range_chan_four             ;Previous reading
        MOV     r5, #polarity_chan_four
        BL      DoRanging
        STR     r3, range_chan_four

        Debug   wt,"Storing r2 as ",r2
        STRB    r2, range_polarity

        Pull    "r1-r5,pc"



DoRanging
        CMP     r3, r4                          ;Sort out which way around they are to get the 'range'
        BPL     %FT60                           ;first call was the smaller X1

        SUB     r4, r4, r3                      ;R4 = range now
        SUB     r4, r4, r4, LSR #12             ;Decrease the range slightly at CWhyte's request :-P
        CMP     r4, #0
        MOVEQ   r4, #1
        ORR     r3, r3, r4, LSL #16             ;Combine the min & range in r3
        CMP     r11, #1                         ;Is this 2nd call the TR?
        ORREQ   r2, r2, r5                      ;Nope, so we need reverse polarity
        Debug   wt,"After a doranging, r2 is ",r2
        MOV     pc, lr

60      SUB     r3, r3, r4                      ;R3 = range now
        SUB     r3, r3, r3, LSR #12             ;Decrease the range slightly at CWhyte's request :-P
        CMP     r3, #0
        MOVEQ   r3, #1
        ORR     r4, r4, r3, LSL #16             ;Combine the min & range in r4
        CMP     r11, #1                         ;Is this 2nd call the TR?
        ORRNE   r2, r2, r5                      ;Yup, so we need reverse polarity
        Debug   wt,"After a doranging.., r2 is ",r2
        MOV     r3, r4
        MOV     pc, lr

        LNK     Service.s
