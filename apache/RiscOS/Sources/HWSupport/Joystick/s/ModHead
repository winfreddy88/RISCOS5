; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.ModHead

        ASSERT  (.=Module_BaseAddr)

        DCD     0                                       ; Start
        DCD     Init           - Module_BaseAddr
        DCD     Die            - Module_BaseAddr
        DCD     Service        - Module_BaseAddr        ; Service
        DCD     Title          - Module_BaseAddr
        DCD     Helpstr        - Module_BaseAddr
        DCD     0                                       ; Helptable
        DCD     JoystickSWI_Base                        ; SWIbase
        DCD     SWIhandler     - Module_BaseAddr
        DCD     SWInames       - Module_BaseAddr
        DCD     0                                       ; SWIdecode
        DCD     0
 [ :LNOT: No32bitCode
        DCD     ModFlags       - Module_BaseAddr
 ]

; ---------------------------------------------------------------------------
Helpstr DCB     "Joystick",9,"$Module_HelpVersion", 0
        ALIGN

      [ :LNOT: No32bitCode
ModFlags
        DCD     ModuleFlag_32bit
      ]

; ---------------------------------------------------------------------------
;       Module initialisation point
Init
        Push    "lr"
        Debug   mod,"Initialising"

        LDR     r0, [r12]                               ; Have we already got a workspace ?
        CMP     r0, #0                                  ; clears V
        MOVNE   r12, r0
        BNE     %FT01

        MOV     r0, #ModHandReason_Claim
        LDR     r3, =max_running_work
        SWI     XOS_Module                              ; Claim workspace
        Pull    "pc", VS

        STR     r2, [r12]                               ; Store workspace pointer.
        MOV     r12, r2
01
        MOV     r0, #0
        STR     r0, message_file_open

        MOV     r0, #9
        MOV     r1, #4<<8
        SWI     XOS_Memory
        MOVVS   r1, #IOMD_Base                          ; Kernel too old, assume crusty IOC origins
        STR     r1, iomd_address
        TEQ     r1, #0
        BEQ     %FT90                                   ; Quit when no controller

        LDRB    r2, [r1, #IOMD_ID0]
        LDRB    r3, [r1, #IOMD_ID1]
        ORR     r2, r2, r3, LSL #8
        LDR     r3, =IOMD_7500
        LDR     r4, =IOMD_7500FE
        TEQ     r2, r3
        TEQNE   r2, r4
        BNE     %FT90                                   ; Quit when wrong controller

        MOV     r3, #AnaloguePoduleSlot
        SWI     XPodule_ReadID
        BVS     %FT80
        AND     r0, r0, #2_1111000
        TEQ     r0, #SimpleType_AnalogJoystick :SHL: 3
        BNE     %FT80                                   ; No joystick in the NIC slot

        MOV     r0, #Podule_ReadInfo_ROMAddress
        ADR     r1, simple_podule_address
        MOV     r2, #4
        MOV     r3, #AnaloguePoduleSlot
        SWI     XPodule_ReadInfo
        
      [ CanHaveDigital
        ; Test for existance & type of hardware. Read from the Type detection address
        Debug   mod,"Checking hardware"
        LDRB    r1, [r1, #IOMD_CLINES]                  ; Read the port

        Debug   wt,"Read back from type detect:",r1
        TST     r1, #DetectHardwareBit                  ; Check for hardware first (low = present)
        BNE     %FT80
        ANDS    r1, r1, #DetectAnaDigiBit               ; Pick out the Ana/Digi flag from hardware
        MOVNE   r1, #AnalogueFlag                       ; Set the (different) bit in misc_flags if analogue
        STRB    r1, misc_flags                          ; And store it away, zeroing the rest of the misc flags too.
        BLNE    init_analogue                           ; And then go set it in action...
      |
        MOV     r1, #AnalogueFlag
        STRB    r1, misc_flags
        BL      init_analogue                           ; And then go set it in action...
      ]

        ; Initialise any other flags
        LDRB    r1, misc_flags
        ORR     r1, r1, #FirstTimeFlag                  ; Set the first-time flag
        STRB    r1, misc_flags
        Debug   wt,"Misc flags stored as:",r1

        ; Ok, lets bung some 'sensible' defaults into the ranges...
        MOV     r1, #defaultrange << 16
        ORR     r1, r1, #defaultmin
        STR     r1, range_chan_one
        STR     r1, range_chan_two
        STR     r1, range_chan_three
        STR     r1, range_chan_four

        ; And set up the polarities for a TL min, BR max (like most PC analogue sticks)
        ; to give BL min, TR max as in the SWI
        MOV     r1, #default_polarities
        STRB    r1, range_polarity
        Pull    "pc"                                    ; Hardware is there so initialise successfully.


80
        Debug   mod,"No joystick hardware"
        ADR     r0, ErrorBlock_NoHardware
        B       %FT99
90
        Debug   mod,"No IOMD"
        ADR     r0, ErrorBlock_WrongIOMD
99
        BL      msgtrans_errorlookup
        BL      CloseMsgFile
        SETV
        Pull    "pc"

ErrorBlock_NoHardware
        DCD     ErrorBase_Joystick + 0
        DCB     "NoHWare",0
        ALIGN
        
ErrorBlock_WrongIOMD
        DCD     ErrorBase_Joystick + 2
        DCB     "Wrong",0
        ALIGN
        
; ---------------------------------------------------------------------------
;       RMKill'ing the module
Die
        Push    "r4,lr"

        MOV     r4, r12                                 ; So we can release the ticker if need be
        LDR     r12, [r12]
        CMP     r12, #0                                 ; clears V
        Pull    "r4, pc",EQ                             ; Looks like we didn't even get as far as claiming workspace!

        MOV     r0,#ModHandReason_Free
        MOV     r2,r12
        SWI     XOS_Module                              ; Clear workspace

        BL      StopTickyRoutine
        BL      CloseMsgFile

        CLRV
        Pull    "r4,pc"



StopTickyRoutine
        Push    "r0-r2,lr"

        LDRB    r0, misc_flags
        Debug   wt,"Misc flags read as",r0
        TST     r0, #FirstTimeFlag
        Pull    "r0-r2,pc",NE                           ; If set, then no ticker to stop!

        Debug   wt,"Um, think we have a vector registered"
        MOV     r0, #OsByte_DisableEvent
        MOV     r1, #Event_VSync
        SWI     XOS_Byte
        MOV     r0, #EventV
        ADR     r1, TickerRoutine
        MOV     r2, r4
        SWI     XOS_Release                             ; Release the ticker routine

        Pull    "r0-r2,pc"


CloseMsgFile
        Push    "r0,lr"

        ; Close the message file if it's open
        LDR     r0, message_file_open
        TEQ     r0, #0
        ADRNE   r0, message_file_block
        SWINE   XMessageTrans_CloseFile

        Pull    "r0,pc"

 
; ---------------------------------------------------------------------------
;      Initialising the analogue registers in Morris
init_analogue
        LDR     r2, iomd_address

        MOV     r0, #&0f                ;Enable all channels, but don't allow irqs
        STRB    r0, [r2, #AnalogueIrqReg]

        MOV     r0, #&0f                ;Counters on, discharge off
        STRB    r0, [r2, #AnalogueControlReg]

        MOV     pc,lr


        LNK     Ticky.s
