; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; > Sources.Ticky

TickerRoutine                     ;Periodically executes, updating the magic locations.
        TEQ     r0, #4
        BEQ     handleit
        TEQ     pc, pc
        MOVNES  pc, lr            ; pass it on (26-bit)
        MOV     pc, lr            ; pass it on (32-bit)

handleit
        Push    "r0-r4,r12,lr"
        LDR     r12, [r12]                      ;Get workspace address into R12

        ;Let's see if we have any channels to start counting again...
        LDR     r2, =AnalogueControlReg
        LDRB    r1, [r2]                        ;Read the Control reg just in case

        LDRB    r0, misc_flags                  ;Read the misc flags...

        TST     r0, #RstChan1Flag
        ORRNE   r1, r1, #AnalogueChn1Cnt        ;Counters on, and...
        BICNE   r1, r1, #AnalogueChn1Dchg       ;Start the capacitor charging
        STRNEB  r1, [r2]                        ;Write back to the control reg
        BICNE   r0, r0, #RstChan1Flag           ;Clear the misc reset flag

        TST     r0, #RstChan2Flag
        ORRNE   r1, r1, #AnalogueChn2Cnt        ;Counters on, and...
        BICNE   r1, r1, #AnalogueChn2Dchg       ;Start the capacitor charging
        STRNEB  r1, [r2]                        ;Write back to the control reg
        BICNE   r0, r0, #RstChan2Flag           ;Clear the misc reset flag

        TST     r0, #RstChan3Flag
        ORRNE   r1, r1, #AnalogueChn3Cnt        ;Counters on, and...
        BICNE   r1, r1, #AnalogueChn3Dchg       ;Start the capacitor charging
        STRNEB  r1, [r2]                        ;Write back to the control reg
        BICNE   r0, r0, #RstChan3Flag           ;Clear the misc reset flag

        TST     r0, #RstChan4Flag
        ORRNE   r1, r1, #AnalogueChn4Cnt        ;Counters on, and...
        BICNE   r1, r1, #AnalogueChn4Dchg       ;Start the capacitor charging
        STRNEB  r1, [r2]                        ;Write back to the control reg
        BICNE   r0, r0, #RstChan4Flag           ;Clear the misc reset flag

        ;Now let's see which channels are complete!
        LDR     r4, iomd_address
        LDRB    r4, [r4, #AnalogueStatusReg]

        TST     r4, #Any_Completed
        BEQ     EndTickerRoutine

        TST     r4, #Chn1_Completed
        BLNE    SortChan1
        TST     r4, #Chn2_Completed
        BLNE    SortChan2
        TST     r4, #Chn3_Completed
        BLNE    SortChan3
        TST     r4, #Chn4_Completed
        BLNE    SortChan4

EndTickerRoutine
        TEQ     pc, pc
        Pull    "r0-r4,r12,pc",NE,^             ; 26-bit exit (pass it on)
        Pull    "r0-r4,r12,pc"                  ; 32-bit exit (pass it on)


; ---------------------------------------------------------------------------
SortChan1                                       ;Don't use R4!
        ;First, read the channel count...
        LDR     r2, iomd_address
        LDR     r3, [r2, #AnalogueChan1Count]

        ;Now we can sort out the info we got from the counter...
        STR     r3, magic_chan_one              ;Store the full 16bits (+16 bits garbage) in the 'magic' location

        ;Next, kick off the reset process...
        LDRB    r1, [r2, #AnalogueControlReg]
        BIC     r1, r1, #AnalogueChn1Cnt        ;Switch the counter off
        ORR     r1, r1, #AnalogueChn1Dchg       ;Start discharging
        STRB    r1, [r2, #AnalogueControlReg]

        LDRB    r2, misc_flags
        ORR     r2, r2, #RstChan1Flag           ;And remember we are in the middle of a reset for next time.
        STRB    r2, misc_flags

        MOV     pc, lr                          ;Return


; ---------------------------------------------------------------------------
SortChan2                                       ;Don't use R4!
        ;First, read the channel count...
        LDR     r2, iomd_address
        LDR     r3, [r2, #AnalogueChan2Count]

        ;Now we can sort out the info we got from the counter...
        STR     r3, magic_chan_two              ;Store the full 16-bit value in the 'magic' location

        ;Next, kick off the reset process...
        LDRB    r1, [r2, #AnalogueControlReg]
        BIC     r1, r1, #AnalogueChn2Cnt        ;Switch the counter off
        ORR     r1, r1, #AnalogueChn2Dchg       ;Start discharging
        STRB    r1, [r2, #AnalogueControlReg]

        LDRB    r2, misc_flags
        ORR     r2, r2, #RstChan2Flag
        STRB    r2, misc_flags

        MOV     pc, lr                          ;Return


; ---------------------------------------------------------------------------
SortChan3                                       ;Don't use R4!
        ;First, read the channel count...
        LDR     r2, iomd_address
        LDR     r3, [r2, #AnalogueChan3Count]

        ;Now we can sort out the info we got from the counter...
        STR     r3, magic_chan_three            ;Store the full 16-bit value in the 'magic' location

        ;Next, kick off the reset process...
        LDRB    r1, [r2, #AnalogueControlReg]
        BIC     r1, r1, #AnalogueChn3Cnt        ;Switch the counter off
        ORR     r1, r1, #AnalogueChn3Dchg       ;Start discharging
        STRB    r1, [r2, #AnalogueControlReg]

        LDRB    r2, misc_flags
        ORR     r2, r2, #RstChan3Flag
        STRB    r2, misc_flags

        MOV     pc, lr                          ;Return


; ---------------------------------------------------------------------------
SortChan4                                       ;Don't use R4!
        ;First, read the channel count...
        LDR     r2, iomd_address
        LDR     r3, [r2, #AnalogueChan4Count]

        ;Now we can sort out the info we got from the counter...
        STR     r3, magic_chan_four             ;Store the full 16-bit value in the 'magic' location

        ;Next, kick off the reset process...
        LDRB    r1, [r2, #AnalogueControlReg]
        BIC     r1, r1, #AnalogueChn4Cnt        ;Switch the counter off
        ORR     r1, r1, #AnalogueChn4Dchg       ;Start discharging
        STRB    r1, [r2, #AnalogueControlReg]

        LDRB    r2, misc_flags
        ORR     r2, r2, #RstChan4Flag
        STRB    r2, misc_flags

        MOV     pc, lr                          ;Return


        LNK     SWI.s

