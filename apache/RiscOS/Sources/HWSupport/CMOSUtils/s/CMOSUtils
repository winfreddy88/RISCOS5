; Copyright 2012 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:OsBytes
        GET     Hdr:ModHand
        GET     Hdr:CMOS
        GET     VersionASM
        
;;-----------------------------------------------------------------------------
;; Cache the CMOS pre RISC OS 3.50
;;-----------------------------------------------------------------------------

        AREA    CMOSUtils, CODE, READONLY

sizeofCache     * &F0

ModHeader
        DCD     0
        DCD     ModInit  - ModHeader
        DCD     ModFinal - ModHeader
        DCD     0
        DCD     ModTitle - ModHeader
        DCD     ModHelp  - ModHeader
        DCD     0

ModTitle
        DCB     "CMOSUtils", 0
ModHelp
        DCB     "CMOSUtils", 9, "$Module_MajorVersion ($Module_Date)", 0
        ALIGN

ModInit
        Push    "lr"
        LDR     r2, [r12]
        TEQ     r2, #0
        BNE     %FT10                   ; Got workspace already

        MOV     r0, #ModHandReason_Claim
        MOV     r3, #sizeofCache
        SWI     XOS_Module
        Pull    "pc",VS
        STR     r2, [r12]
10
        MOV     r12, r2
        BL      SeedCache

        MOV     r0, #ByteV
        ADR     r1, ModByteVIntercept
        MOV     r2, r12
        SWI     XOS_Claim
        Pull    "pc"

ModFinal
        Push    "lr"
        MOV     r0, #ByteV
        ADR     r1, ModByteVIntercept
        LDR     r2, [r12]
        SWI     XOS_Release
        Pull    "pc",,^                 ; Don't refuse to die

SeedCache
        Push    "lr"
        MOV     r1, #sizeofCache - 1
        MOV     r0, #OsByte_ReadCMOS
10
        SWI     XOS_Byte
        STRB    r2, [r12, r1]
        SUBS    r1, r1, #1
        BPL     %BT10
        Pull    "pc"

ModByteVIntercept
        TEQ     r0, #OsByte_ReadCMOS
        TEQNE   r0, #OsByte_WriteCMOS
        MOVNES  pc, lr
        CMP     r1, #sizeofCache
        MOVCSS  pc, lr
        TEQ     r1, #NetStnCMOS         ; Hands off the Econet station
        MOVEQS  pc, lr
        TEQ     r0, #OsByte_WriteCMOS
        BEQ     %FT10

        LDRB    r2, [r12, r1]
        Pull    "pc",,^                 ; Read => claim
10
        STRB    r2, [r12, r1]
        MOVS    pc, lr                  ; Write => pass on

        END
