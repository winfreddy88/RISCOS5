; Copyright 1996 Acorn Computers Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;; -> macros
;; =============================================
;; Macros should be kept in ALPHABETICAL order !
;; =============================================
;;
;;   CDFSDriverError
;;   CLV
;;   Debug
;;   Debug0
;;   DebugDisplay
;;   DebugWaitForAKey
;;

;************************************
; This allows nice errors from CDFS driver
;************************************
        MACRO
$label  CDFSDriverError $name, $message
$name DCD CDFSDriverErrorNumber
       = "$message"
       = 0
CDFSDriverErrorNumber SETA CDFSDriverErrorNumber + 1
 ALIGN
        MEND

; **********************************************************
; This will print a message if 'debug' = ON.
; **********************************************************
        MACRO
$label  Debug $string,$nl
$label  [ debug=ON
        Push r14
         [ hostvdu=ON
        SWI XHostFS_HostVdu
         ]
        SWI XOS_WriteS
        = "$string"
         [ "$nl"="NL"
        = 13,10
         ]
        = 0
        ALIGN
         [ hostvdu=ON
        SWI XHostFS_TubeVdu
         ]
        Pull r14
        ]
        MEND

; **********************************************************
; This will perform a XOS_Write0 if 'debug' = ON.
; **********************************************************
        MACRO
$label  Debug0 $string,$nl
$label  [ debug=ON
        Push r14
         [ hostvdu=ON
        SWI XHostFS_HostVdu
         ]
        SWI XOS_Write0
         [ "$nl"="NL"
        SWI XOS_NewLine
         ]
         [ hostvdu=ON
        SWI XHostFS_TubeVdu
         ]
        Pull r14
        ]
        MEND

; **********************************************************
; This will perform a Display if 'debug' = ON.
; **********************************************************
        MACRO
$label  DebugDisplay $string,$nl
$label  [ debug=ON
        Push r14
         [ hostvdu=ON
        SWI XHostFS_HostVdu
         ]
        Display $string,$nl
         [ hostvdu=ON
        SWI XHostFS_TubeVdu
         ]
        Pull r14
        ]
        MEND

; **********************************************************
; This will perform a wait-for-key if 'debug' = ON.
; **********************************************************
        MACRO
$label  DebugWaitForAKey
$label  [ debug=ON
        Push "r0-r2,r14"
        MOV R0, #OsByte_ScanKeyboardFrom16
01
        SWI XOS_Byte
        CMP R1, #&FF
        BEQ %BT01
        Pull "r0-r2,r14"
        ]
        MEND

        MACRO
$label  SWIExitVC $cond
$label [ "$cond"<>"AL" :LAND: "$cond"<>""
        DCI     &1A000002 :EOR: Cond_$cond ; branch over on opposite condition
      ]
        CMP     pc, pc
        Pull    "r0-r11, pc", EQ
        Pull    "r0-r11, pc",, ^
        MEND

        MACRO
$label  SWIExitVS $cond
$label [ "$cond"<>"AL" :LAND: "$cond"<>""
        DCI     &1A000004 :EOR: Cond_$cond ; branch over on opposite condition
      ]
        TEQ     PC, PC
        MSREQ   CPSR_f, #Z_bit :OR: V_bit
        Pull    "r0-r11, pc", EQ
        Pull    "r0-r11, r14"
        ORRS    pc, r14, #V_bit
        MEND

        MACRO
$label  VCLEAR $cond
$label  CMP$cond R0, #0
        MEND

        MACRO
$label  VSET $cond
$label [ "$cond"<>"AL" :LAND: "$cond"<>""
        DCI     &1A000001 :EOR: Cond_$cond ; branch over on opposite condition
      ]
        CMP     R0, #&80000000
        CMNVC   R0, #&80000000
        MEND

        END
