; Copyright 2002 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;******************************************************************************
;
; hdr.macros
;
; Author: Mark Watson (EESOX)
;
; Description
; ===========
; Macro definitions.
;

; =============================================
; Macros should be kept in ALPHABETICAL order !
; =============================================

; **********************************************************
; **********************************************************
;     This macro will display the contents of a register in hex
; Only 8 digits are displayed
; **********************************************************
; **********************************************************
        MACRO
$label  Display $reg
        [ $reg <= r1
 ! 0,"Cannot use r0 - r1 in Display macro !"
        ]
$label  [ OUTPUT_ON=1
        STASH     "r0 - r1, r14"
        MOV       r1, # 8              ; altering this figure affects the number of

01      MOV       $reg, $reg, ROR #28  ; characters displayed
        AND       r0, $reg, #15

        SUBS      r0, r0, # 10
        ADDLT     r0, r0, # "0" + 10
        ADDGE     r0, r0, # "a"

       [ OUTPUT_TO_SCREEN<>0
        SWI  0+(1:SHL:17) ; XOS_WriteC
       |
        SWI &a194a:OR:(1:SHL:17)   ; XStream_WriteC
       ]

        SUBS      r1, r1, #1

        BNE       %BT01

        Pull      "r0 - r1, r14"
        ]

        MEND


; **********************************************************
; **********************************************************
;     This macro will display the contents of a register in hex
; Only 8 digits are displayed FORCED TO SCREEN
; **********************************************************
; **********************************************************
        MACRO
$label  DisplayTS $reg
        [ $reg <= r1
 ! 0,"Cannot use r0 - r1 in Display macro !"
        ]
        Push      "r0 - r1, r14"
        MOV       r1, # 8              ; altering this figure affects the number of

01      MOV       $reg, $reg, ROR #28  ; characters displayed
        AND       r0, $reg, #15

        SUBS      r0, r0, # 10
        ADDLT     r0, r0, # "0" + 10
        ADDGE     r0, r0, # "a"

        SWI  0+(1:SHL:17) ; XOS_WriteC

        SUBS      r1, r1, #1

        BNE       %BT01

        Pull      "r0 - r1, r14"

        MEND



; **********************************************************
; **********************************************************

        MACRO
$label  DisplayNewLine
$label  [ OUTPUT_ON=1
        Push    r14
       [ OUTPUT_TO_SCREEN<>0
        SWI XOS_NewLine
       |
        SWI &a194e:OR:(1:SHL:17)        ; SYS "Stream_NewLine"
       ]
        Pull    r14
        ]
        MEND



; ********************************************
; ***  Macro for returning from the drive  ***
; ********************************************
        MACRO
$label  MACRO__ENTER_DRIVER
$label  Push    "r0-r8, r14"
        MEND

; ********************************************
; ***  Macro for returning from the drive  ***
; ********************************************
        MACRO
$label  MACRO__EXIT_DRIVER_OK $cc
$label  Pull    "r0-r8, pc", "$cc"
        MEND

; ********************************************
; ***  Macro for returning from the drive  ***
; ********************************************
        MACRO
$label  MACRO__EXIT_DRIVER_WITH_R0 $cc, $noexit
$label  ADD$cc  r13, r13, #4
 [ "$noexit"=""
        Pull    "r1-r8, pc", "$cc"
 |
        Pull    "r1-r8, r14", "$cc"
 ]
        MEND

; ********************************************
; ***  Macro for returning from the drive  ***
; ********************************************
        MACRO
$label  MACRO__EXIT_DRIVER_WITHOUT_RESTORING_REGISTERS $cc
$label  ADD$cc  r13, r13, #4*9
        Pull    "pc", "$cc"
        MEND

; *******************************
; ***  String immediate out.  ***
; *******************************
        MACRO
$label  MySTRIM   $string
$label   [ OUTPUT_ON=1
         Push    r14
       [ OUTPUT_TO_SCREEN<>0
        SWI     XOS_WriteS
       |
        SWI &a194b:OR:(1:SHL:17)
       ]
        DCB     "$string", 0
        ALIGN
        Pull r14
        |
        [ cdebug
        CDebug_WriteS $string
        ]
        ]
        MEND

; *************************************************************************
; ***  Declare string with the order of every other pair of characters  ***
; ***  swapped i.e. ABCD -> BADC                                        ***
; *************************************************************************
        MACRO
$lab    SwapBytes       $str
        LCLS    s
        LCLA    i
        LCLA    j
i       SETA    :LEN:"$str"
j       SETA    1
        WHILE   i > 1
s       SETS    "$s":CC:(("$str":LEFT:(j+1)):RIGHT:1)
s       SETS    "$s":CC:(("$str":LEFT:j):RIGHT:1)
j       SETA    j + 2
i       SETA    i - 2
        WEND
        [       i > 0
s       SETS    "$s":CC:(("$str":LEFT:j):RIGHT:1)
        ]
$lab    DCB     "$s"
        MEND

        END
