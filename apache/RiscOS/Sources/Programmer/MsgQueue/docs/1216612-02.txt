

                MessageQueue Software Functional Specification


        Drawing Number:         1216,612/FS
        Issue:                  2
        Date:                   01/06/1999
        Previous Issue:         1
        Status:                 Released
        Change:                 ECO 4203
        Author:                 Element 14
        Classification:         Restricted
        Master Format:          Plain text

Contents
========
  Copyright
  Outstanding Issues
  Scope and Purpose of Document
  Overview
  External dependencies
  Terminology
  Message Format
  SWI Interface
  *-commands
  Errors
  Acceptance Tests
  Bibliography
  Glossary
  Issue History

Copyright
=========
This document is copyright (C) Element 14 Limited.

Outstanding Issues
==================
There are no outstanding issues relating to this document.

Introduction
============

Scope and Purpose of Document
=============================
This document specifies a relocatable module which addresses the need to
allow modules and applications to send, store and receive messages to each
other, independendly of the Wimp message delivery system.  It details the
behaviour of this module, its external interfaces and its external
dependencies.   It does not cover issues which are beyond the direct control
of the module.
This document specifies the functionality and facilities provided by version
0.01 and later of the MessageQueue module.

Overview
========
The MessageQueue module provides a generic message delivery service to enable
RISC OS modules and applications to communicate with each other without the
restrictions imposed by the Wimp message system.  The absence of the Wimp
from the message delivery system is the main difference to the behaviour
of TaskModule.  The use of entirely independent multiple queues is the main
difference to the behaviour of the EventDispatcher module.
MessageQueue's primary client is the Java application task which needs to be
able to receive notifications about low-level activities asynchronously and
without incurring the latency associated with a Wimp message, as it may
require several calls to Wimp_Poll before it is delivered to the application
task.
The interface of the module has been designed such that it is not tied to
Java, but may be used by any other components in the system.
Typical usage will be that receivers create message queues, specifying any
limits they wish to impose, by calling SWI MessageQueue_Register.
Subsequently, messages can be placed in the queue by calls to SWI
MessageQueue_Send, and the receiver can extract them with SWI
MessageQueue_Receive.  When the receiver no longer requires the message
queue, it can delete is by calling SWI MessageQueue_Deregister.
Multiple receivers may create multiple message queues.  Senders may send to
any message queue for which they have a handle, and multiple senders may send
to any given message queue.  Senders may not broadcast
The messages in a queue are maintained in time order and are given to the
receiver in that order (oldest first), thus the receiver can determine the
order in which received messages have been sent.
The MessageQueue module should not introduce undue delivery latency. 
Throughput should be limited by the system memory bus speeds rather than
the code itself.

Deliverables
============
The deliverable of this specification is the source code, design
documentation and relocatable module which implements the interfaces defined
by this specification and passes the acceptance tests enumerated below.

External dependencies
=====================
The MessageQueue module has no external dependencies.

Terminology
===========
The following terminology is used below:

entity     Generic term used to refer to any chunk of code capable of calling
           MessageQueue SWIs, including, but not limited to, applications
           and modules.
receiver   The entity which is receiving the messages from senders.
sender     An entity which is sending a message to a receiver.

Message Format
==============
To simplify the management of messages, each message has a common header to
enable it to be processed efficiently.  Messages are always a whole number of
words long (ie. the size is a multiple of 4) and the minimum size is 24
bytes.  All sizes are constrained to be 32-bit unsigned integers and are
always specified in terms of byte counts.  The receiver may elect to place an
upper limit on the size of message, but need not do so, in which case the
upper limit is equal to the remaining space in the buffer at the time the
message is sent.
        Offset  Meaning
          0     Size of message (constrained as noted above)
          4     Sender identifier
          8     reserved for future use (must be zero)
         12     flags
         16     Message identifier
         20     Timestamp
         24...  message specific data
There are no flags currently defined by this specification, so they should
always be set to zero by the sender.  The sender may use the sender
identifier in any way it chooses.  The receiver may place any interpretation
it chooses on this field, and the MessageQueue module makes no use of this
field itself.
The message identifier defines the format of the message specific data in the
remainder of the message.  The message identifiers are analogous to Wimp
message numbers and it is strongly recommended that identifiers be chosen to
correspond to Wimp message numbers.  This will avoid clashes and also means
that existing channels for allocating Wimp message blocks can be used to
reserve blocks of message identifiers.
The timestamp is the system monotonic time at the moment the message is
queued and is inserted by the MessageQueue module into its copy of the
message.  The sender's buffer is not updated.
These messages and Wimp messages have been kept as similar as possible as it
may enable senders and receiver to re-use existing code used for processing
Wimp messages.  See the PRMs [1] for details of Wimp message formats. 
However, MessageQueue messages are not subject to the length limit imposed by
the Wimp, but instead is subject to any limit specified when a queue is
created.

SWI Interface
=============
The following SWIs are provided by this module.

SWI MessageQueue_Register (&52880)
On entry:
        R0:     flags
                bit 0           if set, claim memory dynamically if possible
                bits 31-1       Reserved (must be zero)
        R1:     application identifier (see below)
        R2:     total buffer space to claim for message queue
        R3:     maximum size for a single message (or 0 if no limit)
On exit:
        R0:     flags
                bit 0           if set, dynamic memory request was honoured
                bits 31-1       Preserved
        R1:     message queue handle
        R2:     address of pollword
        All other registers preserved.
        SWI is not re-entrant.
        Interrupt status undefined.

This call is used by the entity wishing to receive messages.  It reserves
memory for the message queue and returns a unique handle which can be used to
identify the message queue and a pollword.   The handle is used by senders to
identify the receiver.  A receiver must notify potential senders of the
message queue handle.  The method by which senders obtain the message queue
handle is beyond the scope of this document.  The pollword may be used by the
receiver to determine if any messages are pending in the queue.
If the receiver is a Wimp task, then the application identifier should be the
receiver's Wimp task handle so that MessageQueue can automatically call SWI
MessageQueue_Deregister on behalf of a dying Wimp application which hasn't
deregistered any message queues.  If the receiver is not a Wimp task, or
wishes the queue to persist after closing down as a Wimp task, then the
application identifier must be zero.
The receiver should use the pollword whose address is returned in R2 to
determine whether there are any queued messages pending.  The pollword is a
32-bit word-aligned word of memory which is set to zero (all bits clear) if
there are no messages in a particular messsage queue, and to the size of the
next message to be returned on a call to SWI MessageQueue_Receive if there
is at least one message in that message queue.  Although the purpose of this
module is to remove the requirement to call SWI Wimp_Poll in order to receive
messages from other entities in the system, there is no reason why the
receiver may not pass the returned address of the pollword to SWI Wimp_Poll.
If bit 0 of the flags is set, then MessageQueue may attempt to defer memory
allocation and only claim memory to store messages at the moment at which
they are sent.  The implications of this are that the message queue may
become long and consume system memory unless it is polled frequently; message
sending may fail due to memory exhaustion rather than queue buffer
exhaustion; interrupt routines may fail to send a message if not enough
memory was available without changing the memory map.  The MessageQueue
module implementation may elect to not support this method of memory
management.  If the module does elect to implement it, it MUST still validate
R2 as specified below in order to ensure compatiblity with implementations
which do not and it must preserve R0:0.  If it does not implement it, it MUST
clear R0:0 on exit in order to inform the caller that the request was not
honoured.
This call will fail if MessageQueue was unable to claim necessary buffer
space or the sizes were not sensible.  Error_MessageQueue_NoBufferSpace is
returned if the memory allocation failed.  Error_MessageQueue_BadMessageSize
is returned if R3 is non-zero and is either less than 24 or greater than the
value in R2.  A full list of error tokens and sample English messages may be
found in the Errors section below.
MessageQueue places no limit on the number of message queues that may be
created other than having memory available for the requested buffers.  The
memory will be claimed from either the RMA or a dynamic area. 

SWI MessageQueue_Deregister (&52881)
On entry:
        R0:     flags
                bits 31-0       Reserved (must be zero)
        R1:     message queue handle
On exit:
        R0:     flags
        R1:     number of messages discarded
        All other registers preserved.
        SWI is not re-entrant.
        Interrupt status undefined.

This call is used by the receiver when it no longer wishes to receive
messages through the MessageQueue module.  Any messages pending delivery are
discarded (the number of messages discarded is returned in R1).
If the MessageQueue module receives a Service_WimpCloseDown for a given
application identifier, then it will call this SWI on behalf of the
terminating application in order to avoid leaking memory.

SWI MessageQueue_Send (&52882)
On entry:
        R0:     flags
                bits 31-0       Reserved (must be zero)
        R1:     message queue handle
        R2:     message
On exit:
        R0:     flags
        All other registers preserved.
        SWI is re-entrant.
        Interrupts are temporarily disabled whilst internal state is
          updated.

This call is made by senders to deliver a message into a message queue.  On
entry, R2 points to the message which must be word-aligned.  The message
consists of a standard header as described in the Message Format section
above, followed by message-specific data.  The size of the message is read
from the message body.
This SWI will fail is there is insufficient buffer space available in which
to store the message.  The error is Error_MessageQueue_QueueFull unless
the message would be too large to fit in the buffer even if there were no
other messages queued, in which case Error_MessageQueue_MessageTooLarge is
returned instead.  If the message size is illegal (less than 24 or not a
multiple of 4), then Error_MessageQueue_BadMessageSize is returned. If the
message queue quoted does not exist, then the error returned is
Error_MessageQueue_UnknownQueue.

SWI MessageQueue_Receive (&52883)
On entry:
        R0:     flags
                bit  0          If set, always remove message (see below)
                bits 31-1       Reserved (must be zero)
        R1:     message queue handle
        R2:     pointer to buffer to receive message
        R3:     size of buffer
On exit:
        R0:     flags
        R3:     decremented by size of the message.
        All other registers preserved.
        SWI is re-entrant.
        Interrupts are temporarily disabled whilst internal state is
          updated.

This call is made by the receiver to extract a message from the given message
queue into its own buffers.  If there are no messages pending then
Error_MessageQueue_QueueEmpty is returned.  If a message was available and it
is not larger than the buffer size specified in R3, the message is copied in
its entirety into the caller's buffer, R3 is decremented by the size of the
message and the message is removed from the queue.  If the message was larger
than the buffer size specified in R3, then as much as possible of the message
is copied into the caller's buffer and R3 decremented by the total size of
the message but the message is not removed from the queue (but see below).
The receiver can detect that the message has been truncated since R3 will be
negative on exit.  The receiver may use this property to determine the size
of the next message by setting R3 to zero on entry.  On exit, -R3 will be the
size of the message.  Normally, the receiver would examine the pollword to
discover the size of the next message, but this usage of this SWI call may be
useful if the pollword is not available in the scope of the code which is
calling this SWI.
In this case where the caller's buffer is not large enough, bit 0 of the
flags is examined.  If this bit is set, then the message is discarded from
the message queue, otherwise it is retained at the head of the queue to be
received on the next call to this SWI.  This mechanism allows the receiver to
discard messages which are larger than it is prepared to receive and is
provided only to avoid deadlocking the queue.  If the receiver is not
prepared to receive messages larger than a specific size, it should specify
the maximum message size when calling SWI MessageQueue_Register.

SWI MessageQueue_Status (&52884)
On entry:
        R0:     flags
                bits 31-0       Reserved (must be zero)
        R1:     message queue handle (0 for first)
On exit:
        R0:     flags
        R1:     next message queue handle (-1 if no more)
        R2:     application identifier
        R3:     total buffer space claimed for message queue
        R4:     maximum size for a single message (or 0 if no limit)
        R5:     number of messages currently in queue
        R6:     space remaining in queue buffers
        R7:     size of largest message in queue
        All other registers preserved.
        SWI is re-entrant.
        Interrupts are temporarily disabled whilst internal state is read.

This call may be made by senders or receivers to examine the status of a
message queue or to discover details of all the message queues being
maintained by the MessageQueue module.  It returns the information which was
specified to SWI MessageQueue_Register and also the number of messages
currently queued, the size of the largest of those messages, and the
available buffer space for the requested each message queue.
This call may be used to discover all the message queues being maintained by
the MessageQueue module.  To enumerate all the message queues, call this SWI
with R1 set to zero.  On exit, R1 will be set to the handle of the first
message queue (-1 if there are no message queues) and R2-R7 are corrupted and
do not contain meaningful values. The returned message queue handle is then
passed to the next call to this SWI to obtain the details of that message
queue.  On exit from this call, the details in R2-R7 are valid, and R1 is the
handle of the next message queue to be passed in in R1 on the next call, or
-1 if there are no more message queues.
The possible error is Error_MessageQueue_UnknownQueue if the value in R1 is
not a valid handle and is not zero.
This call is used internally to implement *MessageQueueInfo.

*-commands
==========
The MessageQueue module provides a single diagnostic *-command which provides
a command-line interface to SWI MessageQueue_Status.

*MessageQueueInfo
  Syntax: *MessageQueueInfo
  Help: *MessageQueueInfo displays the status of all active message queues.
  Parameters: none.
  Example:  *MessageQueueInfo
  
  Related SWIs:     SWI MessageQueue_Status
  Related commands: none.
  
This *-command outputs status information about each active message queue. 
The information displayed is that returned by SWI MessageQueue_Status, laid
out in a table.

Errors
======
The MessageQueue module can generate a variety of errors.  The symbolic
constants for these messages are listed below together with sample text for a
UK build of the module.  The error base of MessageQueue is &00816200.  These
error numbers increment monotonically starting from that error base.
Error    Description
Error_MessageQueue_NoBufferSpace
        Not enough memory to create MessageQueue buffers
Error_MessageQueue_BadMessageSize
        Bad message size (%d)
Error_MessageQueue_MessageTooLarge
        Message is too large for recipient buffer
Error_MessageQueue_UnknownQueue
        Invalid message queue
Error_MessageQueue_QueueEmpty
        No messages currently in queue
Error_MessageQueue_QueueFull
        Not enough space remaining in message queue buffer


Acceptance Tests
================
A test program should be produced which creates and destroys queues, sends
messages, extracts messages - both of legal and illegal sizes - and verifies
that messages are received as expected, and that errors are generated
appropriately.
The module should exhibit O(1) performance for the number of active queues,
the size of the messages being queued, the total size of the buffer and
should not have an impact on system IRQ latency.
The MessageQueue relocatable module should not exceed 16KB in size.  The
static memory usage should not exceed 1K.  Dynamic memory usage depends on
the properties of the message queues created by receivers.
The time between a sender called MessageQueue_Send and the sent message being
available for reception by the receiver of the target queue should be not
more than 1ms over the time taken to copy the message to the message queue
buffer.

Bibliography
============

[1] Programmer's Reference Manuals Volume 3.  Part number 0470,293.

Glossary
========

API
Application Programmer Interface.
STB
Set-Top Box

Issue history
=============
A   04/12/98  First issue.
B   15/12/98  Updated after formal review.
1   05/01/99  First released version.
2   01/06/99  Classification Changed
