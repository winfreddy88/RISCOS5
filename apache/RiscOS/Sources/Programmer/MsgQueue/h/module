/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * MsgQueue (module.h)
 *
 * Copyright (C) Acorn Computers Ltd. 1999
 */

#ifndef module_h_included
#define module_h_included

#ifdef __cplusplus
extern "C" {
#endif

typedef struct MessageQueue MessageQueue;
typedef unsigned int ApplicationId;

#pragma -v1
extern void module_printf(FILE *, const char *str, ...);
#pragma -v0

typedef union {
	struct {
		int flags;
		ApplicationId application_id;
		int total_space;
		int maximum_size;
	} in;
        struct {
		int flags;
		int mq_handle;
		void *pollword;
        } out;
} messagequeue_register_args;

typedef union {
	struct {
		int flags;
		int mq_handle;
	} in;
        struct {
		int flags;
		int discard_count;
        } out;
} messagequeue_deregister_args;

typedef union {
	struct {
		int flags;
		int mq_handle;
		void *buffer;
	} in;
        struct {
		int flags;
        } out;
} messagequeue_send_args;

typedef union {
	struct {
		int flags;
		int mq_handle;
		void *buffer;
		int size_of_buffer;
	} in;
        struct {
		int flags;
		int unused_r1;
		int unused_r2;
		int outsize;
        } out;
} messagequeue_receive_args;

typedef union {
	struct {
		int flags;
		int mq_handle;
	} in;
        struct {
		int flags;
		int next_mq_handle;
		ApplicationId application_id;
		int total_space;
		int maximum_size;
		int count;
		int space_remaining;
		int largest_message;
        } out;
} messagequeue_status_args;

extern _kernel_oserror *messagequeue_register(messagequeue_register_args *);
extern _kernel_oserror *messagequeue_deregister(messagequeue_deregister_args *);
extern _kernel_oserror *messagequeue_send(messagequeue_send_args *);
extern _kernel_oserror *messagequeue_receive(messagequeue_receive_args *);
extern _kernel_oserror *messagequeue_status(messagequeue_status_args *);
extern void message_queue_info(void);
extern void deallocate_message_queues(void);

#define NO_MORE_MESSAGE_QUEUES  ((MessageQueue *) -1)
#define FIRST_MESSAGE_QUEUE	((MessageQueue *) 0)

#ifdef __cplusplus
}
#endif

#endif
