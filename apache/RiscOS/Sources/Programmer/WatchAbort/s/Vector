; Copyright 2001 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:APCS.<APCS>
        GET     Hdr:System

        GBLL    debug
debug   SETL    {TRUE}

        GBLL    first
first   SETL    {FALSE}

        GBLL    ignoreFPA
ignoreFPA SETL  {TRUE}

        IMPORT  |x$stack_overflow|
        IMPORT  |calloc|
        IMPORT  |_memcpy|
        IMPORT  |free|

                       ^ 0
Workspace_Registers    # 15*4 ; r0-r12,PC,CPSR
Workspace_USRRegisters # 2*4  ; r13_usr,r14_usr
Workspace_FIQRegisters # 8*4  ; r8_fiq-r14_fiq,SPSR_fiq
Workspace_IRQRegisters # 3*4  ; r13_irq,r14_irq,SPSR_irq
Workspace_SVCRegisters # 3*4  ; r13_svc,r14_svc,SPSR_svc
Workspace_AURegisters  # 3*4  ; either abt or und versions of r13,r14,SPSR
Workspace_OldVector    # 4    ; internal use only
Workspace_VectorCPSR   # 4    ; internal use only
 [ ignoreFPA
Workspace_CPTestScratch # 8
 ]
 [ debug
Workspace_DADWriteC    # 4
 ]
 [ debug :LOR: first
Workspace_Scratch      # 4
 ]
WorkspaceSize          * @



        AREA    |Asm$$Code|, CODE, READONLY

; struct workspace *InstallDataAbortHandler (void);
        EXPORT  InstallDataAbortHandler
InstallDataAbortHandler
        FunctionEntry "v1", MakeFrame
        CMP     sp, sl
        BLLT    |x$stack_overflow|

        MOV     a1, #(WorkspaceSize+DataAbortHandlerEnd-DataAbortHandler)/4
        MOV     a2, #4
        BL      |calloc|
        MOVS    v1, a1
        Return  "v1", fpbased, EQ

        ADD     a1, a1, #WorkspaceSize
        ADR     a2, DataAbortHandler
        MOV     a3, #DataAbortHandlerEnd-DataAbortHandler
        BL      |_memcpy|

        MOV     r0, #1
        ADD     r1, v1, #WorkspaceSize
        ADD     r2, r1, #DataAbortHandlerEnd-DataAbortHandler-4
        SWI     XOS_SynchroniseCodeAreas

        MOV     r0, #4        ; Data abort vector number
        ORR     r0, r0, #&100 ; Claim
        ADD     r1, v1, #WorkspaceSize
        SWI     XOS_ClaimProcessorVector
        STR     r1, [v1, #Workspace_OldVector]

 [ debug
        SWI     &731C0 ;XDADebug_GetWriteCAddress
        MOVVS   r0, #0
        STR     r0, [v1, #Workspace_DADWriteC]
 ]

        MOV     a1, v1
        Return  "v1", fpbased


; _kernel_oserror *RemoveDataAbortHandler (struct workspace *ws);
        EXPORT  RemoveDataAbortHandler
RemoveDataAbortHandler
        FunctionEntry "v1", MakeFrame
        CMP     sp, sl
        BLLT    |x$stack_overflow|

        MOV     v1, a1
        MOV     r0, #4        ; Data abort vector number
        LDR     r1, [v1, #Workspace_OldVector]
        ADD     r2, v1, #WorkspaceSize
        SWI     XOS_ClaimProcessorVector
        Return  "v1", fpbased, VS

        MOV     a1, v1
        BL      |free|

        MOV     a1, #0
        Return  "v1", fpbased


DataAbortHandler
        ; This code is copied into a block of RMA, so that we can use PC to
        ; address our private data, which is held immediately before the code

      [ first
        ; Store aborting PC (advanced by 8 bytes)
        STR     r14_abt, DataAbortHandler-WorkspaceSize+Workspace_Scratch
        ; Store current CPSR so we can restore it on entry to kernel
        MRS     r14_abt, CPSR
        STR     r14_abt, DataAbortHandler-WorkspaceSize+Workspace_VectorCPSR
        ; Load stored PC, if 0 then we've not had an abort yet
        LDR     r14_abt, DataAbortHandler-WorkspaceSize+Workspace_Registers+13*4
        TEQ     r14_abt, #0
        BNE     %FT80
        ; Copy aborting PC to its correct location
        LDR     r14_abt, DataAbortHandler-WorkspaceSize+Workspace_Scratch
        STR     r14_abt, DataAbortHandler-WorkspaceSize+Workspace_Registers+13*4
      |
        ; Store aborting PC (advanced by 8 bytes)
        STR     r14_abt, DataAbortHandler-WorkspaceSize+Workspace_Registers+13*4
        ; Store current CPSR so we can restore it on entry to kernel
        MRS     r14_abt, CPSR
        STR     r14_abt, DataAbortHandler-WorkspaceSize+Workspace_VectorCPSR
      ]
        ; Store CPSR that was in use at the time of the abort
        MRS     r14_abt, SPSR
        STR     r14_abt, DataAbortHandler-WorkspaceSize+Workspace_Registers+14*4
        ; Store non-banked registers
        ADR     r14_abt, DataAbortHandler-WorkspaceSize+Workspace_Registers
        STMIA   r14_abt, {r0-r12}
        ; Store banked registers - USR/SYS mode
        ADR     r14_abt, DataAbortHandler-WorkspaceSize+Workspace_USRRegisters
        STMIA   r14_abt, {r13,r14}^
        ; Store banked registers - FIQ mode
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: FIQ32_mode
        STR     r8_fiq, DataAbortHandler-WorkspaceSize+Workspace_FIQRegisters+0*4
        MRS     r8_fiq, SPSR
        STR     r8_fiq, DataAbortHandler-WorkspaceSize+Workspace_FIQRegisters+7*4
        ADR     r8_fiq, DataAbortHandler-WorkspaceSize+Workspace_FIQRegisters+1*4
        STMIA   r8_fiq, {r9-r14}
        LDR     r8_fiq, DataAbortHandler-WorkspaceSize+Workspace_FIQRegisters+0*4
        ; Store banked registers - IRQ mode
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: IRQ32_mode
        STR     r13_irq, DataAbortHandler-WorkspaceSize+Workspace_IRQRegisters+0*4
        STR     r14_irq, DataAbortHandler-WorkspaceSize+Workspace_IRQRegisters+1*4
        MRS     r14_irq, SPSR
        STR     r14_irq, DataAbortHandler-WorkspaceSize+Workspace_IRQRegisters+2*4
        LDR     r14_irq, DataAbortHandler-WorkspaceSize+Workspace_IRQRegisters+1*4
        ; Store banked registers - SVC mode
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: SVC32_mode
        STR     r13_svc, DataAbortHandler-WorkspaceSize+Workspace_SVCRegisters+0*4
        STR     r14_svc, DataAbortHandler-WorkspaceSize+Workspace_SVCRegisters+1*4
        MRS     r14_svc, SPSR
        STR     r14_svc, DataAbortHandler-WorkspaceSize+Workspace_SVCRegisters+2*4
        LDR     r14_svc, DataAbortHandler-WorkspaceSize+Workspace_SVCRegisters+1*4
        ; Store banked registers - UND mode
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: UND32_mode
        STR     r13_und, DataAbortHandler-WorkspaceSize+Workspace_AURegisters+0*4
        STR     r14_und, DataAbortHandler-WorkspaceSize+Workspace_AURegisters+1*4
        MRS     r14_und, SPSR
        STR     r14_und, DataAbortHandler-WorkspaceSize+Workspace_AURegisters+2*4
        LDR     r14_und, DataAbortHandler-WorkspaceSize+Workspace_AURegisters+1*4
 [ debug
        ; Print a "D" character to DADebug if present
        ; We need a stack; appropriate the SVC one
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: SVC32_mode
        LDR     r14_svc, DataAbortHandler-WorkspaceSize+Workspace_DADWriteC
        TEQ     r14_svc, #0
        STRNE   r0, DataAbortHandler-WorkspaceSize+Workspace_Scratch
        MOVNE   r0, #'D'
        MOVNE   r14_svc, pc
        LDRNE   pc, DataAbortHandler-WorkspaceSize+Workspace_DADWriteC
        LDRNE   r0, DataAbortHandler-WorkspaceSize+Workspace_Scratch
        LDR     r14_svc, DataAbortHandler-WorkspaceSize+Workspace_SVCRegisters+1*4
 ]
        ; Restore state and pass control on to kernel
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: ABT32_mode
80      LDR     r14_abt, DataAbortHandler-WorkspaceSize+Workspace_VectorCPSR
        MSR     CPSR_cxsf, r14_abt
        LDR     r14_abt, DataAbortHandler-WorkspaceSize+Workspace_Registers+13*4
        LDR     PC, DataAbortHandler-WorkspaceSize+Workspace_OldVector
DataAbortHandlerEnd





; struct workspace *InstallPreFetchAbortHandler (void);
        EXPORT  InstallPreFetchAbortHandler
InstallPreFetchAbortHandler
        FunctionEntry "v1", MakeFrame
        CMP     sp, sl
        BLLT    |x$stack_overflow|

        MOV     a1, #(WorkspaceSize+PreFetchAbortHandlerEnd-PreFetchAbortHandler)/4
        MOV     a2, #4
        BL      |calloc|
        MOVS    v1, a1
        Return  "v1", fpbased, EQ

        ADD     a1, a1, #WorkspaceSize
        ADR     a2, PreFetchAbortHandler
        MOV     a3, #PreFetchAbortHandlerEnd-PreFetchAbortHandler
        BL      |_memcpy|

        MOV     r0, #1
        ADD     r1, v1, #WorkspaceSize
        ADD     r2, r1, #PreFetchAbortHandlerEnd-PreFetchAbortHandler-4
        SWI     XOS_SynchroniseCodeAreas

        MOV     r0, #3        ; PreFetch abort vector number
        ORR     r0, r0, #&100 ; Claim
        ADD     r1, v1, #WorkspaceSize
        SWI     XOS_ClaimProcessorVector
        STR     r1, [v1, #Workspace_OldVector]

 [ debug
        SWI     &731C0 ;XDADebug_GetWriteCAddress
        MOVVS   r0, #0
        STR     r0, [v1, #Workspace_DADWriteC]
 ]

        MOV     a1, v1
        Return  "v1", fpbased


; _kernel_oserror *RemovePreFetchAbortHandler (struct workspace *ws);
        EXPORT  RemovePreFetchAbortHandler
RemovePreFetchAbortHandler
        FunctionEntry "v1", MakeFrame
        CMP     sp, sl
        BLLT    |x$stack_overflow|

        MOV     v1, a1
        MOV     r0, #3        ; PreFetch abort vector number
        LDR     r1, [v1, #Workspace_OldVector]
        ADD     r2, v1, #WorkspaceSize
        SWI     XOS_ClaimProcessorVector
        Return  "v1", fpbased, VS

        MOV     a1, v1
        BL      |free|

        MOV     a1, #0
        Return  "v1", fpbased


PreFetchAbortHandler
        ; This code is copied into a block of RMA, so that we can use PC to
        ; address our private data, which is held immediately before the code

        ; Store aborting PC (advanced by 8 bytes)
        STR     r14_abt, PreFetchAbortHandler-WorkspaceSize+Workspace_Registers+13*4
        ; Store current CPSR so we can restore it on entry to kernel
        MRS     r14_abt, CPSR
        STR     r14_abt, PreFetchAbortHandler-WorkspaceSize+Workspace_VectorCPSR
        ; Store CPSR that was in use at the time of the abort
        MRS     r14_abt, SPSR
        STR     r14_abt, PreFetchAbortHandler-WorkspaceSize+Workspace_Registers+14*4
        ; Store non-banked registers
        ADR     r14_abt, PreFetchAbortHandler-WorkspaceSize+Workspace_Registers
        STMIA   r14_abt, {r0-r12}
        ; Store banked registers - USR/SYS mode
        ADR     r14_abt, PreFetchAbortHandler-WorkspaceSize+Workspace_USRRegisters
        STMIA   r14_abt, {r13,r14}^
        ; Store banked registers - FIQ mode
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: FIQ32_mode
        STR     r8_fiq, PreFetchAbortHandler-WorkspaceSize+Workspace_FIQRegisters+0*4
        MRS     r8_fiq, SPSR
        STR     r8_fiq, PreFetchAbortHandler-WorkspaceSize+Workspace_FIQRegisters+7*4
        ADR     r8_fiq, PreFetchAbortHandler-WorkspaceSize+Workspace_FIQRegisters+1*4
        STMIA   r8_fiq, {r9-r14}
        LDR     r8_fiq, PreFetchAbortHandler-WorkspaceSize+Workspace_FIQRegisters+0*4
        ; Store banked registers - IRQ mode
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: IRQ32_mode
        STR     r13_irq, PreFetchAbortHandler-WorkspaceSize+Workspace_IRQRegisters+0*4
        STR     r14_irq, PreFetchAbortHandler-WorkspaceSize+Workspace_IRQRegisters+1*4
        MRS     r14_irq, SPSR
        STR     r14_irq, PreFetchAbortHandler-WorkspaceSize+Workspace_IRQRegisters+2*4
        LDR     r14_irq, PreFetchAbortHandler-WorkspaceSize+Workspace_IRQRegisters+1*4
        ; Store banked registers - SVC mode
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: SVC32_mode
        STR     r13_svc, PreFetchAbortHandler-WorkspaceSize+Workspace_SVCRegisters+0*4
        STR     r14_svc, PreFetchAbortHandler-WorkspaceSize+Workspace_SVCRegisters+1*4
        MRS     r14_svc, SPSR
        STR     r14_svc, PreFetchAbortHandler-WorkspaceSize+Workspace_SVCRegisters+2*4
        LDR     r14_svc, PreFetchAbortHandler-WorkspaceSize+Workspace_SVCRegisters+1*4
        ; Store banked registers - UND mode
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: UND32_mode
        STR     r13_und, PreFetchAbortHandler-WorkspaceSize+Workspace_AURegisters+0*4
        STR     r14_und, PreFetchAbortHandler-WorkspaceSize+Workspace_AURegisters+1*4
        MRS     r14_und, SPSR
        STR     r14_und, PreFetchAbortHandler-WorkspaceSize+Workspace_AURegisters+2*4
        LDR     r14_und, PreFetchAbortHandler-WorkspaceSize+Workspace_AURegisters+1*4
 [ debug
        ; Print a "P" character to DADebug if present
        ; We need a stack; appropriate the SVC one
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: SVC32_mode
        LDR     r14_svc, PreFetchAbortHandler-WorkspaceSize+Workspace_DADWriteC
        TEQ     r14_svc, #0
        STRNE   r0, PreFetchAbortHandler-WorkspaceSize+Workspace_Scratch
        MOVNE   r0, #'P'
        MOVNE   r14_svc, pc
        LDRNE   pc, PreFetchAbortHandler-WorkspaceSize+Workspace_DADWriteC
        LDRNE   r0, PreFetchAbortHandler-WorkspaceSize+Workspace_Scratch
        LDR     r14_svc, PreFetchAbortHandler-WorkspaceSize+Workspace_SVCRegisters+1*4
 ]
        ; Restore state and pass control on to kernel
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: ABT32_mode
        LDR     r14_abt, PreFetchAbortHandler-WorkspaceSize+Workspace_VectorCPSR
        MSR     CPSR_cxsf, r14_abt
        LDR     r14_abt, PreFetchAbortHandler-WorkspaceSize+Workspace_Registers+13*4
        LDR     PC, PreFetchAbortHandler-WorkspaceSize+Workspace_OldVector
PreFetchAbortHandlerEnd





; struct workspace *InstallUndefinedHandler (void);
        EXPORT  InstallUndefinedHandler
InstallUndefinedHandler
        FunctionEntry "v1", MakeFrame
        CMP     sp, sl
        BLLT    |x$stack_overflow|

        MOV     a1, #(WorkspaceSize+UndefinedHandlerEnd-UndefinedHandler)/4
        MOV     a2, #4
        BL      |calloc|
        MOVS    v1, a1
        Return  "v1", fpbased, EQ

        ADD     a1, a1, #WorkspaceSize
        ADR     a2, UndefinedHandler
        MOV     a3, #UndefinedHandlerEnd-UndefinedHandler
        BL      |_memcpy|

        MOV     r0, #1
        ADD     r1, v1, #WorkspaceSize
        ADD     r2, r1, #UndefinedHandlerEnd-UndefinedHandler-4
        SWI     XOS_SynchroniseCodeAreas

        MOV     r0, #1        			; Undefined instruction vector number
        ORR     r0, r0, #&100 ; Claim
        ADD     r1, v1, #WorkspaceSize
        SWI     XOS_ClaimProcessorVector
        STR     r1, [v1, #Workspace_OldVector]

 [ debug
        SWI     &731C0 ;XDADebug_GetWriteCAddress
        MOVVS   r0, #0
        STR     r0, [v1, #Workspace_DADWriteC]
 ]

        MOV     a1, v1
        Return  "v1", fpbased


; _kernel_oserror *RemoveUndefinedHandler (struct workspace *ws);
        EXPORT  RemoveUndefinedHandler
RemoveUndefinedHandler
        FunctionEntry "v1", MakeFrame
        CMP     sp, sl
        BLLT    |x$stack_overflow|

        MOV     v1, a1
        MOV     r0, #1        ; Undefined instruction vector number
        LDR     r1, [v1, #Workspace_OldVector]
        ADD     r2, v1, #WorkspaceSize
        SWI     XOS_ClaimProcessorVector
        Return  "v1", fpbased, VS

        MOV     a1, v1
        BL      |free|

        MOV     a1, #0
        Return  "v1", fpbased


UndefinedHandler
        ; This code is copied into a block of RMA, so that we can use PC to
        ; address our private data, which is held immediately before the code
      [ ignoreFPA
        STR     r14_und, UndefinedHandler-WorkspaceSize+Workspace_CPTestScratch
        MRS     r14_und, CPSR
        STR     r14_und, UndefinedHandler-WorkspaceSize+Workspace_CPTestScratch+4
        ; Check the instruction to see if it's an FPA one
        LDR     r14_und, UndefinedHandler-WorkspaceSize+Workspace_CPTestScratch
        LDR     r14_und, [r14_und, #-4]
        EOR     r14_und, r14_und, #&0C000000
        TST     r14_und, #&0E000000 ; LDC/STC?
        EOR     r14_und, r14_und, #&02000000
        TSTNE   r14_und, #&0F000000; or CDP/MCR/MRC?
        BNE     %FT10 ; no, so definitely log it
        EOR     r14_und, r14_und, #&100
        TST     r14_und, #&F00 ; CP1?
        EOR     r14_und, r14_und, #&300
        TSTNE   r14_und, #&F00 ; or CP2?
        BNE     %FT10 ; not an FPA instruction, so log it
        ; Restore state and pass control on to kernel
        LDR     r14_und, UndefinedHandler-WorkspaceSize+Workspace_CPTestScratch+4
        MSR     CPSR_f, r14_und
        LDR     r14_und, UndefinedHandler-WorkspaceSize+Workspace_CPTestScratch
        LDR     PC, UndefinedHandler-WorkspaceSize+Workspace_OldVector
10
        LDR     r14_und, UndefinedHandler-WorkspaceSize+Workspace_CPTestScratch+4
        MSR     CPSR_f, r14_und
        LDR     r14_und, UndefinedHandler-WorkspaceSize+Workspace_CPTestScratch
      ]
        ; Store aborting PC (advanced by 4 bytes)
        STR     r14_und, UndefinedHandler-WorkspaceSize+Workspace_Registers+13*4
        ; Store current CPSR so we can restore it on entry to kernel
        MRS     r14_und, CPSR
        STR     r14_und, UndefinedHandler-WorkspaceSize+Workspace_VectorCPSR
        ; Store CPSR that was in use at the time of the exception
        MRS     r14_und, SPSR
        STR     r14_und, UndefinedHandler-WorkspaceSize+Workspace_Registers+14*4
        ; Store non-banked registers
        ADR     r14_und, UndefinedHandler-WorkspaceSize+Workspace_Registers
        STMIA   r14_und, {r0-r12}
        ; Store banked registers - USR/SYS mode
        ADR     r14_und, UndefinedHandler-WorkspaceSize+Workspace_USRRegisters
        STMIA   r14_und, {r13,r14}^
        ; Store banked registers - FIQ mode
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: FIQ32_mode
        STR     r8_fiq, UndefinedHandler-WorkspaceSize+Workspace_FIQRegisters+0*4
        MRS     r8_fiq, SPSR
        STR     r8_fiq, UndefinedHandler-WorkspaceSize+Workspace_FIQRegisters+7*4
        ADR     r8_fiq, UndefinedHandler-WorkspaceSize+Workspace_FIQRegisters+1*4
        STMIA   r8_fiq, {r9-r14}
        LDR     r8_fiq, UndefinedHandler-WorkspaceSize+Workspace_FIQRegisters+0*4
        ; Store banked registers - IRQ mode
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: IRQ32_mode
        STR     r13_irq, UndefinedHandler-WorkspaceSize+Workspace_IRQRegisters+0*4
        STR     r14_irq, UndefinedHandler-WorkspaceSize+Workspace_IRQRegisters+1*4
        MRS     r14_irq, SPSR
        STR     r14_irq, UndefinedHandler-WorkspaceSize+Workspace_IRQRegisters+2*4
        LDR     r14_irq, UndefinedHandler-WorkspaceSize+Workspace_IRQRegisters+1*4
        ; Store banked registers - SVC mode
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: SVC32_mode
        STR     r13_svc, UndefinedHandler-WorkspaceSize+Workspace_SVCRegisters+0*4
        STR     r14_svc, UndefinedHandler-WorkspaceSize+Workspace_SVCRegisters+1*4
        MRS     r14_svc, SPSR
        STR     r14_svc, UndefinedHandler-WorkspaceSize+Workspace_SVCRegisters+2*4
        LDR     r14_svc, UndefinedHandler-WorkspaceSize+Workspace_SVCRegisters+1*4
        ; Store banked registers - ABT mode
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: ABT32_mode
        STR     r13_und, UndefinedHandler-WorkspaceSize+Workspace_AURegisters+0*4
        STR     r14_und, UndefinedHandler-WorkspaceSize+Workspace_AURegisters+1*4
        MRS     r14_und, SPSR
        STR     r14_und, UndefinedHandler-WorkspaceSize+Workspace_AURegisters+2*4
        LDR     r14_und, UndefinedHandler-WorkspaceSize+Workspace_AURegisters+1*4
 [ debug
        ; Print a "U" character to DADebug if present
        ; We need a stack; appropriate the SVC one
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: SVC32_mode
        LDR     r14_svc, UndefinedHandler-WorkspaceSize+Workspace_DADWriteC
        TEQ     r14_svc, #0
        STRNE   r0, UndefinedHandler-WorkspaceSize+Workspace_Scratch
        MOVNE   r0, #'U'
        MOVNE   r14_svc, pc
        LDRNE   pc, UndefinedHandler-WorkspaceSize+Workspace_DADWriteC
        LDRNE   r0, UndefinedHandler-WorkspaceSize+Workspace_Scratch
        LDR     r14_svc, UndefinedHandler-WorkspaceSize+Workspace_SVCRegisters+1*4
 ]
        ; Restore state and pass control on to kernel
        MSR     CPSR_c, #I32_bit :OR: F32_bit :OR: UND32_mode
        LDR     r14_und, UndefinedHandler-WorkspaceSize+Workspace_VectorCPSR
        MSR     CPSR_cxsf, r14_und
        LDR     r14_und, UndefinedHandler-WorkspaceSize+Workspace_Registers+13*4
        LDR     PC, UndefinedHandler-WorkspaceSize+Workspace_OldVector
UndefinedHandlerEnd

        END
