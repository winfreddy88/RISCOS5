
ABOUT
=====

The HeapUtils module is a work-around for a long-standing RISC OS problem
where any software which wants to claim memory from a dynamic area OS heap
(such as the RMA) in an interrupt context cannot be sure that it will get the
memory because the heap may not contain a large enough free block but cannot
grow during an interrupt.

This module will periodically (ten times a second) check the size of the free
space at the top of a nominated heap and grow the dynamic area (and heap) if
less than some threshold.

Dynamic areas can be nominated to be watched by HeapUtils using the *command
provided. They can also be removed from the list of heaps being monitored
using a *command.

The default list of heaps to watch is:

  Module area (RMA), System heap/stack, PCI shared memory

HeapUtils will ensure that the nominated heaps have at least two pages of
free memory at the top but a SWI can be called which tells HeapUtils to
increase this amount temporarily. If someone makes a request to allocate
space in a heap which isn't being watched, an error will be returned by the
SWI call.


EXAMPLE USAGE
=============

The basic process can be as follows:

* Load HeapUtils and it will start monitoring its default heaps
* Add any other heap(s) you want to be watched
* HeapUtils will try to maintain at least two free machine pages at the end
  of each heap
* Your IRQ handler gets called
  * Try to allocate some memory from (e.g.) RMA
  * If it fails, the chances are you asked for more than two pages -
    call SWI HeapUtils_Request for the amout you require and it should
    be allocated next time the HeapUtils callback gets called
* Your IRQ handler gets called
  * The memory allocation should work this time


CLI COMMANDS
============

*HeapUtils_Status

Outputs status information for any heaps currently monitored.

*HeapUtils_Watch <dynamic area name>

Adds a dynamic area containing an OS_Heap to the list of those monitored.
HeapUtils will ensure that at least two pages are kept free at the end of the
heap's dynamic area.

*HeapUtils_Forget <dynamic area name>

Removes a dynamic area containing an OS_Heap from the list of those
monitored.


SWIS
====

SWI HeapUtils_Request (&58240) - this SWI is reentrant

Ask for a specific amount of memory to be made available on the specified
heap. If we're already maintaining that heap with more free space, we ignore
this request (other than setting our callback to ensure that we check the
free space as soon as possible).

Once we've done it, we can forget the request and go back to maintaining the
level which we were using before the request came in.

In...
  R0  = flags (reserved, should be zero)
  R1  = pointer to heap (base of dynamic area)
  R3  = number of bytes to ensure
Out...
  R0    = corrupted (or error pointer)
  R1-R3 = preserved
