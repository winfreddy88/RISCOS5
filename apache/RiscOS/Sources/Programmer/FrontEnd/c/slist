/* Copyright 1999 Element 14 Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -> c.Slist
 * Title:       Slist - singly-linked lists
 * Author:      JGT (converted from MJJ)
 *
 */

#include <stdio.h>
#include "slist.h"

typedef struct listrec * ListPtr;

struct listrec
{
  ListPtr next;
};

#define next_(p) (((ListPtr)p)->next)

void *slist_add(void *listhead, void *newelement)
{
   next_(newelement) = listhead;
   return newelement;
}

void * slist_addend(void *listhead, void *newelement)
{
   void *t, *tf;

   next_(newelement) = NULL;
   if (!listhead) return newelement;
   t = listhead;
   do
   {
     tf = next_(t);
     if (!tf) break;
     t = tf;
   } while (1);
   next_(t) = newelement;
   return listhead;
}

void *slist_remove(void *listhead, void *element)
{
void *t, *tf;

   if (!listhead) return NULL;
   if (listhead == element) return next_(listhead);
   t = listhead;
   do
   {
     tf = next_(t);
     if (!tf) return listhead;
     if (tf == element)
     {
       /* match - remove it */
       next_(t) = next_(tf);
       return listhead;
     };
     t = tf; /* onto next */
   } while (1);
}

void *slist_joinend(void *listhead, void *newlist)
{
   void *t, *tf;

   if (!listhead) return newlist;
   t = listhead;
   do
   {
     tf = next_(t);
     if (!tf) break;
     t = tf;
   } while (1);
   next_(t) = newlist;
   return listhead;
}
