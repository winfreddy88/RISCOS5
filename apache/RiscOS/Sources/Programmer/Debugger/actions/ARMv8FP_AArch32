# Copyright 2018 Castle Technology Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Actions for ARMv8 FP disassembly (just the ARMv8 bits)

VMAXNM_VMINNM_A1(op,D:Vd,N:Vn,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ARMv8);
	ASIMD_F32_D_N_M(JUSTPARAMS,(op?"VMINNM":"VMAXNM"),Q,D_Vd,N_Vn,M_Vm);
	return;
}

VMAXNM_VMINNM_A2(D,Vn,Vd,sz,op,N,M,Vm,nonstandard)
{
	COMMON
	ONLY1(ARMv8);
	VFP_CC_VD_VN_VM(JUSTPARAMS,(op?"VMINNM":"VMAXNM"),(op?"VMINNM":"VMAXNM"),14,sz,Vd,D,Vn,N,Vm,M);
	return;
}

VCVTx_ASIMD_A1(D:Vd,RM,op,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ARMv8);
	const char rms[4] = {'A','N','P','M'};
	sprintf(params->buf,(Q?"VCVT%c.%c32.F32\tQ%d,Q%d":"VCVT%c.%c32.F32\tD%d,D%d"),rms[RM],(op?'U':'S'),D_Vd>>Q,M_Vm>>Q);
	return;
}

VCVTx_fp_A1(D,RM,Vd,sz,op,M,Vm,nonstandard)
{
	COMMON
	ONLY1(ARMv8);
	const char rms[4] = {'A','N','P','M'};
	if (sz)
	{
		sprintf(params->buf,"VCVT%c.%c32.F64\tS%d,D%d",rms[RM],(op?'S':'U'),(Vd<<1)|D,(M<<4)|Vm);
	}
	else
	{
		sprintf(params->buf,"VCVT%c.%c32.F32\tS%d,S%d",rms[RM],(op?'S':'U'),(Vd<<1)|D,(Vm<<1)|M);
	}
	return;
}

VCVTB_VCVTT_A1(cond,D,Vd,op,T,M,Vm,nonstandard)
{
	COMMON
	ONLY1(ARMv8);
	if (op)
	{
		sprintf(params->buf,"VCVT%c%s.F16.F64\tS%d,D%d",(T?'T':'B'),condition(JUSTPARAMS,cond),(Vd<<1)|D,(M<<4)|Vm);
	}
	else
	{
		sprintf(params->buf,"VCVT%c%s.F64.F16\tD%d,S%d",(T?'T':'B'),condition(JUSTPARAMS,cond),(D<<4)|Vd,(Vm<<1)|M);
	}
	return;
}

VRINTx_ASIMD_A1(D:Vd,op,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ARMv8);
	const char rms[4] = {'N','A','M','P'};
	sprintf(params->buf,(Q?"VRINT%c.F32.F32\tQ%d,Q%d":"VRINT%c.F32.F32\tD%d,D%d"),rms[op>>1],D_Vd>>Q,M_Vm>>Q);
	return;
}

VRINTx_fp_A1(D,RM,Vd,sz,M,Vm,nonstandard)
{
	COMMON
	ONLY1(ARMv8);
	const char rms[4] = {'A','N','P','M'};
	char opstr[12];
	sprintf(opstr,"VRINT%c.F%d",rms[RM],(sz?64:32));
	VFP_CC_VD_VM(JUSTPARAMS,opstr,opstr,14,sz,Vd,D,Vm,M);
	return;
}

VRINTR_VRINTZ_fp_A1(cond,D,Vd,sz,op,M,Vm,nonstandard)
{
	COMMON
	ONLY1(ARMv8);
	char opstr[16];
	sprintf(opstr,"VRINT%c%s.F%d",(op?'Z':'R'),condition(JUSTPARAMS,cond),(sz?64:32));
	VFP_CC_VD_VM(JUSTPARAMS,opstr,opstr,14,sz,Vd,D,Vm,M);
	return;
}

VRINTX_ASIMD_A1(D:Vd,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ARMv8);
	sprintf(params->buf,(Q?"VRINTX.F32.F32\tQ%d,Q%d":"VRINTX.F32.F32\tD%d,D%d"),D_Vd>>Q,M_Vm>>Q);
	return;
}

VRINTZ_ASIMD_A1(D:Vd,Q,M:Vm,nonstandard)
{
	COMMON
	ONLY1(ARMv8);
	sprintf(params->buf,(Q?"VRINTZ.F32.F32\tQ%d,Q%d":"VRINTZ.F32.F32\tD%d,D%d"),D_Vd>>Q,M_Vm>>Q);
	return;
}

VRINTX_fp_A1(cond,D,Vd,sz,M,Vm,nonstandard)
{
	COMMON
	ONLY1(ARMv8);
	char opstr[16];
	sprintf(opstr,"VRINTX%s.F%d",condition(JUSTPARAMS,cond),(sz?64:32));
	VFP_CC_VD_VM(JUSTPARAMS,opstr,opstr,14,sz,Vd,D,Vm,M);
	return;
}

VSELxx_A1(D,cc,Vn,Vd,sz,N,M,Vm,nonstandard)
{
	COMMON
	ONLY1(ARMv8);
	const char conds[4] = {0,6,10,12};
	VFP_CC_VD_VN_VM(JUSTPARAMS,"VSEL","VSEL",conds[cc],sz,Vd,D,Vn,N,Vm,M);
	return;
}
