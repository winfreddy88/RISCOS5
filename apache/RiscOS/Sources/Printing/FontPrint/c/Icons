/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Handle icons
 */

#include "swis.h"
#include "main.h"
#include "fonts.h"
#include "icons.h"
#include "panes.h"
#include "debug.h"

#define INDIR_BUF_MAX 100

static char *mapto_string = NULL;
static char *download_string = NULL;

int icon_distance;
Bool tempsel;

static char indirbuf [3][INDIR_BUF_MAX + 1];

static int iconblk [3][8] =
{
{
    0, 0, 0, 0,         /* coords relative to window work area */
    ICON_FLAGS,         /* icon flags without SELECTED bit */
    0,			/* pointer to text buffer */
    0,                  /* pointer to validation string */
    INDIR_BUF_MAX,
},
{
    0, 0, 0, 0,         /* coords relative to window work area */
    ICON_FLAGS,         /* icon flags without SELECTED bit */
    0,			/* pointer to text buffer */
    0,                  /* pointer to validation string */
    INDIR_BUF_MAX,
},
{
    0, 0, 0, 0,         /* coords relative to window work area */
    ICON_FLAGS,         /* icon flags without SELECTED bit */
    0,			/* pointer to text buffer */
    0,                  /* pointer to validation string */
    INDIR_BUF_MAX,
}
};


static void add_padded (char *dest, char *src)
{
    sprintf(dest, "%.*s", INDIR_BUF_MAX, src);
}


/*
 * x0 and y0 are work-area relative
 */
void set_icon_to (FontPtr font, int y0)
{
    if (download_string == NULL)
    {
        download_string = strsave(message_lookup(&msgs, "sDownLoad"));
        mapto_string    = strsave(message_lookup(&msgs, "sMapTo"));
    }

    if (font->type == Downloaded)
    {
        add_padded(indirbuf[0], font->local);
        add_padded(indirbuf[1], download_string);
        add_padded(indirbuf[2], "");
    }
    else
    {
        add_padded(indirbuf[0], font->local);
        add_padded(indirbuf[1], mapto_string);
        add_padded(indirbuf[2], font->foreign);
    }


    if (font->selected)
        iconblk[0][4] = iconblk[1][4] = iconblk[2][4] = ICON_FLAGS_SELECTED;
    else
        iconblk[0][4] = iconblk[1][4] = iconblk[2][4] = ICON_FLAGS;

    iconblk[0][1] = y0;
    iconblk[0][3] = y0 + icon_distance;
    iconblk[0][5] = (int) indirbuf[0];

    iconblk[1][1] = y0;
    iconblk[1][3] = y0 + icon_distance;
    iconblk[1][5] = (int) indirbuf[1];

    iconblk[2][1] = y0;
    iconblk[2][3] = y0 + icon_distance;
    iconblk[2][5] = (int) indirbuf[2];
}


void set_icon_positions (int width)
{
    static int percentage1 = -1, percentage2;
    if (percentage1 == -1)
    {
	percentage1 = atoi(message_lookup(&msgs, "percent1"));
	percentage2 = atoi(message_lookup(&msgs, "percent2"));
    }
    iconblk[0][0] = 0;
    iconblk[0][2] = (((width * percentage1) / 100) >> xEig) << xEig;
    iconblk[1][0] = iconblk[0][2];
    iconblk[1][2] = (((width * percentage2) / 100) >> xEig) << xEig;
    iconblk[2][0] = iconblk[1][2];
    iconblk[2][2] = width;
}


void plot_icon (void)
{
    _swix(Wimp_PlotIcon, _IN(1), iconblk[0]);
    _swix(Wimp_PlotIcon, _IN(1), iconblk[1]);
    _swix(Wimp_PlotIcon, _IN(1), iconblk[2]);
}

/*
 * Return the font associated with the given y coordinate.  The point
 * is specified in work area coordinates (ie, it has been adjusted
 * for scrollbar offsets and window position).  The top left point is
 * at 0,0 and the y coordinate is negative-downwards.
 */

FontPtr which_icon (int miny)
{
    int bottom = extent_maxy - ICON_MARGIN - icon_distance;
    FontPtr font = firstFont;
    while (font)
    {
        if (bottom <= miny)
            return font;
        bottom -= icon_distance;
        font = font->next;
    }
    return font;
}

/*
 * Return the work-area relative coordinate of the specified font entry,
 * which is negative (or zero) downwards from the top of the work area.
 * The font must exist.  The coord returned is the MINIMUM y coord
 */

int icon_y_pos (FontPtr font)
{
    int y = extent_maxy - ICON_MARGIN - icon_distance;
    FontPtr f = firstFont;
    while (f != font)
    {
        y -= icon_distance;
        f = f -> next;
    }
    return y;
}


void icon_clicked (void)
{
    int worky;
    int wminx, wminy, wmaxx, wmaxy;
    FontPtr font;

    _swix(Wimp_GetWindowState, _IN(1), templates[PANE_LIST].wbuf);
    worky = mousey - (maxy(PANE_LIST) - scrolly(PANE_LIST));

    font = which_icon(worky);
    if (font == NULL)
        return;

    /* Get the visible part of the work area */
    wminx = scrollx(PANE_LIST);
    wmaxy = scrolly(PANE_LIST);
    wmaxx = wminx + (maxx(PANE_LIST) - minx(PANE_LIST));
    wminy = wmaxy - (maxy(PANE_LIST) - miny(PANE_LIST));
    switch (buttons)
    {
        int oldnsel;
    case 4:
        oldnsel = num_selected;
        deselect_all();
        select_font(font);
        if (oldnsel > 0)
            update_partial_win(wminx, wminy, wmaxx, wmaxy);
        else
        {
            wminy = icon_y_pos(font);
            wmaxy = wminy + icon_distance;
            update_partial_win(wminx, wminy, wmaxx, wmaxy);
        }
        break;
    case 1:
        toggle_font(font);
        wminy = icon_y_pos(font);
        wmaxy = wminy + icon_distance;
        update_partial_win(wminx, wminy, wmaxx, wmaxy);
        break;
    }
    tempsel = FALSE;
}

void deselect_unhighlight(void)
{
    FontPtr font;
    for (font = firstFont; font; font = font->next)
        if (font->selected)
        {
            int xpos = scrollx(PANE_LIST);
            int ypos = icon_y_pos(font);
            font->selected = FALSE;
            update_partial_win(xpos, ypos, xpos + (maxx(PANE_LIST) - minx(PANE_LIST)),
                               ypos + icon_distance);
        }
    num_selected = 0;
    tempsel = FALSE;
}
