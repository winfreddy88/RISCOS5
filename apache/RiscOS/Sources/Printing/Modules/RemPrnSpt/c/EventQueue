/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * EventQueue.c - wrapper on top of List.c
 *  Implements a simple queue using a list - adds
 *  items at end of list, picks items off start
 */

#include <string.h>
#include <stdlib.h>
#include <kernel.h>
#include <swis.h>

#include "Module.h"
#include "Debug.h"
#include "msgs.h"
#include "List.h"
#include "EventQueue.h"

/*
 * Global state for this type
 */

static _kernel_oserror *e ;
extern _kernel_oserror err ;

static List q = NULL ;

_kernel_oserror *Queue_Add (Event object)
{
        if (q == NULL)
        {
                e = List_New (&q, "Event", sizeof (struct _Event)) ;
                if (e) return (e) ;
        }

        return (List_AddItemAtEnd (q, object, "Event")) ;
}

int Queue_IsEmpty (void)
{
        return (List_IsEmpty (q)) ;
}

_kernel_oserror *Queue_Read (Event *ev)
{
        if (List_IsEmpty (q))
        {
                return ((_kernel_oserror *) NULL) ;
        }

debug dprintf ("Queue_Get: About to do List_GetCurrent\n\r") ;

        return (List_GetFirst (q, (void **) ev)) ; /* Get 1st item off list */
}

_kernel_oserror *Queue_Remove (void)
{
        Event ev ;

        if (List_IsEmpty (q))
        {
                return ((_kernel_oserror *) NULL) ;
        }

        Queue_Read (&ev) ;

        if (ev->object)
                free (ev->object) ; /* Free description string */

        return (List_DeleteItemAtStart (q)) ; /* Frees Event structure */
}
