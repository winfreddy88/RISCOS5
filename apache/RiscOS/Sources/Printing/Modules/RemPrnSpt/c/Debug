/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>
#include <string.h>

#include <swis.h>
#include <kernel.h>

#include "Module.h"
#include "Debug.h"

/* #define DEBUG_FILE "devices#19200:$.serial" */
/* #define DEBUG_FILE "pipe:RemPrnDbg" */
#define DEBUG_FILE "RAM::RamDisc0.$.RemPrnDbg"
/* #define DEBUG_FILE "Waste:Basket.RemPrnDbg" */

#ifdef DEBUG

static FILE *debug_handle ;

static int debungling = FALSE ;

/*
 * Erm, doofa function to set up the serial port as we
 * want it.
 */

void setup_serial (void)
{
        _kernel_swi_regs r ;

        /*
         * Data format 8n1
         */

        r.r[0] = 1 ;
        r.r[1] = 0 ;
        _kernel_swi (OS_SerialOp, &r, &r) ;
}

void debug_start (void)
{
        _kernel_oserror e ;

        /*
         * Open debug channel
         */

        setup_serial () ;

        if ((debug_handle = fopen (DEBUG_FILE, "ab+")) == NULL)
        {
                e.errnum = 1000 ;
                strncpy (e.errmess, "RemotePrinterSupport: Cannot open file for debungling", 252) ;

                debungling = FALSE ;

                _kernel_raise_error (&e) ;
        }
        else
        {
                _kernel_swi_regs r ;

                r.r[0] = 18 ;
                r.r[1] = (int) DEBUG_FILE ;
                r.r[2] = 0xFFF ;
                _kernel_swi (OS_File, &r, &r) ;

                setvbuf (debug_handle, (char *)NULL, _IONBF, 0) ;

                debungling = TRUE ;
        }
}

void debug_stop (void)
{
        if (debungling)
                fclose (debug_handle) ;
}

int dprintf (const char *format, ...)
{
        va_list argl;

        if (!debungling)
                return (0) ;

        va_start (argl, format);

        vfprintf (debug_handle, format, argl) ;

        va_end (argl);

        return (0) ;
}

#endif /* DEBUG */
