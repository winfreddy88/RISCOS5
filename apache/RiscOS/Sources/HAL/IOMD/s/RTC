; Copyright 2013 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        $GetIO
        GET     Hdr:OSEntries
        GET     Hdr:HALEntries
        GET     Hdr:HALDevice
        GET     Hdr:RTCDevice

        GET     hdr.StaticWS

        EXPORT  RTC_Init

        IMPORT  memcpy

RTCAddressPHI   * &A0
                ^ 0
RTC_Public         # HALDevice_RTC_Size
RTCDeviceHAL_SB    # 4
RTCDevice_RTC_Size # 0

; HAL code for the PCF8583 real time clock
 
        AREA    |Asm$$Code|, CODE, READONLY, PIC

RTC_Init ROUT
        Push    "lr"

        SUB     sp, sp, #12+4

        MOV     a1, sp
        MOV     a2, #RTCAddressPHI + 1  ; read op
        ADD     a3, sp, #12             ; -> data block
        MOV     a4, #1                  ; data block size
        STMIA   a1, {a2-a4}

        MOV     a2, #1                  ; 1 transfer on bus 0
        CallOS  OS_IICOpV
        TEQ     a1, #IICStatus_Completed
        BNE     %FT10                   ; some failure => no RTC device
        
        MOV     a1, sp
        MOV     a2, #RTCAddressPHI
        ORR     a2, a2, #1:SHL:29       ; write op with retry
        ADD     a3, sp, #12             ; -> data block
        MOV     a4, #0
        STR     a4, [a3]                ; write 0 to control register 0
        MOV     a4, #2                  ; data block size
        STMIA   a1, {a2-a4}

        MOV     a2, #1                  ; 1 transfer on bus 0
        CallOS  OS_IICOpV

        ADR     a1, RTCDeviceStruct 
        ADR     a2, RTCTemplate
        MOV     a3, #RTCDevice_RTC_Size
        BL      memcpy                  ; softcopy needed to append SB to

        STR     sb, [a1, #RTCDeviceHAL_SB]
        
        MOV     a2, a1                  ; device
        MOV     a1, #0                  ; flags
        CallOS  OS_AddDevice
10
        ADD     sp, sp, #12+4
        Pull    "pc"

RTCTemplate
        ; Public interface
        DCW     HALDeviceType_SysPeri + HALDeviceSysPeri_RTC
        DCW     HALDeviceID_RTC_PCF8583
        DCD     HALDeviceBus_Ser + HALDeviceSerBus_IIC
        DCD     0                       ; API version
        DCD     RTCDesc
        DCD     0                       ; Address - N/A
        %       12                      ; Reserved
        DCD     RTCActivate
        DCD     RTCDeactivate
        DCD     RTCReset
        DCD     RTCSleep
        DCD     -1                      ; Interrupt N/A
        DCD     0
        %       8
        ; Specifics for an RTC
        DCB     RTCTimeFormat_BCD
        DCB     RTCFormatFlags_BCD_1BasedDay + \
                RTCFormatFlags_BCD_1BasedMonth + \
                RTCFormatFlags_BCD_NeedsYearHelp
        %       2
        DCD     RTCReadTime
        DCD     RTCWriteTime
        ASSERT  (.-RTCTemplate) = HALDevice_RTC_Size
        ; RTC's private data from here onwards
        DCD     0                       ; Copy of HAL's SB
        ASSERT  (.-RTCTemplate) = RTCDevice_RTC_Size
        ASSERT  ?RTCDeviceStruct = RTCDevice_RTC_Size
          
RTCDesc
        DCB     "PCF8583 real-time clock", 0
        ALIGN

RTCActivate
        MOV     a1, #1
RTCDeactivate
RTCReset
        MOV     pc, lr
RTCSleep
        MOV     a1, #0                  ; Previously at full power
        MOV     pc, lr

        ; int RTCReadTime(struct rtcdevice *rtc, struct rtctime *time)
        ; Returns an RTCRetCode
RTCReadTime ROUT
        Push    "sb, v1, lr"
        
        MOV     v1, a2
        LDR     sb, [a1, #RTCDeviceHAL_SB]
        SUB     sp, sp, #12+12+8

        ADD     a1, sp, #12
        MOV     a2, #RTCAddressPHI + 1  ; read op
        ADD     a3, sp, #12+12+0        ; -> data block
        MOV     a4, #6                  ; data block size
        STMIA   a1, {a2-a4}

        MOV     a2, #RTCAddressPHI
        ORR     a2, a2, #1:SHL:29       ; write op with retry
        ADD     a3, sp, #12+12+6        ; -> data block
        MOV     a4, #1                  ; data block size
        STRB    a4, [a3]                ; start from register 1
        STMDB   a1!, {a2-a4}

        MOV     a2, #2                  ; 2 transfers on bus 0
        CallOS  OS_IICOpV
        TEQ     a1, #IICStatus_Completed
        MOVNE   a1, #RTCRetCode_Error
        BNE     %FT10

        ASSERT  RTCTimeStruct_BCD_Centiseconds = 0
        ASSERT  RTCTimeStruct_BCD_Seconds = 1
        ASSERT  RTCTimeStruct_BCD_Minutes = 2
        ASSERT  RTCTimeStruct_BCD_Hours = 3
        LDR     a3, [sp, #12+12+0]
        STR     a3, [v1, #0]            ; chip regs match struct

        ASSERT  RTCTimeStruct_BCD_DayOfMonth = 4
        ASSERT  RTCTimeStruct_BCD_Month = 5
        ASSERT  RTCTimeStruct_BCD_YearLO = 6
        LDR     a3, [sp, #12+12+4]
        MOV     a4, a3, LSL #8+2
        AND     a4, a4, #2_11:SHL:16    ; isolate year
        BIC     a2, a3, #2_11:SHL:6     ; isolate day of month
        MOV     a2, a2, LSL #16+3       ; isolate month
        ORR     a3, a4, a2, LSR #16+3
        STR     a3, [v1, #4]

        MOV     a1, #RTCRetCode_OK
10
        ADD     sp, sp, #12+12+8
        Pull    "sb, v1, pc"

        ; int RTCWriteTime(struct rtcdevice *rtc, const struct rtctime *time)
        ; Returns an RTCRetCode
RTCWriteTime
        Push    "sb, v1-v2, lr"
        
        ASSERT  RTCTimeStruct_BCD_Size = 8
        LDMIA   a2, {v1-v2}

        LDR     sb, [a1, #RTCDeviceHAL_SB]
        SUB     sp, sp, #12+12

        ADD     ip, sp, #12+3           ; -> data block

        CMP     v1, #-1
        MOVNE   a4, #1                  ; start from time register
        MOVEQ   a4, #5                  ; start from date register
        STRB    a4, [ip], #1
        ASSERT  RTCTimeStruct_BCD_Centiseconds = 0
        ASSERT  RTCTimeStruct_BCD_Seconds = 1
        ASSERT  RTCTimeStruct_BCD_Minutes = 2
        ASSERT  RTCTimeStruct_BCD_Hours = 3
        STRNE   v1, [ip], #4            ; cs,s,m,h

        CMP     v2, #-1
        ASSERT  RTCTimeStruct_BCD_DayOfMonth = 4
        ASSERT  RTCTimeStruct_BCD_Month = 5
        ASSERT  RTCTimeStruct_BCD_YearLO = 6
        ANDNE   a4, v2, #2_11:SHL:16    ; ylo
        ORRNE   a4, v2, a4, LSR #8+2    ; dom,ylo
        STRNEB  a4, [ip], #1
        MOVNE   a4, v2, LSR #8
        STRNEB  a4, [ip], #1            ; mon

        MOV     a1, sp
        MOV     a2, #RTCAddressPHI
        ORR     a2, a2, #1:SHL:29       ; write op with retry
        ADD     a3, sp, #12+3           ; -> data block
        SUB     a4, ip, a3              ; data block size
        STMIA   a1, {a2-a4}

        MOV     a2, #1                  ; 1 transfer on bus 0
        CallOS  OS_IICOpV
        TEQ     a1, #IICStatus_Completed
        ASSERT  IICStatus_Completed = RTCRetCode_OK
        MOVNE   a1, #RTCRetCode_Error

        ADD     sp, sp, #12+12
        Pull    "sb, v1-v2, pc"

        END

