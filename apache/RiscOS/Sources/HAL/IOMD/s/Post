; Copyright 2012 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        $GetIO
        GET     Hdr:OSEntries
        GET     Hdr:HALEntries
        
        GET     hdr.IOMD
        GET     hdr.StaticWS
        GET     hdr.Debug

        AREA    |Asm$$Code|, CODE, READONLY, PIC
        
        IMPORT  HAL_Base
        IMPORT  DistinctAddresses
        IMPORT  Config710
        EXPORT  Power_On_Self_Test

        MACRO
        WaitFor $time
        LDR     r0, =$time
        BL      WaitForTimer0
        MEND

        ; Power on self test is described in appendix A of the Risc PC TRM, though
        ; figure 1.1 doesn't seem to match the bits in table 1.1/1.2.
        ; There are some historical details described in app note 225 too.
        ; ----Non fatal (status) bits----
        ; b0  : Self test due to power on
        ; b1  : Self test due to interface hardware (POST box)
        ; b2  : Self test due to test link
        ; b3  : Long memory test performed
        ; b4  : ARM3 fitted (rephrased to 'is not ARM2')
        ; b5  : Long memory test disabled by CMOS bit
        ; b6  : PC style IO (rephrased to 'Integrated IO controller fitted')
        ; b7  : VRAM present
        ; b8  : CMOS RAM checksum error
        ; ----Fault bits----
        ; b9  : ROM failed checksum
        ; b10 : MEMC CAM mapping failed
        ; b11 : MEMC protection failed
        ; b12 : IOC register test failed
        ; b13 : Unused
        ; b14 : VIDC (Virq interrupt) timing failed
        ; b15 : Sound (Sirq interrupt) timing failed
        ; b16 : CMOS unreadable
        ; b17 : RAM control line failure
        ; b18 : Long RAM test failure
        ; b19 : Cache test failure
        ;
        ; Keep things simple - unlikely to encounter a POST box now, there's no test link,
        ; long memory tests take ages with > 16MB, it's never an ARM2, there's always a PC combo chip,
        ; no MEMC, sound pitch doesn't stop us booting, CMOS checksums are the kernel's
        ; problem now, and the cache is on chip.
        ; That leaves b7, b9, b12, b14, b17 as the only ones to calculate.
        
Power_On_Self_Test
        ; => r0-r3,r11-r12 = DRAM bank bits
        ; <= r0-r3,r11-r13 preserved
        ;    r4-r10 corrupt
        ;    If a failure is detected, never returns
        MOV     r5, #IOMDPhys
        LDRB    r4, [r5, #IOCIRQSTAA]
        TST     r4, #por_bit
        MOVEQ   pc, lr                  ; It is not a power on
      [ {TRUE}
        LDRB    r4, [r5, #IOMD_VERSION]
        MOVS    r4, r4                  ; RPCEmu has version ID of zero
        MOVEQ   pc, lr                  ; Skip tests if running emulated
      ]

        ; Drop into FIQ mode to preserve r11-r12
        MSR     CPSR_c, #FIQ32_mode+F32_bit+I32_bit
        MOV     r12, #IOMDPhys

        ; Default start point is PC IO + not ARM2 + power on
        MOV     r4, #2_01010001         
        DebugTX_inl "POST started", r5, r6, r7

        ; Do test b12
        LDRB    r8, [r12, #IOCControl]
        AND     r8, r8, #2_00110100
        CMP     r8, #2_00110100         ; Expect b2/4/5 set
        LDRCSB  r8, [r12, #IOCIRQSTAA]
        MOVCSS  r8, r8, ROR #7+1        ; Expect b7 set
        LDRCSB  r8, [r12, #IOCFIQSTA]
        MOVCSS  r8, r8, ROR #7+1        ; Expect b7 set
        ORRCC   r4, r4, #1:SHL:12

        ; Do test b7
        LDRB    r6, [r12, #IOMD_ID1]
        LDRB    r5, [r12, #IOMD_ID0]
        ORR     r5, r5, r6, LSL #8
        LDR     r6, =IOMD_Original      ; Only consider VRAM for Risc PC
        TEQ     r5, r6
        BNE     %FT10

        MOV     r6, r0                  ; Push "r0-r4"
        MOV     r7, r1                  ;
        MOV     r8, r2                  ;
        MOV     r9, r3                  ;
        MOV     r10, r4                 ;

        MOV     r0, #VideoPhysRam

        MOV     r2, #IOMD_VREFCR_VRAM_256Kx64 :OR: IOMD_VREFCR_REF_16
        STRB    r2, [r12, #IOMD_VREFCR]
        ADD     r1, r0, #A2             ; 2M maybe
        BL      DistinctAddresses

        MOVNE   r2, #IOMD_VREFCR_VRAM_256Kx32 :OR: IOMD_VREFCR_REF_16
        STRNEB  r2, [r12, #IOMD_VREFCR]
        ADDNE   r1, r0, #A2             ; 1M maybe
        BLNE    DistinctAddresses

        MOV     r0, r6                  ;
        MOV     r1, r7                  ;
        MOV     r2, r8                  ;
        MOV     r3, r9                  ;
        MOV     r4, r10                 ; Pull "r0-r4"
        ORREQ   r4, r4, #1:SHL:7
10
        ; Do test b17
        ORR     r8, r0, r1
        ORR     r8, r8, r2
        ORRS    r8, r8, r3
        ORREQ   r4, r4, #1:SHL:17       ; No DRAM counts as a failure
      [ {FALSE} ; RISC OS isn't quite ready to run properly without any DRAM
        MSR     CPSR_c, #SVC32_mode+F32_bit+I32_bit
        ORRS    r8, r11, r12
        TSTNE   r4, #1:SHL:7
        BICNE   r4, r4, #1:SHL:17       ; unless we have a Kinetic and VRAM
        MSR     CPSR_c, #FIQ32_mode+F32_bit+I32_bit
      ]

        ; Do test b9
        ADRL    r7, HAL_Base
        LDR     r8, [r7, #0x60]         ; Size of this ROM (which might be softloaded)
        SUB     r8, r8, #16             ; Stop 4 words early
        ADD     r9, r7, r8
        MOV     r8, #0
20
        LDMIA   r7!, {r5-r6, r10-r11}   ; Feel the burst
        ADD     r5, r5, r6
        ADD     r10, r10, r11
        ADD     r8, r8, r5
        TEQ     r7, r9
        ADD     r8, r8, r10
        BNE     %BT20
        LDMIA   r7!, {r5-r6}            ; Penultimate 2 words
        ADD     r5, r5, r6
        ADDS    r8, r8, r5              ; Sum should be 0
        ORRNE   r4, r4, #1:SHL:9

        ; Do test b14
        MOV     r5, #2+32+0+0+11 - 1    ; FSIZE = VCR - (VDER - VDSR) - 1
        STRB    r5, [r12, #IOMD_FSIZE]
        MOV     r5, #vsync_bit
        STRB    r5, [r12, #IOCIRQCLRA]  ; Clear pending
        MOV     r9, #100                ; 1s timeout waiting for first sync
30
        LDRB    r6, [r12, #IOCIRQSTAA]
        TST     r6, #vsync_bit
        BNE     %FT35
        ANDS    r6, r6, #timer0_bit
        BEQ     %BT30
        STRB    r6, [r12, #IOCIRQCLRA]
        SUBS    r9, r9, #1
        BNE     %BT30
        B       %FT50
35
        STRB    r5, [r12, #IOCIRQCLRA]  ; Clear pending
        STRB    r12, [r12, #Timer0LR]
        LDRB    r7, [r12, #Timer0CL]    ; Capture low part of 2MHz timer
        MOV     r9, #0
40
        STRB    r12, [r12, #Timer0LR]
        LDRB    r8, [r12, #Timer0CL]
        RSBS    r6, r8, r7              ; Remember it's a countdown timer
        ADDMI   r6, r6, #256
        ADD     r9, r9, r6              ; Accumulate delta
        CMP     r9, #2*1024*1024        ; 1s timeout waiting for second sync
        BCS     %FT50
        MOV     r7, r8
        LDRB    r6, [r12, #IOCIRQSTAA]
        TST     r6, #vsync_bit
        BEQ     %BT40

      [ Debug
        MOV     r5, a1
        MOV     r6, a2
        MOV     r7, a3
        MOV     r8, lr
        DebugReg r9
        MOV     a1, r5
        MOV     a2, r6
        MOV     a3, r7
        MOV     lr, r8
        DebugTX_inl " = Vsync time", r5, r6, r7
      ]
        LDR     r8, =32333              ; 2MHz timer, 60Hz VGA mode (33333 ticks)
        SUB     r9, r9, r8
        CMP     r9, #2000               ; Allow 3% either side (32333-34333 ticks)
        BLS     %FT60
50
        ORR     r4, r4, #1:SHL:14
60
        ; See if it's worth proceeding
      [ Debug
        MOV     r5, a1
        MOV     r6, a2
        MOV     r7, a3
        MOV     r8, lr
        DebugReg r4
        MOV     a1, r5
        MOV     a2, r6
        MOV     a3, r7
        MOV     lr, r8
        DebugTX_inl " = POST result", r5, r6, r7
      ]
        MSR     CPSR_c, #SVC32_mode+F32_bit+I32_bit
        MOVS    r8, r4, LSR #9          ; Discount status bits
        MOVEQ   pc, lr

        ; Some failure, do morse code. This never returns so all registers
        ; are up for grabs. MMU is off, timer0 is running at 100Hz.
        ; Data is sent in nybbles with 1s between nybbles
        ; For a '0' send OFF - ON
        ; For a '1' send OFF - ON - ON - ON
rOff            RN 9
rOn             RN 10
rFDC_DOR        RN 11

        MOV     r12, #IOMDPhys
        LDR     r0, =VIDCPhys
        MOV     r1, #&10000000
        STR     r1, [r0]
        MOV     r1, #&000000FF          ; Red screen of death
        STR     r1, [r0]                ; Palette 0
        STR     r1, [r0]                ; Palette 1
        
        LDR     r0, =C710Phys           
        BL      Config710               ; SuperIO doesn't have drive 0/1 swapped

        LDR     rFDC_DOR, =C710Phys + (&3F2 * 4)
      [ {FALSE}
        MOV     rOn, #&25               ; MotorEN1 + DS1
        MOV     rOff, #&05              ;       just DS1
      |
        MOV     rOn, #&14               ; MotorEN0 + DS0
        MOV     rOff, #&04              ;       just DS0
      ]  
10
        MOV     r5, r4
        MOV     r6, #32
        STRB    rOff, [rFDC_DOR]
        WaitFor 500                     ; Big delay before repeating
20
        TST     r6, #3                  ; 1s inter-nybble pause
        BNE     %FT30
        WaitFor 100
30
        WaitFor 25
        STRB    rOn, [rFDC_DOR]
        WaitFor 25
        TST     r5, #1:SHL:31           ; MSB first
        BEQ     %FT40
        WaitFor 50
40
        STRB    rOff, [rFDC_DOR]
        MOV     r5, r5, LSL #1
        SUBS    r6, r6, #1
        BNE     %BT20
        B       %BT10

WaitForTimer0 ROUT
        ; => r0 = time in cs
        ;    r12 = IOMD
        ; <= r0, r1 corrupt
        ADD     r0, r0, #1
05        
        MOV     r1, #timer0_bit
        STRB    r1, [r12, #IOCIRQCLRA]
10
        LDRB    r1, [r12, #IOCIRQSTAA]
        TST     r1, #timer0_bit
        BEQ     %BT10                   ; Poll on the interrupt bit
20
        SUBS    r0, r0, #1
        BNE     %BT05
        MOV     pc, lr
        
        END
