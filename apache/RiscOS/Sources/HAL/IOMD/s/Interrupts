; Copyright 2000 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        $GetIO
        GET     Hdr:DevNos

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.StaticWS

        AREA    |Asm32$$Code|, CODE, READONLY, PIC, ALIGN=5

NoInterrupt     * -1

        EXPORT  HAL_IRQSource
        EXPORT  HAL_IRQEnable
        EXPORT  HAL_IRQDisable
        EXPORT  HAL_IRQClear
        EXPORT  HAL_IRQStatus
        EXPORT  HAL_FIQSource
        EXPORT  HAL_FIQEnable
        EXPORT  HAL_FIQDisable
        EXPORT  HAL_FIQDisableAll
        EXPORT  HAL_FIQClear
        EXPORT  HAL_FIQStatus
        EXPORT  HAL_IRQMax

HAL_IRQSource
        LDR     r3, IOMD_Address
        ADR     r12, DeviceTables

        LDRB    r0, [r3, #IOMD_DMAREQ]
        ASSERT  DeviceTables = IrqDMADevnos
        
        TEQ     r0, #0
        LDREQB  r0, [r3, #IOCIRQREQB]   ; if not DMA then assume IRQB
        ADDEQ   r12, r12, #IrqReqBDevnos - IrqDMADevnos

        TEQEQ   r0, #0
        LDREQB  r0, [r3, #IOMD_IRQRQD]  ; if not IRQB then assume IRQD
        ADDEQ   r12, r12, #IrqReqDDevnos - IrqReqBDevnos

        TEQEQ   r0, #0
        LDREQB  r0, [r3, #IOMD_IRQRQC]  ; if not IRQD then assume IRQC
        ADDEQ   r12, r12, #IrqReqCDevnos - IrqReqDDevnos

        TEQEQ   r0, #0
        LDREQB  r0, [r3, #IOCIRQREQA]   ; if not IRQC then assume IRQA
        ADDEQ   r12, r12, #IrqReqADevnos - IrqReqCDevnos

        TEQEQ   r0, #0
        LDRNEB  r0, [r12, r0]           ; pick up offset in device despatcher
        MOVNE   pc, lr
        MOV     r0, #NoInterrupt        ; if none of them
        MOV     pc, lr

HAL_FIQSource
        LDR     r3, IOMD_Address
        LDRB    r0, [r3, #IOCFIQREQ]
        ORR     r0, r0, r0, LSR #4
        ORR     r0, r0, r0, LSR #2
        ORR     r0, r0, r0, LSR #1
        ADD     r0, r0, #1              ; r0 = 2, 4, 8, 16, 32, 64, 128 or 256
        MOV     r1, #&0E800000
        MUL     r0, r1, r0              ; r0>>29 = 0, 1, 3, 7, 6, 5, 2 or 4
        LDRB    r0, [pc, r0, LSR #29]
        MOV     pc, lr
        DCB     0, 1, 6, 2, 7, 5, 4, 3

HAL_FIQEnable
        LDR     a4, IOMD_Address
        MOV     ip, #1
        MRS     a3, CPSR
        MOV     ip, ip, LSL a1
        ORR     a2, a3, #F32_bit+I32_bit
        MSR     CPSR_c, a2
        LDRB    a1, [a4, #IOCFIQMSK]
        ORR     a2, a1, ip
        STRB    a2, [a4, #IOCFIQMSK]
        MSR     CPSR_c, a3
        AND     a1, a1, ip
        MOV     pc, lr

HAL_FIQDisable
        LDR     a4, IOMD_Address
        MOV     ip, #1
        MRS     a3, CPSR
        MOV     ip, ip, LSL a1
        ORR     a2, a3, #F32_bit+I32_bit
        MSR     CPSR_c, a2
        LDRB    a1, [a4, #IOCFIQMSK]
        BIC     a2, a1, ip
        STRB    a2, [a4, #IOCFIQMSK]
        MSR     CPSR_c, a3
        AND     a1, a1, ip
        MOV     pc, lr

HAL_FIQDisableAll
        LDR     a4, IOMD_Address
        MOV     a1, #0
        STRB    a1, [a4, #IOCFIQMSK]
        MOV     pc, lr

HAL_FIQClear
        MOV     pc, lr

HAL_FIQStatus
        LDR     a4, IOMD_Address
        MOV     ip, #1
        LDRB    a2, [a4, #IOCFIQSTA]
        AND     a1, a2, ip, LSL a1
        MOV     pc, lr



; In: a1 = device no.
; Out: a1 = bit number within register, ip = register offset / 4
        MACRO
        DevNoToRegAndBit $type
        CMP     a1, #22
        ADDHS   a1, a1, #2
        ADR     ip, IRQRegTable
        LDRB    ip, [ip, a1, LSR #3]
        AND     a1, a1, #7
  [ "$type" <> "STA"
        ADD     ip, ip, #(IOCIRQ$type.A - IOCIRQSTAA) / 4
  ]
        MEND

; In: a1 = bit number within register, ip = register offset
; Out: a1-a4 corrupt
        MACRO
        ModifyBit $op
        MRS     a4, CPSR
        MOV     a2, #1
        ADD     ip, a3, ip, LSL #2
        MOV     a1, a2, LSL a1
        ORR     a3, a4, #F32_bit+I32_bit
        MSR     CPSR_c, a3
        LDRB    a2, [ip]
        $op     a2, a2, a1
        STRB    a2, [ip]
        MSR     CPSR_c, a4
        MEND

HAL_IRQEnable
        LDR     a3, IOMD_Address
        DevNoToRegAndBit MSK
        ModifyBit ORR
        MOV     pc, lr

HAL_IRQDisable
        LDR     a3, IOMD_Address
        DevNoToRegAndBit MSK
        ModifyBit BIC
        MOV     pc, lr

HAL_IRQClear
        LDR     a3, IOMD_Address
        MOV     a2, #1
        DevNoToRegAndBit CLR
        MOV     a2, a2, LSL a1
        STRB    a2, [a3, ip, LSL #2]
        MOV     pc, lr

HAL_IRQStatus
        LDR     a3, IOMD_Address
        DevNoToRegAndBit STA
        LDRB    a2, [a3, ip, LSL #2]
        MOV     a2, a2, LSR a1
        AND     a2, a2, #1
	MOV	a1, a2
        MOV     pc, lr

HAL_IRQMax
        MOV     a1, #38
        MOV     pc, lr

        ALIGN   32

        ASSERT  (IOCIRQSTAA :SHR: 2) < &100
        ASSERT  (IOCIRQSTAB :SHR: 2) < &100
        ASSERT  (IOMD_DMASTA :SHR: 2) < &100
        ASSERT  (IOMD_IRQSTD :SHR: 2) < &100
        ASSERT  (IOMD_IRQSTC :SHR: 2) < &100
IRQRegTable
        DCB     IOCIRQSTAA :SHR: 2
        DCB     IOCIRQSTAB :SHR: 2
        DCB     IOMD_DMASTA :SHR: 2
        DCB     IOMD_IRQSTD :SHR: 2
        DCB     IOMD_IRQSTC :SHR: 2

        ALIGN

        GBLA    DTabC
; Following tables encode the priority of the devices within each register
;
DeviceTables


; Prioritised IOMD DMA device numbers

IrqDMAPrio0     * 1:SHL:5
IrqDMADev0      * IOMD_DMASound1_DevNo

IrqDMAPrio1     * 1:SHL:4
IrqDMADev1      * IOMD_DMASound0_DevNo

IrqDMAPrio2     * 1:SHL:3
IrqDMADev2      * IOMD_DMAChannel3_DevNo

IrqDMAPrio3     * 1:SHL:2
IrqDMADev3      * IOMD_DMAChannel2_DevNo

IrqDMAPrio4     * 1:SHL:1
IrqDMADev4      * IOMD_DMAChannel1_DevNo

IrqDMAPrio5     * 1:SHL:0
IrqDMADev5      * IOMD_DMAChannel0_DevNo

DTabC   SETA 1

IrqDMADevnos
  = NoInterrupt

; Top 2 bits are always 0 so table need only be 64 bytes
  WHILE DTabC <64
  [ (DTabC:AND:IrqDMAPrio5)<>0
  = IrqDMADev5
  |
  [ (DTabC:AND:IrqDMAPrio4)<>0
  = IrqDMADev4
  |
  [ (DTabC:AND:IrqDMAPrio3)<>0
  = IrqDMADev3
  |
  [ (DTabC:AND:IrqDMAPrio2)<>0
  = IrqDMADev2
  |
  [ (DTabC:AND:IrqDMAPrio1)<>0
  = IrqDMADev1
  |
  [ (DTabC:AND:IrqDMAPrio0)<>0
  = IrqDMADev0
  ]
  ]
  ]
  ]
  ]
  ]
DTabC   SETA DTabC+1
  WEND


; Prioritised IOMD IRQB device numbers

IrqReqBPrio2 * podule_FIQ_as_IRQ_bit
IrqReqBDev2  * PFIQasIRQ_DevNo

IrqReqBPrio3 * serial_Tx_bit
IrqReqBDev3 * SerialTx_DevNo

IrqReqBPrio4 * serial_Rx_bit
IrqReqBDev4 * SerialRx_DevNo

IrqReqBPrio5 * podule_IRQ_bit
IrqReqBDev5 * Podule_DevNo

 [ ReassignedIOMDInterrupts
IrqReqBPrio0 * IOMDr_MPEGAudio_IRQ_bit
IrqReqBDev0 * IOMDr_MPEGAudio_DevNo

IrqReqBPrio1 * IOMDr_MPEGVideo_IRQ_bit
IrqReqBDev1 * IOMDr_MPEGVideo_DevNo

IrqReqBPrio6 * IOMDr_Network_IRQ_bit
IrqReqBDev6 * IOMDr_Network_DevNo

IrqReqBPrio7 * IOMDr_serial_IRQ_bit
IrqReqBDev7 * IOMDr_Serial_DevNo
 |
IrqReqBPrio0 * IOMD_floppy_IRQ_bit
IrqReqBDev0 * DiscChanged_DevNo

IrqReqBPrio1 * IOMD_HardDisc_IRQ_bit
IrqReqBDev1 * Sound_DevNo

IrqReqBPrio6 * IOMD_Network_IRQ_bit
IrqReqBDev6 * WinnieIRQ_DevNo

IrqReqBPrio7 * IOMD_serial_IRQ_bit
IrqReqBDev7 * IOMD_Serial_DevNo
 ]

DTabC   SETA 1

IrqReqBDevnos
  = NoInterrupt

  WHILE DTabC <256
  [ (DTabC:AND:IrqReqBPrio7)<>0
  = IrqReqBDev7
  |
  [ (DTabC:AND:IrqReqBPrio6)<>0
  = IrqReqBDev6
  |
  [ (DTabC:AND:IrqReqBPrio5)<>0
  = IrqReqBDev5
  |
  [ (DTabC:AND:IrqReqBPrio4)<>0
  = IrqReqBDev4
  |
  [ (DTabC:AND:IrqReqBPrio3)<>0
  = IrqReqBDev3
  |
  [ (DTabC:AND:IrqReqBPrio2)<>0
  = IrqReqBDev2
  |
  [ (DTabC:AND:IrqReqBPrio1)<>0
  = IrqReqBDev1
  |
  [ (DTabC:AND:IrqReqBPrio0)<>0
  = IrqReqBDev0
  ]
  ]
  ]
  ]
  ]
  ]
  ]
  ]
DTabC   SETA DTabC+1
  WEND


; Prioritised IOMD IRQD device numbers


IrqReqDPrio0     * 1:SHL:4
IrqReqDDev0      * IOMD_Event2_DevNo

IrqReqDPrio1     * 1:SHL:3
IrqReqDDev1      * IOMD_Event1_DevNo

IrqReqDPrio2     * 1:SHL:2
IrqReqDDev2      * IOMD_AtoD_DevNo

IrqReqDPrio3     * 1:SHL:1
IrqReqDDev3      * IOMD_MouseTxEmpty_DevNo

IrqReqDPrio4     * 1:SHL:0
IrqReqDDev4      * IOMD_MouseRxFull_DevNo

DTabC   SETA 1

IrqReqDDevnos
  = NoInterrupt

; Top 3 bits are always 0 so table need only be 32 bytes (this will
; need to change if bits 5 to 7 are ever used).
  WHILE DTabC <32
  [ (DTabC:AND:IrqReqDPrio4)<>0
  = IrqReqDDev4
  |
  [ (DTabC:AND:IrqReqDPrio3)<>0
  = IrqReqDDev3
  |
  [ (DTabC:AND:IrqReqDPrio2)<>0
  = IrqReqDDev2
  |
  [ (DTabC:AND:IrqReqDPrio1)<>0
  = IrqReqDDev1
  |
  [ (DTabC:AND:IrqReqDPrio0)<>0
  = IrqReqDDev0
  ]
  ]
  ]
  ]
  ]
DTabC   SETA DTabC+1
  WEND


; Prioritised IOMD IRQC device numbers

IrqReqCPrio0    * 1:SHL:0
IrqReqCDev0     * IOMD_C_Bit0_DevNo

IrqReqCPrio1    * 1:SHL:1
IrqReqCDev1     * IOMD_C_Bit1_DevNo

IrqReqCPrio2    * 1:SHL:2
IrqReqCDev2     * IOMD_C_Bit2_DevNo

IrqReqCPrio3    * 1:SHL:3
IrqReqCDev3     * IOMD_C_Bit3_DevNo

IrqReqCPrio4    * 1:SHL:4
IrqReqCDev4     * IOMD_C_Bit4_DevNo

IrqReqCPrio5    * 1:SHL:5
IrqReqCDev5     * IOMD_C_Bit5_DevNo

IrqReqCPrio6    * 1:SHL:6
IrqReqCDev6     * IOMD_C_Bit6_DevNo

IrqReqCPrio7    * 1:SHL:7
IrqReqCDev7     * IOMD_C_Bit7_DevNo

DTabC   SETA 1

IrqReqCDevnos
  = NoInterrupt

  WHILE DTabC <256
  [ (DTabC:AND:IrqReqCPrio7)<>0
  = IrqReqCDev7
  |
  [ (DTabC:AND:IrqReqCPrio6)<>0
  = IrqReqCDev6
  |
  [ (DTabC:AND:IrqReqCPrio5)<>0
  = IrqReqCDev5
  |
  [ (DTabC:AND:IrqReqCPrio4)<>0
  = IrqReqCDev4
  |
  [ (DTabC:AND:IrqReqCPrio3)<>0
  = IrqReqCDev3
  |
  [ (DTabC:AND:IrqReqCPrio2)<>0
  = IrqReqCDev2
  |
  [ (DTabC:AND:IrqReqCPrio1)<>0
  = IrqReqCDev1
  |
  [ (DTabC:AND:IrqReqCPrio0)<>0
  = IrqReqCDev0
  ]
  ]
  ]
  ]
  ]
  ]
  ]
  ]
DTabC   SETA DTabC+1
  WEND


; Prioritised IOMD IRQA device numbers

IrqReqAPrio0 * por_bit
IrqReqADev0  * PowerOn_DevNo

IrqReqAPrio4 * timer1_bit
IrqReqADev4 * Timer1_DevNo

IrqReqAPrio5 * vsync_bit
IrqReqADev5 * VSync_DevNo

IrqReqAPrio6 * timer0_bit
IrqReqADev6 * Timer0_DevNo

IrqReqAPrio7 * force_bit
IrqReqADev7 * FIQDowngrade_DevNo

IrqReqAPrio1 * 1:SHL:1          ; not used
IrqReqADev1 * 1

 [ ReassignedIOMDInterrupts
 ASSERT IOMDr_PrinterIRQ_DevNo = 2

IrqReqAPrio2 * IOMDr_printer_IRQ_bit
IrqReqADev2 * IOMDr_PrinterIRQ_DevNo

IrqReqAPrio3 * 1:SHL:0          ; not used
IrqReqADev3 * 0
 |
 ASSERT IOMD_PrinterIRQ_DevNo = 0
 ASSERT IOMD_FloppyIndex_DevNo = 2

IrqReqAPrio2 * IOMD_printer_IRQ_bit
IrqReqADev2 * IOMD_PrinterIRQ_DevNo

IrqReqAPrio3 * IOMD_floppy_index_bit
IrqReqADev3 * IOMD_FloppyIndex_DevNo
 ]

DTabC   SETA 1

IrqReqADevnos
  = NoInterrupt

; We have to handle ALL interrupts using specific device numbers as
; we don't know what the IO pins are connected to
  WHILE DTabC <256
  [ (DTabC:AND:IrqReqAPrio7)<>0
  = IrqReqADev7
  |
  [ (DTabC:AND:IrqReqAPrio6)<>0
  = IrqReqADev6
  |
  [ (DTabC:AND:IrqReqAPrio5)<>0
  = IrqReqADev5
  |
  [ (DTabC:AND:IrqReqAPrio4)<>0
  = IrqReqADev4
  |
  [ (DTabC:AND:IrqReqAPrio3)<>0
  = IrqReqADev3
  |
  [ (DTabC:AND:IrqReqAPrio2)<>0
  = IrqReqADev2
  |
  [ (DTabC:AND:IrqReqAPrio1)<>0
  = IrqReqADev1
  |
  [ (DTabC:AND:IrqReqAPrio0)<>0
  = IrqReqADev0
  ]
  ]
  ]
  ]
  ]
  ]
  ]
  ]
DTabC   SETA DTabC+1
  WEND

        END
