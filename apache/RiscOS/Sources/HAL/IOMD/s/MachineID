; Copyright 2000 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        $GetIO
        GET     Hdr:Proc

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.StaticWS

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  HAL_MachineID

        IMPORT  HAL_TimerPeriod
        IMPORT  HAL_TimerSetPeriod

; +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
;
;       ReadUniqueID - Read unique machine ID
;
; 10-Dec-93  BCockburn  Modified to leave raw 64 bit ID from chip in RawMachineID

Tsyc    *       5       ; time between frames - minimum of 1탎, so give it a bit more
Trstl   *       500     ; time reset pulse held low - minimum of 480탎, so give it a bit more
Trsth   *       500     ; time reset pulse held high - minimum of 480탎, so give it a bit more
Tlow0   *       80      ; time for write0 low - min 60탎, max 120탎
Tlow1   *       5       ; time for write1 low - min 1탎, max 15탎
Tslot   *       90      ; time for total read/write slot - min 60탎, max 120탎
Trdlow  *       5       ; time for read slot low before release - min 1탎, max 15탎
Trddat  *       3       ; time after read slot high before read it

        ASSERT  Tslot-Tlow0 > Tsyc
        ASSERT  Trdlow+Trddat < 15

; Macro to set wire to a given state, and optionally count transitions (starting at low) while waiting for a given time

        MACRO
        SetWire $hilo, $time, $monstate, $count
        LCLS    reg
 [ "$hilo"="LOW"
reg     SETS    "r4"
 |
        ASSERT  "$hilo"="HIGH"
reg     SETS    "r5"
 ]
 [ ($time) = 0
        STRB    $reg, [r1, #IOCControl]         ; set appropriate level on line
 |
        ASSERT  ($time) < 32768
        MOV     r12, #(($time)*2):AND:&FF
        STRB    r12, [r1, #Timer0LL]            ; program low latch
        MOV     r12, #(($time)*2):SHR:8
        STRB    r12, [r1, #Timer0LH]            ; program high latch
        STRB    $reg, [r1, #IOCControl]         ; set appropriate level on line
        STRB    r12, [r1, #Timer0GO]            ; and start timer
        LDRB    r12, [r1, #IOCIRQSTAA]          ; dummy instruction to avoid bug in IOC
        LDRB    r12, [r1, #IOCIRQSTAA]          ; dummy instruction (repeated for FE)
        STRB    r11, [r1, #IOCIRQCLRA]          ; immediately clear IRQ bit
  [ "$monstate"<>""
        MOV     $monstate, #0
  ]
  [ "$count"<>""
        MOV     $count, #0
  ]
10
        LDRB    r12, [r1, #IOCIRQSTAA]
        TST     r12, r11
  [ "$count"<>""
        ADDEQ   $count, $count, #1
  ]
  [ "$monstate"=""
        BEQ     %BT10                                   ; not timed out, so just loop
  |
        BNE     %FT30                                   ; timed out
        LDRB    r12, [r1, #IOCControl]
        TST     r12, #IOEB_unique_machine_ID_bit
        BEQ     %BT10                                   ; if still low then loop to 10

        ADD     $monstate, $monstate, #1                ; increment number of transitions
20
        LDRB    r12, [r1, #IOCIRQSTAA]
        TST     r12, r11
   [ "$count"<>""
        ADDEQ   $count, $count, #1
   ]
        BNE     %FT30                                   ; timed out
        LDRB    r12, [r1, #IOCControl]
        TST     r12, #IOEB_unique_machine_ID_bit
        BNE     %BT20                                   ; if still high then loop to 20
        ADD     $monstate, $monstate, #1                ; increment number of transitions
        B       %BT10
30
  ]
 ]
        MEND

HAL_MachineID
        Entry   "r4-r11", 8
        MOV     r0, #0
        LDR     r1, IOMD_Address

        STR     r0, [sp, #0]                            ; indicate no ID in case of error exit
        STR     r0, [sp, #4]                           

        MRS     r8, CPSR                                ; remember PSR
        ORR     r3, r8, #I32_bit+F32_bit
        MSR     CPSR_c, r3                              ; FIQs and IRQs off

        LDRB    r3, IOCRSoftCopy
        BIC     r4, r3, #IOEB_unique_machine_ID_bit     ; r4 is value to pull ID line low
        ORR     r5, r3, #IOEB_unique_machine_ID_bit     ; r5 is value to pull ID line high
        MOV     r11, #timer0_bit
        BL      SendResetPulse
        BVS     ResetFailed
        BL      SendCommandWord

        MOV     r7, #0                                  ; no. of bytes to store = 8 bits type + 48 bits ID + 8 bits checksum
10
        BL      GetAByte
        STRB    r6, [sp, r7]
        ADD     r7, r7, #1
        CMP     r7, #8
        BNE     %BT10

ResetFailed
        BL      RestoreIOCState
        LDMIA   sp, {r0, r1}
        EXIT

RestoreIOCState Entry
        STRB    r3, [r1, #IOCControl]                   ; put back old value
        MOV     r0, #0
        BL      HAL_TimerPeriod
        MOV     r1, r0
        MOV     r0, #0
        BL      HAL_TimerSetPeriod
        MSR     CPSR_c, r8                              ; restore old interrupt state
        EXIT

SendResetPulse ROUT
        SetWire HIGH, Tsyc
        SetWire LOW, Trstl,,r6
        SetWire HIGH, Trsth,r10
        TEQ     r6, #0
      [ {FALSE} ; only for debugging
        ADREQ   r0, IOCBugHappenedError
      ]
        BEQ     %FT05
        CMP     r10, #3                                 ; H-L-H is ok
        MOVEQ   pc, lr                                  ; V clear
      [ {FALSE} ; only for debugging
        ADRHI   r0, TooManyTransitionsError             ; H-L-H-L...
        CMP     r10, #2
        ADREQ   r0, NeverWentHighAgainError             ; H-L
        CMP     r10, #1
        ADREQ   r0, NeverWentLowError                   ; H
        ADRCC   r0, NeverWentHighError                  ; stayed low permanently even though we released it
      ]
05
        SETV
        MOV     pc, lr

      [ {FALSE} ; only for debugging
NeverWentHighError
        =       "Never went high", 0
NeverWentLowError
        =       "Never went low", 0
NeverWentHighAgainError
        =       "Never went high again", 0
TooManyTransitionsError
        =       "Too many transitions", 0
IOCBugHappenedError
        =       "IOC bug happened", 0
        ALIGN
      ]

SendCommandWord ROUT
        CLRV
        LDR     r6, =&10F               ; &0F is command word
10
        MOVS    r6, r6, LSR #1
        MOVEQ   pc, lr
        BCS     SendOne
        SetWire LOW, Tlow0
        SetWire HIGH, Tslot-Tlow0
        B       %BT10

SendOne
        SetWire LOW, Tlow1
        SetWire HIGH, Tslot-Tlow1
        B       %BT10

GetAByte ROUT
        MOV     r6, #&80
10
        SetWire LOW, Trdlow
        SetWire HIGH, Trddat
        LDRB    r10, [r1, #IOCControl]
        SetWire HIGH, Tslot-Trdlow-Trddat
        MOVS    r10, r10, LSR #IOEB_ID_bit_number+1    ; move bit into carry
        MOVS    r6, r6, RRX
        BCC     %BT10
        MOV     r6, r6, LSR #24
        MOV     pc, lr

        END
