; Copyright 2013 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        $GetIO
        GET     Hdr:DevNos
        GET     Hdr:DMA
        GET     Hdr:DMADevice
        GET     Hdr:OSEntries

        GET     hdr.StaticWS

        EXPORT  IOMD21DMA_Init

        IMPORT  memcpy

; Physical DMA channel assignments
                ^ 0
DMAPhysIO0      # 1
DMAPhysIO1      # 1
DMAPhysIO2      # 1
DMAPhysIO3      # 1
DMAPhysSD0      # 1
DMAPhysSD1      # 1
DMAPhysChannelCount      * 6
DMAPhysChannelCount_7500 * 1

; One channel's worth of registers
                ^ 0
DMA_CURA        # 4
DMA_ENDA        # 4
DMA_CURB        # 4
DMA_ENDB        # 4
DMA_CR          # 4
DMA_ST          # 4

; Controller/channel structures
                ^ 0
DMAC_Public            # HALDevice_DMAC_Size
IOMD21HAL_SB           # 4
IOMD21Device_DMAC_Size # 0
                ^ 0
DMAB_Public            # HALDevice_DMA_Size
IOMD21Device_Regs      # 4
IOMD21Device_IRQMask   # 1
IOMD21Device_Phys      # 1
IOMD21Device_LastPair  # 1
                       # 1
IOMD21Device_StartA    # 4
IOMD21Device_StartB    # 4
IOMD21Device_DMAB_Size # 0

; HAL code for the DMA controller in IOMD21

        AREA    |Asm$$Code|, CODE, READONLY, PIC

IOMD21DMA_Init ROUT
        Push    "v1-v3,lr"

        ; Build a table of pointers to the channel structures
        ADR     v1, DMABChannelStructs
        MOV     a1, #0
        ASSERT  (?DMABChannelPtrs = (4 * DMAPhysChannelCount)) :LAND: (DMAPhysChannelCount > 0)
        ADR     a2, DMABChannelPtrs
10
        MOV     a3, #IOMD21Device_DMAB_Size
        MLA     a3, a1, a3, v1
        STR     a3, [a2], #4
        ADD     a1, a1, #1
        TEQ     a1, #DMAPhysChannelCount
        BNE     %BT10

        ; The top level controller
        ADR     v3, DMACDeviceStruct
        MOV     a1, v3
        ADR     a2, ControllerTemplate
        MOV     a3, #IOMD21Device_DMAC_Size
        BL      memcpy

        ; Ammend if not to template
        LDRB    a2, IOSystemType
        TEQ     a2, #IOST_Medusa
        ADRNE   a3, IOMD21DMACDesc_7500
        STRNE   a3, [v3, #HALDevice_Description]
        LDRNE   a3, =HALDeviceBus_Peri + HALDevicePeriBus_APB
        STRNE   a3, [v3, #HALDevice_Location]

        STR     sb, [v3, #IOMD21HAL_SB]

        MOV     a2, v3                  ; device
        MOV     a1, #0                  ; flags
        CallOS  OS_AddDevice            ; register!

        ; Clone some physical channels
        MOV     v1, #0
20
        ADR     a1, DMABChannelStructs
        MOV     a3, #IOMD21Device_DMAB_Size
        MLA     v2, v1, a3, a1
        MOV     a1, v2
        ADR     a2, ChannelTemplate
        BL      memcpy

        ; Fix up the bits not to template
        LDRB    a1, IOSystemType
        TEQ     a1, #IOST_Medusa
        ASSERT  DMAPhysChannelCount_7500 = 1
        CMPNE   v1, #DMAPhysSD0         ; Are you the chosen one?
        BNE     %FT30                   ; No

        LDR     a1, [v3, #HALDevice_Location]
        STR     a1, [v2, #HALDevice_Location]

        ADRL    a3, IOMD21DMABDescList
        LDRB    a2, [a3, v1]
        ADD     a1, a3, a2              ; Table based relocation
        STR     a1, [v2, #HALDevice_Description]

        ADRL    a1, IOMD21DMABDevs
        LDRB    a1, [a1, v1]
        STR     a1, [v2, #HALDevice_Device]

        STR     v3, [v2, #HALDevice_DMAController]

        ASSERT  IOMD_IO1CURA - IOMD_IO0CURA = &20
        ASSERT  IOMD_IO2CURA - IOMD_IO1CURA = &20
        ASSERT  IOMD_IO3CURA - IOMD_IO2CURA = &20
        ASSERT  IOMD_SD0CURA - IOMD_IO3CURA = &20
        ASSERT  IOMD_SD1CURA - IOMD_SD0CURA = &20
        LDR     a1, IOMD_Address
        ADD     a1, a1, #IOMD_IO0CURA
        ADD     a1, a1, v1, LSL #5
        STR     a1, [v2, #IOMD21Device_Regs]

        MOV     a1, #1
        MOV     a1, a1, LSL v1
        STRB    a1, [v2, #IOMD21Device_IRQMask]
        STRB    v1, [v2, #IOMD21Device_Phys]
        
        MOV     a2, v2                  ; device
        MOV     a1, #0                  ; flags
        CallOS  OS_AddDevice            ; register!
30
        ADD     v1, v1, #1
        TEQ     v1, #DMAPhysChannelCount
        BNE     %BT20

        Pull    "v1-v3,pc"

; DMA controller HAL device

ControllerTemplate
        ; Public interface
        DCW     HALDeviceType_SysPeri + HALDeviceSysPeri_DMAC
        DCW     HALDeviceID_DMAC_IOMD21
        DCD     HALDeviceBus_Sys + HALDeviceSysBus_OPEN
        DCD     &0000                   ; API version - 0.0
        DCD     IOMD21DMACDesc
        DCD     0                       ; Address - N/A
        %       12                      ; Reserved
        DCD     IOMD21DMACActivate
        DCD     IOMD21DMACDeactivate
        DCD     IOMD21DMACReset
        DCD     IOMD21DMACSleep
        DCD     -1                      ; Device
        DCD     0                       ; TestIRQ cannot be called
        %       8
        ; Specifics for a DMA controller
        DCD     IOMD21DMACFeatures
        DCD     IOMD21DMACEnumerate
        DCD     IOMD21DMACAllocate
        DCD     IOMD21DMACDeallocate
        ASSERT  (.-ControllerTemplate) = HALDevice_DMAC_Size
        ; Controller's private data from here onwards
        DCD     0                       ; Copy of HAL's SB
        ASSERT  (.-ControllerTemplate) = IOMD21Device_DMAC_Size
        ASSERT  ?DMACDeviceStruct = IOMD21Device_DMAC_Size

IOMD21DMACDesc
        DCB     "Acorn IOMD21 DMA controller", 0
        ALIGN

IOMD21DMACDesc_7500
        DCB     "ARM 7500(FE) DMA controller", 0
        ALIGN

; DMA channel HAL device

ChannelTemplate
        ; Public interface
        DCW     HALDeviceType_SysPeri + HALDeviceSysPeri_DMAB
        DCW     HALDeviceID_DMAB_IOMD21
        DCD     HALDeviceBus_Sys + HALDeviceSysBus_OPEN
        DCD     &10000                  ; API version - 1.0
        DCD     0                       ; Description
        DCD     0                       ; Address - N/A
        %       12                      ; Reserved
        DCD     IOMD21DMABActivate
        DCD     IOMD21DMABDeactivate
        DCD     IOMD21DMABReset
        DCD     IOMD21DMABSleep
        DCD     0                       ; Device
        DCD     IOMD21DMABTestIRQ
        %       8
        ; Specifics for a DMA channel
        DCD     IOMD21DMABFeatures
        DCD     0                       ; Parent controller
        DCD     IOMD21DMABAbort
        DCD     IOMD21DMABSetOptions
        DCD     IOMD21DMABSetCurrentTransfer
        DCD     IOMD21DMABSetNextTransfer
        DCD     IOMD21DMABTransferState
        DCD     IOMD21DMABIRQClear
        DCD     IOMD21DMABStatus
        DCD     IOMD21DMABSetCurrentTransfer2
        DCD     IOMD21DMABSetNextTransfer2
        DCD     IOMD21DMABTransferState2
        ASSERT  (.-ChannelTemplate) = HALDevice_DMA_Size
        ; Channel's private data from here onwards
        DCD     0                       ; Logical address of channel registers
        DCB     0                       ; Bit mask for DMARQ/DMAST/DMAMSK
        DCB     0                       ; Physical channel number
        DCB     0                       ; Which of A/B was last written
        DCB     0                       ; Spare
        DCD     0                       ; Last programmed CURA
        DCD     0                       ; Last programmed CURB
        ASSERT  (.-ChannelTemplate) = IOMD21Device_DMAB_Size
        ASSERT  ?DMABChannelStructs = (IOMD21Device_DMAB_Size * DMAPhysChannelCount)

IOMD21DMABDevs
        DCB     IOMD_DMAChannel0_DevNo
        DCB     IOMD_DMAChannel1_DevNo
        DCB     IOMD_DMAChannel2_DevNo
        DCB     IOMD_DMAChannel3_DevNo
        DCB     IOMD_DMASound0_DevNo
        DCB     IOMD_DMASound1_DevNo

IOMD21DMABDescList
        DCB     %FT00 - IOMD21DMABDescList
        DCB     %FT01 - IOMD21DMABDescList
        DCB     %FT02 - IOMD21DMABDescList
        DCB     %FT03 - IOMD21DMABDescList
        DCB     %FT04 - IOMD21DMABDescList
        DCB     %FT05 - IOMD21DMABDescList
00
        DCB     "I/O DMA channel 0", 0
01
        DCB     "I/O DMA channel 1", 0
02
        DCB     "I/O DMA channel 2", 0
03
        DCB     "I/O DMA channel 3", 0
04
        DCB     "Sound DMA channel 0", 0
05
        DCB     "Sound DMA channel 1", 0
        ALIGN

; DMA controller device

IOMD21DMACActivate
IOMD21DMACDeactivate
IOMD21DMACReset
        LDR     ip, [a1, #IOMD21HAL_SB]
        LDR     a1, [ip, #:INDEX:IOMD_Address]

        ; No interrupts
        MOV     a2, #0
        STRB    a2, [a1, #IOMD_DMAMSK]  

        ; Skip registers missing from 7500(FE)
        LDRB    a2, [ip, #:INDEX:IOSystemType]
        TEQ     a2, #IOST_Medusa
        MOV     a3, #IOMD_DMA_C_Bit
        BNE     %FT10                   

        ; Allow for a mythical buffered backplane to be built
        MOV     a2, #(1:SHL:DMAPhysIO2) :OR: (1:SHL:DMAPhysIO3)
        STRB    a2, [a1, #IOMD_DMAEXT]  

        ; Clear to idle & not enabled
        STRB    a3, [a1, #IOMD_IO0CR]
        STRB    a3, [a1, #IOMD_IO1CR]
        STRB    a3, [a1, #IOMD_IO2CR]
        STRB    a3, [a1, #IOMD_IO3CR]
        STRB    a3, [a1, #IOMD_SD1CR]
10
        STRB    a3, [a1, #IOMD_SD0CR]

        ; Activate OK (ignored for Deactivate and Reset)
        MOV     a1, #1                  
        MOV     pc, lr

IOMD21DMACSleep
        MOV     a1, #0                  ; No sleep
        MOV     pc, lr

IOMD21DMACFeatures
        MOV     a1, #0                  ; No special features
        MOV     pc, lr

IOMD21DMACEnumerate
        LDR     ip, [a1, #IOMD21HAL_SB]
        LDRB    a2, [ip, #:INDEX:IOSystemType]
        TEQ     a2, #IOST_Medusa
        MOVEQ   a2, #DMAPhysChannelCount
        MOVNE   a2, #DMAPhysChannelCount_7500
        ADD     a1, ip, #:INDEX:DMABChannelPtrs
        ADDNE   a1, a1, #4*DMAPhysSD0   ; No I/O DMA on 7500(FE), skip pointer
        MOV     pc, lr

IOMD21DMACAllocate ROUT
        LDR     ip, [a1, #IOMD21HAL_SB]
        ADD     a3, ip, #:INDEX:DMABChannelPtrs
        LDRB    a4, [ip, #:INDEX:IOSystemType]
        MOV     a1, #0                  ; Default NULL result
        TEQ     a4, #IOST_Medusa
        BNE     %FT10

        ; A quick summary of physical DMA from the Risc PC TRM
        ;   DMA channel  Phys Notes
        ;   IO0          0    NIC expansion podule 8 (pins A14/B14/C14)
        ;   IO1          1    Unused
        ;   IO2          2    DEBI expansion podule 0 (pins C7/C8/C11)
        ;   IO3          3    DEBI expansion podule 1 (pins C7/C8/C11)
        ;   S0           4    Optional linear sound in, VIDC sound output
        ;   S1           5    Optional linear sound out
        ;   Video        -    Dealt with by the VIDC20 driver
        ;   Cursor       -    Dealt with by the VIDC20 driver
        LDR     a4, =DMALC_Podule0Line0
        TEQ     a2, a4
        LDREQ   a1, [a3, #DMAPhysIO2*4]

        LDR     a4, =DMALC_Podule1Line0
        TEQ     a2, a4
        LDREQ   a1, [a3, #DMAPhysIO3*4]

        LDR     a4, =DMALC_Sound1
        TEQ     a2, a4
        LDREQ   a1, [a3, #DMAPhysSD1*4]

        LDR     a4, =DMALC_Network
        TEQ     a2, a4
        LDREQ   a1, [a3, #DMAPhysIO0*4]
10
        ; Skip to here on 7500(FE)
        LDR     a4, =DMALC_Sound0
        TEQ     a2, a4
        LDREQ   a1, [a3, #DMAPhysSD0*4]

        MOV     pc, lr

IOMD21DMACDeallocate
        MOV     pc, lr

; DMA channel device

IOMD21DMABFeatures
        MOV     a1, #0                  ; No special features
        MOV     pc, lr

IOMD21DMABSleep
        MOV     a1, #0                  ; No sleep
        MOV     pc, lr

IOMD21DMABTestIRQ
        LDR     a2, [a1, #IOMD21Device_Regs]
        LDRB    a3, [a2, #DMA_ST]
        ANDS    a1, a3, #IOMD_DMA_I_Bit
        MOVNE   a1, #1
        MOV     pc, lr

IOMD21DMABIRQClear
        MOV     pc, lr                  ; Cleared implictly by a SetCurrent/SetNext

IOMD21DMABSetCurrentTransfer2
IOMD21DMABSetNextTransfer2
IOMD21DMABTransferState2
        MOV     pc, lr

IOMD21DMABReset
        ; Clear to idle & not enabled
        LDR     a2, [a1, #IOMD21Device_Regs]
        MOV     a3, #IOMD_DMA_C_Bit
        STRB    a3, [a2, #DMA_CR]
        MOV     pc, lr

IOMD21DMABSetOptions
        TST     a2, #DMASetOptionsFlag_Write
        MOVEQ   a3, #IOMD_DMA_D_Bit     ; Device -> memory
        MOVNE   a3, #0                  ; Memory -> device

        ASSERT  IOMD_DMA_IncMask = (DMASetOptionsMask_Width :SHR: DMASetOptionsShift_Width)
        AND     a4, a2, #DMASetOptionsMask_Width
        ORR     a3, a3, a4, LSR #DMASetOptionsShift_Width

        LDR     a4, [a1, #IOMD21Device_Regs]
        STRB    a3, [a4, #DMA_CR]       ; Assume the channel was not enabled!

        ; Remaining option only applies to I/O
        LDRB    a3, [a1, #IOMD21Device_Phys]
        CMP     a3, #DMAPhysSD0
        MOVCS   pc, lr

        ; Set the speed
        AND     a2, a2, #DMASetOptionsMask_Speed
        MOV     a2, a2, LSR #DMASetOptionsShift_Speed
        CMP     a2, #3                  
        MOVHI   a2, #3                  ; A-D cycles only thanks
        ADD     a3, a3, a3
        MOV     a1, #3
        MOV     a1, a1, LSL a3          ; Mask
        MOV     a2, a2, LSL a3          ; Speed bits
        MOV     a4, a4, LSR #12
        MOV     a4, a4, LSL #12         ; Round down to get IOMD_Address
        MRS     ip, CPSR
        ORR     a3, ip, #F32_bit+I32_bit
        MSR     CPSR_c, a3
        LDRB    a3, [a4, #IOMD_DMATCR]
        BIC     a3, a3, a1
        ORR     a3, a3, a2
        STRB    a3, [a4, #IOMD_DMATCR]
        MSR     CPSR_c, ip

        MOV     pc, lr

IOMD21DMABAbort
IOMD21DMABDeactivate
        LDR     a2, [a1, #IOMD21Device_Regs]
        LDRB    a4, [a1, #IOMD21Device_IRQMask]
        MOV     a1, a2, LSR #12
        MOV     a1, a1, LSL #12         ; Round down to get IOMD_Address

        MRS     ip, CPSR
        ORR     a3, ip, #F32_bit+I32_bit
        MSR     CPSR_c, a3

        ; Mark as interrupt masked, not enabled
        LDRB    a3, [a1, #IOMD_DMAMSK]
        BIC     a3, a3, a4
        STRB    a3, [a1, #IOMD_DMAMSK]
        LDRB    a3, [a2, #DMA_CR]
        BIC     a3, a3, #IOMD_DMA_E_Bit
        STRB    a3, [a2, #DMA_CR]

        MSR     CPSR_c, ip
        MOV     pc, lr

IOMD21DMABSetCurrentTransfer
        MOV     ip, #0                  ; Denote current
        B       %FT10

IOMD21DMABSetNextTransfer
        MOV     ip, #IOMD_DMA_B_Bit     ; Denote next
10        
        Push    "v1-v2, lr"

        ; Make sure length wouldn't cross a page boundary
        MOV     v1, a2, LSL #20
        MOV     v1, v1, LSR #20
        RSB     v1, v1, #&1000
        CMP     a3, v1
        MOVHI   a3, v1

        ; Formulate 'END' register
        LDRB    v1, [a1, #IOMD21Device_Phys]
        CMP     v1, #DMAPhysSD0
        BICCS   a4, a4, #DMASetTransferFlag_Stop
        TST     a4, #DMASetTransferFlag_Stop
        MOVEQ   a4, #0
        MOVNE   a4, #IOMD_DMA_S_Bit     ; Raise TC (for I/O only)

        LDR     v1, [a1, #IOMD21Device_Regs]
        LDRB    v2, [v1, #DMA_CR]
        AND     v2, v2, #IOMD_DMA_IncMask
        TEQ     a3, v2
        ORREQ   a4, a4, #IOMD_DMA_L_Bit ; Last transaction when only 1 bus transaction long

        SUB     a3, a3, v2              ; Inclusive length
        ADD     a3, a2, a3              ; Inclusive physical 32 bit end address
        MOV     a3, a3, LSL #20
        ORR     a4, a4, a3, LSR #20     ; Inclusive physical 12 bit end address

        ; See which memory pointers to use
        LDRB    v2, [v1, #DMA_ST]
        EOR     v2, v2, ip
        TST     v2, #IOMD_DMA_B_Bit
        STREQ   a2, [v1, #DMA_CURA]
        STREQ   a4, [v1, #DMA_ENDA]     ; Write to 'END' must come 2nd
        STREQ   a2, [a1, #IOMD21Device_StartA]
        STRNE   a2, [v1, #DMA_CURB]
        STRNE   a4, [v1, #DMA_ENDB]     ; Write to 'END' must come 2nd
        STRNE   a2, [a1, #IOMD21Device_StartB]
        ASSERT  IOMD_DMA_B_Bit < 256
        STRB    v2, [a1, #IOMD21Device_LastPair]

        Pull    "v1-v2, pc"

IOMD21DMABTransferState
        LDR     a4, [a1, #IOMD21Device_Regs]
        LDRB    a2, [a4, #DMA_ST]
        TST     a2, #IOMD_DMA_B_Bit
        LDREQ   a2, [a4, #DMA_CURA]
        LDRNE   a2, [a4, #DMA_CURB]

        ; Recall start point, knowing no page boundary may be crossed
        LDREQ   a4, [a1, #IOMD21Device_StartA]
        LDRNE   a4, [a1, #IOMD21Device_StartB]
        BIC     a1, a2, #&E0000000      ; Inclusive current (29 bits)
        SUB     a2, a1, a4              ; Remainder

        MOV     pc, lr

IOMD21DMABActivate
        LDR     a2, [a1, #IOMD21Device_Regs]
        LDRB    a4, [a1, #IOMD21Device_IRQMask]
        MOV     a1, a2, LSR #12
        MOV     a1, a1, LSL #12         ; Round down to get IOMD_Address

        MRS     ip, CPSR
        ORR     a3, ip, #F32_bit+I32_bit
        MSR     CPSR_c, a3

        ; Mark as enabled and interrupt unmasked
        LDRB    a3, [a2, #DMA_CR]
        ORR     a3, a3, #IOMD_DMA_E_Bit
        STRB    a3, [a2, #DMA_CR]
        LDRB    a3, [a1, #IOMD_DMAMSK]
        ORR     a3, a3, a4
        STRB    a3, [a1, #IOMD_DMAMSK]

        MSR     CPSR_c, ip
        MOV     pc, lr

IOMD21DMABStatus
        LDR     a4, [a1, #IOMD21Device_Regs]
        LDRB    a2, [a4, #DMA_ST]
        TST     a2, #IOMD_DMA_I_Bit     ; See TRM figure 1.4, the only time where there's no
        MOVEQ   a3, #0                  ; interrupt is when there are unstarted programmed buffers
        MOVNE   a3, #DMAStatusFlag_NoUnstarted
        TST     a2, #IOMD_DMA_O_Bit     ; Overrun
        ORRNE   a3, a3, #DMAStatusFlag_Overrun
        LDRNEB  a4, [a1, #IOMD21Device_LastPair]
        EORNE   a4, a4, a2              ; There's an overrun, and the last written buffer pair
        TSTNE   a4, #IOMD_DMA_B_Bit     ; doesn't match the hardware, so it's an early overrun
        ORRNE   a3, a3, #DMAStatusFlag_EarlyOverrun
        MOV     a1, a3
        MOV     pc, lr
        
        END
