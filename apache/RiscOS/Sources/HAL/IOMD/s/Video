; Copyright 2000 Pace Micro Technology plc
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        $GetIO
        GET     Hdr:Proc
        GET     Hdr:DevNos
        GET     Hdr:OSEntries
        GET     Hdr:HALEntries
        GET     Hdr:VideoDevice
        GET     hdr.StaticWS
        GET     hdr.IOMD
        
        AREA    |Asm$$Code|, CODE, READONLY, PIC

        IMPORT  memcpy

        EXPORT  Video_Init
        EXPORT  VideoDevice_Init

                GBLL    VCOstartfix
VCOstartfix     SETL    {TRUE}

; -----------------------------------------------------------------------------------

Video_Init ROUT
        ; => Pre MMU
        ;    Timer0 running (1cs period)
        ;    No stack or RAM
        ; <= R0-R5 corrupted

        MOV     R1, #IOMDPhys
        MOV     R4, #VIDCPhys

        ; Bang a load of registers into VIDC because it powers up uninitialised, this
        ; could be fatal if VSYNC interrupts occur at some crazy rate and stiff us.
        ADR     R2, VIDCTAB
10
        LDR     R0, [R2], #4
        CMP     R0, #-1        
        STRNE   R0, [R4]
        BNE     %BT10

      [ VCOstartfix
        ; Fix for VCO failing to start on A7000 (esp. 7500FE) - forcing PCOMP high for about 3 ms
        LDRB    R0, [R1,#IOMD_ID0]
        LDRB    R2, [R1,#IOMD_ID1]
        ORR     R2, R0, R2, LSL #8
        LDR     R0, =IOMD_Original
        TEQ     R0, R2

        LDREQ   R5, VIDCTAB_FSYN_Medusa
        BEQ     %FT30                   ; Medusa - risky to force PCOMP on Risc PC
                                        
        LDR     R5, VIDCTAB_FSYN        ; VIDC20 FSYNREG
        ORR     R2, R5, #&40            ; but with force PCOMP high
        STR     R2, [R4]
                                        
        MOV     R0, #3072*2             ; time delay of about 3 ms (0.5 us units)
        STRB    R0, [R1, #Timer0LR]     ; copy counter into output latch
        LDRB    R2, [R1, #Timer0CL]     ; R2 := low output latch
20
        STRB    R0, [R1, #Timer0LR]     ; copy counter into output latch
        LDRB    R3, [R1, #Timer0CL]     ; R3 := low output latch
        TEQ     R3, R2                  ; unchanged ?
        BEQ     %BT20                   ; then loop
        MOV     R2, R3                  ; copy anyway
        SUBS    R0, R0, #1              ; decrement count
        BNE     %BT20                   ; loop if not finished
30
        STR     R5, [R4]                ; VIDC20 FSYNREG per table (PCOMP low)
      ]
        ; VInit and friends are set on mode change, there's no DMA going yet so don't set owt.
        MOV     pc, lr

        ; This is 1bpp 640x480 at approx 60Hz
VIDCTAB

        ; Program Control Register first, to clear power-down bit
        ; Now depending upon the VIDCClockSource flag, re-program the clock source.

    [ VIDCClockSource = "VCO"
      [ VCOstartfix
        DCD     &E0000404               ; CR: FIFO load 16 words, 1 bpp, ck/2, vclk (allow for doubled VCO freq)
      |
        DCD     &E0000400               ; CR: FIFO load 16 words, 1 bpp, ck/1, vclk
      ]
    ]
    [ VIDCClockSource = "HCLK"
        DCD     &E0000401               ; CR: FIFO load 16 words, 1 bpp, ck/1, hclk
    ]
    [ VIDCClockSource = "RCLK"
        DCD     &E0000406               ; CR: FIFO load 16 words, 1 bpp, ck/2, rclk
    ]
        DCD     &B1000001               ; SCR: sound disabled (+use 24MHz clock)

        ; Don't bother programming all 256 palette entries, we'll be here all night
        ; Since we're setting up a 1 bit-per-pixel mode, just do colours 0 and 1

        DCD     &10000000               ; Palette address register = 0
        DCD     &00000000               ; Colour 0 = black
        DCD     &00000000               ; Colour 1 = black
        DCD     &40000000               ; Border colour = black
        DCD     &50000000               ; Pointer colour 1 = black
        DCD     &60000000               ; Pointer colour 2 = black
        DCD     &70000000               ; Pointer colour 3 = black

        ; Get a stable display up so we get stable signals

        DCD     &80000318               ; HCR + 8 = 94 + 22 + 22 + 640 + 22 + 0 = 800
        DCD     &81000056               ; HSWR+ 8 = 94
        DCD     &82000068               ; HBSR+12 = 94 + 22
        DCD     &83000078               ; HDSR+18 = 94 + 22 + 22
        DCD     &840002F8               ; HDER+18 = 94 + 22 + 22 + 640
        DCD     &85000314               ; HBER+12 = 94 + 22 + 22 + 640 + 22
        DCD     &86000079               ; HCSR+17 = HDSR+18

        DCD     &9000020B               ; VCR +2 = 2 + 32 + 0 + 480 + 0 + 11 = 525
        DCD     &91000000               ; VSWR+2 = 2
        DCD     &92000021               ; VBSR+1 = 2 + 32
        DCD     &93000021               ; VDSR+1 = 2 + 32 + 0
        DCD     &94000201               ; VDER+1 = 2 + 32 + 0 + 480
        DCD     &95000201               ; VBER+1 = 2 + 32 + 0 + 480 + 0
        DCD     &96000021               ; VCSR+1 = VDSR+1
        DCD     &97000021               ; VCER+1 = VDSR+1

        DCD     &C00F1003               ; EREG = comp sync, DACs on, ereg output ext lut

VIDCTAB_FSYN
      [ VCOstartfix
        DCD     &D0000A06               ; FSYNREG, clk = (10+1)/(6+1) * 32MHz = 50.286MHz  (higher frequency as part of fix)
      |
        DCD     &D0000A0D               ; FSYNREG, clk = (10+1)/(13+1) * 32MHz = 25.143MHz
      ]
        DCD     &F0013000               ; DCR: bus D[31:0], Hdisc
        DCD     -1                      ; That's the lot
VIDCTAB_FSYN_Medusa
      [ VCOstartfix
        DCD     &D0001409               ; FSYNREG, clk = (20+1)/(9+1) * 24MHz = 50.4MHz  (higher frequency as part of fix)
      |
        DCD     &D0001413               ; FSYNREG, clk = (20+1)/(19+1) * 24MHz = 25.2MHz
      ]

; -----------------------------------------------------------------------------------

VideoDevice_Init
        Push    "lr"
        ADRL    a1, VideoDevice
        ADR     a2, VideoDeviceTemplate
        MOV     a3, #HALDevice_VDU_Size
        BL      memcpy

        LDR     a2, VIDC_Address
        STR     a2, [a1, #HALDevice_Address]

        MOV     a2, a1
        MOV     a1, #0                  ; No flags
        CallOS  OS_AddDevice
        Pull    "pc"

VideoDeviceTemplate
        DCW     HALDeviceType_Video + HALDeviceVideo_VDU
        DCW     HALDeviceID_VDU_VIDC20
        DCD     HALDeviceBus_Sys + HALDeviceSysBus_AHB
        DCD     0                       ; API version 0
        DCD     VideoDevice_Desc
        DCD     0                       ; Address - filled later
        %       12                      ; Reserved
        DCD     VideoDevice_Activate
        DCD     VideoDevice_Deactivate
        DCD     VideoDevice_Reset
        DCD     VideoDevice_Sleep
        DCD     VSync_DevNo             ; Device number of flyback IRQ
        DCD     0
        DCD     0
        %       4
        DCD     0
        ASSERT  (.-VideoDeviceTemplate) = HALDevice_VDU_Size
        ASSERT  ?VideoDevice = HALDevice_VDU_Size

VideoDevice_Desc
        =       "Acorn VIDC20", 0
        ALIGN

VideoDevice_Activate
        MOV     a1, #1
VideoDevice_Deactivate
VideoDevice_Reset
        MOV     pc, lr

VideoDevice_Sleep
        MOV     a1, #0                  ; While there is a power down bit, this HAL device doesn't get to see
        MOV     pc, lr                  ; writes to the control register, so can't restore the old value later

; -----------------------------------------------------------------------------------

        END
