; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        $GetCPU
        $GetIO
        $GetMEMC
        $GetMEMM
        $GetVIDC


        GET     Hdr:Proc
        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.StaticWS





DRAM0PhysRam *  &50000000               ; 2 DRAM banks
DRAM1PhysRam *  &60000000

UARTPhys     *  &7F005000


	EXPORT	serial
; This version assumes a RISC OS image starting 64K after us.

        AREA    |!!!ROMStart|, CODE, READONLY, PIC

        ENTRY

HAL_Base

vectors
	B	start
;        LDR     pc, ResetInd            ; Reset
        LDR     pc, HaltInd             ; Undefined instruction
        LDR     pc, HaltInd             ; SWI
        LDR     pc, HaltInd             ; Prefetch abort
        LDR     pc, HaltInd             ; Data abort
        LDR     pc, HaltInd             ; (Address exception)
        LDR     pc, HaltInd             ; IRQ
        LDR     pc, HaltInd             ; FIQ

ResetInd
        DCD     0x50100220  ;(start - HAL_Base)+0x30000000
HaltInd
        DCD     0x50100028  ;(halt - HAL_Base) +0x30000000

halt    B       halt

        ASSERT  . - HAL_Base < 0x60
        %       0x60 - (. - HAL_Base)
ROMsize
        DCD     0                       ; patched in by build system

HALdescriptor   DATA
        DCD     0
        DCD     HAL_Base - HALdescriptor
        DCD     64*1024
        DCD     HAL_EntryTable - HALdescriptor
        DCD     HAL_Entries
        DCD     HAL_WsSize

        MACRO
        HALEntry $name
        ASSERT  (. - HAL_EntryTable) / 4 = EntryNo_$name
        DCD     $name - HAL_EntryTable
        MEND

        MACRO
        NullEntry
        DCD     HAL_Null - HAL_EntryTable
        MEND

;        IMPORT   Video_init

        IMPORT   HAL_IRQEnable
        IMPORT   HAL_IRQDisable
        IMPORT   HAL_IRQClear
        IMPORT   HAL_IRQSource
        IMPORT   HAL_IRQStatus
;        IMPORT   HAL_FIQEnable
;        IMPORT   HAL_FIQDisable
;        IMPORT   HAL_FIQDisableAll
;        IMPORT   HAL_FIQClear
;        IMPORT   HAL_FIQSource
;        IMPORT   HAL_FIQStatus

        IMPORT   HAL_Timers
        IMPORT   HAL_TimerDevice
        IMPORT   HAL_TimerGranularity
        IMPORT   HAL_TimerMaxPeriod
        IMPORT   HAL_TimerSetPeriod
        IMPORT   HAL_TimerPeriod
        IMPORT   HAL_TimerReadCountdown

;        IMPORT   HAL_CounterRate
;        IMPORT   HAL_CounterPeriod
;        IMPORT   HAL_CounterRead
;        IMPORT   HAL_CounterDelay

;        IMPORT   HAL_IICBuses
;        IMPORT   HAL_IICType
;        IMPORT   HAL_IICSetLines
;        IMPORT   HAL_IICReadLines

;        IMPORT   HAL_NVMemoryType
;        IMPORT   HAL_NVMemorySize
;        IMPORT   HAL_NVMemoryPageSize
;        IMPORT   HAL_NVMemoryProtectedSize
;        IMPORT   HAL_NVMemoryProtection
;        IMPORT   HAL_NVMemoryIICAddress
;        IMPORT   HAL_NVMemoryRead
;        IMPORT   HAL_NVMemoryWrite

 ;       IMPORT   HAL_VideoFlybackDevice
 ;       IMPORT   HAL_VideoSetMode
        IMPORT   HAL_VideoWritePaletteEntry
        IMPORT   HAL_VideoWritePaletteEntries
 ;       IMPORT   HAL_VideoReadPaletteEntry
 ;       IMPORT   HAL_VideoSetInterlace
 ;       IMPORT   HAL_VideoSetBlank
 ;       IMPORT   HAL_VideoSetPowerSave
 ;       IMPORT   HAL_VideoUpdatePointer
        IMPORT   HAL_VideoSetDAG
        IMPORT   HAL_VideoVetMode
        IMPORT   HAL_VideoPixelFormats
        IMPORT   HAL_VideoFeatures
        IMPORT   HAL_VideoBufferAlignment
        IMPORT   HAL_VideoOutputFormat

;	IMPORT   HAL_ATAControllerInfo
;	IMPORT   HAL_ATASetModes
;	IMPORT   HAL_ATACableID
        ;IMPORT   HAL_MatrixColumns
        ;IMPORT   HAL_MatrixScan

;        IMPORT HAL_MachineID

	EXPORT  serial2
	EXPORT	serialn
	EXPORT  serial8
	EXPORT	serials

 ;	IMPORT 	RTC_Init

HAL_EntryTable  DATA
        HALEntry  HAL_Init

        HALEntry HAL_IRQEnable
        HALEntry HAL_IRQDisable
        HALEntry HAL_IRQClear
        HALEntry HAL_IRQSource
        HALEntry HAL_IRQStatus
        NullEntry ;HAL_FIQEnable
        NullEntry ;HAL_FIQDisable
        NullEntry ;HAL_FIQDisableAll
        NullEntry ;HAL_FIQClear
        NullEntry ;HAL_FIQSource
        NullEntry ;HAL_FIQStatus

        HALEntry HAL_Timers
        HALEntry HAL_TimerDevice
        HALEntry HAL_TimerGranularity
        HALEntry HAL_TimerMaxPeriod
        HALEntry HAL_TimerSetPeriod
        HALEntry HAL_TimerPeriod
        HALEntry HAL_TimerReadCountdown

        NullEntry ;HAL_CounterRate
        NullEntry ;HAL_CounterPeriod
        NullEntry ;HAL_CounterRead
        NullEntry ;HAL_CounterDelay

        NullEntry ;HAL_NVMemoryType
        NullEntry ;HAL_NVMemorySize
        NullEntry ;HAL_NVMemoryPageSize
        NullEntry ;HAL_NVMemoryProtectedSize
        NullEntry ;HAL_NVMemoryProtection
        NullEntry ;HAL_NVMemoryIICAddress
        NullEntry ;HAL_NVMemoryRead
        NullEntry ;HAL_NVMemoryWrite

        NullEntry ;HAL_IICBuses
        NullEntry ;HAL_IICType
        NullEntry ;HAL_IICSetLines
        NullEntry ;HAL_IICReadLines
        NullEntry ;HAL_IICDevice
        NullEntry ;HAL_IICTransfer
        NullEntry ;HAL_IICMonitorTransfer

        NullEntry ;HAL_VideoFlybackDevice
        NullEntry ;HAL_VideoSetMode
        HALEntry HAL_VideoWritePaletteEntry
        HALEntry HAL_VideoWritePaletteEntries
        NullEntry ;HAL_VideoReadPaletteEntry
        NullEntry ;HAL_VideoSetInterlace
        NullEntry ;HAL_VideoSetBlank
        NullEntry ;HAL_VideoSetPowerSave
        NullEntry ;HAL_VideoUpdatePointer
        HALEntry HAL_VideoSetDAG
        HALEntry HAL_VideoVetMode
        HALEntry HAL_VideoPixelFormats
        HALEntry HAL_VideoFeatures
        HALEntry HAL_VideoBufferAlignment
        HALEntry HAL_VideoOutputFormat

        NullEntry ;HAL_MatrixColumns
        NullEntry ;HAL_MatrixScan

        NullEntry ;HAL_TouchscreenType
        NullEntry ;HAL_Touchscreenread
        NullEntry ;HAL_Touchscreenread
        NullEntry ;HAL_Touchscreenread

        NullEntry ;HAL_MachineID

        NullEntry ;HAL_ControllerAddress
        HALEntry HAL_HardwareInfo
        HALEntry HAL_SuperIOInfo
        HALEntry HAL_PlatformInfo
        NullEntry ;HAL_CleanerSpace

        NullEntry ;HAL_UARTPorts
        NullEntry ;HAL_UARTStartUp
        NullEntry ;HAL_UARTShutdown
        NullEntry ;HAL_UARTFeatures
        NullEntry ;HAL_UARTReceiveByte
        NullEntry ;HAL_UARTTransmitByte
        NullEntry ;HAL_UARTLineStatus
        NullEntry ;HAL_UARTInterruptEnable
        NullEntry ;HAL_UARTRate
        NullEntry ;HAL_UARTFormat
        NullEntry ;HAL_UARTFIFOSize
        NullEntry ;HAL_UARTFIFOClear
        NullEntry ;HAL_UARTFIFOEnable
        NullEntry ;HAL_UARTFIFOThreshold
        NullEntry ;HAL_UARTInterruptID
        NullEntry ;HAL_UARTBreak
        NullEntry ;HAL_UARTModemControl
        NullEntry ;HAL_UARTModemStatus
        NullEntry ;HAL_UARTDevice

        NullEntry ;HAL_Reset
        HALEntry  HAL_DebugRX
        HALEntry  HAL_DebugTX

        NullEntry ;HAL_PCIFeatures

        NullEntry ;HAL_PCIReadConfigByte
        NullEntry ;HAL_PCIReadConfigHalfword
        NullEntry ;HAL_PCIReadConfigWord
        NullEntry ;HAL_PCIWriteConfigByte
        NullEntry ;HAL_PCIWriteConfigHalfword
        NullEntry ;HAL_PCIWriteConfigWord
        NullEntry ;HAL_PCISpecialCycle
        NullEntry ;HAL_PCISlotTable
        NullEntry ;HAL_PCIAddresses

        NullEntry ;HAL_ATAControllerInfo
        NullEntry ;HAL_ATASetModes
        NullEntry ;HAL_ATACableID

        HALEntry HAL_InitDevices

        NullEntry ;HAL_KbdScanSetup
        NullEntry ;HAL_KbdScan
        NullEntry ;HAL_KbdScanFinish
        NullEntry ;HAL_KbdScanInterrupt

	NullEntry ;HAL_PhysInfo

	HALEntry  HAL_USBControllerInfo

	NullEntry ;HAL_MonitorLeadID
	NullEntry ;HAL_VideoRender

	NullEntry ;HAL_USBPortPower
	NullEntry ;HAL_USBPortStatus
	NullEntry ;HAL_USBPortIRQ

	NullEntry ;HAL_VideoIICOp

HAL_Entries     * (.-HAL_EntryTable)/4

; R11 is used as pointer to RISC OS entry table throughout pre-MMU stage.
        MACRO
        CallOSM $entry, $reg
        LDR     ip, [v8, #$entry*4]
        MOV     lr, pc
        ADD     pc, v8, ip
        MEND

        MACRO
        CallOS  $entry
        ASSERT  $entry <= HighestOSEntry
        MOV     lr, pc
        LDR     pc, OSentries + 4*$entry
        MEND


start   MOV	R1,#65
	BL 	serial

	B realstart

crashit B crashit

serial	MOV 	R0,#0x7F000000
	ORR     R0,R0,#0x5000
	LDR	R2,[R0,#16]
	TST     R2,#2
	BEQ 	serial

	STR	R1,[R0,#32]

	MOV 	PC,LR

serial2	LDR	R2,[R0,#16]
	TST     R2,#2
	BEQ 	serial2

	STR	R1,[R0,#32]

	MOV 	PC,LR

realstart
	ADRL    R5, HAL_Base + 64*1024          ; R5 -> RISC OS image

        LDR     R11, [R5, #OSHdr_Entries]
        ADD     R11, R11, R5                    ; R11 -> RISC OS entry table

;	MOV	R1,#65
;	BL      serial

;	MOV 	R1,#66
;	BL	serial

        MOV     R0, #0
        CallOSM OS_InitARM

;	MOV 	R1,#66
;	BL	serial

;	MOV	a1,#0x48000000
;	MOV	a2,#0xB0
;	STR	a2,[a1,#0x28]

	MOV	a1,#0
	MOV	a2,#0x50000000
	ADD	a2,a2,#0x500000
;	ADD	a2,a2,#0x00400000
	MOV	a3,#0x00800000
	ADD	a3,a3,a2
	MOV	a4,#-1

	ADD	sp,a2,#4096
	STR	a1,[sp,#-4]!
	CallOSM	OS_AddRAM


;	MOV	R1,#65
;	Push	"R1"
;	MOV	R1,#0
;	Pull	"R1"
;;	BL 	serial

;	MOV	a2,#0x38000000
;	MOV	a3,#0x00800000
;	ADD	a3,a3,a2
;	MOV	a4,#-1

;	STR	a1,[sp,#-4]!
;	MOV	a1, #0
;	CallOSM	OS_AddRAM


;	MOV	R1,#67
;	BL	serial

	ADRL    R1, HAL_Base + 64*1024
	ADRL	R2, HALdescriptor
	MOV	R3, R0
	MOV	R0, #13
	CallOSM	OS_Start
	;B crashit
;
;
;        MOV     R1, R5
;        ADRL    R2, HALdescriptor
;
;        CallOSM OS_Start

serial8 STMDB   sp!,{r1,r3,lr}
        MOV 	r3,#28
s8l     MOV	r1,r4,LSR r3
	AND	r1,r1,#15
	CMP	r1,#10
	ADDCC	r1,r1,#48
	ADDCS	r1,r1,#55
	BL	serial2
	SUBS	r3,r3,#4
	BPL 	s8l

	MOV	r1,#13
	BL	serial2
	MOV	r1,#10
	BL	serial2

	LDMIA	sp!,{r1,r3,pc}

serial3	MOV	r0,#0x50000000
	B	serial2

serials STMDB 	sp!,{r1,r3,lr}
ssl	LDRB	r1,[r4],#1
	TST	r1,r1
	BEQ	sdone
	BL	serial2
	B ssl

sdone   LDMIA	sp!,{r1,r3,pc}

serialn STMDB 	sp!,{lr}
	MOV	r1,#13
	BL	serial2
	MOV	r1,#10
	BL	serial2
	LDMIA	sp!,{pc}

Timer_txt = "Timer Address = "
	= 0
UART_txt = "UART Address = "
	 = 0
INT_txt  = "INT Address = "
	 = 0
CLK_txt	 = "CLK Address = "
	 = 0
LCD_txt	 = "LCD Address = "
	 = 0
MEM_txt	 = "MEM Address = "
	 = 0
CLKs_txt = "MPLLCON = "
	 = 0
CLKd_txt = "CLKDIVN = "
	 = 0
CLKc_txt = "CLOCKCON = "
	 = 0
GPIO_txt = "GPIO = "
	 = 0
Ready	 = "HAL_Init complete"
	 = 0

	ALIGN

HAL_Init
        Entry

	STMDB	sp!,{r0-r1}

;	MOV	r0,#0x50000000
;	MOV	r1,#65
;	BL	serial
;	MOV	r1,#66
;	BL	serial
;
;	MOV	r1,#13
;	BL	serial
;	MOV	r1,#10
;	BL 	serial
;
	LDMIA	sp!,{r0-r1}

        BL      SetUpOSEntries

;	MOV     r1,#67
;	BL      serial

;	MOV	r0,#10
;	BL	serial
;	MOV	r1,#13
;	BL	serial

;;HL_halt
;	B 	HL_halt
;	ADRL	r1,OSentries
;	BL	serial8
;;
;	MOV	r1,#13
;	BL	serial
;	MOV	r1,#10
;	BL 	serial
;
;        MOV	r4,pc
;	BL	serial8
;
;	MOV	r1,#13
;	BL	serial
;;	MOV	r1,#10
 ;	BL 	serial

;	LDR	r4,OSentries+4*OS_MapInIO
;	BL	serial8

;;	MOV	r1,#13
;	BL	serial
;	MOV	r1,#10
;	BL 	serial

        MOV     a1, #0		;Map in UART
        LDR     a2, =0x7F005000
        MOV     a3, #0x1000
        CallOS  OS_MapInIO

	STR	a1,UART_Address
	MOV	a2,#0
	STR	a2,[a1,#8]

;;	MOV 	r1, #13
;	BL	serial3
;	MOV	r1, #10
;	BL 	serial3

	ADR	r4,UART_txt
	MOV	r0,a1
	BL 	serials
	MOV	r4, a1
	MOV	r0, r4
	BL	serial8

	;LDR	r4,UART_Address
	;BL	serial8

        ;MOV     a1, #0		;Map in MEMCTRL
        ;MOV     a2, #0x48000000
        ;MOV     a3, #0x100000
        ;CallOS  OS_MapInIO
	;STR	a1,MEM_Address

	;ADR	r4,MEM_txt
	;LDR	r0,UART_Address
	;BL 	serials
	;MOV	r4, a1
	;MOV	r0, r4
	;BL	serial8

	;LDR	r4,MEM_Address
	;BL	serial8
        ;
        ;MOV     a1, #0		;Map in CLK
        ;MOV     a2, #0x4C000000
        ;MOV     a3, #0x100000
        ;CallOS  OS_MapInIO
        ;
	;STR	a1,CLK_Address
        ;
	;ADR	r4,CLK_txt
	;LDR	r0,UART_Address
	;BL	serials
        ;
	;LDR	r4,CLK_Address
	;BL	serial8
        ;
        ;
	;ADR	r4, CLKs_txt
	;BL	serials
	;LDR	r5,CLK_Address
	;LDR	r4,[r5,#4]
	;BL 	serial8
        ;
	;ADR	r4, CLKd_txt
	;BL	serials
	;LDR	r5,CLK_Address
	;LDR	r4,[r5,#0x14]
	;BL 	serial8
        ;
	;ADR	r4, CLKc_txt
	;BL	serials
	;LDR	r5,CLK_Address
	;LDR	r4,[r5,#0x0C]
	;BL 	serial8
        ;
        MOV     a1, #0		;Map in TIMER
        LDR     a2, =0x7F006000
        MOV     a3, #0x1000
        CallOS  OS_MapInIO
	STR	a1, Timer_Address

	ADRL	r4,Timer_txt
	LDR	r0,UART_Address
	BL	serials

	LDR	r4,Timer_Address
	BL	serial8

	LDR	r0,Timer_Address

;Set up timer
;PCLK = 66mhz ish
	;MOV	r0, a1
	MOV	r1, #0xF00 	;Prescaler
	STR	r1, [r0]
	MOV	r1, #0     	;Divider
	STR	r1, [r0,#4]
	MOV	r1, #0xFF00	;Time
	STR	r1, [r0,#0x3C]
	MOV	r1, #0x600000 	;Control
	STR	r1, [r0,#8]
	MOV	r1, #0x400000 	;Control
	STR	r1, [r0,#8]
	MOV	r1, #0x500000 	;Control
	STR	r1, [r0,#8]
	MOV	r1, #0x210	;Interrupt enable
	STR	r1, [r0,#0x44]

;Timer base now = 66/16 = 4.1mhz


        MOV     a1, #0		;Map in INT
        LDR     a2, =0x71200000
        MOV     a3,   #0x200000
        CallOS  OS_MapInIO
	STR	a1, INT_Address

	ADRL	r4,INT_txt
	LDR	r0,UART_Address
	BL	serials

	LDR	r4,INT_Address
	BL	serial8

	LDR	a1,INT_Address

	MOV	a2,#0
	STR	a2,[a1,#0xC]
	MOV	a2,#0xFFFFFFFF
	STR	a2,[a1,#0x14]
	STR	a2,[a1,#0x1C]
	STR     a2,[a1,#0x24]
	ADD	a1,a1,#0x100000
	STR	a2,[a1,#0x14]
	STR	a2,[a1,#0x1C]
	STR	a2,[a1,#0x24]
        SUB     a1,a1,#0x100000

;	MOV	a2,#0x18
	MOV	a3,#0x7C
        ADD	a1,a1,#0x100
	ADD	a4,a1,#0x100000
	MOV	a2,#31
setlp
	AND	a2,a2,#31


	STR	a2,[a1,a3]
	ORR	a2,a2,#32
	STR	a2,[a4,a3]
	SUB	a2,a2,#1
	SUBS	a3,a3,#4
	BNE	setlp

;Set up interrupt controller
;Just disable everything!
	;MOV	r0, a1
        ;MOV	r1, #0
	;STR	r1, [r0,#4] ;All interrupts in INT mode
	;STR	r1, [r0,#0xC] ;Normal priorities
        ;
	;MOV	r1, #-1
	;STR	r1, [r0]
	;STR	r1, [r0,#0x10] ;No interrupts requested
	;STR	r1, [r0,#0x18] ;No sub interrupts requested
	;STR	r1, [r0,#8] ;All interrupts masked
	;STR	r1, [r0,#0x1C] ;All sub interrupts masked

        ;
        ;MOV     a1, #0		;Map in GPIO
        ;MOV     a2, #0x56000000
        ;MOV     a3, #0x100000
        ;CallOS  OS_MapInIO
	;STR	a1, GPIO_Address

	;MOV	r0, a1
	;LDR	r1, =0x7FFFFF
	;STR	r1, [r0]
	;LDR	r1, =0x44555
	;STR	r1, [r0,#0x10]
	;LDR	r1, =0x7FF
	;STR	r1, [r0,#0x18]
	;LDR	r1, =0xAAAAAAAA
	;STR	r1, [r0,#0x20]
	;LDR	r1, =0xFFFF
	;STR	r1, [r0,#0x28]
	;LDR	r1, =0xAAAAAAAA
	;STR	r1, [r0,#0x30]
	;LDR	r1, =0xFFFF
	;STR	r1, [r0,#0x38]
	;LDR	r1, =0xAAAAA800
	;STR	r1, [r0,#0x40]
	;LDR 	r1, =0xFFFF
	;STR	r1, [r0,#0x48]
	;LDR	r1, =0x55AA
	;STR	r1, [r0,#0x50]
	;MOV	r1, #0xFF
	;STR	r1, [r0,#0x58]
        ;LDR	r1, =0xFF95FFBA
	;STR	r1, [r0,#0x60]
	;LDR	r1, =0xFFFF
	;STR	r1, [r0,#0x68]
	;LDR	r1, =0x2AFAAA
	;STR	r1, [r0,#0x70]
	;LDR	r1, =0x7FF
	;STR	r1, [r0,#0x78]
	;LDR	r1, =0x2AAAAAA
	;STR	r1, [r0,#0xD0]
	;LDR	r1, =0x1FFF
	;STR	r1, [r0,#0xD8]

        MOV     a1, #0		;Map in LCD
        LDR     a2, =0x77100000
        MOV     a3, #0x100000
        CallOS  OS_MapInIO
	STR	a1, LCD_Address

	ADRL	r4,LCD_txt
	LDR	r0,UART_Address
	BL	serials

	LDR	r4,LCD_Address
	BL	serial8

	LDR	r0,LCD_Address

	MOV	r1, #0xC
	STR	r1, [r0,#0x20]
	MOV	r1, #0
	STR	r1, [r0,#0x24]
	STR	r1, [r0,#0x28]
	STR	r1, [r0,#0x2C]
	STR	r1, [r0,#0x30]

	STR	r1, [r0,#0x40]
	LDR	r1, = 272 + (480 << 11)
	STR	r1, [r0,#0x44]
	LDR	r1, = 480 * 272 * 4
	STR	r1, [r0,#0x48]

	LDR	r1, = 1 + (1 << 8) + (1 << 16) + (1 << 24)
	STR	r1, [r0,#0x10]
	LDR	r1, = 39 + (2 << 8) + (1 << 16) + (0 << 24)
	STR	r1, [r0,#0x14]
	LDR	r1, = 479 + (271 << 11)
	STR	r1, [r0,#0x18]

	MOV	r1, #0x60
	STR	r1, [r0, #4]
	MOV	r1, #0
	STR	r1, [r0, #8]
	STR	r1, [r0]

	LDR	r1, = 0x50100000
	STR	r1, [r0, #0xA0]
	STR	r1, [r0, #0xA4]
	LDR	r1, = 0x50100000 + (640 * 272)
	STR	r1, [r0,#0xD0]
	STR	r1, [r0,#0xD4]
	LDR	r1, = 480 + (160 << 13)
	STR	r1, [r0,#0x100]

	MOV	r1, #0xD
	ORR	r1, r1, #0x20000
	STR	r1, [r0,#0x20]
	MOV	r1, #0x13
	ORR	r1, r1, #(9 << 6)
	ORR	r1, r1, #0x80
	STR	r1, [r0]

	MOV	r1, #0
	STR     r1, [r0,#0x130]

	STR	r1, [r0,#0x140]
	STR	r1, [r0,#0x148]
	STR	r1, [r0,#0x150]
	STR	r1, [r0,#0x158]

	STR	r1, [r0,#0x170]
	STR	r1, [r0,#0x180]
	MOV	r1,#1
	STR	r1, [r0,#0x1A0]
	MOV	r1,#0
	STR	r1, [r0,#0x1A4]
	STR	r1, [r0,#0x1B0]
	STR	r1, [r0,#0x1B4]

	MOV	r1, #-1
	STR	r1, [r0,#0x144]
	STR	r1, [r0,#0x14C]
	STR	r1, [r0,#0x154]
	STR	r1, [r0,#0x15C]

        MOV     a1, #0		;Map in host interface
        MOV     a2, #0x74000000
        MOV     a3, #0x1000
        CallOS  OS_MapInIO

	MOV	a2, #0
	STR	a2, [a1, #0xC]

        MOV     a1, #0		;Map in host interface
        LDR     a2, =0x74108000
        MOV     a3, #0x1000
        CallOS  OS_MapInIO

	MOV	a2, #0
	STR	a2, [a1, #0xC]


        MOV     a1, #0		;Map in system controller
        LDR     a2, =0x7E00F000
        MOV     a3, #0x1000
        CallOS  OS_MapInIO
	LDR	a2, [a1, #0x30]
	ORR	a2, a2, #8
	STR	a2, [a1, #0x30]
	LDR	a2, [a1, #0x38]
	ORR	a2, a2, #0x40000000
	STR	a2, [a1, #0x38]
	LDR	a2, [a1, #0x900]
	ORR	a2,a2,#0x10000
	STR	a2, [a1, #0x900]



        MOV     a1, #0		;Map in GPIO
        LDR     a2, =0x7F008000
        MOV     a3, #0x1000
        CallOS  OS_MapInIO

	Push "a1"
	ADRL	r4,GPIO_txt
	LDR	r0,UART_Address
	BL	serials

	Pull "r4"
	Push "r4"

	BL	serial8
	Pull "a1"

	LDR	a2, [a1, #0x1A0]
	BIC	a2, a2, #3
	ORR	a2, a2, #1
	STR	a2, [a1, #0x1A0]
	LDR	a2, [a1, #0x80]
	BIC	a2, a2, #15
	ORR	a2, a2, #1
	STR	a2, [a1, #0x80]
	LDR	a2, [a1, #0x84]
	ORR	a2, a2, #1
	STR	a2, [a1, #0x84]

	LDR	a2, =0xAAAAAAAA
	STR	a2, [a1, #0x100]
	STR	a2, [a1, #0x120]

	;LDR	r0,LCD_Address
	;LDR	r1, = (4 << 8) ;4 << 8
	;ORR	r1, r1, #((3<<5) + (11<<1))
	;STR	r1, [r0]
	;LDR	r1, = 271 << 14
;	;ORR	r1, r1, #(1 << 24)
	;ORR	r1, r1, #(4 << 6)
	;ORR	r1, r1, #12
;	;ORR	r1, r1, #1
	;STR	r1, [r0, #4]
        ;LDR	r1, = 479 << 8
	;ORR	r1, r1, #(35 << 19)
        ;ORR	r1, r1, #18
	;STR	r1, [r0, #8]
        ;MOV	r1, #12 ;4
	;STR	r1, [r0, #12]
	;MOV	r1, #(1<<12)
	;;MOV	r1, #(1<<11)
	;ORR	r1, r1, #(1<<9)
	;ORR	r1, r1, #(1<<8)
	;ORR	r1, r1, #(1<<3)
	;ORR	r1, r1, #2
;	MOV	r1, #0x308
	;STR	r1, [r0, #16]
	;MOV	r1, #(0x30000000 >> 1)
	;STR	r1, [r0, #0x14] ;Start
	;MOV	r1, #0x2A800
	;ORR	r1, r1, #0x10000
	;STR	r1, [r0, #0x18] ;End
	;MOV	r1, #240
;	ORR	r1, r1, #(80 << 11)   Modulo
	;STR	r1, [r0, #0x1C]
	;MOV	r1, #0
	;STR	r1, [r0, #0x50]
	;STR	r1, [r0, #0x60]

	;MOV	r1, #1
	;STR	r1, [r0, #0x5C]

	;LDR	r1, [r0]
	;ORR	r1, r1, #1
	;STR	r1, [r0]

;	MOV	r1, #0x1000000
;	ORR	r1, r1, #0xFF
;        STR	r1, [r0, #0x50]

        MOV     a1, #0		;Map in USB
        LDR     a2, =0x74300000
        MOV     a3, #0x100000
        CallOS  OS_MapInIO
	STR	a1, USB_Address
        ;
        ;MOV     a1, #0		;Map in RTC
        ;MOV     a2, #0x57000000
        ;MOV     a3, #0x100000
        ;CallOS  OS_MapInIO
	;STR	a1, RTC_Address
        ;
	;MOV	a2, #1
	;STRB	a2, [a1, #0x40]
        ;
	;MOV	r4, a1
	;LDR	r0, UART_Address
	;BL	serial8
        ;
	;LDR 	r0, UART_Address
	;ADRL	r4, Ready
	;BL	serials
	;BL	serialn

;	MOV 	r1, #13
;	BL	serial3
;	MOV	r1, #10
;	BL 	serial3

	;MOV	R0, a1
	;MOV	R1, #68
	;BL 	serial2

;	B crashit

;        STR     a1, IO_Address
;        ADD     a2, a1, #IOMDPhys - IOPhys
;        STR     a2, IOMD_Address
;        ADD     a3, a1, #VIDCPhys - IOPhys
;        STR     a3, VIDC_Address
;
;        LDRB    a1, [a2, #IOMD_ID0]
;        LDRB    a4, [a2, #IOMD_ID1]
;        ORR     a1, a1, a4, LSL #8
;        LDR     a4, =IOMD_Original
;        TEQ     a1, a4
;        MOVEQ   ip, #0                    ; assume Medusa
;        MOVNE   ip, #IOST_7500            ; else assume Morris
;        STRB    ip, IOSystemType
;
;        MOV     a1, #0
;        MOV     a2, #EASIPhys
;        MOV     a3, #EASISize
;        CallOS  OS_MapInIO
;        STR     a1, EASI_Address

;        BL      Video_init
;
;	LDR 	a1, IOMD_Address  	; SuperIO at IOMD-0x1f0000
;	SUB	a1, a1, #0x1f0000
;
;	MOV	a2, #0x55               ; Enter config mode
;	STRB	a2, [a1, #0xfc0]
;	STRB	a2, [a1, #0xfc0]
;	MOV	a2, #0x0d
;	STRB	a2, [a1, #0xfc0]
;
;	ADR	a2, SuperIOTab
;SPL	LDRB 	a3, [a2], #1
;	CMP	a3, #0xff
;	LDRNEB  a4, [a2], #1
;	STRNEB	a3, [a1, #0xfc0]
;	STRNEB  a4, [a1, #0xfc4]
;	BNE 	SPL
;
;	MOV 	a2, #0xaa       	; Leave config mode
;	STRB	a2, [a1, #0xfc0]
;
        EXIT
;
; Initialise and relocate the entry table.
SetUpOSEntries  ROUT
        STMDB	sp!,{lr}
;	STMDB	sp!,{r0-r1}
;;;	MOV	r1,#65
;	BL	serial
;	LDMIA	sp!,{r0-r1}

        STR     a1, OSheader
        LDR     a2, [a1, #OSHdr_NumEntries]
        CMP     a2, #HighestOSEntry+1
        MOVHI   a2, #HighestOSEntry+1

        ADR     a3, OSentries
        LDR     a4, [a1, #OSHdr_Entries]
        ADD     a4, a4, a1

;	STMDB 	sp!,{r0-r4}
;	MOV	r4, a2
;	BL 	serial8
;	LDMIA	sp!,{r0-r4}

05      SUBS    a2, a2, #1
        LDR     ip, [a4, a2, LSL #2]
        ADD     ip, ip, a4
        STR     ip, [a3, a2, LSL #2]
        BNE     %BT05

;	MOV	r1,#66
;	BL	serial

        LDMIA	sp!,{pc}
;
;

HAL_Null
        MOV     pc, lr

HAL_DebugTX
	STMDB   sp!,{r0-r4,lr}
	MOV	r1,a1
	LDR	r0,UART_Address
	BL      serial2
	LDMIA 	sp!,{r0-r4,pc}

HAL_DebugRX
	STMDB	sp!,{r1-r4,lr}
	LDR	r1,UART_Address
	LDR	r0,[r1,#16]

	TST	r0,#1
	MOVEQ	r0,#-1
	LDMEQIA	sp!,{r1-r4,pc}

        LDR	r0,[r1,#0x24]
	;MOV	r0,#-1
	LDMIA	sp!,{r1-r4,pc}


USBc_txt = "HAL_USBControllerInfo"
	 = 0

HAL_USBControllerInfo
	CMP	r0,#0  ;Only one host controller
	MOV	r0,#0
	MOVNE	pc,lr

;	STMDB	sp!,{r0-r4,lr}
;	LDR	r1,UART_Address
;	ADR	r4,USBc_txt
;	BL	serials
;	BL	serialn
;	LDMIA	sp!,{r0-r4,lr}

        CMP     r2,#16
        MOV     r0,#16
        MOVLT   pc,lr
	STR	r3,[r1] ;OHCI controller
	STR	r3,[r1,#4] ;Flags
	LDR	r3,USB_Address
	STR	r3,[r1,#8] ;Address
	MOV	r3, #47
	STR	r3,[r1,#12] ;Device

	MOV 	pc,lr

HAL_HardwareInfo
	MOV	ip, #0
	STR	ip, [a1]
	STR	ip, [a2]
	STR	ip, [a3]
	MOV	pc, lr

HAL_PlatformInfo
	MOV	ip, #16
	STR	ip, [a2]
	MOV	ip, #31
	STR	ip, [a3]
	MOV	pc, lr

HAL_SuperIOInfo
	MOV	ip, #0
	STR	ip, [a1]
	STR	ip, [a2]
	MOV 	pc, lr

;
;HAL_ControllerAddress
;        MOV     a1, #0                  ; Default to "not fitted"
;        AND     a3, a2, #&FF            ; Get sequence number.
;        MOV     a2, a2, LSR #8          ; Get controller type.
;        CMP     a2, #4
;        ADDLS   pc, pc, a2, LSL #2
;        MOV     pc, lr
;        B       ca_EASIspeed
;        B       ca_EASIspace
;        MOV     pc, lr
;        B       ca_VIDC20
;        B       ca_IOMD
;
;ca_EASIspeed
;        LDR     ip, IOMD_Address
;        CMP     a3, #EASISlots
;        ADDLO   a1, ip, #IOMD_ECTCR
;        MOV     pc, lr
;
;ca_EASIspace
;        LDR     ip, EASI_Address
;        CMP     a3, #EASISlots
;        ADDLO   a1, ip, a3, LSL #EASISlotSizeShift
;        MOV     pc, lr
;
;ca_VIDC20
;        TEQ     a3, #0
;        LDREQ   a1, VIDC_Address
;        MOV     pc, lr
;
;ca_IOMD
;        TEQ     a3, #0
;        LDREQ   a1, IOMD_Address
;        MOV     pc, lr
;
;HAL_HardwareInfo
;        LDR     ip, =&01010101
;        STR     ip, [a1]
;        MOV     ip, #1
;        STR     ip, [a2]
;        MOV     ip, #0
;        STR     ip, [a3]
;        MOV     pc, lr
;
;HAL_SuperIOInfo
;        LDR     ip, =&00311111
;        STR     ip, [a1]
;        LDR     ip, =&00011100
;        STR     ip, [a2]
;        MOV     pc, lr
;
;HAL_PlatformInfo
;        ADR     a4, %86
;        LDR     ip, IOMD_Address
;        LDRB    ip, [ip, #IOMD_ID0]
;82
;        LDR     a1, [a4], #4
;        TEQ     a1, #&80000000     ;terminator
;        TEQNE   a1, ip
;        LDMEQIA a4, {a4,ip}
;        STREQ   a4, [a2]
;        STREQ   ip, [a3]
;        MOVEQ   pc, lr
;        ADD     a4, a4, #2*4
;        B       %BT82
;86
;        DCD     IOMD_Original :AND: &FF, &00000005, &0000000F
;        DCD     IOMD_7500     :AND: &FF, &00000001, &0000000F
;        DCD     IOMD_7500FE   :AND: &FF, &00000001, &0000000F
;        DCD     IOMD_IOMD2    :AND: &FF, &0000000F, &0000000F
;        DCD     &80000000,                       0,         0  ;terminator
;
;;must return address of at least 64k of physical space suitable for
;;cache cleaning (at least 4k aligned, preferably 64k aligned)
;;or, return -1 if HAL knows not needed (eg. knows core in system)
;;
;HAL_CleanerSpace
;        [ {FALSE}
;          ???don't know what do yet, in generic memory size case
;        |
;          MOV   a1, #&10000000  ; return start of physical RAM
;        ]
;        MOV     pc, lr
;
;        LTORG
;
;
;        ! 0, "TODO - Sort out keyboard scan for IOMD HAL"
;HAL_KbdScan
;        MOV     a1, #&C0000000 ; scan complete, keyboard present
;HAL_KbdScanSetup
;HAL_KbdScanInterrupt
;HAL_KbdScanFinish
;        MOV     pc, lr
;
;SuperIOTab
;	= 0x01,0x87,0x02,0x1c,0x03,0x78,0x04,0x03,0x05,0x00,0x06,0xff
;	= 0x07,0x00,0x08,0x00,0x09,0x00,0x0a,0x00,0x00,0xbb,0xff
;

;HAL_DebugTX
;	B serial

HAL_InitDevices
	Entry

	;BL 	RTC_Init

	EXIT


        END
