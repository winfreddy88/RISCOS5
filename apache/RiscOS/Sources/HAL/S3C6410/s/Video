; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        $GetIO
        GET     Hdr:Proc

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        EXPORT  HAL_VideoPixelFormats
        EXPORT  HAL_VideoFeatures
        EXPORT  HAL_VideoBufferAlignment
        EXPORT  HAL_VideoOutputFormat
        GET     hdr.StaticWS
        GET     hdr.Video

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  Video_init
        ;EXPORT  HAL_VideoFlybackDevice
        EXPORT  HAL_VideoSetMode
        EXPORT  HAL_VideoWritePaletteEntry
        EXPORT  HAL_VideoWritePaletteEntries
        EXPORT  HAL_VideoReadPaletteEntry
        EXPORT  HAL_VideoSetInterlace
        EXPORT  HAL_VideoSetBlank
        EXPORT  HAL_VideoSetPowerSave
        EXPORT  HAL_VideoUpdatePointer
        EXPORT  HAL_VideoSetDAG
        EXPORT  HAL_VideoVetMode

	IMPORT 	serials
	IMPORT	serial8
; -----------------------------------------------------------------------------------

Video_init ROUT
    	Push     "lr"
	Pull 	"pc"
;    MOV      lr, #-1
;    STR      lr, VIDC_NextPaletteIndex  ; init to invalid
;    MOV      lr, #0
;    STR      lr, VIDC_SoftPalette0
;    STR      lr, VIDC_Interlace
    ; Read IOMD_VIDCR and use it to recalculate the VRAM size (based around our knowledge of the values that Allocate_DRAM programs)
    ; However RPCemu is buggy and always reports DRAMMode + bit 4 set!
    ; Luckily we only need bits 2 & 3 to get the VRAM size
;    ASSERT   SAMLength/2/256 = 4 ; 1MB
;    LDR      lr, IOMD_Address
;    LDRB     lr, [lr, #IOMD_VIDCR]
;    MOV      lr, lr, LSR #2
;    AND      lr, lr, #3 ; Should be 0, 1, 2 depending on VRAM size
;    STRB     lr, VRAMWidth
;    Pull     "pc"

; -----------------------------------------------------------------------------------

;HAL_VideoFlybackDevice
;        MOV     a1, #3
;        MOV     pc, lr

; -------------------------------------------------------------------------

;
;  void HAL_VideoSetMode(const void *VIDCList3)
;
;  program VIDC20 registers from VIDCList3 specification
;
;  in: VIDClist -> video mode list (in VIDCList type 3 format)
;

VID_Tbl DATA
	& 1 ;1 bpp
	& 1 ;2 bpp
	& 1 ;4 bpp
	& 2 ;8 bpp
	& 3 ;16 bpp
	& 2 ;32 bpp

Vid_txt = "Set mode X = "
	= 0
BPP_txt = "Set mode BPP = "
	= 0
Pal_txt = "Set pal - "
	= 0
	ALIGN

HAL_VideoSetMode ROUT

	STMDB	sp!,{r0-r4,lr}
 ;	STMDB	sp!,{r0}

;	LDR	r1, [r0, #VIDCList3_HorizDisplaySize]
;	STR	r1, VIDX_Size
;	SUB	r1, r1, #480
;	MOV	r1, r1, LSR #1
;	LDR	r2, LCD_Address
;;	LDR	r3, [r2]
;	BIC	r3, r3, #1
;	STR	r3, [r2]
;	MOV	r1, r1, LSL #11
;	ORR	r1, r1, #240
;	STR 	r1, [r2, #0x1C]
;	ORR	r3, r3, #1
;	STR	r3, [r2]
;
;;	LDR	r1, [r0, #VIDCList3_PixelDepth]
;	STR	r1, VID_BPP
;;;
;	LDR	r0,LCD_Address
;	ADD	r1, r1, #8
;	MOV	r1, r1, LSL #1
;	ORR	r1, r1, #((3<<5) + (4<<8))
;	STR	r1, [r0]
;
;	LDR	r1, [r0, #16]
;	BIC	r1, r1, #3
;	LDR	r2, VID_BPP
;	ADR	r3, VID_Tbl
;	LDR	r2, [r3, r2, LSL #2]
;	ORR	r1, r1, r2
;	STR	r1, [r0, #16]
;
;	LDR	r0, UART_Address
;	ADR	r4, Vid_txt
;	BL	serials
;	LDR	r4, VIDX_Size
;	BL	serial8

;	ADR	r4, BPP_txt
;	BL	serials
;	LDMIA	sp!,{r1}
;	LDR	r4, [r1, #VIDCList3_PixelDepth]
;	BL	serial8

	LDMIA 	sp!,{r0-r4, pc}
	;MOV	pc,lr
;        Push    "r4, r7,r8,r10,r11, lr"
;        MOV     r3, r0                    ; r3 -> VIDCList3
;
;        SUB     sp, sp, #VIDC20ParmsSize  ; create workspace for VIDC20 table on stack
;        SUB     r11, sp, #(&80*4)         ; r11 indexes into table workspace (allowing for
;                                          ; VIDC register numbers starting at &80)
;
;        MOV     r2, #-1                   ; first clear all entries to -1 (means dont program reg)
;        MOV     r4, #VIDC20ParmsSize
;        MOV     r14, sp
;10
;        STR     r2, [r14], #4
;        SUBS    r4, r4, #4
;        BNE     %BT10
;
;        LDR     r2, [r3, #VIDCList3_HorizSyncWidth]
;        BIC     r2, r2, #1                ; must be even
;        SUB     r2, r2, #8                ; horiz parameters start off at n-8
;        ORR     r14, r2, #HorizSyncWidth
;        STR     r14, [r11, #HorizSyncWidth :SHR: 22]
;
;        LDR     r4, [r3, #VIDCList3_HorizBackPorch]
;        ADD     r2, r2, r4
;;        BIC     r2, r2, #1
;        SUB     r2, r2, #4                ; HBSR is N-12
;        ORR     r14, r2, #HorizBorderStart
;        STR     r14, [r11, #HorizBorderStart :SHR: 22]
;
;        LDR     r4, [r3, #VIDCList3_HorizLeftBorder]
;        ADD     r2, r2, r4
;        BIC     r2, r2, #1
;        SUB     r2, r2, #6                ; HDSR is N-18
;        ORR     r14, r2, #HorizDisplayStart
;        STR     r14, [r11, #HorizDisplayStart :SHR: 22]
;
;        LDR     r4, [r3, #VIDCList3_HorizDisplaySize]
;        BIC     r4, r4, #1
;        LDR     r7, [r3, #VIDCList3_PixelDepth]
;        MOV     r10, r4, LSL r7           ; number of bits in one displayed raster (not needed later any more)
;
;        ANDS    r8, r10, #31              ; if line length not multiple of 32
;        MOVNE   r8, #DCR_HDis             ; then set HDis bit
;        ORR     r8, r8, r10, LSR #5       ; OR in number of words per line
;
;;; Note - the DCR_Bus bits get overridden and the HDWR bits modified further down the line by the mode change code
;; on the basis of how much VRAM we've got, and on whether we have a dual-panel LCD or not...
;
;        ORR     r8, r8, #DCR_VRAMOff :OR: DCR_Bus31_0 :OR: DCR_Sync
;        ORR     r8, r8, #VIDCDataControl
;        STR     r8, [r11, #VIDCDataControl :SHR: 22]
;
;        ADD     r2, r2, r4                ; HDER is also N-18
;        ORR     r14, r2, #HorizDisplayEnd
;        STR     r14, [r11, #HorizDisplayEnd :SHR: 22]
;
;        LDR     r4, [r3, #VIDCList3_HorizRightBorder]
;        ADD     r2, r2, r4
;        ADD     r2, r2, #6                ; HBER is N-12
;        BIC     r2, r2, #1
;        ORR     r14, r2, #HorizBorderEnd
;        STR     r14, [r11, #HorizBorderEnd :SHR: 22]
;
;        LDR     r4, [r3, #VIDCList3_HorizFrontPorch]
;        ADD     r2, r2, r4
;        ADD     r2, r2, #4                ; HCR is N-8
;        BIC     r2, r2, #3                ; must be mult of 4
;        ORR     r14, r2, #HorizCycle
;        STR     r14, [r11, #HorizCycle :SHR: 22]
;
;        ADD     r2, r2, #8                ; HIR is N/2
;        MOV     r2, r2, LSR #1
;        ORR     r14, r2, #HorizInterlace
;        STR     r14, [r11, #HorizInterlace :SHR: 22]
;
;        LDR     r2, [r3, #VIDCList3_VertiSyncWidth]
;        SUB     r2, r2, #2                ; vertical registers are N-2
;        ORR     r14, r2, #VertiSyncWidth
;        STR     r14, [r11, #VertiSyncWidth :SHR: 22]
;
;        LDR     r4, [r3, #VIDCList3_VertiBackPorch]
;        ADD     r2, r2, r4
;        ORR     r14, r2, #VertiBorderStart
;        STR     r14, [r11, #VertiBorderStart :SHR: 22]
;
;        LDR     r4, [r3, #VIDCList3_VertiTopBorder]
;        ADD     r2, r2, r4
;        ORR     r14, r2, #VertiDisplayStart
;        STR     r14, [r11, #VertiDisplayStart :SHR: 22]
;
;        LDR     r4, [r3, #VIDCList3_VertiDisplaySize]
;        STR     r4, VIDC_VertiDisplaySize              ; save it for cursor clipping
;        ADD     r2, r2, r4
;        ORR     r14, r2, #VertiDisplayEnd
;        STR     r14, [r11, #VertiDisplayEnd :SHR: 22]
;
;        LDR     r4, [r3, #VIDCList3_VertiBottomBorder]
;        ADD     r2, r2, r4
;        ORR     r14, r2, #VertiBorderEnd
;        STR     r14, [r11, #VertiBorderEnd :SHR: 22]
;
;        LDR     r4, [r3, #VIDCList3_VertiFrontPorch]
;        ADD     r2, r2, r4
;        ORR     r14, r2, #VertiCycle
;        STR     r14, [r11, #VertiCycle :SHR: 22]
;
;        LDR     r4, [r3, #VIDCList3_SyncPol]
;        TST     r4, #SyncPol_Interlace
;        MOVEQ   r14, #0
;        MOVNE   r14, #1
;        STR     r14, VIDC_Interlace
;        MOV     r14, #VIDCExternal
;        TST     r4, #SyncPol_InvertHSync
;        ORRNE   r14, r14, #Ext_InvertHSYNC
;        TST     r4, #SyncPol_InvertVSync
;        ORRNE   r14, r14, #Ext_InvertVSYNC
;        ORR     r14, r14, #Ext_DACsOn
;        ORR     r14, r14, #Ext_ERegExt
;        STR     r14, [r11, #VIDCExternal :SHR: 22]
;
;        MOV     r14, #VIDCControl
;        STR     r14, [r11, #VIDCControl :SHR: 22]
;
;        Push    "r3";

; Now go through VIDC control parameters list (not all indices can be handled yet)

;        ADD     r3, r3, #VIDCList3_ControlList-8  ; point at 1st entry -8
;50
;;        LDR     r4, [r3, #8]!                   ; load next index
;        CMP     r4, #-1                         ; if -1 then end of list
;        BEQ     %FT60                           ; so skip
;
;        CMP     r4, #0                          ; if non-zero (CS if zero)
;        CMPNE   r4, #ControlList_InvalidReason  ; and if known reason
;        LDRCC   r2, [r3, #4]                    ; then load value
;        BLCC    ProcessControlListItem          ; and process this item
;        B       %BT50                           ; go onto next item in list
;
; put a minimum of 4, cos 800 x 600 x 1bpp don't work otherwise
;FIFOLoadTable
;        &       0                               ; dummy entry (not used)
;        &       0                               ; never use 0
;        &       0                               ; use 1 up to (and including) here
;        &       0                               ; use 2 up to (and including) here
;        &       0                               ; use 3 up to (and including) here
;        &       60000 :SHL: 3                   ; use 4 up to (and including) here
;        &       75000 :SHL: 3                   ; use 5 up to (and including) here
;        &       90000 :SHL: 3                   ; use 6 up to (and including) here
;                                                ; else use 7

;60
;        Pull    "r3"
;        LDR     r0, [r3, #VIDCList3_PixelRate]  ; get pixel rate
;        MOV     r10, r0, LSL r7                 ; peak mem b/w (x 1E3 bits/sec) - save for FIFO calculation
;
;        MOV     R1, #0
;        LDRB    R1, IOSystemType
;        TST     R1, #IOST_7500
;        LDREQ   R1, =24000              ;(Medusa), VIDC20 at 24MHz;
;        MOVNE   R1, #32000              ;Morris, VIDC20L at 32Mhz ;

;        BL      ComputeModuli   ; out: r0 = FSync bits, r1 = CR bits

;        ORR     r0, r0, #VIDCFSyn
;        STR     r0, [r11, #VIDCFSyn :SHR: 22]
;
;        LDR     r0, [r11, #VIDCControl :SHR: 22]
;        ORR     r0, r0, r1

;        TEQ     r7, #5          ; if 32 bpp, then stick in 6 not 5
;        MOVEQ   r7, #6
;        ORR     r0, r0, r7, LSL #5

; now work out FIFO load position - r10 is b/w in thousands of bytes/sec

; do it by means of a binary chop on 3 bits

;        ADR     r4, FIFOLoadTable
;        LDR     r2, [r4, #4*4]                  ; load 0-3/4-7 split
;        CMP     r10, r2
;        MOVLS   r7, #0                          ; if <=, then bottom half
;        MOVHI   r7, #4                          ; else top half
;        ADDHI   r4, r4, #4*4                    ; and advance table pointer
;
;        LDR     r2, [r4, #2*4]
;        CMP     r10, r2
;        ORRHI   r7, r7, #2
;        ADDHI   r4, r4, #2*4
;
;        LDR     r2, [r4, #1*4]
;        CMP     r10, r2
;        ORRHI   r7, r7, #1
;
;        ORR     r0, r0, r7, LSL #CR_FIFOLoadShift
;        STR     r0, [r11, #VIDCControl :SHR: 22]
;
;        ADD     R0, r11, #(&80*4)           ; R0 -> VIDC20 table (remove offset for reg indices starting at &80)
;        BL      ProgramVIDC20Regs
;
        ; now make sure video DMA enabled
        ;
;        LDR     r7, IOMD_Address
;        LDRB    r8, [r7, #IOMD_VIDCR]
;        AND     r8, r8, #&7F                 ; knock out IOMD_VIDCR_Dup
;        ORR     r8, r8, #IOMD_VIDCR_Enable   ; enable video DMA
;        STRB    r8, [r7, #IOMD_VIDCR]
;
;        ADD     sp, sp, #VIDC20ParmsSize   ; drop workspace for table
;        Pull    "r4, r7,r8,r10,r11, pc"

; -------------------------------------------------------------------------

;
;       ProcessControlListItem
;
; in:   r2  = value for item
;       r4  = index for item (guaranteed in range)
;       r11 -> VIDC register array
;
; out:  r0-r2, r4, r7, r8, r10 may be corrupted
;       r3, r9, r11 must be preserved

ProcessControlListItem Entry
        ADD     pc, pc, r4, LSL #2
        NOP
        B       ProcessControlListNOP                   ; 0 - NOP
        B       ProcessControlListLCDMode               ; 1 - LCD mode
        B       ProcessControlListLCDDualPanelMode      ; 2 - LCD dual-panel mode
        B       ProcessControlListLCDOffsetRegister0    ; 3 - LCD offset register 0
        B       ProcessControlListLCDOffsetRegister1    ; 4 - LCD offset register 1
        B       ProcessControlListHiResMode             ; 5 - Hi-res mode
        B       ProcessControlListDACControl            ; 6 - DAC control
        B       ProcessControlListRGBPedestals          ; 7 - RGB pedestal enables
        B       ProcessControlListExternalRegister      ; 8 - External register
        B       ProcessControlListHClockSelect          ; 9 - HClk select/specify
        B       ProcessControlListNOP                   ; 10 - RClk frequency
        B       ProcessControlListDPMSState             ; 11 - DPMS state
        B       ProcessControlListNOP                   ; 12 - Interlaced mode

  ! 0, "mjsHAL - no LCD support (VIDCList3 control list stuff)"

ProcessControlListLCDMode
        ;;;mjsHAL we have no support
        EXIT

ProcessControlListHiResMode
        MOV     r1, #Ext_HiResMono              ; bit of a misnomer, it's not nec. mono
05
        MOV     r0, #VIDCExternal
10
        MOV     r7, r1
        TEQ     r2, #0                          ; if value non-zero
        MOVNE   r2, r1                          ; then use value in r1
15
        AND     r2, r2, r7                      ; ensure only relevant bits set
        LDR     lr, [r11, r0, LSR #22]           ; load word from register bank
        BIC     lr, lr, r7                      ; knock out bits in mask
        ORR     lr, lr, r2                      ; OR in new bits
        STR     lr, [r11, r0, LSR #22]           ; and store in array
;
ProcessControlListNOP
        EXIT

ProcessControlListDACControl
        MOV     r1, #Ext_DACsOn
        B       %BT05

ProcessControlListRGBPedestals
        MOV     r0, #VIDCExternal
        MOV     r2, r2, LSL #Ext_PedsShift
        MOV     r7, #Ext_PedsOn
        B       %BT15

ProcessControlListExternalRegister
        MOV     r0, #VIDCExternal
        MOV     r7, #&FF
        B       %BT15

ProcessControlListLCDDualPanelMode
        ;;;mjsHAL we have no support
        EXIT

ProcessControlListLCDOffsetRegister0
        ;;;mjsHAL we have no support
        EXIT

ProcessControlListLCDOffsetRegister1
        ;;;mjsHAL we have no support
        EXIT

ProcessControlListHClockSelect
        MOV     r0, #PseudoRegister_HClockSpeed ; pseudo-register holding HClock speed
        ORR     r2, r2, r0                      ; form combined value
        STR     r2, [r11, r0, LSR #22]           ; store in register
        EXIT

ProcessControlListDPMSState
        ; no longer used in HAL code (kernel keeps DPMSState)
        EXIT
;
; void HAL_VideoWritePaletteEntry(uint type, uint pcolour, uint index)
;
; write palette entry to video controller
;
;  type     = 0 for normal palette entry
;             1 for border colour
;             2 for pointer colour
;          >= 3 reserved
;  pcolour  = palette entry colour in BBGGRRSS format (Blue,Green,Red,Supremacy)
;  index    = index of entry  (0..255 for normal, 0 for border, 0..3 for pointer)
;             note that RISC OS only uses 1..3 for pointer (0 is assumed to be transparent)
;


HAL_VideoWritePaletteEntry ROUT
	STMDB	sp!,{r0-r3,lr}
	CMP	r0, #0
	LDMNEIA	sp!,{r0-r3,pc}

	LDR	r0, LCD_Address

	MOV	r3, #512
	STR	r3,[r0,#0x1A0]

	ADD	r3, r0, #0x400
	ADD	r3, r3, r2, LSL #2

;	MOV     r2, r1, LSR #8
	;AND	r2, r2, #0xF0
;	AND	r2, r2, #0xF8
;	MOV	r2, r2, LSL #(11-3)

;	MOV	r3, r1, LSR #16
	;AND	r3, r3, #0xF0
;	AND	r3, r3, #0xF8
;	ORR	r2, r2, r3, LSL #(6-3)

;	MOV	r3, r1, LSR #24
	;AND	r3, r3, #0xF0
;	AND     r3, r3, #0xF8
;	ORR	r2, r2, r3, LSR #2

	MOV	r1, r1, LSR #8

;	Push	"r0,r1,r2,r3,r4,r5"
;	LDR	r0, UART_Address
;	ADR	r4, Pal_txt
;	BL	serials
 ;	Pull	"r0,r1,r2,r3,r4,r5"
 ;	Push	"r0,r1,r2,r3,r4,r5"
;;;	LDR	r0, UART_Address
;	MOV	r4, r3
;	BL	serial8
;	Pull	"r0,r1,r2,r3,r4,r5"
;	Push	"r0,r1,r2,r3,r4,r5"
;	LDR	r0, UART_Address
;	MOV	r4, r1
;	BL	serial8
;	Pull	"r0,r1,r2,r3,r4,r5"


	STR 	r1, [r3]

	MOV	r3,#1
	STR	r3,[r0,#0x1A0]

	LDMIA	sp!,{r0-r3,pc}

;        AND     r12, r1, #&F0               ; 000000S0 (4 MSbits of supremacy)
;        MOV     r1, r1, LSR #8              ; 00BBGGRR
;        ORR     r1, r1, r12, LSL #20        ; 0SBBGGRR
;
;        LDR     r12, VIDC_Address
;
;        CMP     r0, #1
;        BLO     HV_WritePaletteEntry_type0
;        BEQ     HV_WritePalettEntry_type1
;;       else fall through to WritePaletteEntry_type2
;
;HV_WritePaletteEntry_type2
;        CMP     r2, #3                      ; index must be in range 0..3
;        MOVHI   pc, lr
;        SUBS    r2, r2, #1                  ; reduce 1..3 to 0..2
;        MOVMI   pc, lr                      ; pointer colour 0 is always transparent on VIDC20
;        ORR     r1, r1,#VIDC20PointerColour ; munge in base address of register
;        ADD     r1, r1, r2, LSL #28         ; add in index (0..2), in bits 28,29 of register
;        STR     r1, [r12]
;        MOV     pc, lr
;;
;HV_WritePaletteEntry_type0
        ;Note: we only need to hit VIDCPalAddress if the index is not a direct increment
        ;of the last programmed index
        ;but, for insurance against permanent misalignment if any rogue accesses avoid this
        ;interface, we force an update for index 0
        ;
;        CMP     r2, #255                  ; index must be in range 0..255
;        MOVHI   pc, lr
;
;        CMP     r2, #0
;
;        STREQ   r1, VIDC_SoftPalette0
;
;        LDRNE   r0, VIDC_NextPaletteIndex  ;increment from last index programmed
;        MOVEQ   r0, #-1                    ;forced invalid for index 0
;
;        TEQ     r0, r2
;        ORRNE   r0, r2, #VIDCPalAddress
;        STRNE   r0, [r12]                 ; only update PalAddress if necessary
;        STR     r1, [r12]                 ; update palette entry
;        ADD     r2, r2, #1
;        AND     r2, r2, #&FF
;        STR     r2, VIDC_NextPaletteIndex
;        MOV     pc, lr
;
;
;HV_WritePalettEntry_type1
;        CMP     r2, #0                     ; index must be 0
;        MOVNE   pc, lr
;        ORR     r1, r1,#VIDC20BorderColour ; munge in base address of register
;        STR     r1, [r12]
;        MOV     pc, lr

; -------------------------------------------------------------------------

;
; void HAL_VideoWritePaletteEntries(uint type, const uint *pcolours, uint index, uint Nentries)
;
; write block of palette entries to video controller
;
;  type     = 0 for normal palette entry
;             1 for border colour
;             2 for pointer colour
;          >= 3 reserved
;  pcolours = pointer to block of palette entry colours in BBGGRRSS format (Blue,Green,Red,Supremacy)
;  index    = start index in palette (for first entry in block)
;             note that RISC OS only uses 1..3 for pointer (0 is assumed to be transparent)
;  Nentries = number of entries in block (must be >= 1)
;
HAL_VideoWritePaletteEntries ROUT
	;MOV	pc,lr
        Push    "r4, lr"
;
;        CMP     r2, #255                    ; all indices in loop must be in range 0..255
;        BHI     %FT20
;        ADD     r4, r2, r3
;        CMP     r4, #256
;        BHI     %FT20

	B	%FT50

;        CMP     r0, #0
;        BNE     %FT50
;;
; type 0, try to be efficient
;
;        LDR     r12, VIDC_Address
;
;        CMP     r2, #0
;
;        LDREQ   r0, [r1]
;        STREQ   r0, VIDC_SoftPalette0
;
;        LDRNE   r0, VIDC_NextPaletteIndex
;        MOVEQ   r0,#-1                      ; insurance! (see comments for WritePaletteEntry_type0)
;
;        TEQ     r0, r2
;        ORRNE   r0, r2, #VIDCPalAddress
;        STRNE   r0, [r12]                   ; only update PalAddress if necessary
;
;        ADD     r0, r2, r3
;        AND     r0, r0, #&FF
;        STR     r0, VIDC_NextPaletteIndex
;
;        MOV     r4, r1
;10
;        LDR     r1, [r4], #4
;        AND     r0, r1, #&F0                ; 000000S0 (4 msbits of supremacy)
;        MOV     r1, r1, LSR #8              ; 00BBGGRR
;        ORR     r1, r1, r0, LSL #20         ; 0SBBGGRR
;        STR     r1, [r12]
;        SUBS    r3, r3, #1
;        BNE     %BT10
20
        Pull    "r4, pc"

; not type 0

50
        MOV     r4, r1
60
        LDR     r1, [r4], #4        ; next pcolour
        Push    "r2, r3"
        BL      HAL_VideoWritePaletteEntry
        Pull    "r2, r3"
        ADD     r2, r2, #1
        SUBS    r3, r3, #1
        BNE     %BT60
        Pull    "r4, pc"
;
;; -------------------------------------------------------------------------

;
; uint HAL_VideoReadPaletteEntry(uint type, uint pcolour, uint index)
;
; return the effective palette entry after taking into account any hardware
; restrictions in the video controller, assuming it was programmed with pcolour
;
;  type     = 0 for normal palette entry
;             1 for border colour
;             2 for pointer colour
;          >= 3 reserved
;  pcolour  = palette entry colour in BBGGRRSS format (Blue,Green,Red,Supremacy)
;  index    = index of entry  (0..255 for normal, 0 for border, 0..3 for pointer)
;             note that RISC OS only uses 1..3 for pointer (0 is assumed to be transparent)
;  returns  : effective BBGGRRSS
;
;  mjs: depending on h/w capabilities, specific HALs may have to
;       remember current settings (eg. bits per pixel), keep soft copy
;       of entries or whatever, in their workspace. Because the HAL API
;       supplies a pcolour, the need to keep a full palette soft copy
;       in the HAL is minimised

HAL_VideoReadPaletteEntry ROUT
        MOV	r0, #0
	MOV	pc,lr
;        CMP     r0, #0
;        BNE     HV_ReadPaletteEntry_not_type0
;
; type 0
; only 4 bits of S, and only 16 S entries
; S for indices 16..255 comes from palette entry 0
;
;        CMP     r2, #16
;        LDRHS   r12, VIDC_SoftPalette0
;        MOVLO   r12, r1
;
;        AND     r12, r12, #&000000F0  ; effective S bits
;        BIC     r0, r1, #&000000FF    ; effective BGR bits
;        ORR     r0, r0, r12           ; munge together
;        MOV     pc, lr
;
;HV_ReadPaletteEntry_not_type0
; no special restrictions, just that there are only 4 bits of S
;        BIC     r0, r1, #&0000000F
;        MOV     pc, lr

; -------------------------------------------------------------------------

; void HAL_VideoSetInterlace(uint interlace)
;
;  interlace = 0/1 for interlace off/on

HAL_VideoSetInterlace ROUT

;        LDR     r1, VIDC_ControlSoftCopy
;        BIC     r1, r1, #CR_Interlace
;        TST     r0, #1
;        ORRNE   r1, r1, #CR_Interlace    ; zero => no interlace

;        LDR     r0, VIDC_Address
;        STR     r1, [r0]                ; program VIDC
        MOV     pc, lr

; -------------------------------------------------------------------------

; void HAL_VideoSetBlank(uint blank, uint DPMS)
;
; blank = 0/1 for unblank/blank
; DMPS  = 0..3 as specified by monitor DPMSState (from mode file)
;         0 for no DPMS power saving

; HAL is expected to attempt to turn syncs off according to DPMS, and
; to turn video DMA off for blank (and therefore on for unblank) if possible.
; HAL is not expected to do anything else, eg. blank all palette entries.
; Such things are the responsibility of the OS, and also this call is expected
; to be fast. May be called with interrupts off.

HAL_VideoSetBlank ROUT

;        LDR     r3, VIDC_Address

;        TEQ     r0, #0
;        BEQ     %FT50
;
; blanking
;
;        TST     r1, #1                  ; if hsyncs should be off,
;        LDRNE   r2, =HorizSyncWidth + ((1:SHL:14) -1)   ; maximum value in h.sync width register
;        STRNE   r2, [r3]
;
;        TST     r1, #2                  ; if vsyncs should be off,
;        LDRNE   r2, =VertiSyncWidth + ((1:SHL:13) -1)   ; maximum value in v.sync width register
;        STRNE   r2, [r3]
;
;        LDR     r2, VIDC_ExternalSoftCopy
;        AND     r1, r1, #3
;        TEQ     r1, #3                                         ; if both syncs off
;        BICEQ   r2, r2, #Ext_HSYNCbits :OR: Ext_VSYNCbits;
;        ORREQ   r2, r2, #Ext_InvertHSYNC :OR: Ext_InvertVSYNC  ; set sync signals to low (less power)
;        BIC     r2, r2, #Ext_DACsOn                            ; turn off the DACs
;        STR     r2, [r3]
;
;        LDR     r0, IOMD_Address
;        LDRB    r1, [r0, #IOMD_VIDCR]
;        BIC     r1, r1, #IOMD_VIDCR_Enable   ; disable video DMA
;        STRB    r1, [r0, #IOMD_VIDCR]

        MOV     pc, lr
;
; unblanking
;
;50      LDR     r2, VIDC_ExternalSoftCopy
;        STR     r2, [r3]                     ; restore DACs and sync type
;
;        TST     r1, #1                       ; if hsyncs were turned off,
;        LDRNE   r2, VIDC_HSWRSoftCopy        ; then restore from soft copy
;        STRNE   r2, [r3]
;
;        TST     r1, #2                       ; if vsyncs were turned off,
;        LDRNE   r2, VIDC_VSWRSoftCopy        ; then restore from soft copy
;        STRNE   r2, [r3]
;
;        LDR     r0, IOMD_Address
;        LDRB    r1, [r0, #IOMD_VIDCR]
;        ORR     r1, r1, #IOMD_VIDCR_Enable   ; enable video DMA
;        STRB    r1, [r0, #IOMD_VIDCR]
;
;        MOV     pc, lr

; -------------------------------------------------------------------------

; void HAL_VideoSetPowerSave(uint powersave)
;
; powersave = 0/1 for power save off/on

HAL_VideoSetPowerSave ROUT
	MOV	pc,lr
;        LDR     r1, VIDC_Address
;
;        TEQ     r0, #0
;        BEQ     %FT50
;
; power save on
;
;        LDR     r2, =&C0000003    ;dac off, ereg set to external LUT
;        STR     r2, [r1]
;
;        LDR     r2, =&D0004000    ;Vclk off, Pcomp=0
;        STR     r2, [r1]
;
;        LDR     r2, =&E0004049    ;PoDown, Hclk
;        STR     r2, [r1]
;
;        MOV     pc, lr
;
; power save off
;
;50
;        LDR     r2, VIDC_ControlSoftCopy       ;restore from soft copy
;        STR     r2, [r1]
;
;        LDR     r2, VIDC_ExternalSoftCopy      ;restore from soft copy
;        STR     r2, [r1]
;
;        LDR     r2, VIDC_FSynSoftCopy          ;restore from soft copy
;;
; [ {TRUE}
;        LDR     R3, =FSyn_ResetValue    ; set test bits on, and r > v
;        ORR     R3, R3, #VIDCFSyn
;        STR     R3, [R1]

; we may need some delay in here...

;        LDR     R3, =FSyn_ClearR :OR: FSyn_ClearV :OR: FSyn_ForceLow :OR: FSyn_ForceHigh
;        ORR     R2, R2, R3
;        BIC     R2, R2, #FSyn_ForceHigh ; force test bits on, except this one
;        STR     R2, [R1]

; we may also need some delay in here...

;        BIC     R2, R2, R3              ; remove test bits
; ]
;        STR     r2, [r1]

;        MOV     pc, lr

; -------------------------------------------------------------------------

; void HAL_VideoUpdatePointer(uint flags, int x, int y, const shape_t *shape)
;
; Update the displayed position of the current pointer shape (or turn
; shape off)
;
; HAL code may need to take note of shape updated flag, and make its
; own new copies if true. This is to handle cases like dual scan LCD
; pointer, which typically needs two or more shapes buffers for the
; hardware. This work should _only_ be done when the updated flag
; is true, or possibly because provoked by clipping requirements.
; A simple HAL, using the kernel shape buffer directly, may be able to
; ignore the updated flag.
;
; flags:
;   bit 0  = pointer display enable (0=off, 1=on)
;   bit 1  = pointer shape update (0=no change, 1=updated)
;   bits 2..31 reserved (0)
; xpos = x position of top left of pointer (xpos = 0 for left of display)
; ypos = y position of top left of pointer (ypos = 0 for top of display)
; shape points to shape_t descriptor block:
;   typedef struct shape_t
;   {
;     uint8   width;      /* unpadded width in bytes (see notes) */
;     uint8   height;     /* in pixels */
;     uint8   padding[2]; /* 2 bytes of padding for field alignment */
;     void   *buffLA;     /* logical address of buffer holding pixel data */
;     void   *buffPA;     /* corresponding physical address of buffer */
;   }
;
; Notes:
; 1) if flags bit 0 is 0 (pointer off), x, y, shape are undefined
; 2) the shape data from RISC OS is always padded with transparent pixels
;    on the rhs, to a width of 32 pixels (8 bytes)
; 3) pointer clipping is the responsibility of the HAL (eg. may be able to
;    allow display of pointer in border region on some h/w)
; 4) buffer for pixel data is aligned to a multiple of 256 bytes or better
;
; This call is made by the OS at a time to allow smoothly displayed changes
; (on a VSync)

HAL_VideoUpdatePointer ROUT

	MOV 	pc,lr
;        Push    "r4, r5, lr"
;
;        LDR     r14, VIDC_Address
;
;        TST     r0, #1
;        BEQ     %FT90          ; pointer off
;
;
; process x (and assume shape width is padded 32 pixels)
;
;        LDR     r4, VIDC_PointerHAdjust
;        ADDS    r1, r1, r4
;        MOVLT   r1, #0                    ; x:= x+fudge, clamped to 0
;
;;        CMP     r1, #&4000                ; VIDC has 14 bits for cursor start
;        MOVGE   r1, #&4000
;        SUBGE   r1, r1, #1
;
;        ORR     r1, r1, #HorizCursorStart
;        STR     r1, [r14]
;
; process y
;
;        LDRB    r4, [r3, #1]              ; height from shape_t block
;        LDR     r5, [r3, #8]              ; buffer physical address from shape_t block
;
;        CMP     r2, #0                    ; if -ve y
;        BICLT   r2, r2, #1                ; TEMP FUDGE - really ought to have two copies, one offset by 1 row
;                                          ; because VIDC can only cope with 16 byte aligned data pointer
;        ADDLT   r4, r4, r2                ; reduce height
;        SUBLT   r5, r5, r2, LSL #3        ; and advance data pointer (8 bytes per row) to clip pointer to 0
;        MOVLT   r2, #0
;        CMP     r4, #0
;        BLE     %FT90                     ; pointer off if clipped to oblivion
;
;        LDR     r1, VIDC_VertiDisplaySize
;;        SUB     r1, r1, r2                       ; if display_height - y < pointer height
;        CMP     r1, r4
;        MOVLT   r4, r1                           ; clip pointer height
;        CMP     r4, #0
;        BLE     %FT90                            ; pointer off if clipped to oblivion

;        LDR     r1, VIDC_PointerVAdjust
;        ADD     r2, r2, r1                       ; y := y+adjust

;        ORR     r1, r2, #VertiCursorStart
;        STR     r1, [r14]

;        ADD     r2, r2, r4                ; y:= y+height
;        ORR     r1, r2, #VertiCursorEnd
;        STR     r1, [r14]
;
;        LDR     r14, IOMD_Address
;        STR     r5, [r14, #IOMD_CURSINIT]
;
;        Pull    "r4, r5, pc"

;90
;
; pointer off
;
;        MOV     r4, #VertiCursorStart
;        STR     r4, [r14]
;        MOV     r4, #VertiCursorEnd
;        STR     r4, [r14]
;
;        Pull    "r4, r5, pc"

; -------------------------------------------------------------------------

; void HAL_VideoSetDAG(uint DAG, uint paddr)
;
; set Video DMA address generator value to given physical address
;
; DAG   = 0 set start address of current video display
;         1 set start address of total video buffer
;         2 set end address (exclusive) of total video buffer
;         3 set start address of VDU buffer (i.e. as set by OS_Byte 112)
;         all other values reserved
; paddr = physical address for given DAG
;
; Notes:
; The OS has a video buffer which is >= total display size, and may be using
; bank switching (several display buffers) or hardware scroll within the
; total video buffer.
;
; DAG=1 will be start address of current total video buffer
; DAG=2 will be end address (exclusive) of current total video buffer
; DAG=0 will be start address in buffer for current display
;
; HALs should respond as follows:
; 1) If they have no hardware scroll support, only DAG=0 is significant,
;    and the end address of the current display is implied by the size
;    of the current mode. Calls with DAG=1,2 should be ignored.
; 2) If they support hardware scroll, DAG=0 again defines display start.
;    DAG=2 defines the last address (exclusive) that should be displayed
;    before wrapping back (if reached within display size), and DAG=1
;    defines the address to which accesses should wrap back.

VBL_Wait	;LDR r0, LCD_Address
 ;	LDR	r1, [r0]
;;	MOV	r1, r1, LSR #18
;	BICS	r1, r1, #0xFC00
;	BNE	VBL_Wait

	MOV	pc,lr

DAG_txt = "DAG = "
	= 0

HAL_VideoSetDAG ROUT

	CMP	r0, #0
	MOVNE	pc, lr

	STMDB 	sp!,{r0-r5,lr}
	;STMDB	sp!,{r1}
	;STMDB	sp!,{r1}
	;LDR	r0, UART_Address
	;ADR	r4, DAG_txt
	;BL	serials
	;LDMIA	sp!,{r4}
	;BL	serial8


;	BL	VBL_Wait

	;LDMIA	sp!,{r1}
 	LDR	r0, LCD_Address

	STR	r1,[r0,#0xA0]
	STR	r1,[r0,#0xA4]
	LDR	r2, = (640*272)
	ADD	r1, r1, r2
	BIC	r1, r1, #0xFF000000
	STR	r1,[r0,#0xD0]
	STR	r1,[r0,#0xD4]
;	LDR 	r2, [r0]
;	BIC	r2, r2, #1
;	STR	r2, [r0]

;	MOV	r1, r1, LSR #1
;	STR	r1, [r0, #0x14]
;	BIC	r1, r1, #0xFF000000
;	BIC	r1, r1, #0x00800000

;	LDR	r2, VIDX_Size
;	LDR	r3, VID_BPP
;	MOV	r2, r2, LSL r3
;	MOV	r2, r2, LSR #3
;;	MOV	r3, #272
;	MUL	r2, r3, r2
;	MOV	r2, r2, LSR #1

;	ADD	r1, r1, r2 ;#0xFF00
;	ADD	r1, r1, #0x400
;	STR	r1, [r0, #0x18]

;	LDR	r2, [r0]
;	ORR	r2, r2, #1
;	STR	r2, [r0]

;	MOV	pc,lr

	LDMIA	sp!,{r0-r5,pc}

;        LDR     r12, IOMD_Address
;
;        CMP     r0, #2
;        MOVHI   pc, lr
;
;        CMP     r0, #1
;        BEQ     %FT20
;        BHI     %FT40
;;
; DAG=0 program VInit
;
;;        STR     r1, IOMD_VInitSoftCopy   ; save VInit so that writes to VEnd can check
;        LDR     r2, IOMD_VEndSoftCopy
;        CMP     r1, r2                   ; if VInit >= VEnd then set L bit
;        ORRCS   r1, r1, #IOMD_DMA_L_Bit
;        STR     r1, [r12, #IOMD_VIDINIT]
;        MOV     pc, lr
;
; DAG=1 program VStart
;
;20      STR     r1, [r12, #IOMD_VIDSTART]
 ;       MOV     pc, lr
;
;
; DAG=2 program VEnd
;
;40      MOV     r2, #0                          ; we must adjust address to that of
;        LDRB    r2, VRAMWidth                   ; last DMA fetch, allowing for fetch size
;        CMP     r2, #1
;        MOVLO   r2, #16                         ; DRAM-only, subtract 16 (quadword)
;        MOVEQ   r2, #SAMLength/2                ; 1 bank of VRAM - 1/2 SAM
;        MOVHI   r2, #SAMLength                  ; 2 banks of VRAM - 1/2 SAM * 2
;        SUB     r1, r1, r2
;        STR     r1, IOMD_VEndSoftCopy           ; remember VEnd value
;        LDR     r2, IOMD_VInitSoftCopy          ; load current VInit
;        CMP     r2, r1                          ; if VInit >= VEnd
;        ORRCS   r2, r2, #IOMD_DMA_L_Bit         ; then set L bit
;;        STR     r2, [r12, #IOMD_VIDINIT]        ; store VInit
;        STR     r1, [r12, #IOMD_VIDEND]         ; and VEnd
;        MOV     pc, lr

; -------------------------------------------------------------------------

;
; uint HAL_VideoFeatures(void)
;
; returns a flags word:
;    bit 0     h/w scroll is supported
;    bit 1     h/w pointer is supported
;    bit 2     interlace is supported with progressive framestore
;    other bits reserved (returned as 0)

HAL_VideoFeatures ROUT
        MOV   a1, #0   ; hw scroll, h/w pointer, no interlace
        MOV   pc, lr

; -------------------------------------------------------------------------

;
; uint HAL_VideoPixelFormats(void)
;
;
; returns flags word:
;    bit 0     1 bpp is supported
;    bit 1     2 bpp is supported
;    bit 2     4 bpp is supported
;    bit 3     8 bpp is supported
;    bit 4    16 bpp is supported
;    bit 5    32 bpp is supported
;    other bits reserved (returned as 0)
;    bits 0-5 refer to support with standard RO pixel layout (little endian
;    packing for 1,2,4 bpp, 5-5-5 RGB for 16 bpp, etc.)
;    other formats may be introduced when/if RO supports them

HAL_VideoPixelFormats ROUT
        MOV   a1, #2_111111   ; 1,2,4,8,16,32 bpp
        MOV   pc, lr

; -------------------------------------------------------------------------

;
; uint HAL_VideoBufferAlignment(void)
;
; returns the required alignment for the framestore buffer, in bytes
; (expected to be a power of 2)

HAL_VideoBufferAlignment ROUT
        MOV   a1, #32          ; align to 32 bytes
        MOV   pc, lr

; -------------------------------------------------------------------------

;
; uint HAL_VideoOutputFormat(void)
;
; returns current video output format
;      0 = analogue (or 'normal', unspecified)
;      1 = 16-bit non-multiplexed RGB 5-6-5 (Chrontel 7003 format 0)
;     ...
;     10 = Chrontel 7003 format 9
;  >= 11 reserved
;

HAL_VideoOutputFormat
        MOV   a1, #0     ;normal/unspecified
        MOV   pc, lr

; -------------------------------------------------------------------------

;;;mjsHAL - is the mode workspace really generic enough to pass to HAL?
;;;

;
; int HAL_VideoVetMode(const void *VIDClist, const void *workspace)
;
; VIDClist  -> generic video controller list (VIDC list type 3)
; workspace -> mode workspace (if mode number), or 0
; returns 0 if OK (may be minor adjusts to VIDClist and/or workspace values)
;         non-zero if not OK
;
HAL_VideoVetMode ROUT
        MOV   r0,#0    ; do nothing for now
        MOV   PC,LR

; -------------------------------------------------------------------------

        END

