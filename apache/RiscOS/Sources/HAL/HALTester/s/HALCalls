; Copyright 2009 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        GET     Hdr:UserIF.<UserIF>
        $GetCPU
        $GetIO
        $GetMEMC
        $GetMEMM
        $GetVIDC

        GET     hdr.Options
        GET     hdr.Copro15ops
        GET     hdr.ARMops
        GET     hdr.HALDevice
        GET     hdr.HALEntries

        MACRO
        DebugTX $str
    [ DebugHALTX
        BL      DebugHALPrint
        =       "$str", 0
        ALIGN
    ]
        MEND

a1      RN      0
a2      RN      1
a3      RN      2
a4      RN      3
v1      RN      4
v2      RN      5
v3      RN      6
v4      RN      7
v5      RN      8
v6      RN      9
sb      RN      9
v7      RN      10
v8      RN      11

; Set sb up ready for CallHAL.
        MACRO
        AddressHAL $zero
 [ "$zero" <> ""
        LDR     sb, [$zero, #HAL_Workspace]
 |
        ADRL    sb, ZeroPage
        LDR     sb, [sb, #HAL_Workspace]
 ]
        MEND

; Calls the HAL. $rout is the routine. sb must have been set up by AddressHAL
        MACRO
        CallHAL $rout, $cond
        MOV$cond lr, pc
        LDR$cond pc, [sb, #-(EntryNo_$rout+1) * 4]
        MEND

; Checks whether a HAL routine exists. If it does, a1 points to it (probably
; not useful), and Z is clear. lr corrupted.
        MACRO
        CheckHAL $rout
        LDR     a1, [sb, #-(EntryNo_$rout+1) * 4]
        ADRL    lr, NullHALEntry
        TEQ     a1, lr
        MEND

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  HAL_DebugTX
        EXPORT  HAL_DebugRX
        EXPORT  HAL_MachineID
        EXPORT  HAL_Timers
        EXPORT  HAL_TimerDevice
        EXPORT  HAL_CounterRate
        EXPORT  HAL_TimerGranularity
        EXPORT  HAL_TimerMaxPeriod
        EXPORT  HAL_TimerSetPeriod
        EXPORT  HAL_CounterPeriod
        EXPORT  HAL_TimerPeriod
        EXPORT  HAL_CounterRead
        EXPORT  HAL_TimerReadCountdown
        EXPORT  HAL_CounterDelay
        EXPORT  HAL_IRQEnable
        EXPORT  HAL_IRQDisable
        EXPORT  HAL_IRQClear
        EXPORT  HAL_IRQSource
        EXPORT  HAL_IRQStatus
        EXPORT  HAL_FIQEnable
        EXPORT  HAL_FIQDisable
        EXPORT  HAL_FIQDisableAll
        EXPORT  HAL_FIQClear
        EXPORT  HAL_FIQStatus
        EXPORT  HAL_FIQSource

HAL_DebugTX
        LDR     pc, [sb, #-(EntryNo_HAL_DebugTX+1) * 4]

HAL_DebugRX
        LDR     pc, [sb, #-(EntryNo_HAL_DebugRX+1) * 4]

HAL_MachineID
        LDR     pc, [sb, #-(EntryNo_HAL_MachineID+1) * 4]

HAL_Timers
        LDR     pc, [sb, #-(EntryNo_HAL_Timers+1) * 4]

HAL_TimerDevice
        LDR     pc, [sb, #-(EntryNo_HAL_TimerDevice+1) * 4]

HAL_CounterRate
        LDR     pc, [sb, #-(EntryNo_HAL_CounterRate+1) * 4]

HAL_TimerGranularity
        LDR     pc, [sb, #-(EntryNo_HAL_TimerGranularity+1) * 4]

HAL_TimerMaxPeriod
        LDR     pc, [sb, #-(EntryNo_HAL_TimerMaxPeriod+1) * 4]

HAL_TimerSetPeriod
        LDR     pc, [sb, #-(EntryNo_HAL_TimerSetPeriod+1) * 4]

HAL_CounterPeriod
        LDR     pc, [sb, #-(EntryNo_HAL_CounterPeriod+1) * 4]

HAL_TimerPeriod
        LDR     pc, [sb, #-(EntryNo_HAL_TimerPeriod+1) * 4]

HAL_CounterRead
        LDR     pc, [sb, #-(EntryNo_HAL_CounterRead+1) * 4]

HAL_TimerReadCountdown
        LDR     pc, [sb, #-(EntryNo_HAL_TimerReadCountdown+1) * 4]

HAL_CounterDelay
        LDR     pc, [sb, #-(EntryNo_HAL_CounterDelay+1) * 4]

HAL_IRQEnable
        LDR     pc, [sb, #-(EntryNo_HAL_IRQEnable+1) * 4]

HAL_IRQDisable
        LDR     pc, [sb, #-(EntryNo_HAL_IRQDisable+1) * 4]

HAL_IRQClear
        LDR     pc, [sb, #-(EntryNo_HAL_IRQClear+1) * 4]

HAL_IRQSource
        LDR     pc, [sb, #-(EntryNo_HAL_IRQSource+1) * 4]

HAL_IRQStatus
        LDR     pc, [sb, #-(EntryNo_HAL_IRQStatus+1) * 4]

HAL_FIQEnable
        LDR     pc, [sb, #-(EntryNo_HAL_FIQEnable+1) * 4]

HAL_FIQDisable
        LDR     pc, [sb, #-(EntryNo_HAL_FIQDisable+1) * 4]

HAL_FIQDisableAll
        LDR     pc, [sb, #-(EntryNo_HAL_FIQDisableAll+1) * 4]

HAL_FIQClear
        LDR     pc, [sb, #-(EntryNo_HAL_FIQClear+1) * 4]

HAL_FIQStatus
        LDR     pc, [sb, #-(EntryNo_HAL_FIQStatus+1) * 4]

HAL_FIQSource
        LDR     pc, [sb, #-(EntryNo_HAL_FIQSource+1) * 4]


        END
