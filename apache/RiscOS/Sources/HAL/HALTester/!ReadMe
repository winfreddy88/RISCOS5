This is a simple HAL-compatible OS kernel that can be used to test HAL functionality.

What it requires from your HAL:

* RISCOS_AddRAM must be called at least once. The first memory block must be at least 128KB in size, and must be free for writing to (i.e. it doesn't contain the ROM image)
* RISCOS_Start must be called after all the calls to RISCOS_AddRAM.
* The HAL must support 'early debugging', i.e. calling HAL_DebugTX/HAL_DebugRX with sb pointing to the HAL workspace, but before HAL_Init has been called. At the moment this is only used in s.Kernel to print the "HAL entry table initialised" message, so this can easily be disabled if required.
* HAL_DebugTX/HAL_DebugRX must be implemented, as they are the only IO method used!
* RISCOS_Start must be called with a valid stack pointer
* RISCOS_Start must also be called with the ROM image contained in RAM (the current implementation uses an internal structure to store pointers to some things)
* RISCOS_Start must be called with interrupts disabled, or with a suitable interrupt handler installed in a 'safe' area of memory

What it doesn't require from your HAL:

* Support for the MMU/logical addresses. The kernel makes no attempt to enable the MMU, so all hardware access can be via physical addresses (or via fake logical addresses returned by the AccessPhysicalAddress/MapInIO functions)
* A valid ROM checksum.

What it does:

* RISCOS_AddRAM
- Builds up a list of RAM blocks using the same code as the RISC OS kernel, i.e. at the start of the first RAM block.
* RISCOS_Start
- Sets up the HAL entry table, workspace, and non-cacheable workspace, using the first RAM block (these are stored after the RAM block list)
- Stores the pointers to the HAL, entry table, RAM list, etc. in the internal 'zero page' area.
- Sends the "HAL entry table initialised" early debug message
- Initialises the HAL via HAL_Init
- Sends the "HAL initialised" debug message
- Enters the C function notmain() to begin the test procedure
* main.c
- This contains most of the test code, using printf()/HAL_DebugTX() and HAL_DebugRX() to interact with the user.
- You'll want to modify this to test the implemented parts of your HAL however you see fit


The current code can perform the following tests:

* Basic tests:
- Basic IO test to confirm HAL_DebugTX/HAL_DebugRX functionality
- Display of the 'zero page' values (pointers to the HAL entry table, workspace, ROM image, and a dump of the RAM list)
- Display of certain key CPU registers (unique ID via HAL_MachineID(), CP15 CPU ID register, CP15 cache type register, CP15 control register)
* Timer tests:
- State dump of all timers
- Test that timers increment OK (via starting timer 0 and redisplaying the timer states a couple of times)
- HAL_CounterDelay test (waits for 1 second)
* Interrupt tests:
- State dump of all interrupts (enabled/disabled states, which interrupts are currently firing (HAL_IRQStatus()/HAL_FIQStatus()), and current IRQ/FIQ source when masking is applied (HAL_IRQSource()/HAL_FIQSource())
- IRQ disable test - all IRQs are enabled, then the current IRQ (as reported by IRQ_Source()) is repeatedly disabled until no interrupts are reported or the loop counter overflows
- HAL_IRQClear() test - testing that HAL_IRQClear() can be used to clear the interrupt state of timer 0
