/* Copyright 2005 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdbool.h>
#include "sys/queue.h"

#define DEV(devfunc) ((devfunc) >> 3)
#define FUNC(devfunc) ((devfunc) & 7)
#define DEVFUNC(dev,func) (((dev) << 3) | (func))

typedef struct pci_dev
{
    STAILQ_ENTRY(pci_dev) global_list;
    STAILQ_ENTRY(pci_dev) bus_list;
    STAILQ_HEAD(addrlist, pci_addr) addresses;
    struct pci_bridge *parent;
    unsigned vendor : 16;
    unsigned devid : 16;
    unsigned class : 24;
    unsigned devfunc : 8;
    unsigned bus : 8;
    unsigned headertype : 8;
    unsigned msi : 8;
    unsigned messages : 8;
    bool     msi64 : 1;
    bool     iobad : 1;
    bool     membad : 1;
    bool     fastb2b : 1;
    bool     bridge : 1;
    bool     capabilities : 1;
} pci_dev;

typedef struct pci_bridge
{
    pci_dev dev;
    unsigned secondary : 8;
    unsigned subordinate : 8;
    bool fastb2b_sec : 1;
    bool root : 1;
    bool supports_prefetch : 1;
    struct pci_addr *window[3];
    STAILQ_HEAD(busdevlist, pci_dev) devices;
    STAILQ_HEAD(busaddrlist, pci_addr) addresses;
} pci_bridge;

uint8_t  HAL_PCIReadConfigByte
         (unsigned bus, unsigned devfn, unsigned address);
uint16_t HAL_PCIReadConfigHalfword
         (unsigned bus, unsigned devfn, unsigned address);
uint32_t HAL_PCIReadConfigWord
         (unsigned bus, unsigned devfn, unsigned address);

void HAL_PCIWriteConfigByte
     (unsigned bus, unsigned devfn, unsigned address, uint8_t value);
void HAL_PCIWriteConfigHalfword
     (unsigned bus, unsigned devfn, unsigned address, uint16_t value);
void HAL_PCIWriteConfigWord
     (unsigned bus, unsigned devfn, unsigned address, uint32_t value);

uint8_t pci_find_capability(pci_dev *d, uint8_t cap);
bool pci_known_int_line(pci_dev *d, int pin, int *line);

/* return the base address for device class cl, starting with *device = 0,
   returns with *device = 0 and value 0 when no more devices */
void *pci_find_class_address(unsigned int class, int *device);
uint8_t pci_read_config_byte_dev(pci_dev *dev, uint8_t address);


/* Standard configuration space header layout */
#define PCI_VENDOR_ID 0x00
#define PCI_DEVICE_ID 0x02
#define PCI_COMMAND   0x04
#define PCI_STATUS    0x06
#define PCI_CLASS_REV 0x08
#define PCI_REVISION_ID 0x08
#define PCI_CLASS_IF  0x09
#define PCI_CLASS     0x0A
#define PCI_CL_SIZE   0x0C
#define PCI_LATENCY   0x0D
#define PCI_HEADER_TYPE 0x0E
#define PCI_BIST      0x0F

#define PCI_HEADER_TYPE_NORMAL  0
#define PCI_HEADER_TYPE_BRIDGE  1
#define PCI_HEADER_TYPE_CARDBUS 2

/* Type 0 header */
#define PCI_BASE_ADDRESS_0 0x10
#define PCI_BASE_ADDRESS_1 0x14
#define PCI_BASE_ADDRESS_2 0x18
#define PCI_BASE_ADDRESS_3 0x1C
#define PCI_BASE_ADDRESS_4 0x20
#define PCI_BASE_ADDRESS_5 0x24
#define PCI_SUBSYSTEM_VENDOR_ID 0x2C
#define PCI_SUBSYSTEM_ID   0x2E
#define PCI_ROM_ADDR  0x30
#define PCI_CAP_PTR   0x34
#define PCI_INT_LINE  0x3C
#define PCI_INT_PIN   0x3D
#define PCI_MIN_GNT   0x3E
#define PCI_MAX_LAT   0x3F

#define  PCI_BASE_ADDRESS_SPACE	0x01	/* 0 = memory, 1 = I/O */
#define  PCI_BASE_ADDRESS_SPACE_IO 0x01
#define  PCI_BASE_ADDRESS_SPACE_MEMORY 0x00
#define  PCI_BASE_ADDRESS_MEM_TYPE_MASK 0x06
#define  PCI_BASE_ADDRESS_MEM_TYPE_32	0x00	/* 32 bit address */
#define  PCI_BASE_ADDRESS_MEM_TYPE_1M	0x02	/* Below 1M [obsolete] */
#define  PCI_BASE_ADDRESS_MEM_TYPE_64	0x04	/* 64 bit address */
#define  PCI_BASE_ADDRESS_MEM_PREFETCH	0x08	/* prefetchable? */
#define  PCI_BASE_ADDRESS_MEM_MASK	(~0x0fU)
#define  PCI_BASE_ADDRESS_IO_MASK	(~0x03U)
/* bit 1 is reserved if address_space = 1 */

#define PCI_CMD_IO      0x0001
#define PCI_CMD_MEMORY  0x0002
#define PCI_CMD_MASTER  0x0004
#define PCI_CMD_SPECIAL 0x0008
#define PCI_CMD_MWI     0x0010
#define PCI_CMD_VGAPAL  0x0020
#define PCI_CMD_PERR    0x0040
#define PCI_CMD_STEP    0x0080
#define PCI_CMD_SERR    0x0100
#define PCI_CMD_FASTB2B 0x0200

#define PCI_STA_CAP     0x0010
#define PCI_STA_66MHZ   0x0020
#define PCI_STA_FASTB2B 0x0080
#define PCI_STA_PERR    0x0100
#define PCI_STA_DEVSEL  0x0600
#define PCI_STA_DEVSEL_FAST   0x0000
#define PCI_STA_DEVSEL_MEDIUM 0x0200
#define PCI_STA_DEVSEL_SLOW   0x0400
#define PCI_STA_TABT_TGT 0x0800
#define PCI_STA_TABT_MTR 0x1000
#define PCI_STA_MABT_MTR 0x2000
#define PCI_STA_SERR     0x4000
#define PCI_STA_PARITY   0x8000

#define  PCI_BASE_ADDRESS_SPACE	0x01	/* 0 = memory, 1 = I/O */
#define  PCI_BASE_ADDRESS_SPACE_IO 0x01
#define  PCI_BASE_ADDRESS_SPACE_MEMORY 0x00
#define  PCI_BASE_ADDRESS_MEM_TYPE_MASK 0x06
#define  PCI_BASE_ADDRESS_MEM_TYPE_32	0x00	/* 32 bit address */
#define  PCI_BASE_ADDRESS_MEM_TYPE_1M	0x02	/* Below 1M [obsolete] */
#define  PCI_BASE_ADDRESS_MEM_TYPE_64	0x04	/* 64 bit address */
#define  PCI_BASE_ADDRESS_MEM_PREFETCH	0x08	/* prefetchable? */
#define  PCI_BASE_ADDRESS_MEM_MASK	(~0x0fU)
#define  PCI_BASE_ADDRESS_IO_MASK	(~0x03U)
/* bit 1 is reserved if address_space = 1 */

#define PCI_BAR_IS_IO(a) (((a) & 3) == 1)
#define PCI_BAR_IS_MEM(a) (((a) & 3) == 0) /* 32-bit or 64-bit only */
#define PCI_BAR_IS_MEM20(a) (((a) & 7) == 2)
#define PCI_BAR_IS_MEM64(a) (((a) & 7) == 4)
#define PCI_BAR_IS_PREFETCHABLE(a) (((a) & PCI_BASE_ADDRESS_MEM_PREFETCH) != 0)

#define PCI_BAR_IO_ADDRESS(a) ((a) & PCI_BASE_ADDRESS_IO_MASK)
#define PCI_BAR_MEM_ADDRESS(a) ((a) & PCI_BASE_ADDRESS_MEM_MASK)
#define PCI_BAR_ROM_ADDRESS(a) ((a) & PCI_ROM_ADDR_MASK)

#define PCI_ROM_ADDR_ENABLE 0x00000001
#define PCI_ROM_ADDR_MASK   0xfffff800

#define PCI_BASE_CLASS_OLD        0x00
#define PCI_BASE_CLASS_STORAGE    0x01
#define PCI_BASE_CLASS_NETWORK    0x02
#define PCI_BASE_CLASS_DISPLAY    0x03
#define PCI_BASE_CLASS_MULTIMEDIA 0x04
#define PCI_BASE_CLASS_MEMORY     0x05
#define PCI_BASE_CLASS_BRIDGE     0x06
#define PCI_BASE_CLASS_COMMS      0x07
#define PCI_BASE_CLASS_SYSTEM     0x08
#define PCI_BASE_CLASS_INPUT      0x09
#define PCI_BASE_CLASS_DOCKING    0x0A
#define PCI_BASE_CLASS_CPU        0x0B
#define PCI_BASE_CLASS_SERIAL     0x0C
#define PCI_BASE_CLASS_WIRELESS   0x0D
#define PCI_BASE_CLASS_IIO        0x0E
#define PCI_BASE_CLASS_SATELLITE  0x0F
#define PCI_BASE_CLASS_ENCRYPT    0x10
#define PCI_BASE_CLASS_DATA       0x11
#define PCI_BASE_CLASS_OTHER      0xFF

#define PCI_CLASS_BRIDGE_HOST 0x0600
#define PCI_CLASS_BRIDGE_ISA  0x0601
#define PCI_CLASS_BRIDGE_EISA 0x0602
#define PCI_CLASS_BRIDGE_MCA  0x0603
#define PCI_CLASS_BRIDGE_PCI  0x0604
#define PCI_CLASS_BRIDGE_PCCARD 0x0605
#define PCI_CLASS_BRIDGE_NUBUS 0x0606
#define PCI_CLASS_BRIDGE_CARDBUS 0x0607
#define PCI_CLASS_BRIDGE_RACEWAY 0x0608
#define PCI_CLASS_BRIDGE_OTHER 0x0680

#define PCI_CAP_MSI 5

#define PCI_CAP_ID    0x00
#define PCI_CAP_NEXT  0x01

#define PCI_MSI_CTRL  0x02
#define PCI_MSI_ADDR  0x04
#define PCI_MSI_DATA32 0x08
#define PCI_MSI_DATA64 0x0C

#define PCI_MSI_64BIT 0x80
#define PCI_MSI_MMENA 0x70
#define PCI_MSI_MMENA_SHIFT 4
#define PCI_MSI_MMCAP 0x0E
#define PCI_MSI_MMCAP_SHIFT 1
#define PCI_MSI_ENABLE 0x01

/* Bridge configuration space header layout (type 1) */

/*      PCI_BASE_ADDRESS_0 0x10 */
/*      PCI_BASE_ADDRESS_1 0x14 */
#define PCI_PRIMARY_BUS 0x18
#define PCI_SECONDARY_BUS 0x19
#define PCI_SUBORDINATE_BUS 0x1A
#define PCI_SECONDARY_LATENCY 0x1B
#define PCI_IO_BASE 0x1C
#define PCI_IO_LIMIT 0x1D
#define PCI_SECONDARY_STATUS 0x1E
#define PCI_MEMORY_BASE 0x20
#define PCI_MEMORY_LIMIT 0x22
#define PCI_PREFETCHABLE_BASE 0x24
#define PCI_PREFETCHABLE_LIMIT 0x26
#define PCI_PREFETCHABLE_BASE_UPPER 0x28
#define PCI_PREFETCHABLE_LIMIT_UPPER 0x2C
#define PCI_IO_BASE_UPPER 0x30
#define PCI_IO_LIMIT_UPPER 0x32
/*      PCI_CAP_PTR 0x34 */
#define PCI_BRIDGE_ROM_ADDR 0x38
/*      PCI_INT_LINE  0x3C */
/*      PCI_INT_PIN   0x3D */
#define PCI_BRIDGE_CONTROL 0x3E

#define PCI_BCR_PERR    0x0001
#define PCI_BCR_SERR    0x0002
#define PCI_BCR_ISA     0x0004
#define PCI_BCR_VGA     0x0008
#define PCI_BCR_MABT    0x0020
#define PCI_BCR_RST     0x0040
#define PCI_BCR_FASTB2B 0x0080
#define PCI_BCR_PRIMARY_DISCARD 0x0100
#define PCI_BCR_SECONDARY_DISCARD 0x0200
#define PCI_BCR_DISCARD_STATUS  0x0400
#define PCI_BCR_DISCARD_SERR    0x0800
