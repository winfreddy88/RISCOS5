; Copyright 2005 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; PXA255 definitions
; initially for the Psion NB2

          ; Debugging in the serial port,and the choice of UART (1 or 3)
          GBLL    Debug
Debug     SETL    {TRUE}
          GBLA    DebugPort
DebugPort SETA    1

          ; 2k EEPROM?
          GBLL    NewEEPROM
 [ :DEF: RevAHAL         
NewEEPROM SETL    {FALSE}
 |
NewEEPROM SETL    {TRUE}
 ]

          ; Should the I cache be off when the MMU is
          GBLL    CacheOff
CacheOff  SETL    {FALSE}

CPUCLK          *       240000000
RAMCLK          *       120000000
UARTCLK         *         1846154

; Delay macro for really short delays

        MACRO
        Delay   $us, $r
        LCLS    tmp
 [ "$r" = ""
tmp     SETS    "a1"
 |
tmp     SETS    "$r"
 ]
        LDR     $tmp, =$us * (CPUCLK/1000000) ; 1 us = CPUCLK/1000000 cycles
        SUBS    $tmp, $tmp, #6                ; 1 cycle
        SUBHS   pc, pc, #12                   ; always takes 5 cycles - no branch prediciction
        MEND


; PXA255 registers

; 4Gbytes of address space.
; 00000000-0000001F reserved for exception vectors
; FFFFE000-FFFFFFFF allocated to control registers

; 00000000-03ffffff static chip select 0 (64 megs
; 04000000-07ffffff static chip select 1 (64 megs
; 08000000-0bffffff static chip select 2 (64 megs
; 0c000000-0fffffff static chip select 3 (64 megs
; 10000000-13ffffff static chip select 4 (64 megs
; 14000000-17ffffff static chip select 5 (64 megs

; 20000000-2fffffff pcmcia/cf slot 0 (256 megs)
; 30000000-3fffffff pcmcia/cf slot 1 (256 megs)

; 40000000-43ffffff mem mapped peripheral registers
; 44000000-47ffffff mem mapped registers for LCD
; 48000000-4bffffff mem mapped registers for mem control

; A0000000-AFFFFFFF SDRAM 4 banks of 64 Megs

; 00000000-7FFFFFFF ATU outbound direct addressing window (?)
; 80000000-9001FFFF ATU outbound translation windows (?)

; Our physical memory map:


                GBLL    ShadowRAMWindow
ShadowRAMWindow SETL    {FALSE}

Boot_Base       *       &A0408000         ; where the NetBook loader puts us
IO_Base         *       &40000000
RAM_Base        *       &A0000000
Boot_RAM_Base   *       &A0000000

ROM_Size        *       &01000000
IO_Size         *       &00400000


; We copy (later decompress?) the ROM contents into RAM at boot time.
; The ROM copy will live at the start of RAM.

REG_Base        *       IO_Base

;PXA255 registers
                ^       REG_Base
; DMA engine                
DCSR00          #       4       ; DMA control/status for channel 0
DCSR01          #       4       ; DMA control/status for channel 1
DCSR02          #       4       ; DMA control/status for channel 2
DCSR03          #       4       ; DMA control/status for channel 0
DCSR04          #       4       ; DMA control/status for channel 3
DCSR05          #       4       ; DMA control/status for channel 5
DCSR06          #       4       ; DMA control/status for channel 6
DCSR07          #       4       ; DMA control/status for channel 7
DCSR08          #       4       ; DMA control/status for channel 8
DCSR09          #       4       ; DMA control/status for channel 9
DCSR10          #       4       ; DMA control/status for channel 10
DCSR11          #       4       ; DMA control/status for channel 11
DCSR12          #       4       ; DMA control/status for channel 12
DCSR13          #       4       ; DMA control/status for channel 13
DCSR14          #       4       ; DMA control/status for channel 14
DCSR15          #       4       ; DMA control/status for channel 15
                #       &f0-&40
DINT            #       4       ; DMA Interrupt register
                #       4*3
DRCMR00         #       4       ;Request to Channel Map register for DREQ0
DRCMR01         #       4       ;Request to Channel Map register for DREQ1
DRCMR02         #       4       ;Request to Channel Map register for I2S rx req
DRCMR03         #       4       ;Request to Channel Map register for I2S tx req
DRCMR04         #       4       ;Request to Channel Map register for BTUART rx req
DRCMR05         #       4       ;Request to Channel Map register for BTUART tx req
DRCMR06         #       4       ;Request to Channel Map register for FFUART rx req
DRCMR07         #       4       ;Request to Channel Map register for FFUART tx req
DRCMR08         #       4       ;Request to Channel Map register for AC97 Mic req
DRCMR09         #       4       ;Request to Channel Map register for AC97 modem rx req
DRCMR10         #       4       ;Request to Channel Map register for AC97 modem tx req
DRCMR11         #       4       ;Request to Channel Map register for AC97 audio rx req
DRCMR12         #       4       ;Request to Channel Map register for AC97 audio tx req
DRCMR13         #       4       ;Request to Channel Map register for SSP rx req
DRCMR14         #       4       ;Request to Channel Map register for SSP tx req
DRCMR15         #       4       ;Request to Channel Map register for NSSP rx req
DRCMR16         #       4       ;Request to Channel Map register for NSSP tx req
DRCMR17         #       4       ;Request to Channel Map register for ICP rx req 
DRCMR18         #       4       ;Request to Channel Map register for ICP tx req 
DRCMR19         #       4       ;Request to Channel Map register for STUART rx req
DRCMR20         #       4       ;Request to Channel Map register for STUART tx req
DRCMR21         #       4       ;Request to Channel Map register for MMC rx req 
DRCMR22         #       4       ;Request to Channel Map register for MMC tx req
                #       4*2
DRCMR25         #       4       ;Request to Channel Map register for USB endpoint1 req
DRCMR26         #       4       ;Request to Channel Map register for USB endpoint2 req
DRCMR27         #       4       ;Request to Channel Map register for USB endpoint3 req
DRCMR28         #       4       ;Request to Channel Map register for USB endpoint4 req
DRCMR29         #       4       ;Request to Channel Map register for HWUART rx req
DRCMR30         #       4       ;Request to Channel Map register for USB endpoint6 req
DRCMR31         #       4       ;Request to Channel Map register for USB endpoint7 req
DRCMR32         #       4       ;Request to Channel Map register for USB endpoint8 req
DRCMR33         #       4       ;Request to Channel Map register for USB endpoint9 req
DRCMR34         #       4       ;Request to Channel Map register for HWUART tx req     
DRCMR35         #       4       ;Request to Channel Map register for USB endpoint11 req
DRCMR36         #       4       ;Request to Channel Map register for USB endpoint12 req
DRCMR37         #       4       ;Request to Channel Map register for USB endpoint13 req
DRCMR38         #       4       ;Request to Channel Map register for USB endpoint14 req
                #       &200 - &19c
DDADR00         #       4       ; DMA Descriptor Addr Reg00
DSADR00         #       4       ; DMA Source     Addr Reg00
DTADR00         #       4       ; DMA Target     Addr Reg00
DMCMD00         #       4       ; DMA Command    Addr Reg00
DDADR01         #       4       ; DMA Descriptor Addr Reg01
DSADR01         #       4       ; DMA Source     Addr Reg01
DTADR01         #       4       ; DMA Target     Addr Reg01
DMCMD01         #       4       ; DMA Command    Addr Reg01
DDADR02         #       4       ; DMA Descriptor Addr Reg02
DSADR02         #       4       ; DMA Source     Addr Reg02
DTADR02         #       4       ; DMA Target     Addr Reg02
DMCMD02         #       4       ; DMA Command    Addr Reg02
DDADR03         #       4       ; DMA Descriptor Addr Reg03
DSADR03         #       4       ; DMA Source     Addr Reg03
DTADR03         #       4       ; DMA Target     Addr Reg03
DMCMD03         #       4       ; DMA Command    Addr Reg03
DDADR04         #       4       ; DMA Descriptor Addr Reg04
DSADR04         #       4       ; DMA Source     Addr Reg04
DTADR04         #       4       ; DMA Target     Addr Reg04
DMCMD04         #       4       ; DMA Command    Addr Reg04
DDADR05         #       4       ; DMA Descriptor Addr Reg05
DSADR05         #       4       ; DMA Source     Addr Reg05
DTADR05         #       4       ; DMA Target     Addr Reg05
DMCMD05         #       4       ; DMA Command    Addr Reg05
DDADR06         #       4       ; DMA Descriptor Addr Reg06
DSADR06         #       4       ; DMA Source     Addr Reg06
DTADR06         #       4       ; DMA Target     Addr Reg06
DMCMD06         #       4       ; DMA Command    Addr Reg06
DDADR07         #       4       ; DMA Descriptor Addr Reg07
DSADR07         #       4       ; DMA Source     Addr Reg07
DTADR07         #       4       ; DMA Target     Addr Reg07
DMCMD07         #       4       ; DMA Command    Addr Reg07
DDADR08         #       4       ; DMA Descriptor Addr Reg08
DSADR08         #       4       ; DMA Source     Addr Reg08
DTADR08         #       4       ; DMA Target     Addr Reg08
DMCMD08         #       4       ; DMA Command    Addr Reg08
DDADR09         #       4       ; DMA Descriptor Addr Reg09
DSADR09         #       4       ; DMA Source     Addr Reg09
DTADR09         #       4       ; DMA Target     Addr Reg09
DMCMD09         #       4       ; DMA Command    Addr Reg09
DDADR10         #       4       ; DMA Descriptor Addr Reg10
DSADR10         #       4       ; DMA Source     Addr Reg10
DTADR10         #       4       ; DMA Target     Addr Reg10
DMCMD10         #       4       ; DMA Command    Addr Reg10
DDADR11         #       4       ; DMA Descriptor Addr Reg11
DSADR11         #       4       ; DMA Source     Addr Reg11
DTADR11         #       4       ; DMA Target     Addr Reg11
DMCMD11         #       4       ; DMA Command    Addr Reg11
DDADR12         #       4       ; DMA Descriptor Addr Reg12
DSADR12         #       4       ; DMA Source     Addr Reg12
DTADR12         #       4       ; DMA Target     Addr Reg12
DMCMD12         #       4       ; DMA Command    Addr Reg12
DDADR13         #       4       ; DMA Descriptor Addr Reg13
DSADR13         #       4       ; DMA Source     Addr Reg13
DTADR13         #       4       ; DMA Target     Addr Reg13
DMCMD13         #       4       ; DMA Command    Addr Reg13
DDADR14         #       4       ; DMA Descriptor Addr Reg14
DSADR14         #       4       ; DMA Source     Addr Reg14
DTADR14         #       4       ; DMA Target     Addr Reg14
DMCMD14         #       4       ; DMA Command    Addr Reg14
DDADR15         #       4       ; DMA Descriptor Addr Reg15
DSADR15         #       4       ; DMA Source     Addr Reg15
DTADR15         #       4       ; DMA Target     Addr Reg15
DMCMD15         #       4       ; DMA Command    Addr Reg15

; Full Function UART
                ^       REG_Base + &100000
FFDLL           #       0       ; Divisor latch low reg (DLAB=1) (r/w)
FFRBR           #       0       ; Rx buffer (r/o)
FFTHR           #       0       ; Tx holding reg (w/o)
FFDLH           #       4       ; Divisor latch hi reg (DLAB=1) (r/w)
FFIER           #       4       ; Int Enable Reg (r/w)
FFIIR           #       0       ; Int ID reg (r/o)
FFFCR           #       4       ; FIFO Control reg (w/o)
FFLCR           #       4       ; Line control reg (r/w)
FFMCR           #       4       ; Modem control reg (r/w)
FFLSR           #       4       ; Line status reg (r/o)
FFMSR           #       4       ; Modem starus reg (r/o)
FFSPR           #       4       ; scratchpad reg (r/w)
FFISR           #       4       ; infra red selection reg (r/w)
                
; BlueTooth UART
                ^       REG_Base + &200000
BTDLL           #       0       ; Divisor latch low reg (DLAB=1) (r/w)
BTRBR           #       0       ; Rx buffer (r/o)
BTTHR           #       0       ; Tx holding reg (w/o)
BTDLH           #       4       ; Divisor latch hi reg (DLAB=1) (r/w)
BTIER           #       4       ; Int Enable Reg (r/w)
BTIIR           #       0       ; Int ID reg (r/o)
BTFCR           #       4       ; FIFO Control reg (w/o)
BTLCR           #       4       ; Line control reg (r/w)
BTMCR           #       4       ; Modem control reg (r/w)
BTLSR           #       4       ; Line status reg (r/o)
BTMSR           #       4       ; Modem starus reg (r/o)
BTSPR           #       4       ; scratchpad reg (r/w)
BTISR           #       4       ; infra red selection reg (r/w)

; I2C   .. note this offset will be stored in workspace
I2CB1           *       &000080
I2CB2           *       &001600
I2CB3           *       &300000
                ^       REG_Base + &301680
I2C_BASEADD     #       0
                ^       0       ; use as offset from I2C_BASEADD               
IBMR            #       4       ; I2C bus monitor reg 
                #       4
IDBR            #       4       ; I2C data buffer reg
                #       4
ICR             #       4       ; I2C control reg
                #       4
ISR             #       4       ; I2C Status reg
                #       4
ISAR            #       4       ; I2C Slave address reg

; I2S
                ^       REG_Base + &400000
SACR0           #       4       ; global control reg
SACR1           #       4       ; Serial audio I2S MSB justified control reg
                #       4
SASR0           #       4       ; Serial audio I2S MSB justified i/f + fifo status                
                #       4
SAIMR           #       4       ; Serial audio interrupt mask reg
SAICR           #       4       ; Serial audio interrupt clear reg
                #       &60 -&1c
SADIV           #       4       ; Audio clock divider reg
                #       &80 - &64
SADR            #       4       ; Serial audio Data Reg (Tx + RX FIFO access)

; AC97
                ^       REG_Base + &500000

; UDC (USB Device controller - target mode only)
                ^       REG_Base + &600000

; Standard UART
                ^       REG_Base + &700000
STDLL           #       0       ; Divisor latch low reg (DLAB=1) (r/w)
STRBR           #       0       ; Rx buffer (r/o)
STTHR           #       0       ; Tx holding reg (w/o)
STDLH           #       4       ; Divisor latch hi reg (DLAB=1) (r/w)
STIER           #       4       ; Int Enable Reg (r/w)
STIIR           #       0       ; Int ID reg (r/o)
STFCR           #       4       ; FIFO Control reg (w/o)
STLCR           #       4       ; Line control reg (r/w)
STMCR           #       4       ; Modem control reg (r/w)
STLSR           #       4       ; Line status reg (r/o)
                #       4       ; 
STSPR           #       4       ; scratchpad reg (r/w)
STISR           #       4       ; infra red selection reg (r/w)

; ICP
                ^       REG_Base + &800000
ICCR0           #       4       ; ICP control reg0
ICCR1           #       4       ; ICP control reg1
ICCR2           #       4       ; ICP control reg2
ICDR            #       4       ; ICP data reg
                #       4       
ICSR0           #       4       ; ICP status reg0
ICSR1           #       4       ; ICP status reg1

; RTC
                ^       REG_Base + &900000
RCNR            #       4       ; RTC count reg
RTAR            #       4       ; RTC Alarm reg
RTSR            #       4       ; RTC Status reg
RTTR            #       4       ; RTC timer trim reg

; OS Timer
                ^       REG_Base + &0a00000
OSMR0           #       4       ; OS timer match reg0
OSMR1           #       4       ; OS timer match reg1
OSMR2           #       4       ; OS timer match reg2
OSMR3           #       4       ; OS timer match reg3
OSCR            #       4       ; OS timer counter reg
OSSR            #       4       ; OS timer status reg
OWER            #       4       ; OS timer watchdog enable
OIER            #       4       ; OS timer int enable


; PWM0
                ^       REG_Base + &0b00000
PWM_CTRL0       #       4       ; PWM 0 Control reg
PWM_DUTY0       #       4       ; PWM 0 Duty cycle reg
PWM_PERD0       #       4       ; PWM 0 Period control reg                                                          

; PWM1
                ^       REG_Base + &0c00000
PWM_CTRL1       #       4       ; PWM 1 Control reg
PWM_DUTY1       #       4       ; PWM 1 Duty cycle reg
PWM_PERD1       #       4       ; PWM 1 Period control reg                                                          

; interrupt control
                ^       REG_Base + &0d00000
ICIP            #       4       ; IRQController IRQ pending reg  
ICMR            #       4       ; IRQController IRQ mask reg
ICLR            #       4       ; IRQController IRQ level reg
ICFP            #       4       ; IRQController FIQ pending reg
ICPR            #       4       ; IRQController pending reg 
ICCR            #       4       ; IRQController control reg 

; GPIO
                ^       REG_Base + &0e00000
GPLR0           #       4        ; GPIO pin level reg GPIO<31:0>
GPLR1           #       4        ; GPIO pin level reg GPIO<63:32>
GPLR2           #       4        ; GPIO pin level reg GPIO<80:64>
GPDR0           #       4        ; GPIO pin direction reg GPIO<31:0>
GPDR1           #       4        ; GPIO pin direction reg GPIO<63:32>
GPDR2           #       4        ; GPIO pin direction reg GPIO<80:64>
GPSR0           #       4        ; GPIO pin output set reg GPIO<31:0>
GPSR1           #       4        ; GPIO pin output set reg GPIO<63:32>
GPSR2           #       4        ; GPIO pin output set reg GPIO<80:64>
GPCR0           #       4        ; GPIO pin output clear reg GPIO<31:0>
GPCR1           #       4        ; GPIO pin output clear reg GPIO<63:32>
GPCR2           #       4        ; GPIO pin output clear reg GPIO<80:64>
GRER0           #       4        ; GPIO pin rising edge detect reg GPIO<31:0>
GRER1           #       4        ; GPIO pin rising edge detect reg GPIO<63:32>
GRER2           #       4        ; GPIO pin rising edge detect reg GPIO<80:64>
GFER0           #       4        ; GPIO pin falling edge detect reg GPIO<31:0>
GFER1           #       4        ; GPIO pin falling edge detect reg GPIO<63:32>
GFER2           #       4        ; GPIO pin falling edge detect reg GPIO<80:64>
GEDR0           #       4        ; GPIO pin edge detect status reg GPIO<31:0>
GEDR1           #       4        ; GPIO pin edge detect status reg GPIO<63:32>
GEDR2           #       4        ; GPIO pin edge detect status reg GPIO<80:64>
GAFR0_L         #       4        ; GPIO alt function select reg GPIO <15:0>
GAFR0_U         #       4        ; GPIO alt function select reg GPIO <31:16>
GAFR1_L         #       4        ; GPIO alt function select reg GPIO <47:32>
GAFR1_U         #       4        ; GPIO alt function select reg GPIO <63:48>
GAFR2_L         #       4        ; GPIO alt function select reg GPIO <79:64>
GAFR2_U         #       4        ; GPIO alt function select reg GPIO <80>

; power management + reset control
                ^       REG_Base + &0f00000
PMCR            #       4        ; Power manager Control reg
PSSR            #       4        ; Power manager Sleep status reg
PSPR            #       4        ; Power manager Scratchpad reg
PWER            #       4        ; Power manager Wake-up enable reg
PRER            #       4        ; Power manager GPIO rising edge detect enable
PFER            #       4        ; Power manager GPIO falling edge detect enable
PEDR            #       4        ; Power manager GPIO edge detect status
PCFR            #       4        ; Power manager General config reg
PGSR0           #       4        ; Power manager GPIO sleep state reg GPIO <31:0>
PGSR1           #       4        ; Power manager GPIO sleep state reg GPIO <63:32>
PGSR2           #       4        ; Power manager GPIO sleep state reg GPIO <84:64>
                #       4         
RCSR            #       4        ; Reset controller status reg

; SSP
                ^       REG_Base + &1000000
SSCR0           #       4        ; SSP control reg0
SSCR1           #       4        ; SSP control reg1
SSSR            #       4        ; SSP status reg
SSITR           #       4        ; SSP interrupt test reg

; MMC controller
                ^       REG_Base + &1100000
MMC_STRPCL      #       4        ; start/stop MMC clock
MMC_STAT        #       4        ; MMC status reg (r/o)
MMC_CLKRT       #       4        ; MMC clock rate
MMC_SPI         #       4        ; SPI control mode mits
MMC_CMDAT       #       4        ; CMD/Resp/data sequence bits
MMC_RESTO       #       4        ; expected response timeout
MMC_RDTO        #       4        ; expected dtat read timeout
MMC_BLKLEN      #       4        ; block length for transaction
MMC_NOB         #       4        ; num of blocks for block mode
MMC_PRTBUF      #       4        ; partiol MMC tx FIFO written
MMC_I_MASK      #       4        ; interrupt mask
MMC_I_REG       #       4        ; int reg (r/o)
MMC_CMD         #       4        ; index of current command
MMC_ARGH        #       4        ; MSW of curr cmd argument
MMC_ARGL        #       4        ; LSW of curr cmd argument
MMC_RES         #       4        ; response FIFO (r/o)
MMC_RXFIFO      #       4        ; rx FIFO (r/o)
MMC_TXFIFO      #       4        ; tx FIFO (w/o)

; Clocks controller
                ^       REG_Base + &1300000
CCCR            #       4        ; core clock config reg
CKEN            #       4        ; clock enable reg
OSCC            #       4        ; oscillator config register

; Network SSP
                ^       REG_Base + &1400000

; Hardware UART
                ^       REG_Base + &1600000
HWDLL           #       0       ; Divisor latch low reg (DLAB=1) (r/w)
HWRBR           #       0       ; Rx buffer (r/o)
HWTHR           #       0       ; Tx holding reg (w/o)
HWDLH           #       4       ; Divisor latch hi reg (DLAB=1) (r/w)
HWIER           #       4       ; Int Enable Reg (r/w)
HWIIR           #       0       ; Int ID reg (r/o)
HWFCR           #       4       ; FIFO Control reg (w/o)
HWLCR           #       4       ; Line control reg (r/w)
HWMCR           #       4       ; Modem control reg (r/w)
HWLSR           #       4       ; Line status reg (r/o)
HWMSR           #       4       ; Modem starus reg (r/o)
HWSPR           #       4       ; scratchpad reg (r/w)
HWISR           #       4       ; infra red selection reg (r/w)
HWFOR           #       4       ; FIFO occupancy register (r/o)
HWABR           #       4       ; Auto baud control reg
HWACR           #       4       ; Auto baud count register

; LCD controller
                ^       REG_Base + &4000000


; Memory controller
                ^       REG_Base + &8000000
MDCNFG          #       4        ; SDRAM config reg 0
MDREFR          #       4        ; SDRAM refresh control reg
MSC0            #       4        ; static memory control reg0
MSC1            #       4        ; static memory control reg1
MSC2            #       4        ; static memory control reg2
MECR            #       4        ; expansion mem config reg (PCMCIA/CF)
                #       4        
SXCNFG          #       4        ; sync static mem control reg
                #       4         
SXMRS           #       4        ; MRS value to write to SMROM
MCMEM0          #       4        ; Card i/f common mem space skt 0 timing reg
MCMEM1          #       4        ; Card i/f common mem space skt 1 timing reg
MCATT0          #       4        ; Card i/f attribute space skt 0 timing reg
MCATT1          #       4        ; Card i/f attribute space skt 1 timing reg
MCIO0           #       4        ; Card i/f I/O space skt 0 timing reg
MCIO1           #       4        ; Card i/f I/O space skt 1 timing reg
MDMRS           #       4        ; MRS value to be written to SDRAM
BOOT_DEF        #       4        ; R/O boot time reg
                #       &58 - &48         
MDMRSLP         #       4        ; Low pwr SDRAM Mode reg set cfg reg
                #       &64 - &5c         
SA1111CR        #       4        ; SA1111 compatibility reg



; PXA255 irq bits == device numbers
Device_RTCALMATCH     *      31     ; 
Device_RTCHZTICKP     *      30     ; 
Device_OSTM3          *      29     ; 
Device_OSTM2          *      28     ; 
Device_OSTM1          *      27     ; 
Device_OSTM0          *      26     ; 
Device_DMA            *      25     ; 
Device_SSP            *      24     ; 
Device_MMC            *      23     ; 
Device_FFUART         *      22     ; 
Device_BTUART         *      21     ; 
Device_STUART         *      20     ; 
Device_ICP            *      19     ; 
Device_I2C            *      18     ; 
Device_LCD            *      17     ; 
Device_NWSSP          *      16     ; 
Device_AC97           *      14     ; 
Device_I2S            *      13     ; 
Device_PMU            *      12     ; 
Device_USBT           *      11     ; 
Device_GPIO84_2       *      10     ; 
Device_GPIO1          *      9      ; 
Device_GPIO0          *      8      ; 
Device_HWUART         *      7      ; 


;                ^       PMMR_Base+&1680-PMMR
;IIC_ICR0        #       4       ; IIC Control Register
;IIC_ISR0        #       4       ; IIC Status Register
;IIC_ISAR0       #       4       ; IIC Slave Address Register
;IIC_IDBR0       #       4       ; IIC Data Buffer Register
;                #       4
;IIC_IBMR0       #       4       ; IIC Bus Monitor Register
;                #       8
;IIC_ICR1        #       4
;IIC_ISR1        #       4
;IIC_ISAR1       #       4
;IIC_IDBR1       #       4
;                #       4
;IIC_IBMR1       #       4
;                #       8
;
ICR_Fast        *       1:SHL:15
ICR_Reset       *       1:SHL:14
ICR_SlaveAddrIE *       1:SHL:13
ICR_ArbLossIE   *       1:SHL:12
ICR_SlaveStopIE *       1:SHL:11
ICR_BusErrorIE  *       1:SHL:10
ICR_ReceiveIE   *       1:SHL:9
ICR_TransmitIE  *       1:SHL:8
ICR_GenCallDisable *    1:SHL:7
ICR_Enable      *       1:SHL:6
ICR_SCLEnable   *       1:SHL:5
ICR_Abort       *       1:SHL:4
ICR_Transfer    *       1:SHL:3
ICR_Nack        *       1:SHL:2
ICR_Stop        *       1:SHL:1
ICR_Start       *       1:SHL:0

ISR_BusError    *       1:SHL:10
ISR_SlaveAddr   *       1:SHL:9
ISR_GeneralCall *       1:SHL:8
ISR_ReceiveFull *       1:SHL:7
ISR_TransmitEmpty *     1:SHL:6
ISR_ArbLoss     *       1:SHL:5
ISR_SlaveStop   *       1:SHL:4
ISR_BusBusy     *       1:SHL:3
ISR_UnitBusy    *       1:SHL:2
ISR_Nack        *       1:SHL:1
ISR_RnW         *       1:SHL:0
;
ISR_AllInts     *       ISR_BusError+ISR_SlaveAddr+ISR_ReceiveFull+ISR_TransmitEmpty+ISR_ArbLoss+ISR_SlaveStop
;
;
; Timer details
;
TIMER_RATE      *       200000000

        MACRO
$label  ReadTMR0 $r,$cond
$label  MRC$cond p6, 0, $r, c0, c1
        MEND
        MACRO
$label  ReadTMR1 $r,$cond
$label  MRC$cond p6, 0, $r, c1, c1
        MEND
        MACRO
$label  ReadTCR0 $r,$cond
$label  MRC$cond p6, 0, $r, c2, c1
        MEND
        MACRO
$label  ReadTCR1 $r,$cond
$label  MRC$cond p6, 0, $r, c3, c1
        MEND
        MACRO
$label  ReadTRR0 $r,$cond
$label  MRC$cond p6, 0, $r, c4, c1
        MEND
        MACRO
$label  ReadTRR1 $r,$cond
$label  MRC$cond p6, 0, $r, c5, c1
        MEND
        MACRO
$label  ReadTISR $r,$cond
$label  MRC$cond p6, 0, $r, c6, c1
        MEND
        MACRO
$label  ReadWDTCR $r,$cond
$label  MRC$cond p6, 0, $r, c7, c1
        MEND

        MACRO
$label  WriteTMR0 $r,$cond
$label  MCR$cond p6, 0, $r, c0, c1
        MEND
        MACRO
$label  WriteTMR1 $r,$cond
$label  MCR$cond p6, 0, $r, c1, c1
        MEND
        MACRO
$label  WriteTCR0 $r,$cond
$label  MCR$cond p6, 0, $r, c2, c1
        MEND
        MACRO
$label  WriteTCR1 $r,$cond
$label  MCR$cond p6, 0, $r, c3, c1
        MEND
        MACRO
$label  WriteTRR0 $r,$cond
$label  MCR$cond p6, 0, $r, c4, c1
        MEND
        MACRO
$label  WriteTRR1 $r,$cond
$label  MCR$cond p6, 0, $r, c5, c1
        MEND
        MACRO
$label  WriteTISR $r,$cond
$label  MCR$cond p6, 0, $r, c6, c1
        MEND
        MACRO
$label  WriteWDTCR $r,$cond
$label  MCR$cond p6, 0, $r, c7, c1
        MEND

;
; Interrupt handling
;
;                ^       PMMR_Base+&7C0-PMMR
;DEVICEID        #       4
;GPOE            #       4       ; GPIO Output Enable
;GPID            #       4       ; GPIO Input Data
;GPOD            #       4       ; GPIO Ouptput Data
;INTCTL          #       4       ; don't use this - use coprocessor macros below
;INTSTR          #       4       ; don't use this - use coprocessor macros below
;IINTSRC         #       4       ; don't use this - use coprocessor macros below
;FINTSRC         #       4       ; don't use this - use coprocessor macros below
;
;; Extra devices (from peeking IOMD, subset of XINT0)
;Device_FlpIndex *       2
;Device_PFIQ     *       8
;Device_PIC      *       10
;Device_Podule   *       13
;
;Device_IRQA_0   *       0
;Device_IRQB_0   *       8
;
;; Devices in south bridge (subsets of PIC)
;;                       16        IRQ0 (timer)
;Device_AC97     *       17      ; IRQ1
;Device_SlavePIC *       18      ; IRQ2 (-> IRQ8..15)
;Device_ATA1     *       19      ; IRQ3
;Device_ATA2     *       20      ; IRQ4
;Device_USB1     *       21      ; IRQ5
;Device_USB2     *       22      ; IRQ6
;Device_FDC      *       23      ; IRQ7
;;               *       24      ; IRQ8 (reserved?)
;Device_UART1    *       25      ; IRQ9
;Device_UART2    *       26      ; IRQ10
;Device_Modem    *       27      ; IRQ11
;Device_SCI      *       28      ; IRQ12
;;               *       29        IRQ13 (reserved?)
;;               *       30        IRQ14
;;               *       31        IRQ15
;
;Device_MPIC_0   *       16
;Device_SPIC_0   *       24
;
;; Device numbers (shared between IRQ and FIQ). These map to the 80321's
;; INTCTL register.
;Device_DMA0_EOT *       32
;Device_DMA0_EOC *       33
;Device_DMA1_EOT *       34
;Device_DMA1_EOC *       35
;;                       36
;;                       37
;Device_AAU_EOT  *       38
;Device_AAU_EOC  *       39
;;                       40
;Device_Timer0   *       41
;Device_Timer1   *       42
;Device_IIC0     *       43
;Device_IIC1     *       44
;Device_MU       *       45
;Device_ATU_BIST *       46
;Device_PPM      *       47
;Device_PMU      *       48
;Device_PBIError *       49
;Device_ATUError *       50
;Device_MCUError *       51
;Device_DMA0Error *      52
;Device_DMA1Error *      53
;;                       54
;Device_AAUError *       55
;Device_MUError  *       56
;Device_SSP      *       57
;Device_Message  *       58
;Device_XINT0    *       59
;Device_XINT1    *       60
;Device_XINT2    *       61
;Device_XINT3    *       62
;Device_HPI      *       63
;
;Device_80321_0  *       32
;
;Device_IOMD     *       Device_XINT1

        MACRO
$label  ReadINTCTL $r,$cond
$label  MRC$cond p6, 0, $r, c0, c0
        MEND
        MACRO
$label  ReadINTSTR $r,$cond
$label  MRC$cond p6, 0, $r, c4, c0
        MEND
        MACRO
$label  ReadIINTSRC $r,$cond
$label  MRC$cond p6, 0, $r, c8, c0
        MEND
        MACRO
$label  ReadFINTSRC $r,$cond
$label  MRC$cond p6, 0, $r, c9, c0
        MEND

        MACRO
$label  WriteINTCTL $r,$cond
$label  MCR$cond p6, 0, $r, c0, c0
        MEND
        MACRO
$label  WriteINTSTR $r,$cond
$label  MCR$cond p6, 0, $r, c4, c0
        MEND
        MACRO
$label  WriteIINTSRC $r,$cond
$label  MCR$cond p6, 0, $r, c8, c0
        MEND
        MACRO
$label  WriteFINTSRC $r,$cond
$label  MCR$cond p6, 0, $r, c9, c0
        MEND

;; Fixed PCI IO space (eurch)
;
;IO_MasterPIC    *       &0020
;IO_SlavePIC     *       &00A0
;IO_UART3        *       &02F8
;IO_UART2        *       &03E8
;IO_Config       *       &03F0
;IO_ConfigIndex  *       &03F0
;IO_ConfigData   *       &03F1
;IO_FDC          *       &03F0
;IO_UART1        *       &03F8
;IO_MasterPICLevel *     &04D0
;IO_SlavePICLevel *      &04D1
;
;; IOMD space
;
;IRQSTA          *       &10
;IRQRQA          *       &14
;IRQCLRA         *       &14
;IRQMSKA         *       &18
;
;IRQSTB          *       &20             ; Raw status
;IRQRQB          *       &24             ; Masked request
;IRQMSKB         *       &28
;
;FIQST           *       &30
;FIQRQ           *       &34
;FIQMSK          *       &38
;
;ECTCR           *       &C8             ; Bit 1 strickly speaking
;
;IRQA_FlpIndex   *       1:SHL:2
;
;IRQB_PFIQ       *       1:SHL:0
;IRQB_SuperIO    *       1:SHL:2
;IRQB_Podule     *       1:SHL:5

        GET      Hdr:NetBook2

        END

