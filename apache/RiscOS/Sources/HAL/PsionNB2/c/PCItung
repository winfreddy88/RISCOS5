/* Copyright 2005 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdint.h>
#include <stdbool.h>
#include "pci.h"
/* Calling standard mungery - mustn't touch sb/v6 */
__global_reg(6) void *sb;

bool pci_known_int_line(pci_dev *d, int pin, int *line)
{
    #define Device_XINT0 32+27

    if (d->bus == 0)
    {
        *line = Device_XINT0 + (((pin - 1) + DEV(d->devfunc)) & 3);
        return true;
    }

    if (d->parent->dev.bus == 0 &&
        d->parent->dev.devfunc == DEVFUNC(8,0) &&
        (d->devfunc < DEVFUNC(8,0) ||
         d->devfunc >= DEVFUNC(10,0)))
    {
        switch (DEV(d->devfunc))
        {
           #define Device_PIC_base 16
           #define Device_AC97 Device_PIC_base+1
           #define Device_Modem Device_PIC_base+11
           #define Device_IDE Device_PIC_base+3
           #define Device_USB1 Device_PIC_base+5
           #define Device_USB2 Device_PIC_base+6
           case  1: *line = Device_AC97; break;
           case  3: *line = Device_Modem; break;
           case 10: *line = Device_USB2; break;
           case 11: *line = Device_IDE; break;
           case 15: *line = Device_USB1; break;
           default: *line = Device_XINT0; break;
        }
        return true;
    }

    return false;
}

