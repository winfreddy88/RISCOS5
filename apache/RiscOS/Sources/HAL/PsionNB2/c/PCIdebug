/* Copyright 2005 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdint.h>
#include <stdlib.h>
#include "pci.h"

struct cfg0
{
    uint16_t vendor;
    uint16_t device;
    uint16_t command;
    uint16_t status;
    uint8_t revision;
    uint8_t progif;
    uint16_t class;
    uint8_t cache_line_size;
    uint8_t latency;
    uint8_t header_type;
    uint8_t bist;
    uint32_t bar[6];
    uint32_t cardbus_cis;
    uint16_t subsystem_vendor;
    uint16_t subsystem_id;
    uint32_t rom_addr;
    uint8_t cap_ptr;
    uint32_t res1;
    uint8_t int_line;
    uint8_t int_pin;
    uint8_t min_gnt;
    uint8_t max_lat;
    char spare[192];
};

struct cfg1
{
    uint16_t vendor;
    uint16_t device;
    uint16_t command;
    uint16_t status;
    uint8_t revision;
    uint8_t progif;
    uint16_t class;
    uint8_t cache_line_size;
    uint8_t latency;
    uint8_t header_type;
    uint8_t bist;
    uint32_t bar[2];
    uint8_t primary;
    uint8_t secondary;
    uint8_t subordinate;
    uint8_t secondary_latency;
    uint8_t io_base;
    uint8_t io_limit;
    uint16_t secondary_status;
    uint16_t mem_base;
    uint16_t mem_limit;
    uint16_t pref_base;
    uint16_t pref_limit;
    uint32_t pref_base_upper;
    uint32_t pref_limit_upper;
    uint16_t io_base_upper;
    uint16_t io_limit_upper;
    uint8_t cap_ptr;
    uint32_t rom_addr;
    uint8_t int_line;
    uint8_t int_pin;
    uint16_t bridge_control;
    char spare[192];
};

struct cfg0 Ethernet[2] =
{
    [0].vendor = 0x8086,
    [0].device = 0x1234,
    [0].class = 0x0200,
    [0].header_type = 0x00,
    [0].bar[0] = PCI_BASE_ADDRESS_SPACE_MEMORY | PCI_BASE_ADDRESS_MEM_TYPE_32,
    [1].bar[0] = PCI_BASE_ADDRESS_MEM_MASK & 0xFFFF0000,
    [0].bar[1] = PCI_BASE_ADDRESS_SPACE_MEMORY | PCI_BASE_ADDRESS_MEM_TYPE_32,
    [1].bar[1] = PCI_BASE_ADDRESS_MEM_MASK & 0xFFFFFF00,
    [0].bar[2] = PCI_BASE_ADDRESS_SPACE_MEMORY | PCI_BASE_ADDRESS_MEM_TYPE_32 | PCI_BASE_ADDRESS_MEM_PREFETCH,
    [1].bar[2] = PCI_BASE_ADDRESS_MEM_MASK & 0xFFF00000,
};

struct cfg0 Serial[2] =
{
    [0].vendor = 0x8586,
    [0].device = 0x5534,
    [0].class = 0x0423,
    [0].header_type = 0x00,
    [0].bar[0] = PCI_BASE_ADDRESS_SPACE_IO,
    [1].bar[0] = PCI_BASE_ADDRESS_IO_MASK & 0xFFFFFF80,
    [0].bar[1] = PCI_BASE_ADDRESS_SPACE_MEMORY | PCI_BASE_ADDRESS_MEM_TYPE_32,
    [1].bar[1] = PCI_BASE_ADDRESS_MEM_MASK & 0xFF000000,
    [0].bar[2] = PCI_BASE_ADDRESS_SPACE_MEMORY | PCI_BASE_ADDRESS_MEM_TYPE_32 | PCI_BASE_ADDRESS_MEM_PREFETCH,
    [1].bar[2] = PCI_BASE_ADDRESS_MEM_MASK & 0xF0000000,
};

struct cfg1 Bridge1[2] =
{
    [0].vendor = 0x8086,
    [0].device = 0x1238,
    [0].class = 0x0604,
    [0].header_type = 0x01,
    [1].mem_base = 0xfff0,
    [1].mem_limit = 0xfff0,
    [1].pref_base = 0xfff0,
    [1].pref_limit = 0xfff0,
    [1].io_base = 0xf0,
    [1].io_limit = 0xf0,
    [1].primary = 0xff,
    [1].secondary = 0xff,
    [1].subordinate = 0xff
};

struct cfg1 Bridge2[2] =
{
    [0].vendor = 0x8086,
    [0].device = 0x1238,
    [0].class = 0x0604,
    [0].header_type = 0x01,
    [1].mem_base = 0xfff0,
    [1].mem_limit = 0xfff0,
    [1].pref_base = 0xfff0,
    [1].pref_limit = 0xfff0,
    [1].io_base = 0xf0,
    [1].io_limit = 0xf0,
    [1].primary = 0xff,
    [1].secondary = 0xff,
    [1].subordinate = 0xff
};

struct cfg1 Bridge3[2] =
{
    [0].vendor = 0x8086,
    [0].device = 0x1238,
    [0].class = 0x0604,
    [0].header_type = 0x01,
    [1].mem_base = 0xfff0,
    [1].mem_limit = 0xfff0,
    [1].pref_base = 0xfff0,
    [1].pref_limit = 0xfff0,
    [1].io_base = 0xf0,
    [1].io_limit = 0xf0,
    [1].primary = 0xff,
    [1].secondary = 0xff,
    [1].subordinate = 0xff
};

struct cfg1 Bridge4[2] =
{
    [0].vendor = 0x8086,
    [0].device = 0x1238,
    [0].class = 0x0604,
    [0].header_type = 0x01,
    [1].mem_base = 0xfff0,
    [1].mem_limit = 0xfff0,
    [1].pref_base = 0xfff0,
    [1].pref_limit = 0xfff0,
    [1].io_base = 0xf0,
    [1].io_limit = 0xf0,
    [1].primary = 0xff,
    [1].secondary = 0xff,
    [1].subordinate = 0xff
};

void *find_cfg(unsigned bus, unsigned devfn)
{
    if (bus == 0)
    {
        switch (devfn)
        {
        case 0x08:
            return &Ethernet;
        case 0x40:
            return &Bridge1;
        case 0x48:
            return &Bridge2;
        case 0x50:
            return &Bridge3;
        }
    }
    else if (bus == Bridge1[0].secondary)
    {
        switch (devfn)
        {
        case 0x00:
            return &Serial;
        }
    }
    else if (bus == Bridge3[0].secondary)
    {
        switch (devfn)
        {
        case 0x08:
            return &Bridge4;
        }
    }

    return NULL;
}



uint8_t HAL_PCI_ReadConfigByte(unsigned bus, unsigned devfn, unsigned address)
{
    uint8_t *cfg = find_cfg(bus, devfn);
    if (!cfg) return 0xFF;
    return cfg[address];
}

uint16_t HAL_PCI_ReadConfigHalfword(unsigned bus, unsigned devfn, unsigned address)
{
    uint16_t *cfg = find_cfg(bus, devfn);
    if (!cfg) return 0xFFFF;
    return cfg[address >> 1];
}

uint32_t HAL_PCI_ReadConfigWord(unsigned bus, unsigned devfn, unsigned address)
{
    uint32_t *cfg = find_cfg(bus, devfn);
    if (!cfg) return 0xFFFFFFFF;
    return cfg[address >> 2];
}

void HAL_PCI_WriteConfigByte(unsigned bus, unsigned devfn, unsigned address, uint8_t value)
{
    uint8_t *cfg = find_cfg(bus, devfn);
    uint8_t *mask;
    if (!cfg) return;

    cfg += address;
    mask = cfg + 256;
    *cfg = (*cfg &~ *mask) | (value & *mask);
}

void HAL_PCI_WriteConfigHalfword(unsigned bus, unsigned devfn, unsigned address, uint16_t value)
{
    uint16_t *cfg = find_cfg(bus, devfn);
    uint16_t *mask;
    if (!cfg) return;

    cfg += address >> 1;
    mask = cfg + 128;
    *cfg = (*cfg &~ *mask) | (value & *mask);
}

void HAL_PCI_WriteConfigWord(unsigned bus, unsigned devfn, unsigned address, uint32_t value)
{
    uint32_t *cfg = find_cfg(bus, devfn);
    uint32_t *mask;
    if (!cfg) return;

    cfg += address >> 2;
    mask = cfg + 64;
    *cfg = (*cfg &~ *mask) | (value & *mask);
}

void panic(void)
{
    exit(1);
}

void *hal_alloc(size_t n)
{
    return calloc(n, 1);
}

void hal_free(void *p)
{
    free(p);
}

int main(void)
{
    void pci_initialise(void);

    pci_initialise();

    return 1;
}

