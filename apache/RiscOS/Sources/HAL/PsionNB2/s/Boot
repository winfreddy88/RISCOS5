; Copyright 2005 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>

        GET     Hdr:MEMM.ARM600

        GET     Hdr:Proc
        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.StaticWS
        GET     hdr.pxa255

; This version assumes a RISC OS image starting 64K after us.

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        IMPORT  get_end_of_ram
        EXPORT  rom_checkedout_ok

        IMPORT  HAL_Base
;        IMPORT  generate_POR_flags
;        IMPORT  HAL_PCIWriteConfigHalfword

; v8 is used as pointer to RISC OS entry table throughout pre-MMU stage.
        MACRO
        CallOSM $entry, $reg
        LDR     ip, [v8, #$entry*4]
        MOV     lr, pc
        ADD     pc, v8, ip
        MEND

        MACRO
        CallOS  $entry, $tailcall
        ASSERT  $entry <= HighestOSEntry
 [ "$tailcall"=""
        MOV     lr, pc
 |
   [ "$tailcall"<>"tailcall"
        ! 0, "Unrecognised parameter to CallOS"
   ]
 ]
        LDR     pc, OSentries + 4*$entry
        MEND

rom_checkedout_ok

 [ RAM_Base <> Boot_RAM_Base

        SUB     a3, a4, #ROM_Base
        SUB     pc, pc, a3
        NOP

        MCR     p15, 0, a1, c7, c5      ; invalidate I cache again

; now move the RAM into final position

        STMFD   sp!, {a1-a4}
        BL      move_ram
        LDMFD   sp!, {a1-a4}

; and back into RAM, at final position
        ADD     a3, a3, #RAM_Base - Boot_RAM_Base
        ADD     a4, a4, #RAM_Base - Boot_RAM_Base
        ADD     v8, v8, #RAM_Base - Boot_RAM_Base
        ADD     pc, pc, a3
        NOP
 ]

        LDMFD   sp!, {v1-v3}

        MOV     sb, #0

        BL      get_end_of_ram
        MOV     a3, a1

        MOV     a1, #4:SHL:8
        LDR     a2, =RAM_Base
        ADRL    lr, HAL_Base                    ; bottom of HAL, may be top of RAM
        CMP     lr, a3
        MOVLO   a3, lr
        LDR     a4, =&FFFFFFFF
        MOV     ip, #0
        STR     ip, [sp, #-4]!
        CallOSM OS_AddRAM
        STR     a1, [sp]
        ADD     sp, sp, #4

        MOV     v1, a1
;        BL      generate_POR_flags
        ORR     a1, a1, #OSStartFlag_RAMCleared

        ADRL    a2, HAL_Base + 64*1024          ; a2 -> RISC OS image
        ADR     a3, HALdescriptor
        MOV     a4, v1
        CallOSM OS_Start


HALdescriptor   DATA
        DCD     HALFlag_NCNBWorkspace
        DCD     HAL_Base - HALdescriptor
        DCD     64*1024
        DCD     HAL_EntryTable - HALdescriptor
        DCD     HAL_Entries
        DCD     HAL_WsSize


        MACRO
        HALEntry $name
        ASSERT  (. - HAL_EntryTable) / 4 = EntryNo_$name
        DCD     $name - HAL_EntryTable
        MEND

        MACRO
        NullEntry
        DCD     HAL_Null - HAL_EntryTable
        MEND

        IMPORT   Video_init
        IMPORT   Interrupt_Init
        IMPORT   Timer_Init
;        IMPORT   HAL_DebugInit
;        IMPORT   HAL_DebugInit2
        IMPORT   I2C_Init
;        IMPORT   ATA_Init
;        IMPORT   M1535DMA_Init
        IMPORT   Audio_Init

        IMPORT   HAL_IRQEnable
        IMPORT   HAL_IRQDisable
        IMPORT   HAL_IRQClear
        IMPORT   HAL_IRQSource
        IMPORT   HAL_IRQStatus
        IMPORT   HAL_FIQEnable
        IMPORT   HAL_FIQDisable
        IMPORT   HAL_FIQDisableAll
        IMPORT   HAL_FIQClear
        IMPORT   HAL_FIQSource
        IMPORT   HAL_FIQStatus

        IMPORT   HAL_Timers
        IMPORT   HAL_TimerDevice
        IMPORT   HAL_TimerGranularity
        IMPORT   HAL_TimerMaxPeriod
        IMPORT   HAL_TimerSetPeriod
        IMPORT   HAL_TimerPeriod
        IMPORT   HAL_TimerReadCountdown

        IMPORT   HAL_CounterRate
        IMPORT   HAL_CounterPeriod
        IMPORT   HAL_CounterRead
        IMPORT   HAL_CounterDelay

        IMPORT   HAL_IICBuses
        IMPORT   HAL_IICType
        IMPORT   HAL_IICDevice
        IMPORT   HAL_IICTransfer
        IMPORT   HAL_IICMonitorTransfer

        IMPORT   HAL_NVMemoryType
        IMPORT   HAL_NVMemorySize
        IMPORT   HAL_NVMemoryPageSize
        IMPORT   HAL_NVMemoryProtectedSize
        IMPORT   HAL_NVMemoryProtection
        IMPORT   HAL_NVMemoryIICAddress

        IMPORT   HAL_VideoFlybackDevice
        IMPORT   HAL_Video_SetMode
        IMPORT   HAL_Video_WritePaletteEntry
        IMPORT   HAL_Video_WritePaletteEntries
        IMPORT   HAL_Video_ReadPaletteEntry
        IMPORT   HAL_Video_SetInterlace
        IMPORT   HAL_Video_SetBlank
        IMPORT   HAL_Video_SetPowerSave
        IMPORT   HAL_Video_UpdatePointer
        IMPORT   HAL_Video_SetDAG
        IMPORT   HAL_Video_VetMode
        IMPORT   HAL_Video_PixelFormats
        IMPORT   HAL_Video_Features
        IMPORT   HAL_Video_BufferAlignment
        IMPORT   HAL_Video_OutputFormat

        IMPORT   HAL_UARTPorts
        IMPORT   HAL_UARTStartUp
        IMPORT   HAL_UARTShutdown
        IMPORT   HAL_UARTFeatures
        IMPORT   HAL_UARTReceiveByte
        IMPORT   HAL_UARTTransmitByte
        IMPORT   HAL_UARTLineStatus
        IMPORT   HAL_UARTInterruptEnable
        IMPORT   HAL_UARTRate
        IMPORT   HAL_UARTFormat
        IMPORT   HAL_UARTFIFOSize
        IMPORT   HAL_UARTFIFOClear
        IMPORT   HAL_UARTFIFOEnable
        IMPORT   HAL_UARTFIFOThreshold
        IMPORT   HAL_UARTInterruptID
        IMPORT   HAL_UARTBreak
        IMPORT   HAL_UARTModemControl
        IMPORT   HAL_UARTModemStatus
        IMPORT   HAL_UARTDevice

        IMPORT   HAL_MachineID

        IMPORT   HAL_DebugRX
        IMPORT   HAL_DebugTX

;        IMPORT   HAL_PCIFeatures
;        IMPORT   HAL_PCIReadConfigByte
;        IMPORT   HAL_PCIReadConfigHalfword
;        IMPORT   HAL_PCIReadConfigWord
;        IMPORT   HAL_PCIWriteConfigByte
;        IMPORT   HAL_PCIWriteConfigHalfword
;        IMPORT   HAL_PCIWriteConfigWord
;;       IMPORT   HAL_PCISpecialCycle
;        IMPORT   HAL_PCISlotTable
;        IMPORT   HAL_PCIAddresses

;        IMPORT   HAL_ATAControllerInfo
;        IMPORT   HAL_ATASetModes
;        IMPORT   HAL_ATACableID

        IMPORT   HAL_KbdScanSetup
        IMPORT   HAL_KbdScan
        IMPORT   HAL_KbdScanFinish
        IMPORT   HAL_KbdScanInterrupt

HAL_EntryTable  DATA
        HALEntry HAL_Init

        HALEntry HAL_IRQEnable
        HALEntry HAL_IRQDisable
        HALEntry HAL_IRQClear
        HALEntry HAL_IRQSource
        HALEntry HAL_IRQStatus
        HALEntry HAL_FIQEnable
        HALEntry HAL_FIQDisable
        HALEntry HAL_FIQDisableAll
        HALEntry HAL_FIQClear
        HALEntry HAL_FIQSource
        HALEntry HAL_FIQStatus

        HALEntry HAL_Timers
        HALEntry HAL_TimerDevice
        HALEntry HAL_TimerGranularity
        HALEntry HAL_TimerMaxPeriod
        HALEntry HAL_TimerSetPeriod
        HALEntry HAL_TimerPeriod
        HALEntry HAL_TimerReadCountdown

        HALEntry HAL_CounterRate
        HALEntry HAL_CounterPeriod
        HALEntry HAL_CounterRead
        HALEntry HAL_CounterDelay

        HALEntry HAL_NVMemoryType
        HALEntry HAL_NVMemorySize
        HALEntry HAL_NVMemoryPageSize
        HALEntry HAL_NVMemoryProtectedSize
        HALEntry HAL_NVMemoryProtection
        HALEntry HAL_NVMemoryIICAddress
        NullEntry ; HAL_NVMemoryRead 
        NullEntry ; HAL_NVMemoryWrite

        HALEntry HAL_IICBuses
        HALEntry HAL_IICType
        NullEntry ; HAL_IICSetLines   
        NullEntry ; HAL_IICReadLines  
        HALEntry HAL_IICDevice
        HALEntry HAL_IICTransfer
        HALEntry HAL_IICMonitorTransfer

        HALEntry HAL_VideoFlybackDevice
        HALEntry HAL_Video_SetMode
        HALEntry HAL_Video_WritePaletteEntry
        HALEntry HAL_Video_WritePaletteEntries
        HALEntry HAL_Video_ReadPaletteEntry
        HALEntry HAL_Video_SetInterlace
        HALEntry HAL_Video_SetBlank
        HALEntry HAL_Video_SetPowerSave
        HALEntry HAL_Video_UpdatePointer
        HALEntry HAL_Video_SetDAG
        HALEntry HAL_Video_VetMode
        HALEntry HAL_Video_PixelFormats
        HALEntry HAL_Video_Features
        HALEntry HAL_Video_BufferAlignment
        HALEntry HAL_Video_OutputFormat

        NullEntry ; HALEntry HAL_MatrixColumns
        NullEntry ; HALEntry HAL_MatrixScan

        NullEntry ; HALEntry HAL_TouchscreenType
        NullEntry ; HALEntry HAL_TouchscreenRead
        NullEntry ; HALEntry HAL_TouchscreenMode
        NullEntry ; HALEntry HAL_TouchscreenMeasure

        HALEntry HAL_MachineID

        HALEntry HAL_ControllerAddress
        HALEntry HAL_HardwareInfo
        HALEntry HAL_SuperIOInfo
        HALEntry HAL_PlatformInfo
        NullEntry ; HALEntry HAL_CleanerSpace

        HALEntry HAL_UARTPorts
        HALEntry HAL_UARTStartUp
        HALEntry HAL_UARTShutdown
        HALEntry HAL_UARTFeatures
        HALEntry HAL_UARTReceiveByte
        HALEntry HAL_UARTTransmitByte
        HALEntry HAL_UARTLineStatus
        HALEntry HAL_UARTInterruptEnable
        HALEntry HAL_UARTRate
        HALEntry HAL_UARTFormat
        HALEntry HAL_UARTFIFOSize
        HALEntry HAL_UARTFIFOClear
        HALEntry HAL_UARTFIFOEnable
        HALEntry HAL_UARTFIFOThreshold
        HALEntry HAL_UARTInterruptID
        HALEntry HAL_UARTBreak
        HALEntry HAL_UARTModemControl
        HALEntry HAL_UARTModemStatus
        HALEntry HAL_UARTDevice

        HALEntry HAL_Reset

        HALEntry HAL_DebugRX
        HALEntry HAL_DebugTX

        NullEntry ; HALEntry HAL_PCIFeatures
        NullEntry ; HALEntry HAL_PCIReadConfigByte
        NullEntry ; HALEntry HAL_PCIReadConfigHalfword
        NullEntry ; HALEntry HAL_PCIReadConfigWord
        NullEntry ; HALEntry HAL_PCIWriteConfigByte
        NullEntry ; HALEntry HAL_PCIWriteConfigHalfword
        NullEntry ; HALEntry HAL_PCIWriteConfigWord
        NullEntry ; HALEntry HAL_PCISpecialCycle
        NullEntry ; HALEntry HAL_PCISlotTable
        NullEntry ; HALEntry HAL_PCIAddresses

        NullEntry ; HALEntry HAL_ATAControllerInfo
        NullEntry ; HALEntry HAL_ATASetModes
        NullEntry ; HALEntry HAL_ATACableID

        HALEntry HAL_InitDevices

        HALEntry HAL_KbdScanSetup
        HALEntry HAL_KbdScan
        HALEntry HAL_KbdScanFinish
        HALEntry HAL_KbdScanInterrupt

        HALEntry HAL_PhysInfo

        NullEntry ;HALEntry HAL_USBControllerInfo

        NullEntry ;HALEntry HAL_MonitorLeadID

        NullEntry ;HALEntry HAL_Video_Render

        NullEntry ;HALEntry HAL_USBPortPower
        NullEntry ;HALEntry HAL_USBPortStatus
        NullEntry ;HALEntry HAL_USBPortIRQ


HAL_Entries     * (.-HAL_EntryTable)/4


;--------------------------------------------------------------------------------------


HAL_Init
        Entry

        STR     a2, NCNBWorkspace

        BL      SetUpOSEntries

        MOV     a1, #0
        LDR     a2, =IO_Base
        MOV     a3, #IO_Size
        CallOS  OS_MapInIO
        STR     a1, IO_Address
;        ADD     a1, a1, #&00200000    ; Offset to base of IOMD
;        STR     a1, IOMD_Address

;        MOV     a1, #0
;        LDR     a2, =PMMR_Base
;        LDR     a3, =PMMR_Size
;        CallOS  OS_MapInIO
;        ADD     a1, a1, #PMMR - PMMR_Base
;        STR     a1, PMMR_Address

;        MOV     a1, #0
;        LDR     a2, =EASI_Base
;        MOV     a3, #EASI_Size
;        CallOS  OS_MapInIO
;        STR     a1, EASI_Address

;        MOV     a1, #0
;        LDR     a2, =PCI_IO_Base
;        MOV     a3, #PCI_IO_Size
;        CallOS  OS_MapInIO
;        STR     a1, PCI_IO_Address

        BL      Timer_Init

        BL      Video_init

;        BL      HAL_DebugInit

        BL      I2C_Init

;        BL      HAL_DebugInit2

        BL      Interrupt_Init

;        BL      ATA_Init

        MOV     a1,#0
        BL      HAL_UARTStartUp
;        MOV     a1,#1
;        BL      HAL_UARTStartUp
;        MOV     a1,#2
;        BL      HAL_UARTStartUp

        EXIT

; Initialise and relocate the entry table.
SetUpOSEntries  ROUT
        STR     a1, OSheader
        LDR     a2, [a1, #OSHdr_NumEntries]
        CMP     a2, #HighestOSEntry+1
        MOVHI   a2, #HighestOSEntry+1

        ADR     a3, OSentries
        LDR     a4, [a1, #OSHdr_Entries]
        ADD     a4, a4, a1

05      SUBS    a2, a2, #1
        LDR     ip, [a4, a2, LSL #2]
        ADD     ip, ip, a4
        STR     ip, [a3, a2, LSL #2]
        BNE     %BT05
        ; Fall through

HAL_Null
        MOV     pc, lr

HAL_InitDevices
        Entry

;        BL      M1535DMA_Init

        BL      Audio_Init

        EXIT

HAL_ControllerAddress
;        AND     a3, a2, #&FF
;        MOV     a2, a2, LSR#8                   ; a3=sequence number a2=controller
;        CMP     a2, #6
;        MOVCS   a1, #-1                         ; don't know about that controller
;        MOVCS   pc, lr
        mov a1,#-1
        mov pc,lr
        TEQ     a2, #0
;        LDREQ   a1, IOMD_Address
;        ADDEQ   a1, a1, #ECTCR
;        MOVEQ   pc, lr
;
;        TEQ     a2, #1
;        BNE     %FT15
;        CMP     a3, #NumberOfPodules
;        MOVCS   a1, #0
;        LDRCC   a1, EASI_Address
;        ADDCC   a1, a1, a3, LSL#24
;        MOV     pc, lr
;15
;        TEQ     a2, #4
;        LDREQ   a1, IOMD_Address
;        MOVNE   a1, #0                          ; one we know about,but isn't fitted
;        MOV     pc, lr

HAL_HardwareInfo
        LDR     ip, =&FFFFFF00
        STR     ip, [a1]
        MOV     ip, #0
        STR     ip, [a2]
        LDR     ip, =&00FFFF00
        STR     ip, [a3]
        MOV     pc, lr

HAL_PlatformInfo
        MOV     ip, #2_11011                    ; podules,PCI cards,soft off,and soft ROM
        STR     ip, [a2]
        MOV     ip, #2_11111                    ; mask of valid bits
        STR     ip, [a3]
        MOV     pc, lr

HAL_SuperIOInfo
        MOV     ip, #0
        STR     ip, [a1]
        STR     ip, [a2]
        MOV     pc, lr

; Shifts to determine number of bytes/words to allocate in table.
NibbleShift     *       12
ByteShift       *       NibbleShift + 1
WordShift       *       ByteShift + 2

; Bit patterns for different types of memory.
NotPresent      *       &00000000
DRAM_Pattern    *       &11111111
VRAM_Pattern    *       &22222222
ROM_Pattern     *       &33333333
IO_Pattern      *       &44444444
NotAvailable    *       &88888888

        IMPORT  memset

HAL_PhysInfo
        TEQ     a1, #0
        MOVEQ   a1, #1:SHL:(32-ByteShift)
        MOVEQ   pc, lr

        Push    "a2,v1,v2,lr"
        MOV     v1, a1
        ADR     v2, HAL_PhysTable
10      LDMIA   v2, {a1, a2, lr}
        SUB     a3, lr, a1
        ADD     a1, v1, a1, LSR #ByteShift
        MOV     a3, a3, LSR #ByteShift
        BL      memset
        LDR     a1, [v2, #8]!
        TEQ     a1, #0
        BNE     %BT10
        MOV     a1, #&C0000000
        LDR     lr, =&FFFFE000-1
        Pull    "a2"
        STR     lr, [a2]
        Pull    "v1,v2,pc"

; HAL_PhysInfo uses memset to fill the table, so all regions
; must be byte-aligned (ie double-page-aligned addresses).
HAL_PhysTable
        DCD     &00000000, IO_Pattern  :OR: NotAvailable ; Static CS0 uncached pys0
        DCD     &00100000, NotPresent  :OR: NotAvailable
        DCD     &04000000, ROM_Pattern  :OR: NotAvailable ; Static CS1 NAND
        DCD     &04100000, NotPresent  :OR: NotAvailable
        DCD     &08000000, ROM_Pattern  :OR: NotAvailable ; Static CS2 NAND scratchpad
        DCD     &08100000, NotPresent  :OR: NotAvailable
        DCD     &0c000000, IO_Pattern  :OR: NotAvailable ; Static CS3 modem
        DCD     &0c100000, NotPresent  :OR: NotAvailable
        DCD     &10000000, IO_Pattern  :OR: NotAvailable ; Static CS4 USB host
        DCD     &10100000, NotPresent  :OR: NotAvailable
        DCD     &14000000, IO_Pattern  :OR: NotAvailable ; Static CS5 Epson panel
        DCD     &14300000, NotPresent  :OR: NotAvailable

        DCD     &20000000, IO_Pattern  :OR: NotAvailable ; CF slot 0 i/o
        DCD     &21000000, NotPresent  :OR: NotAvailable
        DCD     &28000000, IO_Pattern  :OR: NotAvailable ; CF slot 0 ATTR
        DCD     &2a000000, NotPresent  :OR: NotAvailable
        DCD     &2c000000, IO_Pattern  :OR: NotAvailable ; CF slot 0 common
        DCD     &30000000, IO_Pattern  :OR: NotAvailable ; CF slot 1 i/o
        DCD     &31000000, NotPresent  :OR: NotAvailable
        DCD     &38000000, IO_Pattern  :OR: NotAvailable ; CF slot 1 Attr
        DCD     &3a000000, NotPresent  :OR: NotAvailable
        DCD     &3c000000, IO_Pattern  :OR: NotAvailable ; CF slot 1 common
        DCD     &40000000, NotPresent  :OR: NotAvailable

        DCD     &40000000, IO_Pattern  :OR: NotAvailable ; Peripheral register window
        DCD     &41800000, NotPresent  :OR: NotAvailable
        DCD     &48000000, IO_Pattern  :OR: NotAvailable ; mem controller window
        DCD     &48100000, NotPresent  :OR: NotAvailable

        DCD     &A0000000, DRAM_Pattern :OR: NotAvailable ; DRAM
        DCD     &B0000000, NotPresent   :OR: NotAvailable

        DCD     0

HAL_Reset
        TEQ     a1, #0                      ; reset,or power off?
;        LDRNE   ip, PMMR_Address
;        LDRNE   a1, [ip, #ATU_PCSR]
;        ORRNE   a1, a1, #1:SHL:5
;        STRNE   a1, [ip, #ATU_PCSR]
        BNE     .

;        BL      PCI_TungstenSecondaryBus
;        MOV     v1, a1
;        MOV     a2, #12*8
;        MOV     a3, #&9A                    ; a1 = bus, a2 = dev/fn, a3 = addr
;        MOV     a4, #4
;        BL      HAL_PCIWriteConfigHalfword  ; GPIO2 is output
;        MOV     a1, v1
;        MOV     a2, #12*8
;        MOV     a3, #&9C
;        BL      HAL_PCIWriteConfigHalfword  ; Bit 2 high in PMU device
        B       .

        LTORG

        EXPORT  vtophys
vtophys
        CallOS  OS_LogToPhys, tailcall

        EXPORT  mapinio
mapinio
        CallOS  OS_MapInIO, tailcall

move_ram
 [ RAM_Base <> Boot_RAM_Base
        ; so that SBR regs don't need changing
        ASSERT  (RAM_Base :AND: &3FFFFFFF) = (Boot_RAM_Base :AND: &3FFFFFFF)
        LDR     ip, =PMMR
        MOV     a1, #RAM_Base
        STR     a1, [ip, #MCU_SDBR]
        ADD     sp, sp, #RAM_Base - Boot_RAM_Base
 ]
        MOV     pc, lr


        END
