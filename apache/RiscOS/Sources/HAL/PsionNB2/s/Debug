; Copyright 2005 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; IOCR,read/write %0i110111
;	i=Nindex from FDD

; IRQSTA,read only %00000i00 (raw)
;	i=Nindex from FDD
; IRQRQA,read only
;	i=1=IRQSTA[2] & IRQMSKA[2]
; IRQMSKA,read/write
;	i=1=enable index interrupt from FDC
; IRQCLRA,write only
;	i=1=clear the index interrupt from the FDC

; IRQSTB,read only %000f0sh0 (raw)
;	f=1=floppy controller interrupt is pending
;	s=1=serial interrupt is pending
;	h=1=ide interface interrupt is pending
; IRQRQB,read only %000f0sh0
;	f=1=IRQSTB[4] & IRQMSKB[4]
;       s=1=IRQSTB[2] & IRQMSKB[2]
;	h=1=IRQSTB[1] & IRQMSKB[1]
; IRQMSKB,read/write %000f0sh0
;	f=1=enabled floppy controller interrupts
;	s=1=enable serial interrupts
;	h=1=enabled ide interface interrupts

; FIQST,read only %10xsxx0d (raw)
;	s=1=serial interrupt is pending
;	d=1=floppy disk psuedo DMA is pending
; FIQRQ,read only %10xsxx0f
;       s=1=FIQST[4] & FIQMSK[4]
;	d=1=FIQST[0] & FIQMSK[0]
; FIQMSK,read/write
;	s=1=enable serial interrupts
;	d=1=enable floppy psuedo DMA

; PDMA,read/write
;	causes pseudo DMA access to FDC
; PDMATC,read/write
;	causes pseudo DMA plus terminal count to FDC

; The podule is subdivided into 8 areas:
;	+&000000 = Simple podule ID for 'Test hardware'
;	+&200000 = IOCR
;	+&400000 = IRQA (+0 ST,+4 RQ/CLR,+8 MSK)
;	+&600000 = IRQB (+0 ST,+4 RQ,+8 MSK)
;	+&800000 = FIQ (+0 ST,+4 RQ,+8 MSK)
;	+&A00000 = PDMA
;	+&C00000 = PDMA+TC
;	+&E00000 = COMBI CHIP

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        GET     Hdr:Proc

        GET     Hdr:OSEntries

        GET     hdr.pxa255
        GET     hdr.UART
        GET     hdr.StaticWS

        EXPORT  HAL_DebugTX
        EXPORT  HAL_DebugRX
        EXPORT  HAL_DebugInit
        EXPORT  HAL_DebugInit2

        AREA    |Asm$$Code|, CODE, READONLY, PIC

 [ Debug
        IMPORT   printf
        
;UART1Addr       *       IO_UART1 *4
;CFGAddr         *       IO_Config*4

HAL_DebugInit
        Entry   "v1"
 [ {FALSE}
        MOV     a1, #0
        STRB    a1, IOSystemType
        EXIT
 ]

;        LDR     v1, EASI_Address                ; Slot 0
;        ; Check podule ID - search 8 podules
;10      LDRB    a1, [v1, a2, LSL #24]
;        AND     a1, a1, #2_11111010
;        TEQ     a1,     #2_01111000
;        BEQ     %FT20
;        ADD     a2, a2, #1
;        TEQ     a2, #8
;        BNE     %BT10
;        MOV     a1, #0
;        STRB    a1, IOSystemType
;        EXIT    NE
;20
;        ADD     v1, v1, a2, LSL #24
;        ADD     v1, v1, #&E00000                ; Offset of 665
;        MOV     a1, v1
;        BL      Configure37C665
;        LDRB    a1, IOSystemType
;        TEQ     a1, #0
;        EXIT    EQ
; [ UART1Addr:AND:&3FC00 <> 0
;        ADD     v1, v1, #UART1Addr:AND:&3FC00
; ]
;        ADD     v1, v1, #UART1Addr:AND:&003FF
;        STR     v1, DebugUART_Address
;        MOV     a1, #0
;        STRB    a1, [v1, #UART_IER*4]
;        MOV     a1, #DLAB
;        STRB    a1, [v1, #UART_LCR*4]
;        MOV     a1, #1                          ; 115200 baud
;        STRB    a1, [v1, #UART_DLL*4]
;        MOV     a1, #0
;        STRB    a1, [v1, #UART_DLM*4]
;        MOV     a1, #FIFOEN+FIFORSTRX+FIFORSTTX+FIFO64
;        STRB    a1, [v1, #UART_FCR*4]
;        MOV     a1, #WLS_8
;        STRB    a1, [v1, #UART_LCR*4]
;        MOV     a1, #DTR+RTS
;        STRB    a1, [v1, #UART_MCR*4]
        EXIT

HAL_DebugInit2
        MOV     pc, lr

; in: a1 = character to TX
HAL_DebugTX     ROUT
;        LDRB    a3, IOSystemType
;        LDR     ip, DebugUART_Address
;        TEQ     a3, #0
;        MOVEQ   pc, lr
;05      LDRB    a2, [ip, #UART_LSR*4]
;        TST     a2, #THRE
;        BEQ     %BT05
;10      LDRB    a2, [ip, #UART_MSR*4]           ; crude output flow control
;        TST     a2, #CTS
;        BEQ     %BT10
;        STRB    a1, [ip, #UART_THR*4]
        MOV     pc, lr

; out: a1 = character, or -1 if none available
HAL_DebugRX     ROUT
;        LDRB    a3, IOSystemType
;        LDR     ip, DebugUART_Address
;        TEQ     a3, #0
;        LDRNEB  a2, [ip, #UART_LSR*4]
;        TSTNE   a2, #DR
;        MOVEQ   a1, #-1
;        LDRNEB  a1, [ip, #UART_RBR*4]
        MOV     pc, lr


; 82C710 stuff


ConfigSMCTable
        DCB     &01, 2_10000111         ; Enable config read, IRQ active low, parallel powered/extended, default addr.
        DCB     &02, 2_00011100         ; 2nd serial port disabled, 1st enabled at &3F8
        DCB     &03, &78                ; extra stuff for SMC
        DCB     &04, 2_00000011         ; allow extended parallel port modes
        DCB     &05, 0
        DCB     &06, &FF
        DCB     &07, 0
        DCB     &08, 0
        DCB     &09, 0
        DCB     &0A, 0
        DCB     &00, 2_10111011         ; Valid config, OSC/BR on, FDC enabled/powered, IDE AT,enabled
        DCB     &AA, 0                  ; Exit config mode

        ALIGN

;
;
; Simplified version of Configure82C710 programs SMC 37C665 only.
;
Configure37C665 Entry
        SETPSR  I_bit + F_bit, ip,, r2  ; Disable FIQ and IRQ

; First try to configure the SMC665

;        MOV     lr, #&55
; [ CFGAddr:AND:&3FC00 <> 0
;        ADD     r0, r0, #CFGAddr:AND:&3FC00
; ]
;        ADD     r0, r0, #CFGAddr:AND:&003FF
;        STRB    lr, [r0, #0]            ; Write &55 to CRI711 twice
;        STRB    lr, [r0, #0]            ; to enter configuration mode
;
;        MOV     lr, #&0D                ; Check for SMC 665
;        STRB    lr, [r0, #0]
;        LDRB    lr, [r0, #4]
;        TEQ     lr, #&65
;        MOVNE   r1, #0                  ;NE: not a SMC 665 this should never happen
;        BNE     %FT30                   ;NE: on a RiscPC, Kryten or Stork
;
;        ADR     r1, ConfigSMCTable      ; R1-> SMC 665 configuration data
;20
;        LDRB    lr, [r1], #1            ; get config index
;        STRB    lr, [r0, #0]
;        TEQ     lr, #&AA                ; end of table?
;        LDRNEB  lr, [r1], #1            ; if not then get config data
;        STRNEB  lr, [r0, #4]            ; and write it
;        BNE     %BT20
;
;        MOV     r1, #IOST_37C665
;30
;        STRB    r1, IOSystemType
;
        RestPSR r2                      ; Restore IRQ/FIQ state

        EXIT

 | ; Debug

HAL_DebugRX
        MOV     a1, #-1
        ; fall through
HAL_DebugInit
HAL_DebugInit2
HAL_DebugTX
        MOV     pc, lr

 ] ; Debug

        EXPORT  |_dprintf|
|_dprintf|
        B       printf

        END
