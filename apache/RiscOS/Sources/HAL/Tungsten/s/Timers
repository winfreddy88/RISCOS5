; Copyright 2002 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.StaticWS
        GET     hdr.80321

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  Timer_Init

        EXPORT  HAL_Timers
        EXPORT  HAL_TimerDevice
        EXPORT  HAL_TimerGranularity
        EXPORT  HAL_TimerMaxPeriod
        EXPORT  HAL_TimerSetPeriod
        EXPORT  HAL_TimerPeriod
        EXPORT  HAL_TimerReadCountdown
        EXPORT  HAL_TimerIRQClear

        EXPORT  HAL_CounterRate
        EXPORT  HAL_CounterPeriod
        EXPORT  HAL_CounterRead
        EXPORT  HAL_CounterDelay


Timer_Init
        MOV     pc, lr

HAL_Timers
        MOV     a1, #2
        MOV     pc, lr

HAL_TimerDevice
        ASSERT  Device_Timer1 = Device_Timer0+1
        ADD     a1, a1, #Device_Timer0
        MOV     pc, lr

HAL_CounterRate
HAL_TimerGranularity
        LDR     a1, =TIMER_RATE
        MOV     pc, lr

HAL_TimerMaxPeriod
        MOV     a1, #&FFFFFFFF
        MOV     pc, lr

HAL_TimerSetPeriod
        TEQ     a2, #0
        BEQ     HAL_TimerSetPeriod_Disable
        TEQ     a1, #0
        WriteTRR0 a2, EQ                ; set period first before enabling
        WriteTRR1 a2, NE
        MOV     a3, #2_001110           ; x1 clock, privileged access only, reload, enabled
        WriteTMR0 a3, EQ
        WriteTMR1 a3, NE
        MOV     pc, lr

HAL_TimerSetPeriod_Disable
        MOV     a3, #2_001100           ; x1 clock, privileged access only, reload, disabled
        TEQ     a1, #0
        WriteTMR0 a3, EQ                ; disable first
        WriteTMR1 a3, NE
        WriteTRR0 a2, EQ                ; then set period to zero for benefit of reading
        WriteTRR1 a2, NE
        MOV     pc, lr

HAL_CounterPeriod
        MOV     a1, #0
        ; Fall through

HAL_TimerPeriod
        TEQ     a1, #0
        ReadTRR0 a1, EQ
        ReadTRR1 a1, NE
        MOV     pc, lr

HAL_CounterRead
        MOV     a1, #0
        ; Fall through

HAL_TimerReadCountdown
        TEQ     a1, #0
        ReadTCR0 a1, EQ
        ReadTCR1 a1, NE
        MOV     pc, lr



; If they want n ticks, wait until we've seen n+1 transitions of the clock.
        EXPORT  delay
delay
HAL_CounterDelay
        ASSERT  TIMER_RATE > 1000000
        LDR     a2, =TIMER_RATE/1000000
        MUL     a1, a2, a1

        ReadTCR0 a2
10
        ReadTCR0 a3
        SUBS    ip, a2, a3              ; ip = difference in ticks
        ADDLO   ip, a2, #1              ; if wrapped, must have had at least old latch+1 ticks
        SUBS    a1, a1, ip
        MOVLO   pc, lr
        ReadTCR0 a2
        SUBS    ip, a3, a2              ; ip = difference in ticks
        ADDLO   ip, a3, #1              ; if wrapped, must have had at least old latch+1 ticks
        SUBS    a1, a1, ip
        BHS     %BT10
        MOV     pc, lr

HAL_TimerIRQClear
        ADD     a1, a1, #1              ; convert timer number to bit
        WriteTISR a1
        MOV     pc, lr

        END
