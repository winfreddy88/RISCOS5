; Copyright 2013 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; support for CJE's power control module

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        $GetIO

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.omap4430
        GET     hdr.StaticWS

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  PowerCtrl_Init
        EXPORT  PowerCtrl_SwitchOff
        IMPORT  I2CBusRead
        IMPORT  I2CBusWrite
        IMPORT  IIC_DoOp_Poll

; support for external power control chip (CJE)
PWRCTRL_IIC_BUS         *       (4 - 1) ; I2C4 (on expansion connector A)
PWRCTRL_IIC_ADDR        *       (&74 * 2)

; Chassis Controller Register
PWRCTRL_ID0             *       0
PWRCTRL_ID1             *       1
PWRCTRL_ID2             *       2
PWRCTRL_ID3             *       3
PWRCTRL_PSU_CONTROL     *       4
PWRCTRL_DURATION_A      *       5
PWRCTRL_MARK_A          *       6
PWRCTRL_SPACE_A         *       7
PWRCTRL_LED_A           *       8
PWRCTRL_DURATION_B      *       9
PWRCTRL_MARK_B          *       10
PWRCTRL_SPACE_B         *       11
PWRCTRL_LED_B           *       12
PWRCTRL_POWER_OFF       *       13
PWRCTRL_RESET_TIME      *       14

PWRCTRL_ID_STRING       *       &31454A43       ; == "CJE1"

; values in PWRCTRL_PSU_CONTROL
PWRCTRL_PSU_CONTROL_OFF         *       "0"
PWRCTRL_PSU_CONTROL_ON          *       "1"
PWRCTRL_PSU_CONTROL_RESET       *       "R"
PWRCTRL_PSU_CONTROL_SHUTDOWN    *       "S"     ; ReadOnly (write is ignored)


PowerCtrl_Init
        Push    "v1-v2,lr"

        ; check for external PWRCTRL chip on I2C4 bus
        ; read 4 ID bytes and compare with ID string
        LDR     v1, OSentries+4*OS_IICOpV       ; for I2CBusRead
        MOV     v2, #PWRCTRL_IIC_BUS            ; specify I2C bus
        SUB     sp, sp, #4      ; temp small buffer on stack
        MOV     a1, #PWRCTRL_IIC_ADDR
        MOV     a3, #4
        MOV     a4, #PWRCTRL_ID0
        MOV     a2, sp
        BL      I2CBusRead
        CMP     a1, #IICStatus_Completed
        BNE     %FT10
        LDR     a1, [a2]
        LDR     lr, =PWRCTRL_ID_STRING
        CMP     a1, lr
        BNE     %FT10

        ; we have seen a PWRCTRL chip ==> activate Soft Power Off feature
        LDRB    a3, [sb, #BoardConfig_BoardFlags]
        ORR     a3, a3, #2_01000
        STRB    a3, [sb, #BoardConfig_BoardFlags]

10
        ADD     sp, sp, #4
        Pull    "v1-v2,pc"


PowerCtrl_SwitchOff
        Push    "v1-v2,lr"

        ; check if we are called with interrupts disabled - do a polling transfer
        MRS     v1, CPSR
        TST     v1, #I32_bit
        ADRNEL  v1, IIC_DoOp_Poll
        LDREQ   v1, OSentries+4*OS_IICOpV       ; for I2CBusWrite
        MOV     v2, #PWRCTRL_IIC_BUS            ; specify I2C bus
        SUB     sp, sp, #4      ; temp small buffer on stack
        MOV     a2, sp
        MOV     a1, #PWRCTRL_PSU_CONTROL_OFF
        STRB    a1, [a2]
        MOV     a1, #PWRCTRL_IIC_ADDR
        MOV     a3, #1
        MOV     a4, #PWRCTRL_PSU_CONTROL
        BL      I2CBusWrite
        CMP     a1, #IICStatus_Completed
        BNE     %FT10
        B       .       ; wait until switched OFF

10
        ADD     sp, sp, #4
        Pull    "v1-v2,pc"

        END
