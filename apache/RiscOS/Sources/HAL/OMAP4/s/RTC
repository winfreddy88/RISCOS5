; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Machine.<Machine>
        GET     Hdr:ImageSize.<ImageSize>
        $GetIO

        GET     Hdr:OSEntries
        GET     Hdr:HALEntries
        GET     Hdr:HALDevice
        GET     Hdr:RTCDevice

        GET     hdr.omap4430
        GET     hdr.StaticWS
        GET     hdr.Timers
        GET     hdr.PRCM

        AREA    |Asm$$Code|, CODE, READONLY, PIC

        EXPORT  I2CBusRead
        EXPORT  I2CBusWrite
        EXPORT  RTC_Init
        IMPORT  TPSRead
        IMPORT  TPSWrite
        IMPORT  IIC_DoOp_Poll
        IMPORT  memcpy

; TWL6030 RTC IIC address
TPSRTC_IIC              *       (&48 * 2)

; Some RTC registers
SECONDS_REG             *       &00
RTC_CTRL_REG            *       &10
RTC_STATUS_REG          *       &11

; RTC_CTRL_REG bitfields
RTC_CTRL_STOP_RTC_M             *       (1 << 0)
RTC_CTRL_ROUND_30S_M            *       (1 << 1)
RTC_CTRL_AUTO_COMP_M            *       (1 << 2)
RTC_CTRL_MODE_12_24_M           *       (1 << 3)
RTC_CTRL_TEST_MODE_M            *       (1 << 4)
RTC_CTRL_SET_32_COUNTER_M       *       (1 << 5)
RTC_CTRL_GET_TIME_M             *       (1 << 6)

; RTC_STATUS_REG bitfields
RTC_STATUS_RUN_M                *       (1 << 1)
RTC_STATUS_1S_EVENT_M           *       (1 << 2)
RTC_STATUS_1M_EVENT_M           *       (1 << 3)
RTC_STATUS_1H_EVENT_M           *       (1 << 4)
RTC_STATUS_1D_EVENT_M           *       (1 << 5)
RTC_STATUS_ALARM_M              *       (1 << 6)
RTC_STATUS_POWER_UP_M           *       (1 << 7)

; support for external DS1338 RTC chip
DS1338_IIC_BUS          *       (4 - 1) ; I2C4 (on expansion connector A)
DS1338_IIC_ADDR         *       (&68 * 2)

DS_RTC_SEC_REG          *       0
DS_RTC_MIN_REG          *       1
DS_RTC_HOUR_REG         *       2
DS_RTC_WDAY_REG         *       3
DS_RTC_DAY_REG          *       4
DS_RTC_MONTH_REG        *       5
DS_RTC_YEAR_REG         *       6
DS_RTC_CTRL_REG         *       7

; bits in DS_RTC_CTRL_REG
DS_RTC_CTRL_RS0         *       (1 << 0)
DS_RTC_CTRL_RS1         *       (1 << 1)
DS_RTC_CTRL_SQWE        *       (1 << 4)
DS_RTC_CTRL_OSF         *       (1 << 5)
DS_RTC_CTRL_OUT         *       (1 << 7)

; read/write functions for I2C on any bus

I2CBusRead
        ; a1 = IIC address(*2)
        ; a2 = buffer
        ; a3 = count
        ; a4 = start register
        ; v1 = IIC func
        ; v2 = IIC bus no
        ; out:
        ; a1 = return code
        ; ip corrupted
        ; buffer updated
        ORR     a1, a1, #1      ; read
        Push    "a1-a4,lr"      ; Push regs and second iic_transfer block
        EOR     a1, a1, #1+(1:SHL:29) ; write with retry
        ADD     a2, sp, #12
        MOV     a3, #1
        Push    "a1-a3"         ; push first iic_transfer block
        MOV     a1, sp
        MOV     a2, v2, LSL #24 ; bus number goes here
        ADD     a2, a2, #2
        MOV     a3, #0
        BLX     v1
        ADD     sp, sp, #16
        Pull    "a2-a4,pc"

I2CBusWrite
        ; a1 = IIC address(*2)
        ; a2 = buffer
        ; a3 = count
        ; a4 = start register
        ; v1 = IIC func
        ; v2 = IIC bus no
        ; out:
        ; a1 = return code
        ; ip corrupted
        ORR     a1, a1, #1:SHL:31 ; Write (no start bit)
        Push    "a1-a4,lr"      ; Push regs and second iic_transfer block
        EOR     a1, a1, #(1:SHL:29)+(1:SHL:31) ; Write (retries)
        ADD     a2, sp, #12
        MOV     a3, #1
        Push    "a1-a3"         ; push first iic_transfer block
        MOV     a1, sp
        MOV     a2, v2, LSL #24 ; bus number goes here
        ADD     a2, a2, #2
        MOV     a3, #0
        BLX     v1
        ADD     sp, sp, #16
        Pull    "a2-a4,pc"

RTC_Init
        Push    "v1-v2,lr"
        ADRL    a1, RTCWS
        ADR     a2, RTCDeviceTemplate
        MOV     a3, #RTCSize
        BL      memcpy
        STR     sb, [a1, #RTCDeviceHAL_SB]
        SUB     sp, sp, #4                      ; temp small buffer on stack

        ; check for external DS1338 chip on I2C4 bus
        LDR     v1, OSentries+4*OS_IICOpV       ; for I2CBusRead/I2CBusWrite
        MOV     v2, #DS1338_IIC_BUS             ; specify I2C bus
        MOV     a1, #DS1338_IIC_ADDR
        MOV     a3, #1
        MOV     a4, #DS_RTC_CTRL_REG
        MOV     a2, sp
        BL      I2CBusRead
        CMP     a1, #IICStatus_Completed
        BNE     %FT10
        LDRB    a1, [a2]
        TST     a1, #DS_RTC_CTRL_OSF
        BEQ     %FT05
        BIC     a1, a1, #DS_RTC_CTRL_OSF
        STRB    a1, [a2]
        MOV     a1, #DS1338_IIC_ADDR
        BL      I2CBusWrite

05      ; we have seen a DS1338 chip ==> mark it in our workspace
        ADRL    a3, RTCWS
        ADR     a1, DS_RTCReadTime
        STR     a1, [a3, #HALDevice_RTCReadTime]
        ADR     a1, DS_RTCWriteTime
        STR     a1, [a3, #HALDevice_RTCWriteTime]
        ADR     a1, DS_RTCDesc
        STR     a1, [a3, #HALDevice_Description]
        MOV     a1, #HALDeviceID_RTC_DS1307     ; at least we are compatible to this one :-)
        STRH    a1, [a3, #HALDevice_ID]

        B       %FT50

10
        ; no external RTC ==> initialise TWL6030 RTC
        ; prepare GPIO pad for TWL6030 MSECURE input pin (allow write access to RTC)
        LDR     a1, L4_Wakeup_Log
        LDR     a2, =(L4_SYSCTRL_PADCONF_WKUP - L4_Wakeup)
        ADD     a1, a2, a1
        LDR     a2, =0x0002                     ; output + Mode 2 (Reserved)
        STRH    a2, [a1, #0x0054]               ; gpio_wk6

50
        ADD     sp, sp, #4

        Pull    "v1-v2,lr"
        MOV     a1, #0
        ADRL    a2, RTCWS
        CallOS  OS_AddDevice, tailcall

RTCDeviceTemplate
        DCW     HALDeviceType_SysPeri + HALDeviceSysPeri_RTC
        DCW     HALDeviceID_RTC_TWL6030
        DCD     HALDeviceBus_Ser + HALDeviceSerBus_IIC
        DCD     0               ; API version
        DCD     RTCDesc
        DCD     0               ; Address - N/A
        %       12              ; Reserved
        DCD     RTCActivate
        DCD     RTCDeactivate
        DCD     RTCReset
        DCD     RTCSleep
        DCD     -1              ; Interrupt N/A
        DCD     0
        %       8
        DCB     RTCTimeFormat_BCD
        DCB     RTCFormatFlags_BCD_1BasedDay + \
                RTCFormatFlags_BCD_1BasedMonth + \
                RTCFormatFlags_BCD_YearLOIsGood + \
                RTCFormatFlags_BCD_NeedsYearHelp
        %       2
        DCD     RTCReadTime
        DCD     RTCWriteTime

RTCDesc
        DCB     "TWL6030-compatible real-time clock",0
DS_RTCDesc
        DCB     "DS1338-compatible real-time clock",0
        ALIGN

RTCActivate
        MOV     a1, #1
RTCDeactivate
RTCReset
        MOV     pc, lr

RTCSleep
        MOV     a1, #0 ; Previously at full power
        MOV     pc, lr

RTCReadTime
        ; In:
        ; a1 = HALDevice ptr
        ; a2 = RTCTimeStruct ptr
        ; Out:
        ; a1 = return code
        ; RTCTimeStruct updated
        Push    "v1,v3,sb,lr"
        LDR     sb, [a1, #RTCDeviceHAL_SB]
        LDR     v1, OSentries+4*OS_IICOpV ; for TPSRead/TPSWrite
        MOV     v3, a2
        ; Reading the time safely involves several transfers:
        ; 1. Read RTC_STATUS_REG. If bit 1 is clear, the RTC is stopped and we can just
        ;    assume its contents are invalid.
        ; 2. Set RTC_CTRL_REG=&41 (RTC running, GET_TIME set, 24hr mode). GET_TIME will read
        ;    the time from the RTC circuitry and latch it into the time registers (the regular
        ;    time registers, NOT the alarm ones as stated by the manual!)
        ; 3. Read the time regs to read latched time.
        ; There's no need to clear GET_TIME either, as it is cleared automatically by the HW.
        MOV     a1, #TPSRTC_IIC
        SUB     sp, sp, #4 ; temp small buffer on stack
        MOV     a3, #1
        MOV     a4, #RTC_STATUS_REG
        MOV     a2, sp
        BL      TPSRead ; RTC_STATUS_REG requires a dummy read to ensure the status is correct
        MOV     a1, #TPSRTC_IIC
        BL      TPSRead
        CMP     a1, #IICStatus_Completed
        LDRB    ip, [a2]
        MOV     a1, #RTCRetCode_InvalidTime
        MOVNE   a1, #RTCRetCode_Error
        EOR     ip, ip, #RTC_STATUS_RUN_M
        TSTEQ   ip, #RTC_STATUS_RUN_M
        ADDNE   sp, sp, #4
        Pull    "v1,v3,sb,pc", NE
        MOV     ip, #(RTC_CTRL_GET_TIME_M + RTC_CTRL_STOP_RTC_M)
        STR     ip, [a2]
        MOV     a1, #TPSRTC_IIC
        MOV     a4, #RTC_CTRL_REG
        BL      TPSWrite
        CMP     a1, #IICStatus_Completed
        MOVNE   a1, #RTCRetCode_Error
        ADD     sp, sp, #4
        Pull    "v1,v3,sb,pc", NE
        MOV     a1, #TPSRTC_IIC
        ; We can read the time directly into the RTCTimeStruct buffer
        ASSERT RTCTimeStruct_BCD_Minutes=RTCTimeStruct_BCD_Seconds+1
        ASSERT RTCTimeStruct_BCD_Hours=RTCTimeStruct_BCD_Seconds+2
        ASSERT RTCTimeStruct_BCD_DayOfMonth=RTCTimeStruct_BCD_Seconds+3
        ASSERT RTCTimeStruct_BCD_Month=RTCTimeStruct_BCD_Seconds+4
        ASSERT RTCTimeStruct_BCD_YearLO=RTCTimeStruct_BCD_Seconds+5
        ADD     a2, v3, #RTCTimeStruct_BCD_Seconds
        MOV     a3, #6
        MOV     a4, #SECONDS_REG
        BL      TPSRead
        CMP     a1, #IICStatus_Completed
        MOVNE   a1, #RTCRetCode_Error
        ASSERT  IICStatus_Completed = 0
        STREQB  a1, [v3, #RTCTimeStruct_BCD_Centiseconds] ; No centisecond time
        STREQB  a1, [v3, #RTCTimeStruct_BCD_YearHI] ; Kernel gives year help
        ASSERT  RTCRetCode_OK = 0
        Pull    "v1,v3,sb,pc"

RTCWriteTime
        ; In:
        ; a1 = HALDevice ptr
        ; a2 = RTCTimeStruct ptr
        ; Out:
        ; a1 = return code
        Push    "v1,v3,sb,lr"
        LDR     sb, [a1, #RTCDeviceHAL_SB]
        ; check if we are called with interrupts disabled - do a polling transfer
        ; this can happen during the shutdown sequence
        MRS     v1, CPSR
        TST     v1, #I32_bit
        ADRNEL  v1, IIC_DoOp_Poll
        LDREQ   v1, OSentries+4*OS_IICOpV ; for TPSRead/TPSWrite
        MOV     v3, a2
        ; Writing the time safely involves several transfers:
        ; 1. Write 0 to RTC_CTRL_REG to stop the clock (just in case there are any issues with
        ;    the clock updating while it's being written to)
        ; 2. Write the new time values
        ; 3. Write 1 to RTC_CTRL_REG to start the clock
        MOV     a1, #TPSRTC_IIC
        MOV     ip, #0
        STR     ip, [sp,#-4]! ; temp small buffer on stack
        MOV     a3, #1
        MOV     a4, #RTC_CTRL_REG
        MOV     a2, sp
        BL      TPSWrite
        CMP     a1, #IICStatus_Completed
        MOVNE   a1, #RTCRetCode_Error
        ADDNE   sp, sp, #4
        Pull    "v1,v3,sb,pc", NE
        MOV     a1, #TPSRTC_IIC
        ; We can write the time directly from the RTCTimeStruct buffer
        ASSERT RTCTimeStruct_BCD_Minutes=RTCTimeStruct_BCD_Seconds+1
        ASSERT RTCTimeStruct_BCD_Hours=RTCTimeStruct_BCD_Seconds+2
        ASSERT RTCTimeStruct_BCD_DayOfMonth=RTCTimeStruct_BCD_Seconds+3
        ASSERT RTCTimeStruct_BCD_Month=RTCTimeStruct_BCD_Seconds+4
        ASSERT RTCTimeStruct_BCD_YearLO=RTCTimeStruct_BCD_Seconds+5
        ADD     a2, v3, #RTCTimeStruct_BCD_Seconds
        MOV     a3, #6
        MOV     a4, #SECONDS_REG
        ; Sometimes we don't write the time, so skip those bytes if necessary
        LDRB    ip, [a2]
        CMP     ip, #255
        ADDEQ   a2, a2, #3
        SUBEQ   a3, a3, #3
        ADDEQ   a4, a4, #3
        ; Sometimes we don't write the date either
        LDRB    ip, [v3, #RTCTimeStruct_BCD_DayOfMonth]
        CMP     ip, #255
        SUBEQS  a3, a3, #3
        BEQ     %FT01 ; Nothing left to write!
        BL      TPSWrite
        CMP     a1, #IICStatus_Completed
        MOVNE   a1, #RTCRetCode_Error
        ADDNE   sp, sp, #4
        Pull    "v1,v3,sb,pc", NE
01
        MOV     a3, #RTC_CTRL_STOP_RTC_M
        STR     a3, [sp]
        MOV     a2, sp
        MOV     a4, #RTC_CTRL_REG
        MOV     a1, #TPSRTC_IIC
        BL      TPSWrite
        CMP     a1, #IICStatus_Completed
        ASSERT  RTCRetCode_OK = IICStatus_Completed
        MOVNE   a1, #RTCRetCode_Error
        ADD     sp, sp, #4
        Pull    "v1,v3,sb,pc"

; read/write functions for DS1338 chip

DS_RTCReadTime
        ; In:
        ; a1 = HALDevice ptr
        ; a2 = RTCTimeStruct ptr
        ; Out:
        ; a1 = return code
        ; RTCTimeStruct updated
        Push    "v1-v3,sb,lr"
        LDR     sb, [a1, #RTCDeviceHAL_SB]
        LDR     v1, OSentries+4*OS_IICOpV       ; for I2CBusRead
        MOV     v2, #DS1338_IIC_BUS             ; specify I2C bus
        MOV     v3, a2
        ; Reading the time starting with DS_RTC_SEC_REG automatically latches the current time.
        ; There is nothing else to do. We must read the time in 2 blocks because there is
        ; the weekday register in between which has no corresponding part in RTCTimeStruct.
        MOV     a1, #DS1338_IIC_ADDR
        ; We can read the time directly into the RTCTimeStruct buffer
        ASSERT RTCTimeStruct_BCD_Minutes=RTCTimeStruct_BCD_Seconds+1
        ASSERT RTCTimeStruct_BCD_Hours=RTCTimeStruct_BCD_Seconds+2
        ASSERT RTCTimeStruct_BCD_DayOfMonth=RTCTimeStruct_BCD_Seconds+3
        ASSERT RTCTimeStruct_BCD_Month=RTCTimeStruct_BCD_Seconds+4
        ASSERT RTCTimeStruct_BCD_YearLO=RTCTimeStruct_BCD_Seconds+5
        ADD     a2, v3, #RTCTimeStruct_BCD_Seconds
        MOV     a3, #(DS_RTC_WDAY_REG - DS_RTC_SEC_REG)
        MOV     a4, #DS_RTC_SEC_REG
        BL      I2CBusRead
        CMP     a1, #IICStatus_Completed
        MOVNE   a1, #RTCRetCode_Error
        Pull    "v1-v3,sb,pc", NE
        ; read second part
        MOV     a1, #DS1338_IIC_ADDR
        ADD     a2, v3, #RTCTimeStruct_BCD_DayOfMonth
        MOV     a3, #(DS_RTC_YEAR_REG - DS_RTC_WDAY_REG)
        MOV     a4, #DS_RTC_DAY_REG
        BL      I2CBusRead
        CMP     a1, #IICStatus_Completed
        MOVNE   a1, #RTCRetCode_Error
        ASSERT  IICStatus_Completed = 0
        STREQB  a1, [v3, #RTCTimeStruct_BCD_Centiseconds] ; No centisecond time
        STREQB  a1, [v3, #RTCTimeStruct_BCD_YearHI] ; Kernel gives year help
        ASSERT  RTCRetCode_OK = 0
        Pull    "v1-v3,sb,pc"

DS_RTCWriteTime
        ; In:
        ; a1 = HALDevice ptr
        ; a2 = RTCTimeStruct ptr
        ; Out:
        ; a1 = return code
        Push    "v1-v3,sb,lr"
        LDR     sb, [a1, #RTCDeviceHAL_SB]
        ; check if we are called with interrupts disabled - do a polling transfer
        ; this can happen during the shutdown sequence
        MRS     v1, CPSR
        TST     v1, #I32_bit
        ADRNEL  v1, IIC_DoOp_Poll
        LDREQ   v1, OSentries+4*OS_IICOpV       ; for I2CBusWrite
        MOV     v2, #DS1338_IIC_BUS             ; specify I2C bus
        MOV     v3, a2
        ; Writing the time starting with DS_RTC_SEC_REG automatically synchronises the write.
        ; There is nothing else to do. But we must cope for differences in the register layout
        ; and the RTCTimeStruct (weekday register in between).
        ; We can write the time directly from the RTCTimeStruct buffer
        ASSERT RTCTimeStruct_BCD_Minutes=RTCTimeStruct_BCD_Seconds+1
        ASSERT RTCTimeStruct_BCD_Hours=RTCTimeStruct_BCD_Seconds+2
        ASSERT RTCTimeStruct_BCD_DayOfMonth=RTCTimeStruct_BCD_Seconds+3
        ASSERT RTCTimeStruct_BCD_Month=RTCTimeStruct_BCD_Seconds+4
        ASSERT RTCTimeStruct_BCD_YearLO=RTCTimeStruct_BCD_Seconds+5
        ADD     a2, v3, #RTCTimeStruct_BCD_Seconds
        ; Sometimes we don't write the time, so skip those bytes if necessary
        LDRB    ip, [a2]
        CMP     ip, #255
        BEQ     %FT10
        MOV     a1, #DS1338_IIC_ADDR
        MOV     a3, #(DS_RTC_WDAY_REG - DS_RTC_SEC_REG)
        MOV     a4, #DS_RTC_SEC_REG
        BL      I2CBusWrite
        CMP     a1, #IICStatus_Completed
        MOVNE   a1, #RTCRetCode_Error
        Pull    "v1-v3,sb,pc", NE
10
        ; write second part
        ; Sometimes we don't write the date either
        LDRB    ip, [v3, #RTCTimeStruct_BCD_DayOfMonth]
        CMP     ip, #255
        BEQ     %FT20
        MOV     a1, #DS1338_IIC_ADDR
        ADD     a2, v3, #RTCTimeStruct_BCD_DayOfMonth
        MOV     a3, #(DS_RTC_YEAR_REG - DS_RTC_WDAY_REG)
        MOV     a4, #DS_RTC_DAY_REG
        BL      I2CBusWrite
        CMP     a1, #IICStatus_Completed
        MOVNE   a1, #RTCRetCode_Error
        Pull    "v1-v3,sb,pc"
20
        MOV     a1, #RTCRetCode_OK
        Pull    "v1-v3,sb,pc"

        END
