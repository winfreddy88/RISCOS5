; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        [       :LNOT: :DEF: __HAL_OMAP4430_HDR__
        GBLL    __HAL_OMAP4430_HDR__

        ; Debugging in the serial port (UART 3)
                GBLL    Debug
Debug           SETL    {FALSE}

        ; Boot timings using the 32KHz timer
                GBLL    DebugTiming
DebugTiming     SETL    Debug :LAND: {FALSE}

        ; Should the I cache be off when the MMU is
                GBLL    CacheOff
CacheOff        SETL    {FALSE}

        ; QEMU support - disables some code that does stuff QEMU doesn't support
                GBLL    QEMU
QEMU            SETL    {FALSE}


; Physical memory map. All unmentioned ranges are reserved.
; 00000000-3FFFFFFF GPMC
; 40028000-40033FFF Internal boot ROM
; 40100000-401FFFFF Audio back-end (ABE)
; 40300000-4030DFFF L3 OCM_RAM (56K)
; 44000000-44FFFFFF L3 configuration registers
; 48000000-48FFFFFF L4-Core [L4_PER domain]
; 49000000-49FFFFFF L4_ABE domain
; 4A000000-4AFFFFFF L4_CFG domain
;(4A300000-4A33FFFF L4-Wakeup)
; 4C000000-4CFFFFFF EMIF1 (configuration) registers
; 4D000000-4DFFFFFF EMIF2 (configuration) registers
; 4E000000-4FFFFFFF DMM (configuration) registers
; 50000000-51FFFFFF GPMC (configuration) registers
; 52000000-53FFFFFF ISS registers
; 54000000-54FFFFFF L3_EMU domain
; 55000000-55FFFFFF Dual Cortex-M3 subsystem target
; 56000000-57FFFFFF SGX540 domain
; 58000000-58FFFFFF Display subsystem domain
; 5A000000-5AFFFFFF IVA-HD configuration
; 5B000000-5BFFFFFF IVA-HD SL2 domain
; 5C000000-5FFFFFFF Chip-to-chip (C2C) domain
; 60000000-7FFFFFFF Tiler address mapping
; 80000000-BFFFFFFF CS0-SDRAM
; C0000000-FFFFFFFF CS1-SDRAM

IntSRAM_Base            *       &40300000
IntSRAM_Size            *       &0000E000

L3_ABE                  *       &40100000
L3_Control              *       &44000000
L4_Per                  *       &48000000
L4_ABE                  *       &49000000
L4_Core                 *       &4A000000 ; L4_CFG
L4_Wakeup               *       &4A300000
EMIF1_Base              *       &4C000000
EMIF2_Base              *       &4D000000
DMM_Base                *       &4E000000
GPMC_Regs               *       &50000000

L3_Emu                  *       &54000000

SGX540                  *       &56000000
DSS_Base                *       &58000000 ; Display subsystem domain
IVA_HD_Config           *       &5A000000
IVA_HD_SL2              *       &5B000000
C2C_Base                *       &5C000000 ; Chip-to-chip (C2C) domain

CS0_SDRAM               *       &80000000 ; CS0 SDRAM is at a configurable offset from here
CS1_SDRAM               *       &C0000000 ; CS1 SDRAM is at a configurable offset from here

; Cortex-A9 MPU subsystem
MPU_SCU                 *       &48240000 ; Snoop Control Unit
MPU_GIC_PI              *       &48240100 ; GIC Processor Interface
MPU_GIC_ID              *       &48241000 ; GIC Interrupt Distributor
MPU_PL310               *       &48242000
CORTEXA9_SOCKET_PRCM    *       &48243000
CORTEXA9_PRM            *       &48243200
CORTEXA9_CPU0           *       &48243400
CORTEXA9_CPU1           *       &48243800
CORTEXA9_WUGEN          *       &48281000

AUX_CORE_BOOT_0         *       CORTEXA9_WUGEN + &800
AUX_CORE_BOOT_1         *       CORTEXA9_WUGEN + &804

MPU_INTC                *       MPU_SCU
MPU_INTC_CPU            *       (MPU_GIC_PI - MPU_SCU)
MPU_INTC_DIST           *       (MPU_GIC_ID - MPU_SCU)
MPU_INTC_SIZE           *       (MPU_PL310 - MPU_SCU)


; L4-Core locations
L4_CoreConfig           *       (L4_Core + &000000) ; L4 core config
L4_SYSCTRL_GENERAL_CORE *       (L4_Core + &002000) ; general core system control
L4_DIE_ID0              *       (L4_Core + &002200) ; 128 bit unique ID [31:0]
L4_CONTROL_IDCODE       *       (L4_Core + &002204) ; OMAP revision code
L4_DIE_ID1              *       (L4_Core + &002208) ; 128 bit unique ID [63:32]
L4_DIE_ID2              *       (L4_Core + &00220C) ; 128 bit unique ID [95:64]
L4_DIE_ID3              *       (L4_Core + &002210) ; 128 bit unique ID [127:96]
L4_ClockMan             *       (L4_Core + &004000) ; Clock manager (module 1)
L4_ClockMan2            *       (L4_Core + &008000) ; Clock manager (module 2)
L4_sDMA                 *       (L4_Core + &056000) ; sDMA config
L4_HSI                  *       (L4_Core + &058000) ; HSI (top, DMA, port1, port2)
L4_SAR_ROM              *       (L4_Core + &05E000) ; SAR_ROM (save and restore)
L4_USBTLL               *       (L4_Core + &062000) ; HSUSBTLL (transceiverless link)
L4_USB_Host             *       (L4_Core + &064000) ; USB host config (HSUSBHOST)
L4_DSP                  *       (L4_Core + &066000) ; DSP subsystem
L4_FSUSB                *       (L4_Core + &0A9000) ; FSUSB config (Full Speed)
L4_USB_OTG              *       (L4_Core + &0AB000) ; USB OTG config (HSUSBOTG)
L4_USBPHY               *       (L4_Core + &0AD000) ; USBPHY config
L4_SR_MPU               *       (L4_Core + &0D9000) ; SmartReflex MPU
L4_SR_IVA               *       (L4_Core + &0DB000) ; SmartReflex IVA
L4_SR_CORE              *       (L4_Core + &0DD000) ; SmartReflex Core
L4_MAILBOX              *       (L4_Core + &0F4000) ; IPC mailbox
L4_SPINLOCK             *       (L4_Core + &0F6000) ; IPC spinlock
L4_SYSCTRL_PADCONF_CORE *       (L4_Core + &100000) ; pad configuration core system control
L4_Core_Size            *                  &240000  ; Size we request to be mapped in

; L4-Wakeup locations
L4_WakeConfig           *       (L4_Wakeup + &00000) ; L4-wakeup config
L4_32KTIMER             *       (L4_Wakeup + &04000) ; 32K timer
L4_PowerMan             *       (L4_Wakeup + &06000) ; Power and reset manager
L4_SCRM                 *       (L4_Wakeup + &0A000) ; SCRM (System Clock and Reset Management)
L4_SYSCTRL_GENERAL_WKUP *       (L4_Wakeup + &0C000) ; general wakeup system control
L4_GPIO1                *       (L4_Wakeup + &10000) ; GPIO 1
L4_WDTIMER2             *       (L4_Wakeup + &14000) ; WDTIMER 2
L4_GPTIMER1             *       (L4_Wakeup + &18000) ; GPTIMER 1
L4_Keyboard             *       (L4_Wakeup + &1A000) ; Keyboard module
L4_SYSCTRL_PADCONF_WKUP *       (L4_Wakeup + &1E000) ; pad configuration wakeup system control
L4_Wakeup_Size          *                    &41000  ; Size we request to be mapped in

; L4-Peripheral locations
L4_PerConfig    *       (L4_Per + &000000) ; L4-Per config
L4_UART3        *       (L4_Per + &020000) ; UART 3
L4_GPTIMER2     *       (L4_Per + &032000) ; GPTIMER 2
L4_GPTIMER3     *       (L4_Per + &034000) ; GPTIMER 3
L4_GPTIMER4     *       (L4_Per + &036000) ; GPTIMER 4
L4_GPTIMER9     *       (L4_Per + &03E000) ; GPTIMER 9
L4_Display      *       (L4_Per + &040000) ; Display subsystem config
L4_GPIO2        *       (L4_Per + &055000) ; GPIO 2
L4_GPIO3        *       (L4_Per + &057000) ; GPIO 3
L4_GPIO4        *       (L4_Per + &059000) ; GPIO 4
L4_GPIO5        *       (L4_Per + &05B000) ; GPIO 5
L4_GPIO6        *       (L4_Per + &05D000) ; GPIO 6
L4_I2C3         *       (L4_Per + &060000) ; I2C #3
L4_UART1        *       (L4_Per + &06A000) ; UART 1
L4_UART2        *       (L4_Per + &06C000) ; UART 2
L4_UART4        *       (L4_Per + &06E000) ; UART 4
L4_I2C1         *       (L4_Per + &070000) ; I2C #1
L4_I2C2         *       (L4_Per + &072000) ; I2C #2
L4_SLIMBUS2     *       (L4_Per + &076000) ; SLIMBUS2
L4_ELM          *       (L4_Per + &078000) ; ELM (error locator module)
L4_GPTIMER10    *       (L4_Per + &086000) ; GPTIMER 10
L4_GPTIMER11    *       (L4_Per + &088000) ; GPTIMER 11
L4_McBSP4       *       (L4_Per + &096000) ; McBSP4 thing (digital baseband voice data)
L4_McSPI1       *       (L4_Per + &098000) ; McSPI1
L4_McSPI2       *       (L4_Per + &09A000) ; McSPI2
L4_HSMMC1       *       (L4_Per + &09C000) ; HSMMC1
L4_MMC_SD3      *       (L4_Per + &0AD000) ; MMC/SD3
L4_HDQ_1Wire    *       (L4_Per + &0B2000) ; HDQ (1-Wire)
L4_HSMMC2       *       (L4_Per + &0B4000) ; HSMMC2
L4_McSPI3       *       (L4_Per + &0B8000) ; McSPI3
L4_McSPI4       *       (L4_Per + &0BA000) ; McSPI4
L4_MMC_SD4      *       (L4_Per + &0D1000) ; MMC/SD4
L4_MMC_SD5      *       (L4_Per + &0D5000) ; MMC/SD5
L4_I2C4         *       (L4_Per + &350000) ; I2C #4

L4_Per_Size             *         &400000  ; Size we request to be mapped in

; L3-Audio-Back-End locations
L3_McBSP1       *       (L3_ABE + &022000) ; McBSP1
L3_McBSP2       *       (L3_ABE + &024000) ; McBSP2
L3_McBSP3       *       (L3_ABE + &026000) ; McBSP3
L3_McASP_CFG    *       (L3_ABE + &028000) ; McASP CFG port (Multi channel Audio Serial Port)
L3_McASP_DATA   *       (L3_ABE + &02A000) ; McASP data port (Multi channel Audio Serial Port)
L3_SLIMBUS1     *       (L3_ABE + &02C000) ; SLIMBUS1
L3_DMIC         *       (L3_ABE + &02E000) ; DMIC (digital microphone)
L3_WDTIMER3     *       (L3_ABE + &030000) ; WDTIMER3
L3_McPDM        *       (L3_ABE + &032000) ; McPDM (Multi channel Pulse Density Modulation)
L3_GPTIMER5     *       (L3_ABE + &038000) ; GPTIMER5
L3_GPTIMER6     *       (L3_ABE + &03A000) ; GPTIMER6
L3_GPTIMER7     *       (L3_ABE + &03C000) ; GPTIMER7
L3_GPTIMER8     *       (L3_ABE + &03E000) ; GPTIMER8
L3_DMEM         *       (L3_ABE + &080000) ; Data Memory (64 kiB)
L3_CMEM         *       (L3_ABE + &0A0000) ; Coefficient Memory (4 kiB)
L3_SMEM         *       (L3_ABE + &0C0000) ; SMEM (32 kiB)
L3_AESS         *       (L3_ABE + &0F1000) ; AESS configuration

L3_ABE_Size     *                 &100000  ; Size we request to be mapped in

; L4-Audio-Back-End locations
L4_McBSP1       *       (L4_ABE + &022000) ; McBSP1
L4_McBSP2       *       (L4_ABE + &024000) ; McBSP2
L4_McBSP3       *       (L4_ABE + &026000) ; McBSP3
L4_McASP_CFG    *       (L4_ABE + &028000) ; McASP CFG port (Multi channel Audio Serial Port)
L4_McASP_DATA   *       (L4_ABE + &02A000) ; McASP data port (Multi channel Audio Serial Port)
L4_SLIMBUS1     *       (L4_ABE + &02C000) ; SLIMBUS1
L4_DMIC         *       (L4_ABE + &02E000) ; DMIC (digital microphone)
L4_WDTIMER3     *       (L4_ABE + &030000) ; WDTIMER3
L4_McPDM        *       (L4_ABE + &032000) ; McPDM (Multi channel Pulse Density Modulation)
L4_GPTIMER5     *       (L4_ABE + &038000) ; GPTIMER5
L4_GPTIMER6     *       (L4_ABE + &03A000) ; GPTIMER6
L4_GPTIMER7     *       (L4_ABE + &03C000) ; GPTIMER7
L4_GPTIMER8     *       (L4_ABE + &03E000) ; GPTIMER8
L4_DMEM         *       (L4_ABE + &080000) ; Data Memory (64 kiB)
L4_CMEM         *       (L4_ABE + &0A0000) ; Coefficient Memory (4 kiB)
L4_SMEM         *       (L4_ABE + &0C0000) ; SMEM (32 kiB)
L4_AESS         *       (L4_ABE + &0F1000) ; AESS configuration

L4_ABE_Size     *                 &100000  ; Size we request to be mapped in


; CONTROL_IDCODE fields:
; bits 31-28 give the silicon revision
; bits 27-12 give the hawkeye number (OMAP family)
; bits 11-0 are 0x02f
HAWKEYE_OMAP4430_ES10   *       &B852 ; OMAP4430 ES1.0 and ES2.0
HAWKEYE_OMAP4430_ES21   *       &B95C ; OMAP4430 ES2.1 and ES2.2 and ES2.3

                                  ; OMAP4430
REVISION_OMAP4430_ES10  *       0 ; x
REVISION_OMAP4430_ES20  *       1 ; x
REVISION_OMAP4430_ES21  *       3 ; x
REVISION_OMAP4430_ES22  *       4 ; x
REVISION_OMAP4430_ES23  *       6 ; x

HAWKEYE_OMAP4460_ES10   *       &B94E ; OMAP4460 ES1.0 and ES1.1

                                  ; OMAP4460
REVISION_OMAP4460_ES10  *       0 ; x
REVISION_OMAP4460_ES11  *       2 ; x

    [ Debug :LAND: :LNOT: :DEF: DebugExported
        IMPORT  DebugHALPrint
        IMPORT  DebugHALPrintReg
        IMPORT  DebugHALPrintByte
        IMPORT  DebugCallstack
        IMPORT  DebugMemDump
    ]

        MACRO
        DebugChar $temp1,$temp2,$char
    [ Debug :LAND: {FALSE}
        LDR     $temp1,[sb, #BoardConfig_DebugUART]
        MOV     $temp2,#$char
        STRB    $temp2,[$temp1]
    ]
        MEND

        MACRO
        DebugTX $str
    [ Debug
        BL      DebugHALPrint
        =       "$str", 13, 10, 0
        ALIGN
    ]
        MEND

        MACRO
        DebugReg $reg, $str
    [ Debug
        Push   "$reg"
     [ "$str" <> ""
        BL     DebugHALPrint
        =      "$str",0
        ALIGN
     ]
        BL     DebugHALPrintReg
    ]
        MEND

        MACRO
        DebugRegByte $reg, $str
    [ Debug
        Push   "$reg"
     [ "$str" <> ""
        BL     DebugHALPrint
        =      "$str",0
        ALIGN
     ]
        BL     DebugHALPrintByte
    ]
        MEND

        MACRO
        DebugTime $temp,$str
    [ DebugTiming
        LDR     $temp,L4_32KTIMER_Log
        LDR     $temp,[$temp,#16] ; REG_32KSYNCNT_CR
        DebugReg $temp, "$str"
    ]
        MEND

        MACRO
        DebugTimeNoMMU $temp,$str
    [ DebugTiming
        LDR     $temp,=L4_32KTIMER
        LDR     $temp,[$temp,#16]
        DebugReg $temp, "$str"
    ]
        MEND


        ] ; __HAL_OMAP4430_HDR__

        END
