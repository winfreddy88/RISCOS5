; Copyright 2009 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; GPIO registers - relative to L4_GPIO1, L4_GPIO2, L4_GPIO3, etc.

GPIO_REVISION           * &000
GPIO_SYSCONFIG          * &010
GPIO_SYSTATUS           * &014
GPIO_IRQSTATUS1         * &018
GPIO_IRQENABLE1         * &01C
GPIO_WAKEUPENABLE       * &020
GPIO_IRQSTATUS2         * &028
GPIO_IRQENABLE2         * &02C
GPIO_CTRL               * &030
GPIO_OE                 * &034
GPIO_DATAIN             * &038
GPIO_DATAOUT            * &03C
GPIO_LEVELDETECT0       * &040
GPIO_LEVELDETECT1       * &044
GPIO_RISINGDETECT       * &048
GPIO_FALLINGDETECT      * &04C
GPIO_DEBOUNCEENABLE     * &050
GPIO_DEBOUNCETIME       * &054
GPIO_CLEARIRQENABLE1    * &060
GPIO_SETIRQENABLE1      * &064
GPIO_CLEARIRQENABLE2    * &070
GPIO_SETIRQENABLE2      * &074
GPIO_CLEARWKUENA        * &080
GPIO_SETWKUENA          * &084
GPIO_CLEARDATAOUT       * &090
GPIO_SETDATAOUT         * &094


GPIO_PORT_MAX           * 6
GPIO_PIN_MAX            * (32 * GPIO_PORT_MAX)

; Flags for GPIOx_SetAndEnableIRQ
GPIO_LEVELDETECT0_FLAG  * 1
GPIO_LEVELDETECT1_FLAG  * 2
GPIO_RISINGDETECT_FLAG  * 4
GPIO_FALLINGDETECT_FLAG * 8

; TWL/TPS GPIO registers
TPS_GPIODATAIN1         * &98 ; *3
TPS_GPIODATADIR1        * &9B ; *3
TPS_GPIODATAOUT1        * &9E ; *3
TPS_CLEARGPIODATAOUT1   * &A1 ; *3
TPS_SETGPIODATAOUT1     * &A4 ; *3
TPS_GPIO_DEBEN1         * &A7 ; *3
TPS_GPIO_CTRL           * &AA
TPS_GPIOPUPCTR1         * &AB ; *5
TPS_GPIO_ISR1A          * &B1 ; *3
TPS_GPIO_IMR1A          * &B4 ; *3
TPS_GPIO_ISR1B          * &B7 ; *3
TPS_GPIO_IMR1B          * &BA ; *3
TPS_GPIO_EDR1           * &C0 ; *5
TPS_GPIO_SIH_CTRL       * &C5
TPS_PMBR1               * &92
TPS_PMBR2               * &93
TPS_GPPUPDCTR1          * &94
                          
TPSGPIO_IIC             * &49
                          
TPS_GPIO_PIN_MAX        * 17

; TWL/TPS LED registers
; (we treat these as extra output-only GPIOs, like Linux)
TPS_LEDEN               * &EE
TPS_PWMAON              * &EF
TPS_PWMAOFF             * &F0
TPS_PWMBON              * &F1
TPS_PWMBOFF             * &F2
                        
TPSLED_IIC              * &4A
                        
TPS_LED_PIN_MAX         * 2

; OMAP GPIO related macros
; All assume sb = HAL workspace

        ; Prepare for GPIO operations (constant pin)
        ; In:
        ;   $num = constant GPIO pin number
        ;   $cc = condition code
        ; Out:
        ;   $regs = GPIO register block ptr
        ;   $mask = bit mask for pin
        MACRO
        GPIO_PrepareC $regs, $mask, $num, $cc
        ASSERT  $regs <> $mask
        ASSERT  $num < GPIO_PIN_MAX
        LDR$cc  $regs, L4_GPIO_Table+4*($num>>5)
        MOV$cc  $mask, #1 :SHL: ($num :AND: 31)
        MEND
 
        ; Prepare for GPIO operations (register pin)
        ; In:
        ;   $num = register containing GPIO pin number
        ;   $cc = condition code
        ;   $tmp = optional temp register to avoid clobbering $num
        ; Out:
        ;   $regs = GPIO register block ptr
        ;   $mask = bit mask for pin
        ;   $num corrupted, unless $tmp specified
        MACRO
        GPIO_PrepareR $regs, $mask, $num, $cc, $tmp
        ASSERT  $regs <> $mask
  [ "$tmp" = ""
        ASSERT  $mask <> $num
   [ $regs = $num
        EOR$cc  $num, $num, #31
        MOV$cc  $mask, #&80000000
        MOV$cc  $mask, $mask, ROR $num
        MOV$cc  $regs, $num, LSR #5
        ADD$cc  $regs, sb, $regs, LSL #2
        LDR$cc  $regs, [$regs, #:INDEX:L4_GPIO_Table]
   |
        ; Slightly better instruction ordering
        MOV$cc  $regs, $num, LSR #5
        EOR$cc  $num, $num, #31
        ADD$cc  $regs, sb, $regs, LSL #2
        MOV$cc  $mask, #&80000000
        LDR$cc  $regs, [$regs, #:INDEX:L4_GPIO_Table]
        MOV$cc  $mask, $mask, ROR $num
   ]
  |
        ASSERT  $mask <> $tmp
        ASSERT  $regs <> $tmp
        ASSERT  $num <> $tmp ; no point using $tmp if the two are the same!
        ASSERT  $regs <> $num
        MOV$cc  $regs, $num, LSR #5
        EOR$cc  $tmp, $num, #31
        ADD$cc  $regs, sb, $regs, LSL #2
        MOV$cc  $mask, #&80000000
        LDR$cc  $regs, [$regs, #:INDEX:L4_GPIO_Table]
        MOV$cc  $mask, $mask, ROR $num
  ]
        MEND
 
        ; Set pin for output
        MACRO
        GPIO_SetAsOutput $regs, $mask, $temp, $cc
        ASSERT  $regs <> $temp
        ASSERT  $mask <> $temp
        LDR$cc  $temp, [$regs, #GPIO_OE]
        BIC$cc  $temp, $temp, $mask
        STR$cc  $temp, [$regs, #GPIO_OE]
        MEND
 
        ; Set pin for input
        MACRO
        GPIO_SetAsInput $regs, $mask, $temp, $cc
        ASSERT  $regs <> $temp
        ASSERT  $mask <> $temp
        LDR$cc  $temp, [$regs, #GPIO_OE]
        ORR$cc  $temp, $temp, $mask
        STR$cc  $temp, [$regs, #GPIO_OE]
        MEND
 
        ; Set output to 0
        MACRO
        GPIO_SetOutput0 $regs, $mask, $cc
        STR$cc  $mask, [$regs, #GPIO_CLEARDATAOUT]
        MEND
 
        ; Set output to 1
        MACRO
        GPIO_SetOutput1 $regs, $mask, $cc
        STR$cc  $mask, [$regs, #GPIO_SETDATAOUT]
        MEND
 
        ; Set output 0/1
        ; In:
        ;  $val = zero, or non-zero
        MACRO
        GPIO_SetOutput $val, $regs, $mask
        TEQ     $val, #0
        STRNE   $mask, [$regs, #GPIO_SETDATAOUT]
        STREQ   $mask, [$regs, #GPIO_CLEARDATAOUT]
        MEND
 
        ; Get input value
        ; Out:
        ;  $val = zero, or non-zero
        MACRO
        GPIO_GetInput $val, $regs, $mask, $cc 
        ASSERT  $mask <> $val
        LDR$cc  $val, [$regs, #GPIO_DATAIN]
        AND$cc  $val, $val, $mask
        MEND
 
        ; Get GPIO IRQ # (constant pin)
        MACRO
        GPIO_GetIRQC $irq, $pin, $cc
        MOV$cc  $irq, #($pin>>5)+29
        MEND
 
        ; Get GPIO IRQ # (register pin)
        MACRO
        GPIO_GetIRQR $irq, $pin, $cc
        MOV$cc  $irq, $pin, LSR #5
        ADD$cc  $irq, $irq, #29
        MEND
 
        ; Get GPIO IRQ # (as DCD)
        ; In:
        ;   $shared = "shared" to set bit 31
        MACRO
        GPIO_GetIRQD $pin, $shared
  [ $shared = "shared"
        DCD      ($pin>>5)+29+(1<<31)
  |
        ASSERT   $shared = ""
        DCD      ($pin>>5)+29
  ]
        MEND


        END
