/* Copyright 2000 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -*-C-*-
 *
 * $Header: /home/rool/cvsroot/apache/RiscOS/Sources/Networking/Ethernet/Ether1/c/mbuf,v 1.2 2000/12/05 20:37:22 blaughto Exp $
 * $Source: /home/rool/cvsroot/apache/RiscOS/Sources/Networking/Ethernet/Ether1/c/mbuf,v $
 *
 * Copyright(c) 1994 Acorn Computers Ltd., Cambridge, England
 *
 * Revision 1.1  95/09/18  15:17:57  kwelton
 * Initial revision
 *
 */
#include "kernel.h"
#include "swis.h"

#include <sys/param.h>
#include <sys/errno.h>
#include <sys/mbuf.h>

#include <netinet/in.h>
#include <sys/socket.h>
#include <net/if.h>
#include <netinet/if_ether.h>

#include "mbuf.h"

#ifdef DBGMBUF
static void df(char *s)
{
    _kernel_swi_regs r;
    _kernel_swi(OS_WriteI+4, &r, &r);

    printf(s);
}
#endif


struct mbctl MBCTL =
{
	0,				/* opaque */
	sizeof(struct mbctl),		/* mbcsize */
	MBUF_MANAGER_VERSION,		/* mbcvers */
	0ul,				/* flags */
	MINCONTIG,			/* advminubs */
	ETHERMTU,			/* advmaxubs */
	MINCONTIG,			/* mincontig */
	0ul,				/* spare1 */
	/*
	 * Rest of the structure gets initialised
	 * to zeroes due to the trailing comma
	 */
};

/**********************************************************************/

extern _kernel_oserror *mb_entryinit(void)
{
    return _swix(Mbuf_OpenSession, _IN(0), &MBCTL);
}

/**********************************************************************/

/*
 * mb_present - check whether the mbuf manager is present or not,
 * using the Mbuf_Control SWI to do so.  returns 1 if manager
 * present, else 0.
 */
extern int mb_present(void)
{
    /*
     * the control SWI with reason code 0 should *always*
     * succeed if the mbuf manager is loaded.
     */
    return((_swix(Mbuf_Control, _IN(0), 0) == NULL) ? 1 : 0);
}

/**********************************************************************/

extern _kernel_oserror *mb_closesession(void)
{
    return _swix(Mbuf_CloseSession, _IN(0), &MBCTL);
}

/**********************************************************************/

/* EOF mbuf.c */
