/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include "swis.h"
#include "debug.h"

/* Event stuff */
#define Event_Disable		13	/* OS_Byte reason code */
#define Event_Enable		14	/* OS_Byte reason code */
typedef enum { Async=1, Urgent=2, Broken=3, RarpReply=4 } internet_event_t;

/* PPP module */
#define PPP_DCIVersion		0x4b600

/* Dialler */
#define Dialler_Dial		0x4c6c0
#define Dialler_HangUp		0x4c6c1
#define Dialler_Status		0x4c6c2
#define Dialler_Answering	0x4c6c3
#define Dialler_Configure	0x4c6c4
typedef enum { Disconnected=1, Executing=2, ConnectedOut=4, HangingUp=8, Answering=0x10, ConnectedIn=0x20 } dialler_status_t;
#define CONNECTED(x)		(((x)&(ConnectedIn|ConnectedOut))!=0)

#ifdef USE_REGISTRY
/* Registry */
#define NCRegistry_EnumerateNetworkDrivers	0x4d380
#define NCRegistry_EnumerateSmartCardBlocks	0x4D381
#define NCRegistry_Enquiry			0x4D382
#define NCRegistry_LoadSmartCardBlock		0x4D383
#define NCRegistry_Status			0x4D384
#else
#define NCAccessManager_Enquiry			0x4F000
#define NCBootblock_EnumerateNetworkDrivers	0x4f380
#define NCBootblock_EnumerateSmartCardBlocks	0x4f381
#define NCBootblock_Enquiry			0x4f382
#define NCBootblock_Status			0x4f383
#define NCBootblock_Write			0x4f384
#define NCBootblock_Authenticate		0x4f385
#define NCBootblock_ChangeSmartcardCHV		0x4f386
#define NCBootblock_Proxy			0x4f387
#define NCBootblock_PinInfo			0x4f388
#define NCBootblock_UnblockCHV			0x4f389
#endif

#define NCRegistry_TimeServerTag		"TIME_PRIMARY"
/* Service_NCRegistry flags */
#define BB_STATUS_INSERTED	0x1	/* bootblock present */
#define BB_STATUS_SC_VALID	0x2	/* smartcard validated */
#define BB_STATUS_BB_VALID	0x4	/* smartcard boot block validated */
#define BB_STATUS_PIN		0x8	/* smartcard is PIN protected */
#define BB_STATUS_LOCKED	0x10	/* smartcard is currently locked */
#define BB_STATUS_WRITEOK	0x20	/* write to smartcard succeeded */
#define BB_STATUS_WRITEFAIL	0x40	/* write to smartcard failed */


/* Timers */
#define POLL_TIMER		(1*100)		/* 1 second */
#define RETRY_TIMER             (1*100)         /* 1 second (first retry - exponential backoff) */
#define SHORT_TIMER		(5*60*100)	/* 5 minutes*/
#define LONG_TIMER		(30*60*100)	/* 1/2 hr */

/* Environment variables */
#define ENV_TIME_SERVER  "NetTime$Server"
#define ENV_TIME_SERVER2 "Inet$TimeServer"
#define ENV_NTP_SERVER   "Inet$NTPServer"
#define ENV_RESOLVER     "Inet$Resolvers"
#define MAX_ENV_TIME_SERVER 64

/* Port numbers */
#define PORT_TIME 37
#define PORT_NTP 123

/* Placate the compiler */
#define UNUSED(k) (k)=(k);
struct riscos_time;

/*
 * State machine types
 */
typedef enum { Dormant, NoLink, Sleeping, Expecting, DNSWait } state_t;
typedef enum { NoTrans, Init, Die, PostInit, Response, Failure, Timer, LinkUp, LinkDown, RegistryChanged, DoDNS} transition_t;
typedef struct
{
  uint32_t       state;                 /* one of NetTime_Past|Current|Future */
  uint32_t       timeof_last_action;    /* cs ago */
  uint32_t       timeof_current_action; /* 0 */
  uint32_t       timeof_next_action;    /* future cs */
} nettime_state_t;

/*
 * Public functions
 */
extern void wordv_veneer(void);
void machine(transition_t transition);
_kernel_oserror *set_time(const struct riscos_time *);
void handle_dhcp(_kernel_swi_regs *);
void print_status(void);
void fill_status(nettime_state_t *);
void change_poll_period(int);
void setcallback(transition_t, void *);
void removecallback(transition_t, void *);
_kernel_oserror *module_set_time(const struct riscos_time *);
unsigned int get_t0_count(void);
unsigned int get_hal_t0_count(uint32_t, void *);

/*
 * Public variables
 */
extern int sockno;
extern void *privateword;
extern int we_are_setting;
extern int synchronised;
extern struct in_addr last_server;
extern int last_protocol;
extern int poll_period;
extern transition_t callback_reason;
