/* Copyright 1999 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * NetFiler.h
 * Header file for NetFiler client module - part of the Omni project
 */

#ifndef __NETFILER_H
#define __NETFILER_H

/* Should be Acorn-allocated SWI chunk number */
#define omni_ERRBASE			0x080d100
#define client_SWIBASE			0x04a540		/* Acorn allocated */
#define client_ERRBASE			(omni_ERRBASE + 64)	/* Allocated 32 errors */

/* Site-license limit value */
#define client_LIMIT		0       
#define client_FLAGS		OmniRegisterFlag_FilingSystem | OmniRegisterFlag_NeedUser | OmniRegisterFlag_NeedPass | OmniRegisterFlag_Printer | OmniRegisterFlag_AnonymousMounts
#define client_ID		client_SWIBASE

/* Enum for error reporting */
typedef enum
{
  err_NOTSUPPORTED = client_ERRBASE,
  err_NONET,
  err_BADMOUNT,
  err_BADPRINT,
  err_NOMEM,
  err_NOOMNI,
  err_NOSERVER,
  err_CONNECTED,

  err_UNKNOWN
} err_number_type;

/* Struct for server/mount details - see source for details */
typedef struct
{
  Desk_linklist_header 	header;		/* Link list pointers */
  int			mount_id;
  int   		server_id;
  char			serveraddr[32];
  char			userid[32];
  char			passwd[32];
  char 			mount[32];
} mount_rec;

/* Struct for server/mount list details - see source for details */
typedef struct
{
  Desk_linklist_header 	header;		/* Link list pointers */
  Desk_linklist_header	anchor;		/* Anchor to list of subwindows, or {NULL, NULL} */
  int			mount_id;
  int   		server_id;
  char  		shortname[16];
  char			fullname[32];
  char  		description[64];
} mlist_rec;

/* Struct for printer list details - see source for details */
typedef struct
{
  Desk_linklist_header 	header;		/* Link list pointers */
  char  		printer[24];
  int			flags;
} plist_rec;

/* Struct for printer job */
typedef struct
{
  Desk_linklist_header 	header;		/* Link list pointers */
  int			Desk_print_id;	/* Desk_print_id word */
  int 			pjob_id;	/* pjob_id word */
  int 			status;		/* Local status word (internal copy) */
  int 			time;		/* Monotonic time job was started */
  int			handle;		/* Fileswitch file handle */
} print_rec;

/* Print job status flags */
#define Desk_print_STATUS		0x1
#define Desk_print_mask		0xE
#define Desk_print_PENDING		(1 << 1)
#define Desk_print_CONNECTED		(2 << 1)
#define	Desk_print_SENDING		(3 << 1)
#define Desk_print_COMPLETE		(4 << 1)
#define Desk_print_TEMPERROR		(5 << 1)
#define Desk_print_ERROR		(6 << 1)
#define printer_TIMEOUT		(360000 * 24)  /* 24 hrs timeout */
#define pflagSET(status, flag)	((status & Desk_print_mask) == flag)
#define M_UNUSED(x) (void) (x)

extern Desk_linklist_header	mount_anchor;	/* List of active mount records */
extern Desk_linklist_header	mlist_anchor;	/* List of network mount records */
extern Desk_linklist_header	plist_anchor;	/* List of network print records */
extern Desk_linklist_header	print_anchor;	/* List of active print records */
extern Desk_bool		block_service;	/* Block out the service call? */

extern void print_clean(void);
extern void plist_clean(void);
extern void mount_clean(void);
extern void mlist_clean(void);
extern const char *intl_lookup(const char *, const char *);
_kernel_oserror *intl_error(err_number_type);

#endif
