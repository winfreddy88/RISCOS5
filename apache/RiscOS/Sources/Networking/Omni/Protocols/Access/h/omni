/* Copyright 1999 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -*-C-*-
 *
 * omni.h   General OmniClient interface
 *
 * (C) ANT Limited 1994. All rights reserved.
 *
 * Borris, December 1994.
 */

#ifndef included_omni_h
#define included_omni_h

#include "swipad.h"

/*****************************************************************************/

typedef struct
{
    int                 client_id;
    int                 type;
    args_PAD2;
} args_OmniEnumerateMounts;

/*****************************************************************************/

typedef struct
{
    int                 client_id;
    unsigned int        client_flags;
    char *              sprite_name;
    char *              client_name;
    char *              client_description;
    unsigned int        site_word;
    char *              fs_name;
    args_PAD7;
} args_OmniRegisterClient;

/*****************************************************************************/

typedef struct
{
    int                 client_id;
    args_PAD1;
} args_OmniDeregisterClient;

/*****************************************************************************/

typedef struct
{
    int                 message_id;
    char *              parm;
    args_PAD2;
} args_OmniMessageLookup;

/*****************************************************************************/

typedef struct
{
    int                 client_id;
    char *              client_leafname;
    char *              acorn_filename;
    char *              flags;
} args_OmniConvertClientToAcorn;

/*****************************************************************************/

typedef struct
{
    int                 client_id;
    char *              acorn_leafname;
    char *              client_filename;
    char *              flags;
    int                 type;
} args_OmniConvertAcornToClient;

/*****************************************************************************/

typedef struct
{
    unsigned int        src_format:4,
                        dst_format:4,
                                  :0;
    char *              src_block;
    char *              dst_block;
} args_OmniConvertTime;

/*****************************************************************************/

typedef struct
{
    int                 centiseconds;
    int                 seconds;
    int                 minutes;
    int                 hours;
    int                 day_in_month;
    int                 month_in_year;
    int                 year;
} generic_time;

/*****************************************************************************/

typedef struct
{
    int                 action;
    int                 scall;
    args_PAD2;
} args_OmniServiceCall;

/*****************************************************************************/

typedef struct
{
    int                 reason;
union
{
    char *              server;         /* fullname */
    struct server *     mount_id;       /* return ID or NULL */
} u;
    char *              user_id;        /* optional */
    char *              password;       /* optional */
    char *              mount_name;
    char *              mount_path;     /* optional */
    char *              authentator;    /* optional */
    args_PAD7;
} args_OmniOpMount;

/*****************************************************************************/

typedef struct
{
    int                 reason;
    struct server *     mount_id;
    args_PAD2;
} args_OmniOpDismount;

/*****************************************************************************/

typedef struct
{
    int                 reason;
union
{
    struct server *     mount_id;
    unsigned int        user_free;
} u;
    unsigned int        user_used;
    unsigned int        total_size;
    args_PAD4;
} args_OmniOpFreeSpace;

/*****************************************************************************/

typedef struct
{
    int                 reason;
    char *              buffer;
    uint                size;
    struct server *     server_id;
    args_PAD4;
} args_OmniOpEnumerateServers;

/*****************************************************************************/

typedef struct
{
    int                 reason;
    char *              buffer;
    uint                size;
    struct server *     mount_id;       /* 0 to start */
    struct server *     server_id;      /* maybe 0 - in which case */
    char *              server_name;    /* this will be fullname string */
    args_PAD6;
} args_OmniOpEnumerateMounts;

/*****************************************************************************/

typedef struct
{
    int                 reason;
    char *              buffer;
    uint                size;
    struct server *     mount_id;
    args_PAD4;
} args_OmniOpEnumerateActiveMounts;

/*****************************************************************************/

typedef struct
{
    int                 reason;
    struct server *     mount_id;
    args_PAD2;
} args_OmniOpOpenRoot;

/*****************************************************************************/

typedef struct
{
    int                 reason;
    struct server *     mount_id;
    args_PAD2;
} args_OmniOpOpenUserRoot;

/*****************************************************************************/

typedef struct
{
    int                 reason;
union
{
    struct server *     mount_id;
    uint                flags;
} u;
    char *              mount_path;
    args_PAD3;
} args_OmniOpGetInactiveMountInfo;

/*****************************************************************************/

typedef struct
{
    int                 reason;
union
{
    struct server *     mount_id;
    char *              server;
} u;
    char *              user_id;
    char *              mount_name;
    char *              mount_path;
    char *              authenticator;
    struct server *     server_id;
    args_PAD7;
} args_OmniOpGetActiveMountInfo;

/*****************************************************************************/

#endif /* included_omni_h */

/* eof omni.h */
