/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Generic (c.generic)
 *
 */
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#include "kernel.h"
#include "sys/types.h"
#include "sys/socket.h"
#include "sys/errno.h"
#include "socklib.h"
#include "generic.h"


/*************************************************************/
/* char * Strdup (char *s1)                                  */
/* Create an exact copy of s1 in fresh(clean) memory         */
/*************************************************************/
char * Strdup(const char *s1)
{
  	if (s1 == NULL) {
  	        return NULL;
  	}
  	else {
		const size_t length = strlen(s1) + 1;
		char *const s2 = malloc(length);
		
		if (s2 == NULL) return NULL;
	        return memcpy(s2, s1, length);
  	}
}


/* Function to compare two strings case insensitively up to a maximum char count
 *
 * Originally: sbrodie
 *
 * Parameters: matches those of strncmp.
 * Result: matches the exit conditions of strncmp.
 *
 *
 * The conversions to unsigned int stop the compiler messing around with
 * shifts all over the place whilst trying to promote the chars to int
 * whilst retaining the sign.
 *
 * Problems: Choice of return value when strings do not match is based
 *           upon character number rather than any alphabetic sorting.
 * 
 */
int Strncmp_ci(const char *first, const char *second, size_t limit)
{
	for (;limit;--limit) {
		unsigned int a = *first++;
		unsigned int b = *second++;

		if (a == 0) return -b;
		if (a != b) {
			unsigned int c = (unsigned int) tolower(a);
			unsigned int d = (unsigned int) tolower(b);
			signed int result = c - d;
			if (result != 0) return result;
		}
	}

	return 0;
}


/* Function to compare two strings case insensitively
 *
 * Originally: sbrodie
 *
 * Parameters: matches those of strcmp.
 * Result: matches the exit conditions of strcmp.
 *
 *
 * The conversions to unsigned int stop the compiler messing around with
 * shifts all over the place whilst trying to promote the chars to int
 * whilst retaining the sign.
 *
 * Problems: Choice of return value when strings do not match is based
 *           upon character number rather than any alphabetic sorting.
 * 
 */
int Strcmp_ci(const char *first, const char *second)
{
	for (;;) {
		unsigned int a = *first++;
		unsigned int b = *second++;

		if (a == 0) return -b;
		if (a != b) {
			unsigned int c = (unsigned int) tolower(a);
			unsigned int d = (unsigned int) tolower(b);
			signed int result = c - d;
			if (result != 0) return result;
		}
	}
}

