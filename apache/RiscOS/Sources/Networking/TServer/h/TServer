/* Copyright 2001 Pace Micro Technology plc
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#if !defined(TSERVER_H) /* file used if not already included */
#define TSERVER_H
/*****************************************************************************
* $Id: TServer,v 1.11 2004/11/30 00:45:21 jballance Exp $
* $Name:  $
*
* Author(s):  Daniel R Ellis, JWB
* Project(s): IA Next Generation (A148)
*
* ----------------------------------------------------------------------------
* Copyright [2000] Pace Micro Technology PLC.  All rights reserved.
*
* The copyright in this material is owned by Pace Micro Technology PLC
* ("Pace").  This material is regarded as a highly confidential trade secret
* of Pace.  It may not be reproduced, used, sold or in any other way exploited
* or transferred to any third party without the prior written permission of
* Pace.
*
* ----------------------------------------------------------------------------
* Purpose: This program provides a simple telnet server running under RISC OS
*
* ----------------------------------------------------------------------------
* History: See source control system log
*
*****************************************************************************/

/*****************************************************************************
* Constants
*****************************************************************************/

/* Kernel constants */
#define Event_Disable               0xd
#define Event_Enable                0xe
#define Module_Enter                2

/* TaskWindow SWIs */
#define TaskWindow_Input            0x808c0
#define TaskWindow_Output           0x808c1
#define TaskWindow_Ego              0x808c2
#define TaskWindow_Morio            0x808c3
#define TaskWindow_Morite           0x808c4
#define TaskWindow_NewTask          0x808c5
#define TaskWindow_Suspend          0x808c6
#define TaskWindow_Resume           0x808c7

/* DebugIt SWIs */
#define  DebugIt_Register           0x4ba80
#define  DebugIt_DeRegister         0x4ba81
#define  DebugIt_WriteC             0x4ba82
#define  DebugIt_GetString          0x4ba83
#define  DebugIt_ResetBufferSize    0x4ba84
#define  DebugIt_GetBufferSize      0x4ba85

/* pollword constants */
#define TServer_PollWord_RecvSock   (1<<0)
#define TServer_PollWord_MsgSock    (1<<1)
#define TServer_PollWord_DebugIt    (1<<2)
#define TServer_PollWord_SendSock   (1<<3)
#define TServer_PollWord_DebugItLock (1<<4)

#ifdef __AuthCode
/* FTPs SWIs */
#define  FTPs_CheckPassword         0x57140
#endif


/* Socket events */
#define Socket_Async_Event          1
#define Socket_Urgent_Event         2
#define Socket_Broken_Event         3
#define RarpReply                   4

/*****************************************************************************
* New type definitions
*****************************************************************************/

typedef struct {
    int     size;
    char    data[232];
} TaskWindowInputMessage,
  TaskWindowOutputMessage;

typedef struct {
    int     handle;
} TaskWindowEgoMessage;

typedef struct task_block task_block;

struct task_block {
    task_block* next;
    int         task_id;
    int         sock;
    int         flags;
#define Task_DataReceived       (1<<0)
#define Task_OutputDisabled     (1<<1)
#define Task_ConnectionBroken   (1<<2)
#define Task_EventFlags         (Task_DataReceived | Task_ConnectionBroken)
#define Task_SpawnedTask        (1<<3)
#ifdef __AuthCode
#define Task_NeedUser           (1<<4)
#define Task_NeedPassword       (1<<5)
#define Task_NeedTaskPrompt     (1<<6)
#endif
    int         state;
    int         esc_state;
    int         width;  /* current width of display */
    int         telopt_ptr;
    char        telopt[8];
    char*       com;
    int         timeout;
#ifdef __AuthCode
    char        authuser[16];   // max length 15 user and 15 passwd
    char        authpass[16];
#endif
};

/* main entry point */
extern void tserver (void* pw);

/* read the pollword atomically, resetting it */
extern int atomic_swap (int, int*);

/* assembler routines for filter */
void taskwindow_postfilter (void);
void taskwindow_prefilter (void);

/* called to kill the task */
void taskwindow_morio (task_block* tsk);

/* the address of the application stack (so we can free it) */
extern char* appstack;

#endif  /* end of sentry #ifdef */
/*****************************************************************************
* END OF FILE
*****************************************************************************/
