/* Copyright 2017 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * AccessCD is a peer to peer CD share program with some
 * basic memory cacheing. This is the setup program
 * !RunImage.
 *
 * This file was generated as part of the modularisation of AccessCD
 * and AccessCDS.
 *
 * Version 1.02 - PWAIN - 950518
 * Comments: <none>
 *
 */

#define MAIN

#include "Includes.h"

int main(void)
{
    char *buffer;
    int b_size;
    int task;
    int reason;
    WimpEvent event;
    char buf[32];
    char *envstr;

    _swi(OS_GetEnv,_OUT(0),&envstr);
    if (strstr(envstr,"-s")) {
            _swi(OS_ServiceCall,_INR(0,1),0,Service_AccessCD);
            return(0);
    }
    signal(SIGOSERROR, error_handler);
    b_size = _swi(MessageTrans_FileInfo, _IN(1)|_RETURN(2), "<AccessCD$Dir>.Resources.Messages");
    buffer = malloc(b_size);
    if (!buffer) error("NoMem");
    _swi(MessageTrans_OpenFile, _IN(0)|_IN(1)|_IN(2), m_descr_block, "<AccessCD$Dir>.Resources.Messages", buffer);
    m_descr = m_descr_block;
    _swi(Wimp_OpenTemplate, _IN(1), "<AccessCD$Dir>.Resources.Templates");
    progname = msg_lookup("AccsP");
    _swi(OS_SetVarVal, _IN(0)|_IN(1)|_IN(2)|_IN(4), "AccessCD$Running", "Yes", 4, 0);
    task = _swi(Wimp_Initialise, _IN(0)|_IN(1)|_IN(2)|_IN(3)|_RETURN(1),
         310, *(int *)"TASK", progname, messages);
    proginfo_w = create_window("progInfo", &proginfo_window);
    cache_w = create_window("Cache", &w_cache);
    build_icon_menu();
    icon_menu.items[MI_INFO].submenu = proginfo_w;
    setjmp(cont);
    sprintf(buf,"ShareFSCache on");
    _swix(OS_CLI,_IN(0),buf);
    initialised = 1;
    _swi(OS_ServiceCall,_INR(0,1),0,Service_AccessCD);
    open_cache_window();
    do {
        reason = _swi(Wimp_Poll, _IN(0)|_IN(1), got_null ? 1 << E_NULL : 0, &event);
        process_event(reason, &event);
    } while (1);
}
