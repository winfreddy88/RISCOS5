/* Copyright 2017 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * AccessCD is a peer to peer CD share program with some
 * basic memory cacheing. This is the setup program
 * !RunImage.
 *
 * This file was generated as part of the modularisation of AccessCD
 * and AccessCDS.
 *
 * Version 1.02 - PWAIN - 950518
 * Comments: <none>
 *
 */

#include "Includes.h" /* Everything needed! */



void make_title(Acc_Menu *m, char *t)
{
    if (strlen_ctrl(t) > 12) {
        m->title = t;
    } else {
        memcpy(&m->title, t, 12);
        m->items[0].menu_flags &= ~MF_INDIRECTTITLE;
    }
}

void build_icon_menu(void)
{
    int i;
    int l, maxlen;
    char *s;

    make_title(&icon_menu, s = msg_lookup("Title"));
    maxlen = strlen_ctrl(s);
    icon_menu.items[MI_INFO].text = msg_lookup("Info");
    icon_menu.items[MI_QUIT].text = msg_lookup("Quit");
    for (i = 0; i < N_MENU_ITEMS; i++) {
        l = strlen_ctrl(icon_menu.items[i].text);
        if (l > maxlen) maxlen = l;
    }
    maxlen++;
    icon_menu.width = maxlen * 16;
}

int create_window(char *s, Window **wind)
{
    int b_size, w_size;
    Window *buffer;
    char *workspace;
    int w;

    _swi(Wimp_LoadTemplate, _IN(1)|_IN(4)|_IN(5)|_IN(6)|_OUT(1)|_OUT(2),
         0, -1, s, 0, &b_size, &w_size);
    buffer = malloc(b_size);
    workspace = malloc(w_size);
    if (!buffer || !workspace)
         error("NoMem");
    _swi(Wimp_LoadTemplate, _IN(1)|_IN(2)|_IN(3)|_IN(4)|_IN(5)|_IN(6),
         buffer, workspace, workspace + w_size, -1, s, 0);
    w = _swi(Wimp_CreateWindow, _IN(1), buffer);
    *wind = buffer;
    return w;
}

/* This routine must not generate an error */
void Acc_exit(int subdirs)
{
    /*_swix(Wimp_CloseDown, _IN(0)|_IN(1), task, *(int *)"TASK");*/
    _swix(OS_SetVarVal, _IN(0)|_IN(2), "AccessCD$Running", -1);
    exit(0);
}

int current_menu_x, current_menu_y;
int maxshares=0;

void create_menu(Acc_Menu *m, int x, int y)
{
    current_menu_x = x;
    current_menu_y = y;
    _swi(Wimp_CreateMenu, _IN(1)|_IN(2)|_IN(3), m, x, y);
}


#define XEigFactor  4
#define YEigFactor  5
#define XWindLimit 11
#define YWindLimit 12


void get_cache_icons(int *p) {
        zero_terminate(w_cache->icons[0].buffer);
        *p=atoi(w_cache->icons[0].buffer);
}

void process_cache_click(WimpEvent *e) {
int primary;
char buf[32];
  get_cache_icons(&primary);
  switch (e->click.icon_handle) {
          case 1: {
              sprintf(buf,"ShareFSCache on");
              _swix(OS_CLI,_IN(0),buf);
              break;
          }
          case 4: {
              if (e->click.buttons==MB_SELECT) {
                 if (primary<4096) primary+=4;
              }
              else {
                if (e->click.buttons==MB_ADJUST) {
                  if (primary>0) primary-=4;
                }
              }
              sprintf(w_cache->icons[0].buffer,"%d",primary);
              _swi(Wimp_SetIconState, _BLOCK(1), cache_w, 0, 0, 0);
              break;
          }
          case 5: {

              if (e->click.buttons==MB_ADJUST) {
                 if (primary<4096) primary+=4;
              }
              else {
                if (e->click.buttons==MB_SELECT) {
                  if (primary>0) primary-=4;
                }
              }
              sprintf(w_cache->icons[0].buffer,"%d",primary);
              _swi(Wimp_SetIconState, _BLOCK(1), cache_w, 0, 0, 0);
              break;
          }
     }
}

void menu_select(int *m)
{
    switch (m[0]) {
        case MI_QUIT:
            Acc_exit(0);
            break;
    }
}

void process_event(int reason, WimpEvent *event)
{
    EventClick mouse;
    int window, icon;
    int ptr;

    switch (reason) {
        case E_NULL:
            got_null = 1;
            break;

        case E_KEY:
            if (event->key.window_handle == cache_w) {
                switch (event->key.ch) {
                        case 0x1b:
                        _swi(Wimp_CloseWindow, _IN(1), &cache_w);
                        Acc_exit(0);
                        break;

                        case 0x0d:
                        set_cache();
                        _swi(Wimp_CloseWindow, _IN(1), &cache_w);
                        Acc_exit(0);
                        break;
                }
            }
            _swi(Wimp_ProcessKey, _IN(0), event->key.ch);
            break;

        case E_USER_MESSAGE:
        case E_USER_MESSAGE_RECORDED: {
            if (event->msg.action == 0)
                Acc_exit(1);
            if (event->msg.action == MESSAGE_HELPREQUEST) {
                char *help, *help1, *help2;
                char help_buffer[20];
                int m[10];

                help1 = 0;
                help2 = 0;
                ptr=(int)event->msg.data;
                window = *(&ptr + 3);
                icon = *(&ptr +4);
                if (window == cache_w) {
                    help1 = "CDIAL";
                    if (icon >= 0) {
                        sprintf(help_buffer, "C_%d", icon);
                        help2 = help_buffer;
                    }
                } else if (window == proginfo_w) {
                    help1 = "PROGINFO";
                } else if (window < 0) {
                    help1 = "ICON";
                } else {
                    _swi(Wimp_GetMenuState, _IN(0)|_IN(1)|_IN(2)|_IN(3),
                         1, m, window, icon);
                    if (m[0] >= 0) {
                        sprintf(help_buffer, "M_%d", m[0]);
                        help1 = help_buffer;
                    }
                }
                if (help1) {
                    help = (char *)event->msg.data;
                    strcpy_ctrl(help, msg_lookup(help1));
                    if (help2) {
                        strcat_ctrl(help, "|M");
                        strcat_ctrl(help, msg_lookup(help2));
                    }
                    event->msg.size = 20 + ((strlen(help) + 1 + 3) & ~3);
                    event->msg.action = MESSAGE_HELPREPLY;
                    event->msg.your_ref = event->msg.my_ref;
                    _swi(Wimp_SendMessage, _IN(0)|_IN(1)|_IN(2),
                         17, &event->msg, event->msg.sender_handle);
                }
            }
        break;
        }
        case E_CLICK: {
            if (event->click.buttons & MB_MENU) create_menu(&icon_menu,
                   event->click.screen_x - 64, event->click.screen_y);
            else {
                if (event->click.window_handle == cache_w) {
                        if (event->click.icon_handle == CACHE_OK) {
                            set_cache();
                            _swi(Wimp_CloseWindow, _IN(1), &cache_w);
                            Acc_exit(0);
                        } else if (event->click.icon_handle == CACHE_CANCEL) {
                            _swi(Wimp_CloseWindow, _IN(1), &cache_w);
                            Acc_exit(0);
                        } else if (event->click.icon_handle == CACHE_SAVE){
                             new_config();
                             set_cache();
                            _swi(Wimp_CloseWindow, _IN(1), &cache_w);
                            Acc_exit(0);
                        }
                          else process_cache_click(event);
                }
            }
            break;
        }
        case E_OPEN: {
            _swi(Wimp_OpenWindow, _IN(1), &event->open);
            break;
        }
        case E_CLOSE: {
            _swi(Wimp_CloseWindow, _IN(1), &event->window_handle);
            break;
        }
        case E_MENU: {
            _swi(OS_WriteI+4,0);
            _swi(Wimp_GetPointerInfo, _IN(1), &mouse);
            menu_select(event->menu);
            if (mouse.buttons & MB_ADJUST)
                create_menu(&icon_menu, current_menu_x, current_menu_y);
            break;
        }
    }
}

void error_handler(int sig)
{
    int key;
    int flags;

    flags = ERROR_OK;
    if (initialised) flags |= ERROR_CANCEL;
    key = _swi(Wimp_ReportError, _IN(0)|_IN(1)|_IN(2)|_RETURN(1),
               _kernel_last_oserror(), flags, progname);
    if (key & ERROR_CANCEL) {
        signal(SIGOSERROR, error_handler);
        longjmp(cont, 1);
    }
    Acc_exit(1);
}

void open_cache_window() {
            int sizex, sizey;
            int minx, miny;
            Icon *tmp_icon;

            read_shares();
            sizex = w_cache->r.maxx - w_cache->r.minx;
            sizey = w_cache->r.maxy - w_cache->r.miny;
            minx = _swi(OS_ReadModeVariable, _IN(0)|_IN(1)|_RETURN(2),
            	   	 -1, XWindLimit);
            miny = _swi(OS_ReadModeVariable, _IN(0)|_IN(1)|_RETURN(2),
            	   	 -1, YWindLimit);
            minx <<= _swi(OS_ReadModeVariable, _IN(0)|_IN(1)|_RETURN(2),
            	     	 -1, XEigFactor);
            miny <<= _swi(OS_ReadModeVariable, _IN(0)|_IN(1)|_RETURN(2),
            	     	 -1, YEigFactor);
            minx = (minx - sizex)>>1;
            miny = (miny - sizey)>>1;

            _swi(Wimp_OpenWindow, _BLOCK(1),
                 cache_w,
                 minx,
                 miny,
                 minx + w_cache->r.maxx - w_cache->r.minx,
                 miny + w_cache->r.maxy - w_cache->r.miny,
                 0,
                 0,
                 -1);

	    tmp_icon=&(w_cache->icons[0]);
            _swi(Wimp_SetCaretPosition,_IN(0)|_IN(1)|_IN(4)|_IN(5),
             	 cache_w, 0, -1, strlen(tmp_icon->buffer));
}
