/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* File		: globals.h
 * Purpose	: define various global objects for the URI handler module
 * Author	: C.Elkins
 * History	: Started 9/2/97
 * 		: 28-Apr-97: BAL: Put action codes in parentheses to ensure
 * 				  intended order of evaluation is what actually
 * 				  happens.
 */

#ifndef _globals_h
#define _globals_h

#ifndef _uri_h
#include "URI.h"
#endif

/*
 * Useful constants & macros
 */

#define UNUSED(x)		(x)=(x)

#ifndef TRUE
#define TRUE			1
#define FALSE			0
#endif

#define MinWimpVersion		310

#define MagicWord		('l' << 24 | 'r' << 16 | 'a' << 8 | 'C')

#define	ServiceA7_Started	0
#define ServiceA7_Dying		1
#define	ServiceA7_Check		2
#define	ServiceA7_Process	3


#define Action_Inform		(1 << 0)
#define Action_Check		(1 << 1)
#define	Action_ActiveOnly	(1 << 2)
#define Action_ServiceA7	(1 << 8)
#define	Action_WimpBroad	(1 << 9)
#define	Action_LoadDone		(1 << 10)
#define Action_WimpUnicast      (1 << 11)
#define Action_URLProto         (1 << 12)
#define	Action_Delete		(1 << 16)
#define Action_Claimed		(1 << 17)


#define ERR(x)			msg_error(x)
#define err_badparams		0
#define err_nomemory		1
#define err_badURI		2
#define err_badhandle		3
#define err_badfile		4
#define err_usedesktop		5
#define err_feactive		6

#ifdef DEBUG
  #if defined DEBUG_TML
    #include "svcprint.h"
    #define M_debug(a) Printf a
  #elif defined PDebug_DEBUG
    #include "PDebug.Send.h"
    #define M_debug(a) PDebug_Printf a
  #elif defined DEBUG_SNB
    extern void SNB_Printf(char*, ...);
    #define M_debug(a) SNB_Printf a
  #else
    #define M_debug(a)
  #endif
#else
  #define M_debug(a)
#endif


/*
 * Types used by URI handler
 */

typedef struct		URI_block
{
  int			guardword;
  int			action;
  struct URI_block*	previous;
  struct URI_block*	next;
  int			taskhandle;
  int                   sourcetask;
  int			length;
  char			string;
} URI_t;


/*
 * Globally visible function definitions
 */


extern void			Printf(char*, ...);

extern void*			Resources(void);
extern int			Image_RO_Base;
extern void* 			ModuleR12;
extern const char		ModuleName[];
extern URI_handle_t		URI_handle_chain;
extern volatile int		URI_taskhandle;
extern volatile int		URI_taskstack;
extern volatile int		callback_flag;
extern volatile int		poll_word;

#endif
