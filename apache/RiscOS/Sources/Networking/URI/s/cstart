; Copyright 2007 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; A simple module-application entry veneer, much thinner than the
; default. Allocates a fixed-size 8K stack in the RMA, stores a pointer to
; it in global |URI_taskstack| (so that it can be freed if the task is
; killed while paged out rather than by exiting normally), and BL's to
;   _kernel_oserror *main(char *command_string)
; where |command_string| is the command string, including module name, as
; provided by the RISC OS kernel, and the return value is passed to OS_Exit.

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:ModHand

STACK_SIZE      *       8*1024  ; includes the 540 bytes below sl

        AREA    |Asm$$Code|,CODE,READONLY

        IMPORT  main
        IMPORTVar URI_taskstack

        EXPORT  _blib_entermodule

_blib_entermodule
        MOV     v1, r0

        ; Claim stack from RMA
        MOV     r0, #ModHandReason_Claim
        MOV     r3, #STACK_SIZE
        SWI     OS_Module ; non-X form, so goto error handler on failure

        ; Initialise static relocation offsets from module workspace
        LDR     r12, [r12]
        LDMIB   r12, {r0,r1}
        STMIA   r2, {r0,r1}

        ; Store the address of the stack in the global variable
        STRVar  r2, r1, URI_taskstack, r3

        ; Call the APCS entry point, main
        ADD     sl, r2, #540
        MOV     fp, #0
        ADD     sp, r2, #STACK_SIZE
        MOV     a1, v1
        BL      main
        MOV     v1, a1

        ; Tidy up
        StaticBaseFromSL r1
        MOV     r2, #0
        STRVar  r2, r1, URI_taskstack, r3
        MOV     r0, #ModHandReason_Free
        SUB     r2, sl, #540
        SWI     XOS_Module ; ignore errors this time

        ; Exit
        MOV     r0, v1
        SWI     OS_Exit

        END
