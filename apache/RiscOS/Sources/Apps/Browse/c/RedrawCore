/* Copyright 2006 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    RedrawCore.c                                      */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Core redraw functions based around a replaceable  */
/*          jump table.                                       */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 14-Feb-2006 (ADH): Created.                       */
/**************************************************************/

#include <kernel.h>

#include <tboxlibs/wimp.h>

#include "Global.h"
#include "Redraw.h"
#include "Utils.h"

#include "RedrawCore.h"

/* Set up the default redraw jump table */

static redrawcore_function_table_t rtable_default =
                                   {
                                     redraw_jmptbl_line,
                                     redraw_jmptbl_rectangle,
                                     redraw_jmptbl_triangle,
                                     redraw_jmptbl_circle,

                                     redraw_jmptbl_text,

                                     redraw_jmptbl_image,
                                     redraw_jmptbl_sprite,

                                     redraw_jmptbl_clipping,

                                     NULL, /* Not interested in sections/names/links */
                                     NULL,
                                     NULL
                                   };

static redrawcore_function_table_t rtable;

/* Total data counted so far */

static size_t counting_data = 0;
static size_t data_counter  = 0;

/**************************************************************/
/* redrawcore_replace_table()                                 */
/*                                                            */
/* Replace the internal redraw jump table with one that the   */
/* caller supplies. All future RedrawCore calls will use that */
/* table.                                                     */
/*                                                            */
/* Parameters: Pointer to new table.                          */
/**************************************************************/

void redrawcore_replace_table(redrawcore_function_table_t * replace)
{
  rtable = *replace;
}

/**************************************************************/
/* redrawcore_default_table()                                 */
/*                                                            */
/* Replace the internal redraw jump table with the default.   */
/* All future RedrawCore calls will use that default table.   */
/**************************************************************/

void redrawcore_default_table(void)
{
  rtable = rtable_default;
}

/**************************************************************/
/* redrawcore_count_sizes()                                   */
/*                                                            */
/* Reset an internal total counter. Use non-NULL r_size       */
/* parameters in future redraw calls and count the totals.    */
/* Function redrawcore_return_count restores behaviour to     */
/* normal, clearing r_size in future calls. The total counter */
/* is reset.                                                  */
/**************************************************************/

void redrawcore_count_sizes(void)
{
  counting_data = 1;
  data_counter  = 0;
}

/**************************************************************/
/* redrawcore_return_count()                                  */
/*                                                            */
/* Return the total counted since the last call made to       */
/* redrawcore_count_sizes. Stop counting data, setting r_size */
/* back to NULL in future redraw calls. The total counter is  */
/* not reset until the next call to redrawcore_count_sizes,   */
/* so it can be read again if need be.                        */
/**************************************************************/

size_t redrawcore_return_count(void)
{
  counting_data = 0;
  return data_counter;
}

/**************************************************************/
/* redrawcore_line()                                          */
/*                                                            */
/* Call through the redraw jump table to perform a device     */
/* specific line redraw operation. See RedrawCore.h.          */
/*                                                            */
/* If the table entry is empty, NULL is returned immediately. */
/*                                                            */
/* Parameters: See redraw_line_fn_ptr_t, RedrawCore.h.        */
/*             The r_size parameter is set internally - see   */
/*             function redrawcore_count_sizes for details.   */
/*                                                            */
/* Returns:    See redraw_line_fn_ptr_t, RedrawCore.h.        */
/**************************************************************/

_kernel_oserror * redrawcore_line
                  (
                    const browser_data * restrict b,
                    const BBox         * restrict ends,
                    unsigned int                  colour
                  )
{
  /* Slightly long-winded handling of counting_data done for speed */

  if (rtable.line)
  {
    if (counting_data)
    {
      size_t call_r_size = 0;

      RetError((rtable.line)(b,
                             ends,
                             colour,

                             &call_r_size));

      data_counter += call_r_size;
    }
    else
    {
      return   (rtable.line)(b,
                             ends,
                             colour,

                             NULL);
    }
  }

  return NULL;
}

/**************************************************************/
/* redrawcore_rectangle()                                     */
/*                                                            */
/* Call through the redraw jump table to perform a device     */
/* specific rectangle draw operation. See RedrawCore.h.       */
/*                                                            */
/* If the table entry is empty, NULL is returned immediately. */
/*                                                            */
/* Parameters: See redraw_rectangle_fn_ptr_t, RedrawCore.h.   */
/*             The r_size parameter is set internally - see   */
/*             function redrawcore_count_sizes for details.   */
/*                                                            */
/* Returns:    See redraw_rectangle_fn_ptr_t, RedrawCore.h.   */
/**************************************************************/

_kernel_oserror * redrawcore_rectangle
                  (
                    const browser_data * restrict b,
                    const BBox         * restrict rect,
                    unsigned int                  colour,
                    unsigned int                  border
                  )
{
  /* Slightly long-winded handling of counting_data done for speed */

  if (rtable.rectangle)
  {
    if (counting_data)
    {
      size_t call_r_size = 0;

      RetError((rtable.rectangle)(b,
                                  rect,
                                  colour,
                                  border,

                                  &call_r_size));

      data_counter += call_r_size;
    }
    else
    {
      return   (rtable.rectangle)(b,
                                  rect,
                                  colour,
                                  border,

                                  NULL);
    }
  }

  return NULL;
}

/**************************************************************/
/* redrawcore_triangle()                                      */
/*                                                            */
/* Call through the redraw jump table to perform a device     */
/* specific triangle redraw operation. See RedrawCore.h.      */
/*                                                            */
/* If the table entry is empty, NULL is returned immediately. */
/*                                                            */
/* Parameters: See redraw_triangle_fn_ptr_t, RedrawCore.h.    */
/*             The r_size parameter is set internally - see   */
/*             function redrawcore_count_sizes for details.   */
/*                                                            */
/* Returns:    See redraw_triangle_fn_ptr_t, RedrawCore.h.    */
/**************************************************************/

_kernel_oserror * redrawcore_triangle
                  (
                    const browser_data * restrict b,
                    int                           x1,
                    int                           y1,
                    int                           x2,
                    int                           y2,
                    int                           x3,
                    int                           y3,
                    unsigned int                  colour
                  )
{
  /* Slightly long-winded handling of counting_data done for speed */

  if (rtable.triangle)
  {
    if (counting_data)
    {
      size_t call_r_size = 0;

      RetError((rtable.triangle)(b,
                                 x1, y1,
                                 x2, y2,
                                 x3, y3,
                                 colour,

                                 &call_r_size));

      data_counter += call_r_size;
    }
    else
    {

      return   (rtable.triangle)(b,
                                 x1, y1,
                                 x2, y2,
                                 x3, y3,
                                 colour,

                                 NULL);
    }
  }

  return NULL;
}

/**************************************************************/
/* redrawcore_circle()                                        */
/*                                                            */
/* Call through the redraw jump table to perform a device     */
/* specific circle redraw operation. See RedrawCore.h.        */
/*                                                            */
/* If the table entry is empty, NULL is returned immediately. */
/*                                                            */
/* Parameters: See redraw_circle_fn_ptr_t, RedrawCore.h.      */
/*             The r_size parameter is set internally - see   */
/*             function redrawcore_count_sizes for details.   */
/*                                                            */
/* Returns:    See redraw_circle_fn_ptr_t, RedrawCore.h.      */
/**************************************************************/

_kernel_oserror * redrawcore_circle
                  (
                    const browser_data * restrict b,
                    int                           x,
                    int                           y,
                    unsigned int                  radius,
                    unsigned int                  colour
                  )
{
  /* Slightly long-winded handling of counting_data done for speed */

  if (rtable.circle)
  {
    if (counting_data)
    {
      size_t call_r_size = 0;

      RetError((rtable.circle)(b,
                               x, y,
                               radius,
                               colour,

                               &call_r_size));

      data_counter += call_r_size;
    }
    else
    {
      return   (rtable.circle)(b,
                               x, y,
                               radius,
                               colour,

                               NULL);
    }
  }

  return NULL;
}

/**************************************************************/
/* redrawcore_text()                                          */
/*                                                            */
/* Call through the redraw jump table to perform a device     */
/* specific text redraw operation. See RedrawCore.h.          */
/*                                                            */
/* If the table entry is empty, NULL is returned immediately. */
/*                                                            */
/* Parameters: See redraw_text_fn_ptr_t, RedrawCore.h.        */
/*             The r_size parameter is set internally - see   */
/*             function redrawcore_count_sizes for details.   */
/*                                                            */
/* Returns:    See redraw_text_fn_ptr_t, RedrawCore.h.        */
/**************************************************************/

_kernel_oserror * redrawcore_text
                  (
                    const browser_data * restrict b,
                    fm_face                       handle,
                    int                           x,
                    int                           y,
                    const char         * restrict string,
                    unsigned int                  numbytes,
                    unsigned int                  fgcolour,
                    unsigned int                  bgcolour,
                    unsigned int                  blend
                  )
{
  /* Slightly long-winded handling of counting_data done for speed */

  if (rtable.text)
  {
    if (counting_data)
    {
      size_t call_r_size = 0;

      RetError((rtable.text)(b,
                             handle,
                             x, y,
                             string,
                             numbytes,
                             fgcolour,
                             bgcolour,
                             blend,

                             &call_r_size));

      data_counter += call_r_size;
    }
    else
    {
      return   (rtable.text)(b,
                             handle,
                             x, y,
                             string,
                             numbytes,
                             fgcolour,
                             bgcolour,
                             blend,

                             NULL);
    }
  }

  return NULL;
}

/**************************************************************/
/* redrawcore_image()                                         */
/*                                                            */
/* Call through the redraw jump table to perform a device     */
/* specific image redraw operation. See RedrawCore.h.         */
/*                                                            */
/* If the table entry is empty, NULL is returned immediately. */
/*                                                            */
/* Parameters: See redraw_image_fn_ptr_t, RedrawCore.h.       */
/*             The r_size parameter is set internally - see   */
/*             function redrawcore_count_sizes for details.   */
/*                                                            */
/* Returns:    See redraw_image_fn_ptr_t, RedrawCore.h.       */
/**************************************************************/

_kernel_oserror * redrawcore_image
                  (
                    const browser_data * restrict b,
                    unsigned int                  image,
                    int                           x,
                    int                           y,
                    unsigned int                  width,
                    unsigned int                  height
                  )
{
  /* Slightly long-winded handling of counting_data done for speed */

  if (rtable.image)
  {
    if (counting_data)
    {
      size_t call_r_size = 0;

      RetError((rtable.image)(b,
                              image,
                              x, y,
                              width,
                              height,

                              &call_r_size));

      data_counter += call_r_size;
    }
    else
    {
      return   (rtable.image)(b,
                              image,
                              x, y,
                              width,
                              height,

                              NULL);
    }
  }

  return NULL;
}

/**************************************************************/
/* redrawcore_sprite()                                        */
/*                                                            */
/* Call through the redraw jump table to perform a device     */
/* specific sprite redraw operation. See RedrawCore.h.        */
/*                                                            */
/* If the table entry is empty, NULL is returned immediately. */
/*                                                            */
/* Parameters: See redraw_sprite_fn_ptr_t, RedrawCore.h.      */
/*             The r_size parameter is set internally - see   */
/*             function redrawcore_count_sizes for details.   */
/*                                                            */
/* Returns:    See redraw_sprite_fn_ptr_t, RedrawCore.h.      */
/**************************************************************/

_kernel_oserror * redrawcore_sprite
                  (
                    const browser_data * restrict b,
                    const char         * restrict name,
                    int                           x,
                    int                           y
                  )
{
  /* Slightly long-winded handling of counting_data done for speed */

  if (rtable.sprite)
  {
    if (counting_data)
    {
      size_t call_r_size = 0;

      RetError((rtable.sprite)(b,
                               name,
                               x, y,

                               &call_r_size));

      data_counter += call_r_size;
    }
    else
    {
      return   (rtable.sprite)(b,
                               name,
                               x, y,

                               NULL);
    }
  }

  return NULL;
}

/**************************************************************/
/* redrawcore_clipping()                                      */
/*                                                            */
/* Call through the redraw jump table to perform a device     */
/* specific clipping rectangle operation. See RedrawCore.h.   */
/*                                                            */
/* Parameters: See redraw_clipping_fn_ptr_t, RedrawCore.h.    */
/*             The r_size parameter is set internally - see   */
/*             function redrawcore_count_sizes for details.   */
/*                                                            */
/* Returns:    See redraw_clipping_fn_ptr_t, RedrawCore.h.    */
/**************************************************************/

_kernel_oserror * redrawcore_clipping
                  (
                    const browser_data * restrict b,
                    const BBox         * restrict desired
                  )
{
  /* Slightly long-winded handling of counting_data done for speed */

  if (rtable.clipping)
  {
    if (counting_data)
    {
      size_t call_r_size = 0;

      RetError((rtable.clipping)(b,
                                 desired,

                                 &call_r_size));

      data_counter += call_r_size;
    }
    else
    {
      return   (rtable.clipping)(b,
                                 desired,

                                 NULL);

    }
  }

  return NULL;
}

/**************************************************************/
/* redrawcore_section_cb()                                    */
/*                                                            */
/* Call through the redraw jump table to provide information  */
/* about a new inferred section title. See RedrawCore.h.      */
/*                                                            */
/* Parameters: See redraw_section_cb_fn_ptr_t, RedrawCore.h.  */
/*             The r_size parameter is set internally - see   */
/*             function redrawcore_count_sizes for details.   */
/*                                                            */
/* Returns:    See redraw_section_cb_fn_ptr_t, RedrawCore.h.  */
/**************************************************************/

_kernel_oserror * redrawcore_section_cb
                  (
                    const browser_data * restrict b,
                    const char         * restrict section
                  )
{
  /* Slightly long-winded handling of counting_data done for speed */

  if (rtable.section_cb)
  {
    if (counting_data)
    {
      size_t call_r_size = 0;

      RetError((rtable.section_cb)(b,
                                   section,

                                   &call_r_size));

      data_counter += call_r_size;
    }
    else
    {
      return   (rtable.section_cb)(b,
                                   section,

                                   NULL);

    }
  }

  return NULL;
}

/**************************************************************/
/* redrawcore_name_cb()                                       */
/*                                                            */
/* Call through the redraw jump table to provide information  */
/* about a named destination. See RedrawCore.h.               */
/*                                                            */
/* Parameters: See redraw_name_cb_fn_ptr_t, RedrawCore.h. The */
/*             r_size parameter is set internally - see       */
/*             function redrawcore_count_sizes for details.   */
/*                                                            */
/* Returns:    See redraw_name_cb_fn_ptr_t, RedrawCore.h.     */
/**************************************************************/

_kernel_oserror * redrawcore_name_cb
                  (
                    const browser_data * restrict b,
                    const char         * restrict name,
                    const BBox         * restrict bounds
                  )
{
  /* Slightly long-winded handling of counting_data done for speed */

  if (rtable.name_cb)
  {
    if (counting_data)
    {
      size_t call_r_size = 0;

      RetError((rtable.name_cb)(b,
                                name,
                                bounds,

                                &call_r_size));

      data_counter += call_r_size;
    }
    else
    {
      return   (rtable.name_cb)(b,
                                name,
                                bounds,

                                NULL);

    }
  }

  return NULL;
}

/**************************************************************/
/* redrawcore_link_cb()                                       */
/*                                                            */
/* Call through the redraw jump table to provide information  */
/* about a hyperlink. See RedrawCore.h.                       */
/*                                                            */
/* Parameters: See redraw_link_cb_fn_ptr_t, RedrawCore.h. The */
/*             r_size parameter is set internally - see       */
/*             function redrawcore_count_sizes for details.   */
/*                                                            */
/* Returns:    See redraw_link_cb_fn_ptr_t, RedrawCore.h.     */
/**************************************************************/

_kernel_oserror * redrawcore_link_cb
                  (
                    const browser_data * restrict b,
                    const char         * restrict link,
                    const BBox         * restrict bounds
                  )
{
  /* Slightly long-winded handling of counting_data done for speed */

  if (rtable.link_cb)
  {
    if (counting_data)
    {
      size_t call_r_size = 0;

      RetError((rtable.link_cb)(b,
                                link,
                                bounds,

                                &call_r_size));

      data_counter += call_r_size;
    }
    else
    {
      return   (rtable.link_cb)(b,
                                link,
                                bounds,

                                NULL);

    }
  }

  return NULL;
}
