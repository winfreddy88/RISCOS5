/* Copyright 2006 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    RedrawCore.h                                      */
/*          (C) 2000 Pace Micro Technology PLC                */
/*          All rights reserved                               */
/*                                                            */
/* Purpose: Core redraw functions based around a replaceable  */
/*          jump table.                                       */
/*                                                            */
/* Author:  A.D.Hodgkinson.                                   */
/*                                                            */
/* History: 14-Feb-2006 (ADH): Created.                       */
/**************************************************************/

#ifndef Browser_RedrawCore__
  #define Browser_RedrawCore__

  #include <kernel.h>

  #include <tboxlibs/wimp.h>

  #include "Global.h"
  #include "FontManage.h" /* For fm_face.h */

  /*! Type defining a pointer to a function which will
   *  draw a line.
   *
   * /param b        Pointer to the browser_data structure
   *                 for which this operation is taking place;
   *                 this is used to find out things like the
   *                 current OS unit to millipoint scaling.
   *
   * /param ends     Bounding box with the (xmin, ymin) and
   *                 (xmax, ymax) points indicating the line
   *                 start and end positions respectively,
   *                 inclusive, user-points, values positive
   *                 upwards and rightwards.
   *
   * /param colour   32-bit colour number in the form
   *                 <tt>BBGGRRxx</tt> giving 256 levels of
   *                 blue, green and red in uncorrected
   *                 colour space, with <tt>xx</tt> set to
   *                 zero.
   *
   * /param r_size   If NULL, perform the redraw action as
   *                 instructed; otherwise produce no output.
   *                 If the function outputs to a file, it
   *                 calculates the number of bytes it
   *                 <i>would</i> write and returns this by
   *                 updating the pointed-to value, or 0 if
   *                 the number cannot be calculated. If the
   *                 function is not file based, it writes a
   *                 value of 0 and exits without further
   *                 action. There is no distinction between
   *                 an operation that produces no output or
   *                 an operation that cannot calculate its
   *                 output size.
   *
   * /return         Pointer to a RISC OS error block if the
   *                 function fails or NULL if it succeeds.
   */

  typedef _kernel_oserror * (*redrawcore_line_fn_ptr_t)
                            (
                              const browser_data * restrict b,
                              const BBox         * restrict ends,
                              unsigned int                  colour,

                              size_t             * restrict r_size
                            );

  /*! Type defining a pointer to a function which will
   *  draw a rectangle of variable border width, optionally
   *  filled.
   *
   * /param b        Pointer to the browser_data structure
   *                 for which this operation is taking place;
   *                 this is used to find out things like the
   *                 current OS unit to millipoint scaling.
   *
   * /param rect     Bounding box defining the rectangle;
   *                 bottom left at (xmin, ymin) inclusive,
   *                 top right at (xmax, ymax) exclusive,
   *                 user-points, values positive upwards and
   *                 rightwards.
   *
   * /param colour   32-bit colour number in the form
   *                 <tt>BBGGRRxx</tt> giving 256 levels of
   *                 blue, green and red in uncorrected
   *                 colour space, with <tt>xx</tt> set to
   *                 zero.
   *
   * /param border   Border width in user-points. If zero, the
   *                 rectangle is filled rather than hollow.
   *                 Borders extend from the corners inwards
   *                 towards the centre of the rectangle.
   *                 Borders larger than half the rectangle
   *                 width or height, whichever is smaller,
   *                 will give undefined results.
   *
   * /param r_size   If NULL, perform the redraw action as
   *                 instructed; otherwise produce no output.
   *                 If the function outputs to a file, it
   *                 calculates the number of bytes it
   *                 <i>would</i> write and returns this by
   *                 updating the pointed-to value, or 0 if
   *                 the number cannot be calculated. If the
   *                 function is not file based, it writes a
   *                 value of 0 and exits without further
   *                 action. There is no distinction between
   *                 an operation that produces no output or
   *                 an operation that cannot calculate its
   *                 output size.
   *
   * /return         Pointer to a RISC OS error block if the
   *                 function fails or NULL if it succeeds.
   */

  typedef _kernel_oserror * (*redrawcore_rectangle_fn_ptr_t)
                            (
                              const browser_data * restrict b,
                              const BBox         * restrict rect,
                              unsigned int                  colour,
                              unsigned int                  border,

                              size_t             * restrict r_size
                            );

  /*! Type defining a pointer to a function which will
   *  draw a filled triangle.
   *
   * /param b        Pointer to the browser_data structure
   *                 for which this operation is taking place;
   *                 this is used to find out things like the
   *                 current OS unit to millipoint scaling.
   *
   * /param x1       X coordinate of one of the triangle's
   *                 corners, inclusive, user-points, positive
   *                 rightwards.
   *
   * /param y1       Y coordinate of one of the triangle's
   *                 corners, inclusive, user-points, positive
   *                 upwards.
   *
   * /param x2       X coordinate of another of the triangle's
   *                 corners, inclusive, user-points, positive
   *                 rightwards.
   *
   * /param y2       Y coordinate of another of the triangle's
   *                 corners, inclusive, user-points, positive
   *                 upwards.
   *
   * /param x3       X coordinate of the remaining corner,
   *                 inclusive, user-points, positive
   *                 rightwards.
   *
   * /param y3       Y coordinate of the remaining corner,
   *                 inclusive, user-points, positive upwards.
   *
   * /param colour   32-bit colour number in the form
   *                 <tt>BBGGRRxx</tt> giving 256 levels of
   *                 blue, green and red in uncorrected
   *                 colour space, with <tt>xx</tt> set to
   *                 zero.
   *
   * /param r_size   If NULL, perform the redraw action as
   *                 instructed; otherwise produce no output.
   *                 If the function outputs to a file, it
   *                 calculates the number of bytes it
   *                 <i>would</i> write and returns this by
   *                 updating the pointed-to value, or 0 if
   *                 the number cannot be calculated. If the
   *                 function is not file based, it writes a
   *                 value of 0 and exits without further
   *                 action. There is no distinction between
   *                 an operation that produces no output or
   *                 an operation that cannot calculate its
   *                 output size.
   *
   * /return         Pointer to a RISC OS error block if the
   *                 function fails or NULL if it succeeds.
   */

  typedef _kernel_oserror * (*redrawcore_triangle_fn_ptr_t)
                            (
                              const browser_data * restrict b,
                              int                           x1,
                              int                           y1,
                              int                           x2,
                              int                           y2,
                              int                           x3,
                              int                           y3,
                              unsigned int                  colour,

                              size_t             * restrict r_size
                            );

  /*! Type defining a pointer to a function which will
   *  draw a filled circle.
   *
   * /param b        Pointer to the browser_data structure
   *                 for which this operation is taking place;
   *                 this is used to find out things like the
   *                 current OS unit to millipoint scaling.
   *
   * /param x        X coordinate of midpoint, user-points,
   *                 positive rightwards.
   *
   * /param y        Y coordinate of midpoint, user-points,
   *                 positive upwards.
   *
   * /param radius   Circle radius in user-points.
   *
   * /param colour   32-bit colour number in the form
   *                 <tt>BBGGRRxx</tt> giving 256 levels of
   *                 blue, green and red in uncorrected
   *                 colour space, with <tt>xx</tt> set to
   *                 zero.
   *
   * /param r_size   If NULL, perform the redraw action as
   *                 instructed; otherwise produce no output.
   *                 If the function outputs to a file, it
   *                 calculates the number of bytes it
   *                 <i>would</i> write and returns this by
   *                 updating the pointed-to value, or 0 if
   *                 the number cannot be calculated. If the
   *                 function is not file based, it writes a
   *                 value of 0 and exits without further
   *                 action. There is no distinction between
   *                 an operation that produces no output or
   *                 an operation that cannot calculate its
   *                 output size.
   *
   * /return         Pointer to a RISC OS error block if the
   *                 function fails or NULL if it succeeds.
   */

  typedef _kernel_oserror * (*redrawcore_circle_fn_ptr_t)
                            (
                              const browser_data * restrict b,
                              int                           x,
                              int                           y,
                              unsigned int                  radius,
                              unsigned int                  colour,

                              size_t             * restrict r_size
                            );

  /*! Type defining a pointer to a function which will
   *  draw some text in the given font handle.
   *
   * /param b        Pointer to the browser_data structure
   *                 for which this operation is taking place;
   *                 this is used to find out things like the
   *                 current OS unit to millipoint scaling as
   *                 well as the font handle records.
   *
   * /param handle   Font manager handle - less than zero to
   *                 use system font. Not all output systems
   *                 may support the system font - if they do
   *                 not, nothing gets output.
   *
   * /param x        X coordinate of bottom left corner, in
   *                 user-points, positive rightwards.
   *
   * /param y        Y coordinate of bottom left corner, in
   *                 user-points, positive upwards.
   *
   * /param string   Pointer to NUL-terminated string to
   *                 output.
   *
   * /param numbytes Number of *bytes* in string to output; if
   *                 more than in the string, only as many as
   *                 appear before the NUL get output. Use
   *                 zero for the whole string.
   *
   * /param fgcolour 32-bit colour number in the form
   *                 <tt>BBGGRRxx</tt> giving 256 levels of
   *                 blue, green and red in uncorrected
   *                 colour space, with <tt>xx</tt> set to
   *                 zero. Gives the font foreground colour.
   *
   * /param bgcolour 32-bit colour number in the form
   *                 <tt>BBGGRRxx</tt> giving 256 levels of
   *                 blue, green and red in uncorrected
   *                 colour space, with <tt>xx</tt> set to
   *                 zero. Gives the font background colour.
   *
   * /param blend    If zero, don't use font blending (where
   *                 applicable). If non-zero, use font
   *                 blending. The caller is expected NOT to
   &                 set this flag if it is inappropriate -
   *                 e.g. the Font Manager version is too
   *                 old. It would be very inefficient to have
   *                 to keep checking such things internally
   *                 on each call of the implemented function.
   *
   * /param r_size   If NULL, perform the redraw action as
   *                 instructed; otherwise produce no output.
   *                 If the function outputs to a file, it
   *                 calculates the number of bytes it
   *                 <i>would</i> write and returns this by
   *                 updating the pointed-to value, or 0 if
   *                 the number cannot be calculated. If the
   *                 function is not file based, it writes a
   *                 value of 0 and exits without further
   *                 action. There is no distinction between
   *                 an operation that produces no output or
   *                 an operation that cannot calculate its
   *                 output size.
   *
   * /return         Pointer to a RISC OS error block if the
   *                 function fails or NULL if it succeeds.
   */

  typedef _kernel_oserror * (*redrawcore_text_fn_ptr_t)
                            (
                              const browser_data * restrict b,
                              fm_face                       handle,
                              int                           x,
                              int                           y,
                              const char         * restrict string,
                              unsigned int                  numbytes,
                              unsigned int                  fgcolour,
                              unsigned int                  bgcolour,
                              unsigned int                  blend,

                              size_t             * restrict r_size
                            );

  /*! Type defining a pointer to a function which will plot an
   *  image at the specified position scaled to a given width
   *  and height. Determining which image to draw, or whether
   *  a placeholder should be drawn instead, is up to callers.
   *
   * /param b        Pointer to the browser_data structure
   *                 for which this operation is taking place;
   *                 this is used to find out things like the
   *                 current OS unit to millipoint scaling.
   *
   * /param image    Internal image library image number of
   *                 the image to be drawn.
   *
   * /param x        X coordinate of bottom left corner,
   *                 user-points, positive rightwards.
   *
   * /param y        Y coordinate of bottom left corner,
   *                 user-points, positive upwards.
   *
   * /param width    Image width, user-points.
   *
   * /param height   Image height, user-points.
   *
   * /param r_size   If NULL, perform the redraw action as
   *                 instructed; otherwise produce no output.
   *                 If the function outputs to a file, it
   *                 calculates the number of bytes it
   *                 <i>would</i> write and returns this by
   *                 updating the pointed-to value, or 0 if
   *                 the number cannot be calculated. If the
   *                 function is not file based, it writes a
   *                 value of 0 and exits without further
   *                 action. There is no distinction between
   *                 an operation that produces no output or
   *                 an operation that cannot calculate its
   *                 output size.
   *
   * /return         Pointer to a RISC OS error block if the
   *                 function fails or NULL if it succeeds.
   */

  typedef _kernel_oserror * (*redrawcore_image_fn_ptr_t)
                            (
                              const browser_data * restrict b,
                              const unsigned int            image,
                              int                           x,
                              int                           y,
                              unsigned int                  width,
                              unsigned int                  height,

                              size_t             * restrict r_size
                            );

  /*! Type defining a pointer to a function which will plot a
   *  sprite at a given location at a scale based on the
   *  current millipoint to OS unit settings; at 100% scaling
   *  a 90 DPI sprite plots at 2 OS units (800 user-points)
   *  per pixel.
   *
   * /param b        Pointer to the browser_data structure
   *                 for which this operation is taking place;
   *                 this is used to find out things like the
   *                 current OS unit to millipoint scaling.
   *
   * /param name     Pointer to NUL-terminated sprite name -
   *                 the sprite must be in the browser's local
   *                 application sprite pool.
   *
   * /param x        X coordinate of bottom left corner,
   *                 user-points, positive rightwards.
   *
   * /param y        Y coordinate of bottom left corner,
   *                 user-points, positive upwards.
   *
   * /param r_size   If NULL, perform the redraw action as
   *                 instructed; otherwise produce no output.
   *                 If the function outputs to a file, it
   *                 calculates the number of bytes it
   *                 <i>would</i> write and returns this by
   *                 updating the pointed-to value, or 0 if
   *                 the number cannot be calculated. If the
   *                 function is not file based, it writes a
   *                 value of 0 and exits without further
   *                 action. There is no distinction between
   *                 an operation that produces no output or
   *                 an operation that cannot calculate its
   *                 output size.
   *
   * /return         Pointer to a RISC OS error block if the
   *                 function fails or NULL if it succeeds.
   */

  typedef _kernel_oserror * (*redrawcore_sprite_fn_ptr_t)
                            (
                              const browser_data * restrict b,
                              const char         * restrict name,
                              int                           x,
                              int                           y,

                              size_t             * restrict r_size
                            );

  /*! Type defining a pointer to a function which will
   *  define (set) a graphics clipping rectangle.
   *
   * /param b        Pointer to the browser_data structure
   *                 for which this operation is taking place;
   *                 this is used to find out things like the
   *                 current OS unit to millipoint scaling.
   *
   * /param desired  Bounding box defining the rectangle;
   *                 bottom left at (xmin, ymin) inclusive,
   *                 top right at (xmax, ymax) exclusive,
   *                 user-points, values positive upwards and
   *                 rightwards.
   *
   * /param r_size   If NULL, perform the redraw action as
   *                 instructed; otherwise produce no output.
   *                 If the function outputs to a file, it
   *                 calculates the number of bytes it
   *                 <i>would</i> write and returns this by
   *                 updating the pointed-to value, or 0 if
   *                 the number cannot be calculated. If the
   *                 function is not file based, it writes a
   *                 value of 0 and exits without further
   *                 action. There is no distinction between
   *                 an operation that produces no output or
   *                 an operation that cannot calculate its
   *                 output size.
   *
   * /return         Pointer to a RISC OS error block if the
   *                 function fails or NULL if it succeeds.
   */

  typedef _kernel_oserror * (*redrawcore_clipping_fn_ptr_t)
                            (
                              const browser_data * restrict b,
                              const BBox         * restrict desired,

                              size_t             * restrict r_size
                            );

  /*! Type defining a pointer to a function which will get
   *  called back by the redraw routines if a new inferred
   *  section is discovered during paginated redraw. Most
   *  output tables can leave this set to NULL, but some
   *  may need it - e.g. it might be useful for PDF output.
   *
   * /param b        Pointer to the browser_data structure
   *                 for which this operation is taking place.
   *                 This is 'const' but in practice some
   *                 handlers might have to cast this to a
   *                 writable pointer and update the contents.
   *
   * /param section  Pointer to NUL-terminated section title.
   *                 Whilst the browser_data structure might
   *                 contain section text information it is
   *                 provided here for more direct access. It
   *                 is possible that this text differs from
   *                 that in the browser. The text provided
   *                 in this parameter should always be used
   *                 in preference.
   *
   * /param r_size   If NULL, perform any output actions that
   *                 might be necessary in response to the
   *                 callback. If non-NULL, return the amount
   *                 of data, in bytes, that would be output
   *                 as a result of such actions, but do not
   *                 actually perform them.
   *
   * /return         Pointer to a RISC OS error block if the
   *                 function fails or NULL if it succeeds.
   */

  typedef _kernel_oserror * (*redrawcore_section_cb_fn_ptr_t)
                            (
                              const browser_data * restrict b,
                              const char         * restrict section,

                              size_t             * restrict r_size
                            );

  /*! Type defining a pointer to a function which will get
   *  called back by the redraw routines if a definition of
   *  a named destination is discovered during paginated
   *  redraw. Most output tables can leave this set to NULL,
   *  but some may need it - e.g. it might be useful for PDF
   *  output.
   *
   * /param b        Pointer to the browser_data structure
   *                 for which this operation is taking place.
   *                 This is 'const' but in practice some
   *                 handlers might have to cast this to a
   *                 writable pointer and update the contents.
   *
   * /param name     Pointer to NUL-terminated name text for
   *                 this named destination.
   *
   * /param rect     Bounding box enclosing the named area;
   *                 bottom left at (xmin, ymin) inclusive,
   *                 top right at (xmax, ymax) exclusive,
   *                 user-points, values positive upwards and
   *                 rightwards.
   *
   * /param r_size   If NULL, perform any output actions that
   *                 might be necessary in response to the
   *                 callback. If non-NULL, return the amount
   *                 of data, in bytes, that would be output
   *                 as a result of such actions, but do not
   *                 actually perform them.
   *
   * /return         Pointer to a RISC OS error block if the
   *                 function fails or NULL if it succeeds.
   */

  typedef _kernel_oserror * (*redrawcore_name_cb_fn_ptr_t)
                            (
                              const browser_data * restrict b,
                              const char         * restrict name,
                              const BBox         * restrict bounds,

                              size_t             * restrict r_size
                            );

  /*! Type defining a pointer to a function which will get
   *  called back by the redraw routines if a hyperlink is
   *  is discovered during paginated redraw. Most output
   *  tables can leave this set to NULL, but some may need it
   *  - e.g. it might be useful for PDF output.
   *
   * /param b        Pointer to the browser_data structure
   *                 for which this operation is taking place.
   *                 This is 'const' but in practice some
   *                 handlers might have to cast this to a
   *                 writable pointer and update the contents.
   *
   * /param link     Pointer to NUL-terminated "raw" text for
   *                 hyperlink as supplied by the HTML parser.
   *
   * /param rect     Bounding box enclosing the hyperlink;
   *                 bottom left at (xmin, ymin) inclusive,
   *                 top right at (xmax, ymax) exclusive,
   *                 user-points, values positive upwards and
   *                 rightwards.
   *
   * /param r_size   If NULL, perform any output actions that
   *                 might be necessary in response to the
   *                 callback. If non-NULL, return the amount
   *                 of data, in bytes, that would be output
   *                 as a result of such actions, but do not
   *                 actually perform them.
   *
   * /return         Pointer to a RISC OS error block if the
   *                 function fails or NULL if it succeeds.
   */

  typedef _kernel_oserror * (*redrawcore_link_cb_fn_ptr_t)
                            (
                              const browser_data * restrict b,
                              const char         * restrict link,
                              const BBox         * restrict bounds,

                              size_t             * restrict r_size
                            );

  /*! Type defining a table of function pointers holding
   *  everything needed to redraw a page. All pointers may be
   *  NULL if there is no support for that aspect of redraw -
   *  of course, this means any elements relying upon that
   *  function will be invisible or only partially complete.
   *  All functions are required for general redrawing
   *  <i>except</i> the circle plotting function which is only
   *  used in <tt>TRACE</tt> builds under certain trace flags.
   */

  typedef struct redrawcore_function_table
  {
    redrawcore_line_fn_ptr_t        line;
    redrawcore_rectangle_fn_ptr_t   rectangle;
    redrawcore_triangle_fn_ptr_t    triangle;
    redrawcore_circle_fn_ptr_t      circle;

    redrawcore_text_fn_ptr_t        text;

    redrawcore_image_fn_ptr_t       image;
    redrawcore_sprite_fn_ptr_t      sprite;

    redrawcore_clipping_fn_ptr_t    clipping;

    redrawcore_section_cb_fn_ptr_t  section_cb;
    redrawcore_name_cb_fn_ptr_t     name_cb;
    redrawcore_link_cb_fn_ptr_t     link_cb;
  }
  redrawcore_function_table_t;

  /*! Replace the internal redraw jump table with one that the
   *  caller supplies. All future RedrawCore calls will use
   *  that table.
   *
   * /param replace  Pointer to new table.
   */

  void redrawcore_replace_table (redrawcore_function_table_t * replace);

  /*! Replace the internal redraw jump table with the default.
   *  All future RedrawCore calls will use that default table.
   */

  void redrawcore_default_table (void);

  /*! Set the r_size parameter in all future redraw calls to a
   *  non-NULL internal value and keep a total count until
   *  this is disabled by function redrawcore_return_count.
   *  The counter is always reset when this call is made.
   *
   *  /see redrawcore_return_count
   */

  void redrawcore_count_sizes (void);

  /*! Return the total counted so far after all call to
   *  redrawcore_count_sizes. In future redraw calls r_size is
   *  set back to NULL. The counter is not reset and may be
   *  read again.
   *
   *  /see redrawcore_count_sizes
   */

  size_t redrawcore_return_count (void);

  /*! Call through the jump table. The 'r_size' parameter is
   *  used through function redrawcore_count_sizes.
   *
   * /see redrawcore_rectangle_fn_ptr_t
   * /see redrawcore_count_sizes
   */

  _kernel_oserror * redrawcore_line
                    (
                      const browser_data * restrict b,
                      const BBox         * restrict ends,
                      unsigned int                  colour
                    );

  /*! Call through the jump table. The 'r_size' parameter is
   *  used through function redrawcore_count_sizes.
   *
   * /see redrawcore_rectangle_fn_ptr_t
   * /see redrawcore_count_sizes
   */

  _kernel_oserror * redrawcore_rectangle
                    (
                      const browser_data * restrict b,
                      const BBox         * restrict rect,
                      unsigned int                  colour,
                      unsigned int                  border
                    );

  /*! Call through the jump table. The 'r_size' parameter is
   *  used through function redrawcore_count_sizes.
   *
   * /see redrawcore_triangle_fn_ptr_t
   * /see redrawcore_count_sizes
   */

  _kernel_oserror * redrawcore_triangle
                    (
                      const browser_data * restrict b,
                      int                           x1,
                      int                           y1,
                      int                           x2,
                      int                           y2,
                      int                           x3,
                      int                           y3,
                      unsigned int                  colour
                    );

  /*! Call through the jump table. The 'r_size' parameter is
   *  used through function redrawcore_count_sizes.
   *
   * /see redrawcore_circle_fn_ptr_t
   * /see redrawcore_count_sizes
   */

  _kernel_oserror * redrawcore_circle
                    (
                      const browser_data * restrict b,
                      int                           x,
                      int                           y,
                      unsigned int                  radius,
                      unsigned int                  colour
                    );

  /*! Call through the jump table. The 'r_size' parameter is
   *  used through function redrawcore_count_sizes.
   *
   * /see redrawcore_text_fn_ptr_t
   * /see redrawcore_count_sizes
   */

  _kernel_oserror * redrawcore_text
                    (
                      const browser_data * restrict b,
                      fm_face                       handle,
                      int                           x,
                      int                           y,
                      const char         * restrict string,
                      unsigned int                  numbytes,
                      unsigned int                  fgcolour,
                      unsigned int                  bgcolour,
                      unsigned int                  blend
                    );

  /*! Call through the jump table. The 'r_size' parameter is
   *  used through function redrawcore_count_sizes.
   *
   * /see redrawcore_image_fn_ptr_t
   * /see redrawcore_count_sizes
   */

  _kernel_oserror * redrawcore_image
                    (
                      const browser_data * restrict b,
                      unsigned int                  image,
                      int                           x,
                      int                           y,
                      unsigned int                  width,
                      unsigned int                  height
                    );

  /*! Call through the jump table. The 'r_size' parameter is
   *  used through function redrawcore_count_sizes.
   *
   * /see redrawcore_sprite_fn_ptr_t
   * /see redrawcore_count_sizes
   */

  _kernel_oserror * redrawcore_sprite
                    (
                      const browser_data * restrict b,
                      const char         * restrict name,
                      int                           x,
                      int                           y
                    );

  /*! Call through the jump table. The 'r_size' parameter is
   *  used through function redrawcore_count_sizes.
   *
   * /see redrawcore_clipping_fn_ptr_t
   * /see redrawcore_count_sizes
   */

  _kernel_oserror * redrawcore_clipping
                    (
                      const browser_data * restrict b,
                      const BBox         * restrict desired
                    );

  /*! Call through the jump table. The 'r_size' parameter is
   *  used through function redrawcore_count_sizes.
   *
   * /see redrawcore_section_cb_fn_ptr_t
   * /see redrawcore_count_sizes
   */

  _kernel_oserror * redrawcore_section_cb
                    (
                      const browser_data * restrict b,
                      const char         * restrict section
                    );

  /*! Call through the jump table. The 'r_size' parameter is
   *  used through function redrawcore_count_sizes.
   *
   * /see redrawcore_name_cb_fn_ptr_t
   * /see redrawcore_count_sizes
   */

  _kernel_oserror * redrawcore_name_cb
                    (
                      const browser_data * restrict b,
                      const char         * restrict name,
                      const BBox         * restrict bounds
                    );


  /*! Call through the jump table. The 'r_size' parameter is
   *  used through function redrawcore_count_sizes.
   *
   * /see redrawcore_link_cb_fn_ptr_t
   * /see redrawcore_count_sizes
   */

  _kernel_oserror * redrawcore_link_cb
                    (
                      const browser_data * restrict b,
                      const char         * restrict link,
                      const BBox         * restrict bounds
                    );

#endif /* Browser_RedrawCore__ */
