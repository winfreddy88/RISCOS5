/* add getting option -- e1 ==> turn multiple edit warn on */
/* add options entry to main menu */
/* this file should provide open handler */
/* typedef struct { BOOL warn_multi_edits;
                    char *current_language;    /* null means no lang. */
                    char *default_search_path; /* comma-separated */
                    
                  } options_set;
/* if warn multiple options set */
   open handler scans current txtedit_states list looking for newly opened
   file - must skip first entry (or only check count >= 2) - check to see
   if file is modified




New C sources
-------------

New features in !SrcEdit require:
options.c
languages.c
langhelp.c
selectload.c
multiedit.c
throwback.c

options.c
~~~~~~~~~
/* needs to support:
 *      - getting saved options on start-up
 *          for language == get help file and hash it (done in help.c)
 *                          set default_search_path
 *          for multiedit warn == set value in options 
 *          for search path == set own_search_path
 *      - saving options to file (when picked from menu)
 *      - getting available languages
 *      - making a menu
 *      - processing menu hits
 */


/*******************************************************************************************/

languages.c
~~~~~~~~~~~
needs to support:
    - reading in languages file
    - making a menu of languages
    - processing menu hits (ie making a language the current one)
    - returning the name of the language which is current

/*******************************************************************************************/

multiedit.c
~~~~~~~~~~~
needs to support:
    - open handler which:
          checks if options.warn_multiple is set
          if so:
            look for file with this name (which is modified)
            if not found do nothing
            if found:
               popup dialogue box, results:
                 IReadOnly:  install event handlers
                 IEditable:  do nothing
                 ICancelEdit: dispose of txtedit_state

/*******************************************************************************************/

selectload.c
~~~~~~~~~~~~
needs to suuport:
   - reading in search path from <SrcEdit$Dir>.LangPaths
   - building a filename from the selection:
          - strip off extraneous characters
          - try in order:
                  foo.<selection> (where edited file is foo.<langext>.<filename>
                  user's search path
                  default search path

LangPaths:
   <LanguageName> <1orMoreSpaces> <search path>


/*******************************************************************************************/

langhelp.c   
~~~~~~~~~~
needs to support:
   - reading in help file and hashing it
   - help file format:


winevent.c
~~~~~~~~~~
needs to support:
   - CTRL-L keyboard shortcut for loading from selection 
   - use of f10 for bracket matching
          

/***************************************************************************************/

throwback.c
~~~~~~~~~~~

/* Title:   throwback.c
 * Purpose: deal with error 'throwback' from tools
 * Author:  IDJ
 * History: 07-Mar-90: IDJ: created
 *          08-Mar-90: IDJ: added handlers 
 *
 */


#include <string.h>
#include <stdlib.h>

#include "txt.h"
#include "bool.h"
#include "wimp.h"
#include "wimpt.h"
#include "werr.h"
#include "dbox.h"
#include "win.h"
#include "template.h"

#include "throwback.h"


/******* error lists **********/

typedef struct throwback_filename
{
   struct throwback_filename *next;
   char filename[256];
}
                      
typedef struct throwback_error
{
   struct throwback_error *next;
   char *processing_file;          /* one shared version */
   char *error_in;                 /* one per error msg */
   int line_number;
   int severity;
   char *description;
} throwback_error

typedef struct throwback_session 
{ 
   struct throwback_session *next;
   int id;
   dbox tool;
   wimp_w pane;
   throwback_filename *processing_files; 
   throwback_filename *current_processing_file;
   throwback_error *error_list;
   throwback_error *current_error;
   throwback_error *selected_error;
} throwback_session;
                  

/************ message types ***************/


typedef struct
{
   char filename[228];
} throwback_msg_procfile;

typedef struct
{
   char filename[228];
} throwback_msg_errorin;

typedef struct
{
   int line_number;
   int severity;
   char description[220];
} throwback_msg_details

typedef struct throwback_msgstr 
{
   wimp_msghdr hdr;
   int id;
   void *edit_handle;
   union 
   {
     char chars[228];
     int words[57];
     throwback_msg_procfile  processing_file;
     throwback_msg_errorin   error_in;
     throwback_msg_details   details;
   } data;
} throwback_msgstr; 
                

/************************** event handling ********************************/
                                                                           
static void throwback__open_pane(wimp_w pane_handle, wimp_wstate ws)
{  
   wimp_icon openat;
 
   /* get place to put pane */
   wimpt_complain(wimp_get_icon_info(ws.w, throwback__IPane, &openat);

   /* just need to munge place on sreen */
   ws.o.box.x0 += openat.box.x0;
   ws.o.box.x1 += openat.box.x1;
   ws.o.box.y0 -= openat.box.y0;
   ws.o.box.y1 -= openat.box.y1;

   /* ... and open the pane */
   wimpt_complain(wimp_open_wind(&ws.o));
}
  


static BOOL throwback__bkg_events(wimp_eventstr *e, void *handle)
{
   throwback_session *session = (throwback_session *)handle;
   throwback_msgstr *msg = (throwback_message *)&e->data.msg;

   /* handler for all unknown events - only interested in throwback msgs */
   if (!(e->e == wimp_ESEND || e->e == wimp_ESENDWANTACK))
      return FALSE;
   else
   {
      switch(msg->hdr)
      {
         case DDE_ProcessingFile:
           /* create new processing_file for this session */
           {
             throwback_filename *new;
             if ((new = malloc(sizeof(throwback_filename))) == 0)
             {
                werr(FALSE, "throw4:Not enough space for new procfile");
                return TRUE;
             }
             
             /* enter into list */
             strncpy(new->filename, msg->data.processing_file.filename, 228);
             session->processing_files = Slist_AddE(session->processing_files, (void *)new);
             session->current_processing_file = new;
           }
           return TRUE;
           break;

         case DDE_ErrorIn:
           /* create new error entry for this session */
           /* remember to point back to current processing file */
           {
             throwback_error *new;
             if ((new = malloc(sizeof(throwback_error))) == 0)
             {
                werr(FALSE, "throw5:Not enough space for new error entry");
                return TRUE;
             }
             new->processing_file = session->current_processing_file;
             if ((new->error_in = malloc(strlen(msg->data.error_in.filename)+1)) == 0)
             {
                werr(FALSE, "throw5:Not enough space for new error entry");
                return TRUE;
             }
             strcpy(new->error_in, msg->data.error_in.filename);
             session->current_error = new;
           } 
           return TRUE;
           break;

         case DDE_ErrorDetails:
           /* fill in line number, severity, description */
           session->current_error->line_number = msg->data.details.line_number;
           session->current_error->severity = msg->data.details.severity;
           if ((session->current_error->description = malloc(strlen(msg->data.details.description)+1)) == 0)
           {
              werr(FALSE, "throw5:Not enough space for new error entry");
              return TRUE;
           }
           strcpy(session->current_error->description, msg->data.details.description);           
           return TRUE;
           break;

         case DDE_EndThrowback:
           /* remove bkg event processor */
           win_remove_unknown_event_processor(throwback__bkg_events, handle);
           return TRUE;
           break;

         default:
           return FALSE;
      }
   }
   return FALSE;
}



static BOOL throwback__dboxrawevents(dbox d, void *event, void *handle)
{  
   /* raw event handler for main error dbox */
}



static void throwback__dboxevents(dbox d, void *handle)
{                                             
   /* event handler for main error dbox */
}



static void throwback__pane_handler(wimp_eventstr *e, void *handle)
{                                         
   /* event handler for error window pane */
}



/************************** dealing with error sessions *******************/

static throwback_session *throwback__new_session(int id)
{
   throwback_session *new;

   if ((new = malloc(sizeof(throwback_session))) == 0)           
   {
      werr(FALSE, "throw1:Not enough space to start throwback session");
      return 0; /* note careful when using this !!!*/
   }
   else
   {
      template t;
      wimp_wstate ws;
      new->id = id;

      /* create main dialogue box for error display */    
      if ((new->tool = dbox_new("Errors")) == 0)
      {                                              
         werr(FALSE, "throw2:Not enough space to create error dialogue");
         return 0; /* note careful when using this !!!*/
      }

      /* create pane window */
      if ((t = template_copy(template_find("ErrorPane"))) == 0)
      {
          werr(FALSE, "throw3:Not enough space to create errors pane");
          return 0;
      }
      wimpt_complain(wimp_create_wind(session->pane, t->window));

      /* add event handlers:
       *
       *   an unknown event processor to continue msg-passing dialogue
       *   a dbox raw event handler (for opens to pass on to pane)
       *   a dbox event handler (for clicks?)
       *   a pane window handler
      */
      win_add_unknown_event_processor(throwback__bkg_events, (void *)session);
      dbox_raweventhandler(session->tool, throwback__dboxrawevents, (void *)session);
      dbox_eventhandler(session->tool, throwback__dboxevents, (void *)session);
      win_register_event_handler(session->pane, throwback__pane_handler, (void *)session);
      
      /* show the main error dbox (and pane) */
      dbox_showstatic(session->tool);
      wimpt_complain(wimp_get_wind_state(dbox_syshandle(session->tool), &ws));
      throwback__open_pane(ws.o);

      new->processing_files = 0;
      new->current_processing_file = 0;
      new->error_list = 0;
      new->selected_error = 0;
   }

   return new;
}
   


static throwback_error *throwback__new_error(throwback_session *session,
                         char *error_in,
                         int line_number,
                         int severity,
                         char *description)
{
   throwback_error *new;

   /* create a new throwback_error and put it on the end of the list */
   if ((new = malloc(sizeof(throwback_error))) == 0)
        return 0;
   session->error_list = Slist_AddE((void *)(session->error_list), (void *)new);

   /* set up fields of the error */ 
   new->processing_file = session->current_processing_file->filename;
   if ((new->error_in = malloc(strlen(error_in)+1)) == 0)
      return 0;
   strncpy(new->error_in, error_in, 256);
   new->line_number = line_number;
   new->severity = severity;                  
   if ((new->description = malloc(strlen(description)+1)) == 0)
      return 0;
   strncpy(new->description, description, 256);

   return new;
}

