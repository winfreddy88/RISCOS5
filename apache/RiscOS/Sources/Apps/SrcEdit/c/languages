/* Copyright 2007 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* File:     languages.c
 * Purpose:  configuring for language-specific use (eg. help/loadpaths)
 * Author:   IDJ
 * History:  26-Feb-90: IDJ: created
 *
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "werr.h"
#include "menu.h"
#include "msgs.h"
#include "bool.h"

#include "selectload.h"
#include "languages.h"


#define MAX_LANGUAGES 16

typedef struct {
                 char *name;
                 char *search_path;
                 char *help_location;
               } languages__str;

static languages__str *languages__list[MAX_LANGUAGES];
static int languages__current = -1;
static menu languages__menu = 0;


static BOOL languages__getaline(FILE *fp, char *line)
{
   int c;
   
   while ((c = fgetc(fp)) != '\n' && c != EOF)
      *line++ = c;

   *line = '\0';
   return (c == EOF);
}


   
static void languages__read_list(void)
{
   FILE *lang_fp;
   char lang[32];
   char search_path[256], help_location[256];
   int i = 0;
   BOOL all_read = FALSE;

   if ((lang_fp = fopen("<SrcEdit$Dir>.choices.languages", "r")) != 0)
   {
       languages__getaline(lang_fp, lang);
       languages__getaline(lang_fp, search_path);
       all_read = languages__getaline(lang_fp, help_location);
       while (!all_read)
       {
          /* read in a language name (max. 32 chars should be enough!!) */
          if (i < MAX_LANGUAGES)
          {
             if ((languages__list[i] = malloc(sizeof(languages__str))) == 0)
                werr(FALSE, msgs_lookup("lang2:Not enough space to read languages"));
             if ((languages__list[i]->name = malloc(strlen(lang)+1)) == 0)
                werr(FALSE, msgs_lookup("lang2:Not enough space to read languages"));
             if ((languages__list[i]->search_path = malloc(strlen(search_path)+1)) == 0)
                werr(FALSE, msgs_lookup("lang2:Not enough space to read languages"));
             if ((languages__list[i]->help_location = malloc(strlen(help_location)+1)) == 0)
                werr(FALSE, msgs_lookup("lang2:Not enough space to read languages"));
             strcpy(languages__list[i]->name, lang);
             strcpy(languages__list[i]->search_path, search_path);
             strcpy(languages__list[i]->help_location, help_location);
             i++;
          }
          else
             werr(FALSE, msgs_lookup("lang1:Too many languages"));
          
          languages__getaline(lang_fp, lang);
          languages__getaline(lang_fp, search_path);
          all_read = languages__getaline(lang_fp, help_location);
      }
      fclose(lang_fp);
   }
}   



static void languages__comma_list(char *entries)
{  int i = 0;
   entries[0] = 0;
   while (languages__list[i] != 0)
   {
      strncat(entries, languages__list[i]->name, 256);
      i++;
      if (languages__list[i] != 0) strcat(entries, ",");
   }
}


   
static void languages__menu_maker(void *handle)
{
   char entries[255];
   handle = handle;
   languages__comma_list(entries);
   languages__menu = menu_new(msgs_lookup("lang3:Languages"), entries);
}



static void languages__menusetflags(void)
{
   if (languages__current != -1)
   { int i = 0;
     while (languages__list[i] != 0)
     {
       menu_setflags(languages__menu, i+1, (i==languages__current)?TRUE:FALSE, FALSE);
       i++;
     }
   }
}



extern BOOL languages_none_loaded(void)
{
   return (languages__list[0] == 0);
}



extern menu languages_menu_maker(void *handle)
{
   if (languages__menu == 0)
      languages__menu_maker(handle);
   languages__menusetflags();
   return languages__menu;
}



extern void languages_menu_processor(void *handle, char *hit)
{
   handle = handle;
   if ((hit[0]-1) == languages__current)
   {  
      languages__current = -1;
   }
   else
   {
      languages__current = hit[0]-1;
      languages_set_current(languages__list[languages__current]->name);
   }
}



extern void languages_set_current(char *name)
{
   int i = 0;

   while (languages__list[i] != 0)
   {
      if (!strcmp(name, languages__list[i]->name))
      {
         languages__current = i;
         break;
      }
      else
         i++;
   }

   /* set the default search path used in selection loading */
   if (languages__current != -1) selectload_set_dft_searchpath(languages__list[languages__current]->search_path);
}


extern char* languages_get_current_search_path(void)
{
   if (languages__current == -1) return 0;
   return languages__list[languages__current]->search_path;
}

extern char *languages_current_name(void)
{
   if (languages__current != -1)
       return languages__list[languages__current]->name;
   else
       return 0;
}


extern char *languages_help_location(void)
{
   if (languages__current != -1)
       return languages__list[languages__current]->help_location;
   else
       return 0;
}


extern void languages_init(void)
{
   int i;
   for (i = 0; i < MAX_LANGUAGES; i++) languages__list[i] = 0;
   languages__read_list();
}
