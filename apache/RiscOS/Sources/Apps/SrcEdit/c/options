/* Copyright 2007 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* File:   options.c
 * Purpose: handling setting of SrcEdit's own options
 * Author:  IDJ
 * History: 26-Feb-90: IDJ: Created
 *          15-Mar-91: IDJ: use msgs.h
 *          03-Apr-91: IDJ: new global options coltab overwrite wordwrap
 *          11-Jun-07: CGR: BASIC Options added, Options saved to <Choices$write>
 *
 */


#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "werr.h"
#include "wimpt.h"
#include "txtopt.h"
#include "os.h"
#include "msgs.h"
#include "menu.h"
#include "txtedit.h"
#include "swis.h"

#include "languages.h"
#include "options.h"

#define  warn_multiple       0x00000001
#define  coltab              0x00000002
#define  overwrite           0x00000004
#define  wordwrap            0x00000008
#define  basicstrip          0x00000010

typedef struct { int flags;
                 char own_search_path[255];   /* comma-separated */
                 char basicincrm[8];
               } options__str;


#define options_MColTab       1
#define options_MOverWrite    2
#define options_MWordWrap     3
#define options_MWarnMultiple 4
#define options_MLanguages    5
#define options_MSearchPath   6
#define options_MBasicOptions 7

#define options_MBasicStrip 1
#define options_MBasicIncrm 2


static options__str options = {0};
static menu options__menu = 0;
static menu options__menu_search_path = 0;
static menu options__menu_basic =0;
static menu options__menu_basic_increment=0;



static void options__read_options(void)
    /* read options from Choices:SrcEdit.options  or <SrcEdit$Dir>.choices.options */
{
    char opts[255];
    int i = 0;
    FILE *opts_fp = fopen("Choices:SrcEdit.options", "r");
    if (opts_fp==0) opts_fp = fopen("<SrcEdit$Dir>.choices.options", "r");

    /* set !SrcEdit's own internal options */
    if (opts_fp != 0)
       fgets(opts, 255, opts_fp);
    else
       return;

    while (opts[i] != 0)
    {
       switch (opts[i++])
       {
          case 'p':  { char lang[255];
                       int j = 0;
                       while (opts[i] != 0 && opts[i] != ' ')
                          lang[j++] = opts[i++];
                       lang[j] = 0;
                       languages_set_current(lang);
                     }
                     break;

          case 'e':  if (opts[i] == '1') options.flags |= warn_multiple;
                     break;

          case 'c':  options.flags |= coltab;
                     break;

          case 'o':  options.flags |= overwrite;
                     break;

          case 'w':  options.flags |= wordwrap;
                     break;

          case 'i':  { int j = 0;
                       while (opts[i] != 0 && opts[i] != ' ')
                           options.own_search_path[j++] = opts[i++];
                       options.own_search_path[j++]=0;
                     }
                     break;

          case 's':  options.flags &= ~basicstrip;
                     break;

          case 'n':  { int j = 0;
                       while (opts[i] != 0 && opts[i] != ' ')
                           options.basicincrm[j++] = opts[i++];
                       options.basicincrm[j++] = 0;
                     }
                     break;
          default:
                     break;
       }
    }
    fclose(opts_fp);
}



static void options__read_and_set_liboptions(void)
{
   /* read risc_oslib options */
   FILE *libopts_fp = fopen("Choices:SrcEdit.liboptions", "r");
   if (libopts_fp==0) libopts_fp = fopen("<SrcEdit$Dir>.choices.liboptions", "r");
   if (libopts_fp != 0)
   {  char libopts[80], a[255], *optname;
      fgets(libopts, 80, libopts_fp);
      optname = txtopt_get_name();
      strcpy(a, "*Set ");
      strcat(a, optname);
      strcat(a, "$Options ");
      strncat(a, libopts, 255);
      wimpt_complain(os_cli(a));
      fclose(libopts_fp);
   }
}



static void options__menu_maker(void *handle)
{
   menu lang_menu = languages_menu_maker(handle);

   handle = handle;

   /* options menu */
   if (options__menu == 0)
   {
       options__menu = menu_new(msgs_lookup("opt2:Options"),
                                msgs_lookup("opt3:Column tab,Overwrite,Wordwrap,Warn multiple edits,Language,Search path,Basic options"));

       /* submenus */
       menu_submenu(options__menu, options_MLanguages, lang_menu);
       options__menu_search_path = menu_new(msgs_lookup("opt4:Search path"),
                                            "foo");
       menu_make_writeable(options__menu_search_path, 1, options.own_search_path, 255, "");
       menu_submenu(options__menu, options_MSearchPath, options__menu_search_path);

       options__menu_basic = menu_new(msgs_lookup("BOT:BASIC options"),
                                      msgs_lookup("BOM:Strip line numbers,Line number increment"));
       options__menu_basic_increment = menu_new(msgs_lookup("BOI:Increment"),"foo");
       menu_make_writeable(options__menu_basic_increment, 1, options.basicincrm, 10, "");
       menu_submenu(options__menu_basic, 2, options__menu_basic_increment);
       menu_submenu(options__menu, options_MBasicOptions, options__menu_basic);
       
   }
}



static void options__menusetflags(void)
{
   menu_setflags(options__menu, options_MWarnMultiple, options_warn_multiple(), FALSE);
   menu_setflags(options__menu, options_MLanguages, FALSE, (languages_none_loaded())?TRUE:FALSE);
   menu_setflags(options__menu, options_MColTab, options_coltab(), FALSE);
   menu_setflags(options__menu, options_MOverWrite, options_overwrite(), FALSE);
   menu_setflags(options__menu, options_MWordWrap, options_wordwrap(), FALSE);
   menu_setflags(options__menu_basic, options_MBasicStrip, options_basicstrip(), FALSE);
}



extern menu options_menu_maker(void *handle)
   /* make a menu given current option settings/languages */
{
   options__menu_maker(handle);
   options__menusetflags();
   return options__menu;
}



extern void options_menu_processor(void *handle, char *hit)
    /* process hits on the options submenu */
{
   handle = handle;

   switch(hit[0])
   {
      case options_MWarnMultiple:
           options.flags ^= warn_multiple;
           break;

      case options_MLanguages:
           if (hit[1] != 0)
              languages_menu_processor(handle, hit+1);
           break;

      case options_MSearchPath:
           break;

      case options_MColTab:
           options.flags ^= coltab;
           break;

      case options_MOverWrite:
           options.flags ^= overwrite;
           break;

      case options_MWordWrap:
           options.flags ^= wordwrap;
           break;
      case options_MBasicOptions:
           switch (hit[1])
           {
             case options_MBasicStrip:
                options.flags ^= basicstrip;
                txtedit_setBASICstrip(options_basicstrip());
                menu_setflags(options__menu_basic, options_MBasicStrip, options_basicstrip(), FALSE);
                break;
             case options_MBasicIncrm:
                txtedit_setBASICincrement(options_basicincrm());
                break;
           }
           break;
   }

   /*  set the system variable ??*/
}



extern void options_save(void)
    /* saves currently set options to <SrcEdit$Dir>.options
       and liboptions */
{
   FILE *opts_fp, *libopts_fp;
   char *lang, libsysvar_name[255], *liboptname, libopts[80];
   os_regset r;

   /* save own options */

   /* create SrcEdit folder in Choices. */
   r.r[0]=8;
   r.r[1]=(int)"<Choices$Write>.SrcEdit";
   r.r[4]=0;

   os_swix(OS_File,&r);

   opts_fp = fopen("<Choices$Write>.SrcEdit.options", "w");
   if (opts_fp == 0) opts_fp = fopen("<SrcEdit$dir>.choices.options", "w");
   if (opts_fp == 0)
   {
      werr(FALSE, msgs_lookup("opt1:Unable to open <Choices$Write>.SrcEdit.options"));
      return;
   }
   else
   {
      if ((lang = languages_current_name()) != 0)
         fprintf(opts_fp, "p%s", lang);
      if (options_warn_multiple())
         fprintf(opts_fp, " e1");
      if (options_coltab())
         fprintf(opts_fp, " c");
      if (options_overwrite())
         fprintf(opts_fp, " o");
      if (options_wordwrap())
         fprintf(opts_fp, " w");
      if (options.own_search_path[0] != 0)
         fprintf(opts_fp, " i%s", options.own_search_path);
      if (options_basicincrm() != 10);
         fprintf(opts_fp, " n%d",options_basicincrm());
      if (!options_basicstrip())
         fprintf(opts_fp, " s");
      fclose(opts_fp);
   }

   /* save library options */
   libopts_fp = fopen("<Choices$Write>.SrcEdit.liboptions", "w");
   if (libopts_fp == 0) libopts_fp = fopen("<SrcEdit$dir>.choices.liboptions", "w");
   if (libopts_fp == 0)
   {
      werr(FALSE, msgs_lookup("opt5:Unable to open <Choices$Write>.SrcEdit.liboptions"));
      return;
   }
   else
   {
      liboptname = txtopt_get_name();
      strncpy(libsysvar_name, liboptname, 255);
      strncat(libsysvar_name, "$Options", 255);
      os_read_var_val(libsysvar_name, libopts, 50);
      fprintf(libopts_fp, "%s", libopts);
      fclose(libopts_fp);
   }
}



extern BOOL options_warn_multiple(void)
{
   return (options.flags & warn_multiple)?TRUE:FALSE;
}

extern BOOL options_coltab(void)
{
   return (options.flags & coltab)?TRUE:FALSE;
}

extern BOOL options_overwrite(void)
{
   return (options.flags & overwrite)?TRUE:FALSE;
}

extern BOOL options_wordwrap(void)
{
   return (options.flags & wordwrap)?TRUE:FALSE;
}

extern BOOL options_basicstrip(void)
{
   return (options.flags & basicstrip)?TRUE:FALSE;
}

extern int options_basicincrm(void)
{
   int i=atoi(options.basicincrm);
   if (i<=0 || i>100)
   {
     i=10;
     sprintf(options.basicincrm, "%i",i);
   }
   return i;
}

extern char *options_own_search_path(void)
{
   return options.own_search_path;
}

extern void options_init(void)
{
    /* default options */
    options.flags = basicstrip;
    options.own_search_path[0] = 0;
    options.basicincrm[0]=0;
    options__menu = 0;

    options__read_options();
    options__read_and_set_liboptions();
    options_menu_maker(0);
}
