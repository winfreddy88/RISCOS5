/* Copyright 2007 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* File:   srcedmenus.c
 * Purpose: customise the edit menu tree for our own ends
 * Author: IDJ  (yes I'm afraid I'm responsible for this hackery)
 * History:   28-Feb-90: IDJ: split off from multiedit
 *
 */

#include <string.h>

#include "menu.h"
#include "wimp.h"
#include "txtedit.h"
#include "txtscrap.h"
#include "werr.h"

#include "selectload.h"
#include "langhelp.h"

#include "srcedmenus.h"

/* Top level */
#define srcedmenus_MSave   2
#define srcedmenus_MSelect 3
#define srcedmenus_MEdit   4
/* In the MSelect submenu */
#define srcedmenus_MHelp   11
#define srcedmenus_MLoad   12


extern menu srcedmenus_menumaker(void *handle)
{
   menu m;
   wimp_menustr *mstr, *submstr;
   wimp_menuitem *topentry, *subentry;
   int i;
   txtedit_state *s = (txtedit_state *)handle;
   BOOL selection = txtscrap_selectowner() != NULL;

   /* make a menu from the current edit state */
   m = txtedit_menu(s);

   /* now re-enable things we may have greyed out */
   mstr = menu_syshandle(m);

   /* top-level - re-enable Save and Edit */
   topentry = ((wimp_menuitem *)(mstr+1)) + srcedmenus_MSave - 1;
   topentry->iconflags &= ~wimp_INOSELECT;
   topentry = ((wimp_menuitem *)(mstr+1)) + srcedmenus_MEdit - 1;
   topentry->iconflags &= ~wimp_INOSELECT;

   /* misc sub-menu */
   topentry = ((wimp_menuitem *)(mstr+1));
   submstr = topentry->submenu;

   /* re-enable entries 2-7 (set type .. wordwrap) */
   for (i = 2; i < 8; i++)
   {
        subentry = ((wimp_menuitem *)(submstr+1)) + i;
        subentry->iconflags &= ~wimp_INOSELECT;
   }

   /* select sub-menu  */
   topentry = ((wimp_menuitem *)(mstr+1)) + srcedmenus_MSelect - 1;
   submstr = topentry->submenu;

   /* allow last two, if there is a selection */
   subentry = ((wimp_menuitem *)(submstr+1)) + srcedmenus_MHelp - 1;
   if (selection)
       subentry->iconflags &= ~wimp_INOSELECT;
   else
       subentry->iconflags |= wimp_INOSELECT;
   subentry = ((wimp_menuitem *)(submstr+1)) + srcedmenus_MLoad - 1;
   if (selection)
       subentry->iconflags &= ~wimp_INOSELECT;
   else
       subentry->iconflags |= wimp_INOSELECT;

   return m;

}



extern menu srcedmenus_readonly_menumaker(void *handle)
{
   menu m;
   wimp_menustr *mstr, *submstr;
   wimp_menuitem *topentry, *subentry;
   int i,j;
   txtedit_state *s = (txtedit_state *)handle;
   BOOL selection = txtscrap_selectowner() != NULL;

   /* make a menu from the current edit state */
   m = txtedit_menu(s);

   /* now grey out all 'naughty' menu options */
   mstr = menu_syshandle(m);

   /* top-level - disallow Save and Edit */
   topentry = ((wimp_menuitem *)(mstr+1)) + srcedmenus_MSave - 1;
   topentry->iconflags |= wimp_INOSELECT;

   /* misc sub-menu */
   topentry = ((wimp_menuitem *)(mstr+1));
   submstr = topentry->submenu;

   /* grey out entries */
   j=0x13;
   for (i = 0; i < 8; i++)
   {
        if (j & (1<<i)) continue;
        subentry = ((wimp_menuitem *)(submstr+1)) + i;
        subentry->iconflags |= wimp_INOSELECT;
   }

   /* select sub-menu  */
   topentry = ((wimp_menuitem *)(mstr+1)) + srcedmenus_MSelect - 1;
   submstr = topentry->submenu;

   /* grey out Indent/Swap case/Cut/Paste/Delete */
   j=0x323;
   for (i = 0; i < 10; i++)
   {
        if (j & (1<<i)) continue;
        subentry = ((wimp_menuitem *)(submstr+1)) + i;
        subentry->iconflags |= wimp_INOSELECT;
   }

   /* allow last two, if there is a selection */
   subentry = ((wimp_menuitem *)(submstr+1)) + srcedmenus_MHelp - 1;
   if (selection)
       subentry->iconflags &= ~wimp_INOSELECT;
   else
       subentry->iconflags |= wimp_INOSELECT;
   subentry = ((wimp_menuitem *)(submstr+1)) + srcedmenus_MLoad - 1;
   if (selection)
       subentry->iconflags &= ~wimp_INOSELECT;
   else
       subentry->iconflags |= wimp_INOSELECT;

   /* edit sub-menu  */
   topentry = ((wimp_menuitem *)(mstr+1)) + srcedmenus_MEdit - 1;
   submstr = topentry->submenu;

   /* grey out entries */
   j=2;
   for (i = 0; i < 7; i++)
   {
      if (j & (1<<i)) continue;
      subentry = ((wimp_menuitem *)(submstr+1)) + i;
      subentry->iconflags |= wimp_INOSELECT;
   }

   return m;

}



extern void srcedmenus_menuproc(void *handle, char *hit)
{
   txtedit_state *s = (txtedit_state *)handle;

   switch(hit[0])
   {
      case srcedmenus_MSelect:
         switch(hit[1])
         {
            case srcedmenus_MLoad:
               selectload_load(s);
               break;

            case srcedmenus_MHelp:
               langhelp_gethelp();
               break;

            default:
               txtedit_menuevent(s, hit);
               break;
         }
         break;

      default:
         txtedit_menuevent(s, hit);
         break;
   }
}
