/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*-*-C-*-
 * I allocate a per-MsgRec dynamic buffer to receive message expansions, which
 * must be considered private and volatile.  The size of this buffer has to be
 * specified when opening the message file with open_messagefile().  It should
 * be big enough for the longest entry in the Messages file.
 */

#include "resed.h"

#include "swicall.h"


/*
 * The first Messages file opened becomes the default one; requests
 * for messages with a NULL MsgPtr are directed to this.
 */

static MsgPtr dflt = NULL;


/*
 * The 'longest' parameter is used to allocate the buffer for storing
 * messages in.  It must be at least as big as the longest
 * message in the messages file (after any expansion done by
 * MessageTrans_GSLookup.  Returns pointer to error block if open failed, else
 * NULL for success.
 */ 

error *message_openfile (MsgPtr msgs, char *filename, int longest)
{
    static const _kernel_oserror nomem = { 299, "NoMem" };
    _kernel_oserror *err;

    err = swi(MessageTrans_FileInfo, R1, filename,
                                OUT, R2, &(msgs->size), END);
    if (err != NULL) return err;

    msgs->buffersize = longest;
    msgs->data = malloc(msgs->size);
    msgs->buffer = malloc(msgs->buffersize);
    if ((msgs->data == NULL) || (msgs->buffer == NULL))
    {
        err = swi(MessageTrans_ErrorLookup,
                  R0, &nomem,
                  R1, NULL,
                  R2, NULL,
                  R3, 0, END);
    }
    else
    {
        err = swi(MessageTrans_OpenFile,
                  R0, &(msgs->opaque),
                  R1, filename,
                  R2, msgs->data, END);
    }
    
    if (err != NULL)
    {
        free(msgs->data);
        free(msgs->buffer);
        msgs->data = msgs->buffer = NULL;
        msgs->size = msgs->buffersize = 0;
        return err;
    }

    if (dflt == NULL) dflt = msgs;

    return NULL;
}


error * message_closefile (MsgPtr msgs)
{
    if (dflt == msgs)
        dflt = NULL;
    if (msgs->buffer)
        free(msgs->buffer);
    if (msgs->data)
        free(msgs->data);
    return swi(MessageTrans_CloseFile,  R0, &(msgs->opaque),  END);
}


/*
 * Simple lookup with GSTransing but no parameter substitution.
 * The pointer returned points to a malloced buffer which is
 * private to the msgs structure passed in.  That is, the caller can
 * expect the contents to remain there until the next call
 * to message_lookup() with the same msgs parameter, or until
 * message_closefile() is called.
 *
 * If there's an error, just return a pointer to the original tag.
 */

char *message_lookup (MsgPtr msgs, char *token)

{
    char *res;

    if (msgs == NULL)
        msgs = dflt;

    if (msgs == NULL)
        return token;
                
    if (swi(MessageTrans_GSLookup,
            R0, &(msgs->opaque),
            R1, token,
            R2, msgs->buffer,
            R3, msgs->buffersize,
            OUT,  R2, &res,  END))
        return token;
    else
        return res;
}
