/* Copyright 2003 Tematic Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*************************************************
*           Header file for MakeModes            *
*************************************************/

/* Philip Hazel, August/September 1993 */
/* Last updated: May 1994 */

/* Changed significantly: 18-Jul-1994 */
/* Modifications by Dean Murphy */


#include <stdarg.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "kernel.h"
#include "wimp.h"        /*  access to WIMP SWIs                      */
#include "wimpt.h"       /*  wimp task facilities                     */
#include "win.h"         /*  registering window handlers              */
#include "event.h"       /*  poll loops, etc                          */
#include "baricon.h"     /*  putting icon on icon bar                 */
#include "sprite.h"      /*  sprite operations                        */
#include "werr.h"        /*  error reporting                          */
#include "res.h"         /*  access to resources                      */
#include "resspr.h"      /*  sprite resources                         */
#include "flex.h"        /*  dynamic mem alloc from WIMP              */
#include "template.h"    /*  reading in template file                 */
#include "bbc.h"         /*  olde-style graphics routines             */
#include "os.h"          /*  low-level RISCOS access                  */
#include "dbox.h"        /*  dialogue box handling                    */
#include "visdelay.h"    /*  show the hourglass for delay             */
#include "msgs.h"        /*  messages handler                         */
#include "swis.h"	 /*  swis				      */
#include "saveas.h"      /*  Save as header                           */

#include "wimphdr.h"
#include "menu.h"
#include "help.h"

#define menu_item_height 44

/* Colours for the required icons */

#define colour_req_back         1
#define colour_req_fore1        7
#define colour_req_fore2        8

/* VRAM options */


#define VRAM_WORD           0x00200
#define NO_VRAM_FITTED      0
#define ONE_VRAM_FITTED     1
#define TWO_VRAM_FITTED     2

/*************************************************
*               Structures                       *
*************************************************/

/* The data for a monitor */

typedef struct monitor {
  struct monitor *next;
  int min_h;
  int max_h;
  int min_v;
  int max_v;
  int dpms;
  char typename[20];
  char name[80];
} monitor;



/* Chained list of strings; used for comments and for lists
of files for particular monitor types. */

typedef struct stringchain {
  struct stringchain *next;
  char text[1];
} stringchain;

/* All the data for a mode */

typedef struct mode {
  struct mode *next;
  int frame_rate;
  int h_back_porch;
  int h_display;
  int h_left_border;
  int h_front_porch;
  int h_required;
  int h_right_border;
  int h_sync_width;
  int h_total;
  int line_rate;
  int pixel_rate;
  int sync_pol;
  int v_back_porch;
  int v_bottom_border;
  int v_display;
  int v_front_porch;
  int v_required;
  int v_sync_width;
  int v_top_border;
  int v_total;
  int x_resolution;
  int y_resolution;
  int write_name;
  char mode_name[256];
} mode;

/* Data block for a monitor type, corresponding to one line
in the montype file. */

typedef struct montype {
  struct montype *next;
  char typename[20];
  stringchain *files;
} montype;

/* Structures for the tables of actions when icons are the
obects of clicks. */

typedef struct {
  int number;
  int offset;
  int type;
  int opp_field;
  int opp_offset;
} key_icon;

enum { ki_text, ki_number, ki_hnumber, ki_vnumber };

typedef struct {
  int number;
  int display_icon;
  int offset;
  int change;
  int type;
  int opp_field;
  int opp_offset;
} bump_icon;

enum { bi_h, bi_hd, bi_v, bi_vd, bi_s };




/*************************************************
*               Global variables                 *
*************************************************/


extern char      *base_subdir;       /* subdirectory for base modes */
extern int        checksave_open;
extern stringchain *comments;        /* comment text */
extern mode      *current_mode;      /* -> current mode structure */
extern int        display_open;      /* TRUE when display showing */
extern int        file_format;       /* version number of file */
extern char       file_name[];       /* name to save to */
extern int        file_saved;        /* TRUE if no change since saved */
/*extern int        handle_checksave;  handle for "checksave" window */
/*extern int        handle_display;    handle for "display" window */
/*extern int        handle_generate;   handle for "generate" window */
/*extern int        handle_generate_o; handle for "generate1" window */
/*extern int        handle_info;       handle for "info" window */
/*extern int        handle_save;       handle for the "save as" window */
/*extern int        handle_warning;    handle for the "warning" window */
/*extern int        handle_return;     handle for RETURN window */
extern int        hrequired_set;     /* true if h required field is set */
extern mode      *last_mode;
extern int        line_number;
/*extern menu_block *menu_modes;*/
extern mode      *mode_chain;        /* chain of mode structures */
extern int        mode_count;        /* number of modes */
extern int        mode_number;       /* number of current mode */
extern int        monitor_count;     /* number of monitors in monlist file */
extern monitor   *monitors;          /* chain of monitor data */
extern montype   *montypes;          /* chain of montype data */
extern montype   *mt;
extern int        current_monitor;   /* Current monitor in use */
extern int        monitor_dpms_state;/* current monitor DPMS state */
extern montype   *monitor_type;      /* current monitor type */
extern char       monitor_title[];
extern int        vrequired_set;     /* true if v required field is set */

extern int        vidc_bandwidth_limit[3];
extern int        vram_fitted;
extern int        screen_memory;

extern BOOL       keep_totals;       /* keep vertical and horizontal totals */

extern menu       menu_monitors;
extern menu       menu_modes;
extern menu       last_menu;
extern menu       menu_display;
extern menu       menu_bpp;

/* These variables will be used to hold temporary user defined monitor set-ups. */

extern int        global_l_min;
extern int        global_l_max;
extern int        global_f_min;
extern int        global_f_max;
extern int        global_dpms_state;
extern char      *global_monitor_type;
extern int        global_tolerance;

extern int        bpp_selected;

extern char       max_cols[6];

extern wimp_w              window_info;
extern wimp_w              window_generate;
extern wimp_w              window_generate_o;
extern wimp_w              window_display;
extern wimp_w              window_checksave;
extern wimp_w              window_save;
extern wimp_w              window_display;
extern wimp_w              window_warning;
extern wimp_w              window_return;


/*************************************************
*               Global functions                 *
*************************************************/

extern void (*menu_handler)(int *);

extern void blip(wimp_w w, wimp_i i, int state);
extern int  check_mode(void);
extern int  check_newname(void);
extern void close_checksave(void);
extern void data_init(int);
extern void discard_data(void);
extern void error_moan(int, ...);
extern void free_comments(void);
extern void free_modes(void);
extern int  generate_modes(int, int, int, int, char *, int, montype *);
extern int  generate_modes_from_dialogue(void);
extern char *get_icon_text(int, int);
extern void init_monitors(void);
extern void init_montypes(void);
extern int  load_file(void);
extern void make_modes_menu(void);
extern menu_block *make_monitors_menu(void);
extern void open_checksave(void);
extern int  save_file(void);
extern void set_icon_colours(int, int, int, int);
extern void set_icon_num(int, int, int);
extern void set_icon_text(int, int, char *);
extern void sort_modes(void);
extern void sigstrcpy(char *, char *);
extern void sum_horizontal(mode *);
extern void sum_vertical(mode *);
extern int  SWI(int, int, ...);
extern void update_display(void);
extern void update_my_display(void);
extern void copy_generate_info(void);
extern void update_frame_rate(mode *);
extern void wait_mouse(void);
extern void check_frame_rate(void);
extern void check_line_rate(void);
extern BOOL check_monitor_title(char *, BOOL);
extern int  get_monitor_number(char *);
extern menu alter_monitors_menu(void *handle);
extern void check_mode_timings(void);
/* From mmstubs.c */
extern char *terminate_string (char *text);
extern int save_a_definition(int number);
/* End of makemodes.h */
