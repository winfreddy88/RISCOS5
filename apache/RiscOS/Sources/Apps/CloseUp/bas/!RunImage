REM Copyright 1996 Acorn Computers Ltd
REM
REM Licensed under the Apache License, Version 2.0 (the "License");
REM you may not use this file except in compliance with the License.
REM You may obtain a copy of the License at
REM
REM     http://www.apache.org/licenses/LICENSE-2.0
REM
REM Unless required by applicable law or agreed to in writing, software
REM distributed under the License is distributed on an "AS IS" BASIS,
REM WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
REM See the License for the specific language governing permissions and
REM limitations under the License.
REM
REM CloseUp pointer zoom utility
REM ) Stuart Hickinbottom 1990/91/92/93
REM Improvements suggested by Dave De Vorchik (Computer Concepts)
REM                           Vorn Hancock (Acorn Computers)
REM                           Alastair France (Acorn Computers)
REM                           Tony Cheal (Ace Computing)
REM                           Jonathan Coxhead (Acorn)
REM Messagetrans capability introduced 11th June 1993 by Alastair
REM France (Acorn)
REM Doesn't attempt to follow an invisible caret; starts in "Follow pointer"
REM mode; uses Update rather than Redraw. J R C 25th Oct 1993
REM Warning - some of this code was produced by sales and marketing!

ON ERROR ERROR EXT ERR,LEFT$(REPORT$,240) +" ("+STR$(ERL)+")"
PROCerr_init

PROC_Initialise
IF OpenAutomatically% PROC_OpenCloseUp

WHILE TRUE
   err% =FALSE
   ON ERROR LOCAL :err% =TRUE

   IF err% =TRUE THEN
      ON ERROR :ON ERROR OFF :ERROR ERR,LEFT$(REPORT$,240) +" ("+STR$(ERL)+")"
      PROCerr_report(ERR,REPORT$,%11)
   ELSE
      PROC_PollLoop
   ENDIF
ENDWHILE
END

REM The main program loop ---------------------------------------------------------------------------------------------------

DEF PROC_PollLoop
LOCAL ReasonCode%
REPEAT
   IF CloseUpOn% THEN
      SYS "Wimp_PollIdle",0,Block%,PollTime%+1 TO ReasonCode%
   ELSE
      SYS "Wimp_Poll",1,Block% TO ReasonCode%
   ENDIF
   CASE ReasonCode% OF
      WHEN 0      : IF CloseUpOn% PROC_DoCloseUp
      WHEN 1      : PROC_RedrawWindow(Block%!0)
      WHEN 2      : IF NOT (Block%!0=CloseUpHandle% AND NOT CloseUpOn%) SYS "Wimp_OpenWindow",,Block%
      WHEN 3      : SYS "Wimp_CloseWindow",,Block%
                    IF Block%!0=CloseUpHandle% THEN
                       CloseUpOn%=FALSE
                       PROC_DeinitialiseSprites
                    ENDIF
      WHEN 6      : PROC_MouseButtonChange(Block%!8,Block%!12,Block%!16)
      WHEN 8      : PROC_KeyPressed(Block%!24,Block%!0,Block%!4)
      WHEN 9      : PROC_MenuSelect
      WHEN 17,18  : PROC_ReceiveMessage
   ENDCASE
UNTIL FALSE
ENDPROC

REM Call the various routines to initialise this program --------------------------------------------------------------------

DEF PROC_Initialise
PROC_InitialiseGlobals
MyTaskHandle%=FN_InitialiseTask(MyTaskName$,FN_MessageList)
PROC_InitialiseTemplates
PROC_OverwriteIconText(InfoWindowHandle%,1,FNmsg_0("_TaskName"))
PROC_OverwriteIconText(InfoWindowHandle%,2,FNmsg_0("_Purpose"))
PROC_OverwriteIconText(InfoWindowHandle%,3,FNmsg_0("_Author"))
PROC_OverwriteIconText(InfoWindowHandle%,4,FNmsg_0("_Version"))
IconBarIconHandle%=FN_CreateIconBarIcon(FNmsg_0("SPRNAM"))
PROC_CreateMenus
PROC_SetZoom(2,1)
ENDPROC

REM Initialise global parameter for this program ----------------------------------------------------------------------------

DEF PROC_InitialiseGlobals
LOCAL l%
DIM Block% &400
DIM MenuStruct% &100    : MenuStructPointer%=0
DIM MenuIndirect% &80   : MenuIndirectPointer%=0
DIM ScaleFactors% 16
REM If templates get too long, add more to the figure below
MaxTemplateIconLength%=&600
DIM TemplateIcons% MaxTemplateIconLength% : TemplateIconsPointer%=TemplateIcons%

PROCmsg_init("<CloseUp$Dir>.Messages")
MyTaskName$=FNmsg_0("_TaskName")
CloseUpOn%=FALSE
MemoryAllocated%=FALSE
PROC_ReadScreenSize
WinMinX% = -800
WinMaxX% = -400
WinMaxY% = -400
WinMinY% = -800
PointerOn%=TRUE
GrabCursors%=FALSE
FollowCaret%=FALSE
DIM true%4:$true%="TRUE"
DIM result% 10:SYS"OS_ReadVarVal","CloseUp$AutoOpen",result%,10,0,3
OpenAutomatically%=(!result%=!true%)
SYS "OS_ReadVarVal","CloseUp$Dir",Block%,&400,,3 TO,,l%
Block%?l%=13: closeup_dir$=$Block%
ENDPROC

REM Initialise the sprite stuff ---------------------------------------------------------------------------------------------

DEF PROC_InitialiseSprites
LOCAL WantSlot%,NewSlot%,SpriteSize%
SpriteSize% = ((400/XFactor%)*(400/YFactor%)*BPP%)/8+4096
WantSlot%   = (HIMEM-&8000)+SpriteSize%
SYS "Wimp_SlotSize",WantSlot%,-1 TO NewSlot%
IF NewSlot%<WantSlot% THEN
   MemoryAllocated%=FALSE
   CloseUpOn%=FALSE
   SYS "Wimp_SlotSize",(HIMEM-&8000),-1
   Block%!0=CloseUpHandle%
   SYS "Wimp_CloseWindow",,Block%
   ERROR errok%,FNmsg_0("NOMEM")
ELSE
   MemoryAllocated%=TRUE
   SpriteArea%=HIMEM
   SpriteArea%!0  = SpriteSize%
   SpriteArea%!4  = 0
   SpriteArea%!8  = 16
   SpriteArea%!12 = 16
   PROC_DoCloseUp
ENDIF
ENDPROC

REM Free up the memory allocated to the sprite ------------------------------------------------------------------------------

DEF PROC_DeinitialiseSprites
SYS "Wimp_SlotSize",(HIMEM-&8000),-1
MemoryAllocated%=FALSE
ENDPROC

REM Create windows from the template file -----------------------------------------------------------------------------------

DEF PROC_InitialiseTemplates
SYS "Wimp_OpenTemplate",,"<CloseUp$Dir>.Templates"
InfoWindowHandle%    = FN_CreateWindowFromTemplate("proginfo")
CloseUpHandle%       = FN_CreateWindowAndFudgeIt("closeup",255)
MagnifierHandle%     = FN_CreateWindowFromTemplate("magnifier")
SYS "Wimp_CloseTemplate"
ENDPROC

REM Create the menu for the BasCrunch --------------------------------------------------------------------------------------

DEF PROC_CreateMenus
DIMEntryFlags$(4),EntryText$(4)
EntryFlags$(0)="     ":EntryText$(0)=FNmsg_0("MNINFO")+"{^Info}"
EntryFlags$(1)="    n":EntryText$(1)=FNmsg_0("MNZOOM")+"{^Mag}"
EntryFlags$(2)="     ":EntryText$(2)=FNmsg_0("MNKYCR")
EntryFlags$(3)="     ":EntryText$(3)=FNmsg_0("MNFOCA")
EntryFlags$(4)="     ":EntryText$(4)=FNmsg_0("MNQUIT")+"{LAST}"
IconMenu%=FN_CreateMenu(FNmsg_0("MENTIT"),13)
PROC_FondleTick(MenuStruct%,2,GrabCursors%)
PROC_FondleTick(MenuStruct%,3,FollowCaret%)
ENDPROC

DEF FN_IdentifySubitemId(Id$)
LOCAL Handle%
CASE Id$ OF
   WHEN "Info"    : Handle%=InfoWindowHandle%
   WHEN "Mag"     : Handle%=MagnifierHandle%
   OTHERWISE      : Handle%=-1
ENDCASE
=Handle%

REM Handle mouse button changes (ie to create a menu) -----------------------------------------------------------------------

DEF PROC_MouseButtonChange(Buttons%,WindowHandle%,IconHandle%)
LOCAL Mul%,Div%
CASE WindowHandle% OF
   WHEN -2
      CASE IconHandle% OF
         WHEN IconBarIconHandle%
            CASE Buttons% OF
               WHEN 2   : PROC_OpenIconMenu
            OTHERWISE   : PROC_OpenCloseUp
            ENDCASE
      ENDCASE
   WHEN CloseUpHandle%
      CASE Buttons% OF
         WHEN 4 : PointerOn%=NOT PointerOn%
         WHEN 2 : SYS "Wimp_CreateMenu",,IconMenu%,Block%!0-64,Block%!4 :REM **jdl fixed x+y position to style guide
         WHEN 1 : SYS "Wimp_SetCaretPosition",-1
      ENDCASE
   WHEN MagnifierHandle%
      Mul%=VAL(FN_ReadIconText(MagnifierHandle%,0))
      Div%=VAL(FN_ReadIconText(MagnifierHandle%,1))
      CASE Buttons% OF
      WHEN 4
        CASE IconHandle% OF
           WHEN 2 : Mul%+=1
           WHEN 3 : Mul%-=1
           WHEN 4 : Div%+=1
           WHEN 5 : Div%-=1
        ENDCASE
      WHEN 1
        CASE IconHandle% OF
           WHEN 2 : Mul%-=1
           WHEN 3 : Mul%+=1
           WHEN 4 : Div%-=1
           WHEN 5 : Div%+=1
        ENDCASE
      ENDCASE
      PROC_SetZoom(Mul%,Div%)
      IF CloseUpOn% PROC_DoCloseUp
ENDCASE
ENDPROC

REM Handle menu selects -----------------------------------------------------------------------------------------------------

DEF PROC_MenuSelect
CASE Block%!0 OF
   WHEN 2   : GrabCursors%=NOT GrabCursors%
              PROC_FondleTick(MenuStruct%,2,GrabCursors%)
   WHEN 3   : FollowCaret%=NOT FollowCaret%
              PROC_FondleTick(MenuStruct%,3,FollowCaret%)
   WHEN 4   : PROCshutdown
ENDCASE
SYS "Wimp_GetPointerInfo",,Block%
IF (Block%!8 AND 1) PROC_OpenIconMenu
ENDPROC

REM Open the menu on the icon bar -------------------------------------------------------------------------------------------

DEF PROC_OpenIconMenu
SYS "Wimp_CreateMenu",,IconMenu%,Block%!0-64,96 +FN_MenuSize(IconMenu%)
ENDPROC

REM Calculate size of Menu---------------------------------------------------------------------------------------------------
REM **jdl new function

DEF FN_MenuSize(Menu%)
LOCAL size_item%,y%
size_item% =Menu%!20
y% =size_item%
Menu% +=28
WHILE (!Menu% AND %1<<7) =0
   y% +=size_item%
   Menu% +=24
ENDWHILE
=y%

REM Close down this task ----------------------------------------------------------------------------------------------------

DEF PROCshutdown
PROCmsg_end
SYS "Wimp_CloseDown",MyTaskHandle%,&4B534154
END
ENDPROC

REM Message list (Next to PROC_ReceiveMessage, hopefully to remind people to keep them in sync) -----------------------------

DEF FN_MessageList
LOCAL msg_list%
DIM msg_list% 19
msg_list%!0 =10
msg_list%!4 =&502
msg_list%!8 =&400C0
msg_list%!12 =&400C1
msg_list%!16 =0
=msg_list%

REM Handle messages received ------------------------------------------------------------------------------------------------

DEF PROC_ReceiveMessage
LOCAL Menu%,X%,Y%
CASE Block%!16 OF
   WHEN 0
      PROCshutdown
   WHEN 10
      BPUT#Block%!20,"/"+closeup_dir$
   WHEN &502
      PROC_HelpRequest(Block%!32,Block%!36)
   WHEN &400C0
      Menu% =Block%!20 :X% =Block%!24 :Y% =Block%!28
      CASE Menu% OF
         WHEN MagnifierHandle%
            PROC_SetZoom(ScaleFactors%!0,ScaleFactors%!8)
            SYS "Wimp_CreateSubMenu",,Menu%,X%,Y%
      ENDCASE
   WHEN &400C1
      PROC_ReadScreenSize
      IF CloseUpOn% THEN
         PROC_DeinitialiseSprites
         PROC_InitialiseSprites
      ENDIF
ENDCASE
ENDPROC

REM Handle requests for interactive help ------------------------------------------------------------------------------------

DEF PROC_HelpRequest(WindowHandle%,IconHandle%)
CASE WindowHandle% OF
   WHEN -2
      CASE IconHandle% OF
         WHEN IconBarIconHandle% : PROC_SendHelp(FNmsg_0("HLPICN"))
      ENDCASE
   WHEN CloseUpHandle%
      PROC_SendHelp(FNmsg_0("HLPWIN"))
ENDCASE
ENDPROC

REM Open the CloseUp window -------------------------------------------------------------------------------------------------

DEF PROC_OpenCloseUp
IF MemoryAllocated%=FALSE PROC_InitialiseSprites
IF MemoryAllocated% THEN
   Block%!0=CloseUpHandle%
   SYS "Wimp_GetWindowState",,Block%
   Block%!28=-1
   SYS "Wimp_OpenWindow",,Block%
   CloseUpOn%=TRUE
   SYS "OS_ReadMonotonicTime" TO PollTime%
ENDIF
ENDPROC

REM Redraw the window requested ---------------------------------------------------------------------------------------------

DEF PROC_RedrawWindow(WindowHandle%)
CASE WindowHandle% OF
   WHEN CloseUpHandle% : PROC_RedrawCloseUp
ENDCASE
ENDPROC

REM Redraw the CloseUp window -----------------------------------------------------------------------------------------------

DEF PROC_RedrawCloseUp
LOCAL More%, R0%, R1%, R2%, R3%, Offset%
SYS "Wimp_RedrawWindow",,Block% TO More%
Offset%=-200*(ScaleFactors%!0/ScaleFactors%!8)+200
WHILE More%
   SYS "OS_SpriteOp",&134,SpriteArea%,"CloseUp",Block%!4+Offset%-Block%!20,Block%!16+Offset%-Block%!24,0,ScaleFactors%
   SYS "Wimp_GetRectangle",,Block% TO More%
ENDWHILE
ENDPROC

REM Set the zoom value ------------------------------------------------------------------------------------------------------

DEF PROC_SetZoom(Mul%,Div%)
IF Mul%>999 Mul%=999
IF Mul%<1   Mul%=1
IF Div%>999 Div%=999
IF Div%<1   Div%=1
IF (Mul%/Div%)<1 Div%=Mul%
ScaleFactors%!0  = Mul%
ScaleFactors%!4  = Mul%
ScaleFactors%!8  = Div%
ScaleFactors%!12 = Div%
PROC_OverwriteIconText(MagnifierHandle%,0,STR$(Mul%))
PROC_OverwriteIconText(MagnifierHandle%,1,STR$(Div%))
PROC_RedrawIcon(MagnifierHandle%,0)
PROC_RedrawIcon(MagnifierHandle%,1)
ENDPROC

REM Do the CloseUp view -----------------------------------------------------------------------------------------------------

DEF PROC_DoCloseUp
REM Do not attempt to follow a non-displayed caret. J R C 22nd Oct 1993
LOCAL MouseX%, MouseY%, CaretOn%, More%, PointerX%, PointerY%, Buttons%, Offset%, More%, LBlock%, Height%
SYS "OS_ReadMonotonicTime" TO PollTime%
LBlock%=Block%+256
SYS "Wimp_GetCaretPosition",,LBlock%
IF LBlock%!0<>-1 AND LBlock%!16<>-1 Height%=LBlock%!16 AND &FFFF ELSE Height%=0
REM Is the caret window open?
CaretOn%=Height%>0
IF CaretOn% AND FollowCaret% THEN
   MouseX%=LBlock%!8
   MouseY%=LBlock%!12+Height% DIV 2
   SYS "Wimp_GetWindowState",,LBlock%
   MouseX%+=LBlock%!4-LBlock%!20
   MouseY%+=LBlock%!16-LBlock%!24
ENDIF
IF MouseX%<-1000 OR MouseX%>ScreenWidth%+1000 OR MouseY%<-1000 OR MouseY%>ScreenHeight%+1000 CaretOn%=FALSE
SYS "Wimp_GetPointerInfo",,LBlock%
PointerX%=LBlock%!0
PointerY%=LBlock%!4
Buttons%=LBlock%!8 AND %101
IF NOT CaretOn% OR NOT FollowCaret% OR Buttons%<>0 THEN
   MouseX%=PointerX%
   MouseY%=PointerY%
ENDIF
PROC_FindCloseUp
SYS "OS_SpriteOp",&110,SpriteArea%,"CloseUp",0,MouseX%-200,MouseY%-200,MouseX%+200,MouseY%+200
Block%!0=CloseUpHandle%
Block%!4=0
Block%!8=0
Block%!12=400
Block%!16=400
SYS "Wimp_UpdateWindow",,Block% TO More%
WHILE More%
   Block%!28-=MouseX%-200
   Block%!32-=MouseY%-200
   Block%!36-=MouseX%-199
   Block%!40-=MouseY%-199
   IF Block%!28>399 Block%!28=399 ELSE IF Block%!28<0 Block%!28=0
   IF Block%!32>399 Block%!32=399 ELSE IF Block%!32<0 Block%!32=0
   IF Block%!36>399 Block%!36=399 ELSE IF Block%!36<0 Block%!36=0
   IF Block%!40>399 Block%!40=399 ELSE IF Block%!40<0 Block%!40=0
   SYS "OS_SpriteOp",&13C,SpriteArea%,"CloseUp" TO R0%,R1%,R2%,R3%
   SYS "Wimp_SetColour",12
   VDU 24,Block%!28;Block%!32;Block%!36;Block%!40;
   RECTANGLE FILL WinMinX%-(MouseX%-200),WinMinY%-(MouseY%-200),397,395
   SYS "OS_SpriteOp",R0%,R1%,R2%,R3%
   SYS "Wimp_GetRectangle",,Block% TO More%
ENDWHILE
SYS "OS_SpriteOp",&13C,SpriteArea%,"CloseUp" TO R0%,R1%,R2%,R3%
SYS "Wimp_SetColour",7
IF MouseX%+200>ScreenWidth% RECTANGLE FILL ScreenWidth%-MouseX%+200,0,200,400
IF MouseX%-200<0 RECTANGLE FILL 0,0,200-MouseX%-XFactor%,400
IF MouseY%-200<0 RECTANGLE FILL 0,0,400,200-MouseY%-YFactor%
IF MouseY%+200>ScreenHeight% RECTANGLE FILL 0,ScreenHeight%-MouseY%+200,400,200
IF PointerOn% OR (FollowCaret% AND CaretOn%) THEN
   SYS "Wimp_SetColour",11
   LINE PointerX%-MouseX%+192,PointerY%-MouseY%+200,PointerX%-MouseX%+208,PointerY%-MouseY%+200
   LINE PointerX%-MouseX%+200,PointerY%-MouseY%+192,PointerX%-MouseX%+200,PointerY%-MouseY%+208
ENDIF
SYS "OS_SpriteOp",R0%,R1%,R2%,R3%

REM Use Update instead of Redraw J R C 22nd Oct 1993
REM SYS "Wimp_ForceRedraw",CloseUpHandle%,0,0,399,399
Block%!0=CloseUpHandle%
Block%!4=0
Block%!8=0
Block%!12=400
Block%!16=400
SYS "Wimp_UpdateWindow",,Block% TO More%
Offset%=-200*(ScaleFactors%!0/ScaleFactors%!8)+200
WHILE More%
   SYS "OS_SpriteOp",&134,SpriteArea%,"CloseUp",Block%!4+Offset%-Block%!20,Block%!16+Offset%-Block%!24,0,ScaleFactors%
   SYS "Wimp_GetRectangle",,Block% TO More%
ENDWHILE
ENDPROC

REM Create a window and fudge the background colour -------------------------------------------------------------------------

DEF FN_CreateWindowAndFudgeIt(WindowId$,BCol%)
LOCAL AllocatedHandle%
SYS "Wimp_LoadTemplate",,Block%,TemplateIconsPointer%,TemplateIcons%+MaxTemplateIconLength%,-1,LEFT$(WindowId$+STRING$(12,CHR$0)),0 TO ,,TemplateIconsPointer%
Block%?35=BCol%
SYS "Wimp_CreateWindow",,Block% TO AllocatedHandle%
=AllocatedHandle%

REM Read the width and height of the screen to find out where the border is -------------------------------------------------

DEF PROC_ReadScreenSize
LOCAL xeig%,yeig%
SYS "OS_ReadModeVariable",MODE,4  TO ,,xeig%
SYS "OS_ReadModeVariable",MODE,5  TO ,,yeig%
SYS "OS_ReadModeVariable",MODE,11 TO ,,ScreenWidth%
SYS "OS_ReadModeVariable",MODE,12 TO ,,ScreenHeight%
SYS "OS_ReadModeVariable",MODE,9  TO ,,BPP%
ScreenWidth%=(ScreenWidth%+1)<<xeig%
ScreenHeight%=(ScreenHeight%+1)<<yeig%
XFactor%=2^xeig%
YFactor%=2^yeig%
BPP%=2^BPP%
ENDPROC

REM Find out where the CloseUp window is - used to prevent 'visual feedback' ------------------------------------------------

DEF PROC_FindCloseUp
Block%!0 = CloseUpHandle%
SYS "Wimp_GetWindowInfo",,Block%
WinMinX% = Block%!4
WinMaxX% = Block%!12
WinMaxY% = Block%!16
WinMinY% = Block%!8
ENDPROC

REM Handle keypresses (cursor movement and RETURN in the magnifier window etc) ----------------------------------------------

DEF PROC_KeyPressed(Key%,WindowHandle%,IconHandle%)
LOCAL MouseX%,MouseY%
CASE WindowHandle% OF
   WHEN MagnifierHandle%
   CASE Key% OF
      WHEN &18E,&18F,&0D
      CASE IconHandle% OF
         WHEN 0,1 : IF Key%=13 PROC_SetZoom(VAL(FN_ReadIconText(MagnifierHandle%,0)),VAL(FN_ReadIconText(MagnifierHandle%,1)))
         SYS "Wimp_SetCaretPosition",MagnifierHandle%,1-IconHandle%,,,-1,LEN(FN_ReadIconText(MagnifierHandle%,1-IconHandle%))
      ENDCASE
      OTHERWISE SYS "Wimp_ProcessKey",Key%
   ENDCASE
   WHEN -1
   SYS "Wimp_GetPointerInfo",,Block%
   MouseX%=Block%!0
   MouseY%=Block%!4
   CASE Key% OF
      WHEN &18C : MouseX%-=XFactor%
      WHEN &18D : MouseX%+=XFactor%
      WHEN &18E : MouseY%-=YFactor%
      WHEN &18F : MouseY%+=YFactor%
      REM **jdl fixed moves to be same as RO select and added CTRL+cursor key
      WHEN &19C : MouseX%-=16*XFactor%
      WHEN &19D : MouseX%+=16*XFactor%
      WHEN &19E : MouseY%-=16*YFactor%
      WHEN &19F : MouseY%+=16*YFactor%
      WHEN &1AC : MouseX%-=64*XFactor%
      WHEN &1AD : MouseX%+=64*XFactor%
      WHEN &1AE : MouseY%-=64*YFactor%
      WHEN &1AF : MouseY%+=64*YFactor%
      OTHERWISE SYS "Wimp_ProcessKey",Key%
   ENDCASE
   IF GrabCursors% MOUSE TO MouseX%,MouseY%
   OTHERWISE SYS "Wimp_ProcessKey",Key%
ENDCASE
ENDPROC

REM Extracts from WimpLib ---------------------------------------------------------------------------------------------------

REM Initialise the WIMP system by declaring myself as a task ----------------------------------------------------------------
REM Syntax: MyTaskHandle%=FN_InitialiseTask("<TaskName>",msg_list%)
REM Where <TaskName> is the name of this task as will appear in the Task Manager window and MyTaskHandle% is the
REM  task handle allocated to me by the WIMP.
REM **jdl msg_list% added: The list of Wimp Messages that the task wishes to receive.

DEF FN_InitialiseTask(TaskName$,msg_list%)
LOCAL WimpVersion%,AllocatedTaskId%
SYS "Wimp_Initialise",310,&4B534154,TaskName$,msg_list% TO WimpVersion%,AllocatedTaskId%
=AllocatedTaskId%

REM Create an icon on the icon bar ------------------------------------------------------------------------------------------
REM Syntax: IconBarIconHandle%=FN_CreateIconBarIcon("<SpriteName>")
REM Where <SpriteName> is the name of the icon to be installed (it must be in the common sprite pool), and
REM  IconBarIconHandle% is the handle of the icon as allocated by the WIMP.

DEF FN_CreateIconBarIcon(SpriteName$)
LOCAL AllocatedIconHandle%
Block%!0  =-1
Block%!4  = 0
Block%!8  = 0
Block%!12 = 68
Block%!16 = 68
Block%!20 = %10000000000010
$(Block%+24)=SpriteName$
SYS "Wimp_CreateIcon",,Block% TO AllocatedIconHandle%
=AllocatedIconHandle%

REM Create a menu from the data supplied ------------------------------------------------------------------------------------
REM Syntax: MenuPointer%=FN_CreateMenu("<MenuTitle>",MenuWidth%)
REM Where <MenuTitle> is the title to appear on the top of the root menu (<=12 chars) and MenuWidth% is the length of the
REM  largest item in the menu.
REM Relies on memory blocks with pointers MenuStruct% and MenuIndirect% to hold the menu structure and indirected data.
REM Also, MenuStructPointer% and MenuIndirectPointer% should be initialised to 0 before defining any menus
REM 'RESTORE' the data pointer to the start of this menus DATA list, eg:
REM  DEF PROC_CreateMenus
REM  DIM MenuStruct% &100,MenuIndirect% &80
REM  MenuStructPointer%=0
REM  MenuIndirectPointer%=0
REM  RESTORE +0
REM  MainMenu%=FN_CreateMenu("BasCrunch",9)
REM  DATA     ,Info{^Info}
REM  DATA tn  ,Options{^Options}
REM  DATA     ,Quit{LAST}
REM  ENDPROC
REM Where the structure of the DATA statements is:
REM  DATA Item flags,item text {item directive}
REM Where the item flags are up to 4 characters, and the characters have the following meanings:
REM  t = The item has a 'tick' mark
REM  d = The item has a following dotted line
REM  w = The menu item is writeable
REM  n = The application will be notified through Wimp_Poll when this menu item is about to be opened (submenus/windows)
REM  u = The menu item is not selectable and is greyed out
REM The item text is the text which will appear in the menu, and the directive has the following syntax:
REM  {(^<IdName>)(LAST)}
REM  The directive LAST should be included to flag the last item in a menu
REM  The field ^IdName is used to identify the submenu/window. This is so the program can be compiled. Also, a function
REM  similar to the following should be defined to enable this:
REM
REM  DEF FN_IdentifySubitemId(Id$)
REM  LOCAL Handle%
REM  CASE Id$ OF
REM     WHEN "Info"    : Handle%=InfoWindowHandle%
REM     WHEN "Options" : Handle%=OptionsWindowHandle%
REM  OTHERWISE         : Handle%=-1
REM  ENDCASE
REM  =Handle%
REM
REM The subitem pointer can be used to build up a menu tree. To enable this the menu should be built up in reverse order
REM  so that its memory pointer is already known to link it to its parent.

DEF FN_CreateMenu(MenuTitle$,MenuWidth%)
LOCAL EntryFlags$,EntryText$,StartOfData%,ItemWord$,LastEntry%,menu_counter%
IF LEN(MenuTitle$)>12 ERROR 0,"Menu title '"+MenuTitle$+"' is too long, it must be no more than 12 characters."
StartOfData% = MenuStructPointer%+MenuStruct%
$(MenuStruct%+MenuStructPointer%)   = MenuTitle$
MenuStruct%?(MenuStructPointer%+12) = 7
MenuStruct%?(MenuStructPointer%+13) = 2
MenuStruct%?(MenuStructPointer%+14) = 0
MenuStruct%?(MenuStructPointer%+15) = 0
MenuStruct%!(MenuStructPointer%+16) = MenuWidth%*16
MenuStruct%!(MenuStructPointer%+20) = 44 :REM **jdl changed to follow style guide
MenuStruct%!(MenuStructPointer%+24) = 0
MenuStructPointer% += 28
menu_counter%=0
REPEAT
   EntryFlags$=EntryFlags$(menu_counter%)
   EntryText$=EntryText$(menu_counter%)
   MenuStruct%!(MenuStructPointer%+0)  = FN_DecodeMenuFlags(EntryFlags$,EntryText$,LastEntry%)
   MenuStruct%!(MenuStructPointer%+8)  = FN_DecodeIconFlags(EntryFlags$,EntryText$,ItemWord$)
   MenuStruct%!(MenuStructPointer%+4)  = SubPointer%
   MenuStruct%!(MenuStructPointer%+12) = MenuIndirectPointer%+MenuIndirect%
   MenuStruct%!(MenuStructPointer%+16) = -1
   MenuStruct%!(MenuStructPointer%+20) = LEN(ItemWord$)+1
   $(MenuIndirect%+MenuIndirectPointer%)=ItemWord$
   MenuStructPointer%+=24
   MenuIndirectPointer%+=LEN(ItemWord$)+1
   menu_counter%+=1
UNTIL LastEntry%
=StartOfData%

DEF FN_DecodeMenuFlags(Flags$,Text$,RETURN LastEntry%)
LOCAL Flags%
IF INSTR(Flags$,"t")    Flags%+=&01
IF INSTR(Flags$,"d")    Flags%+=&02
IF INSTR(Flags$,"w")    Flags%+=&04
IF INSTR(Flags$,"n")    Flags%+=&08
IF INSTR(Text$,"{LAST") Flags%+=&80 : LastEntry%=TRUE
=Flags%

DEF FN_DecodeIconFlags(Flags$,Text$,RETURN ItemWord$)
LOCAL Flags%
SubPointer%=-1
Flags%=&7000121
IF INSTR(Flags$,"u") Flags%+=&400000
IF INSTR(Text$,"{")  ItemWord$=LEFT$(Text$,INSTR(Text$,"{")-1) ELSE ItemWord$=Text$
IF INSTR(Text$,"{")  THEN
   Text$=MID$(Text$,INSTR(Text$,"{")+1)
   Text$=LEFT$(Text$,LEN(Text$)-1)
   IF INSTR(Text$,"^") SubPointer%=FN_IdentifySubitemId(MID$(Text$,INSTR(Text$,"^")+1))
ENDIF
=Flags%

REM Extract the text from icons. Usually used on writable fields ------------------------------------------------------------
REM Syntax: IconText$=FN_ReadIconText(WindowHandle%,IconHandle%)
REM Where WindowHandle% and IconHandle% identify the icon to be examined.

DEF FN_ReadIconText(WindowHandle%,IconHandle%)
LOCAL IconText$
Block%!100=WindowHandle%
Block%!104=IconHandle%
SYS "Wimp_GetIconState",,Block%+100
IF (Block%!124 AND (1<<8))<>0 IconText$=$(Block%!128) ELSE IconText$=$(Block%+128)
=IconText$

REM Overwrite the text of an icon. Usually used to change fields in info windows, save windows etc --------------------------
REM Syntax: PROC_OverwriteIconText(WindowHandle%,IconHandle%,IconText$)
REM Where WindowHandle% and IconHandle% identify the icon, IconText$ is the new text for the icon.

DEF PROC_OverwriteIconText(WindowHandle%,IconHandle%,IconText$)
LOCAL Pointer%,MaxLength%
Block%!0=WindowHandle%
Block%!4=IconHandle%
SYS "Wimp_GetIconState",,Block%
IF (Block%!24 AND (1<<8))<>0 Pointer%=Block%!28:MaxLength%=Block%!36 ELSE Pointer%=Block%+28:MaxLength%=12
IF LENIconText$>MaxLength% THEN
   ERROR 5,FNmsg_1("ILLLEN",IconText$)
ELSE
   $Pointer%=IconText$
ENDIF
ENDPROC

REM Extract a window from the template file and create it -------------------------------------------------------------------
REM Syntax: WindowHandle%=FN_CreateWindowFromTemplate("<WindowId>")
REM Where <WindowId> is the window identifier as created with FormEd
REM TemplateIconsPointer% should be initialised to the start of some memory to hold indirected icons before the first call,
REM  MaxTemplateLength% is the length of this space, TemplateIcons% is the start of the workspace. The procedure updates the
REM  variable TemplateIconsPointer ready for the next call.

DEF FN_CreateWindowFromTemplate(WindowId$)
LOCAL AllocatedHandle%
SYS "Wimp_LoadTemplate",,Block%,TemplateIconsPointer%,TemplateIcons%+MaxTemplateIconLength%,-1,LEFT$(WindowId$+STRING$(12,CHR$0)),0 TO ,,TemplateIconsPointer%
SYS "Wimp_CreateWindow",,Block% TO AllocatedHandle%
=AllocatedHandle%

REM Send help to be displayed by the interactive help application -----------------------------------------------------------
REM Syntax: PROC_SendHelp("<Help text to be displayed in window>")
REM The string is sort-of GSTrans'd so you can use things like |M for CR's etc.

DEF PROC_SendHelp(HelpText$)
Block%!12=Block%!8
Block%!16=&503
Block%!0=(24+LENHelpText$)AND NOT 3
$(Block%+20)=HelpText$+CHR$0
SYS "Wimp_SendMessage",17,Block%,Block%!4
ENDPROC

REM Redraw a specified icon. Works by reading icon bounding box, and doing a ForceRedraw on that ----------------------------
REM Syntax: PROC_RedrawIcon(WindowHandle%,IconHandle%)

DEF PROC_RedrawIcon(WindowHandle%,IconHandle%)
Block%!0=WindowHandle%
Block%!4=IconHandle%
SYS "Wimp_GetIconState",,Block%
SYS "Wimp_ForceRedraw",WindowHandle%,Block%!8,Block%!12,Block%!16,Block%!20
ENDPROC

REM Clear or tick a menu option ---------------------------------------------------------------------------------------------
REM Syntax: PROC_FondleTick(Pointer%,Entry%,Tick%)
REM Where Pointer% is a pointer to the base of the menu structure, Entry% is the entry number (starting from 0),
REM and Tick% is a boolean indicating the presence of a tick.

DEF PROC_FondleTick(Pointer%,Entry%,Tick%)
Pointer%+=28
WHILE Entry%>0
   Pointer%+=24
   Entry%-=1
ENDWHILE
!Pointer%=!Pointer% AND NOT 1
IF Tick% !Pointer%=!Pointer% OR 1
ENDPROC

REM Read the prescence of a tick --------------------------------------------------------------------------------------------
REM Syntax: Tick%=FN_MenuItemTicked(Pointer%,Entry%)
REM Where Pointer% is pointer to the base of the menu structure, and entry is the entry number

DEF FN_MenuItemTicked(Pointer%,Entry%)
Pointer%+=28
WHILE Entry%>0
   Pointer%+=24
   Entry%-=1
ENDWHILE
=(!Pointer% AND 1)<>0

REM >>>>>>>>>>>>>>>>>>>
REM msglib 0.01
DEFPROCmsg_init(N$)
REM LOCAL ERROR
REM ON ERROR LOCAL RESTORE ERROR:ERROR 0,"Cannot find messages file"
DIM msg_text% 256
SYS "OS_Module",6,,,17+LEN(N$) TO ,,msg_desc%
$(msg_desc%+16)=N$
SYS "MessageTrans_OpenFile",msg_desc%,msg_desc%+16,0
ENDPROC
:
DEFFNmsg_0(T$)
=FNmsg_4(T$,"","","","")
:
DEFFNmsg_1(T$,S$)
=FNmsg_4(T$,S$,"","","")
:
DEFFNmsg_2(T$,S0$,S1$)
=FNmsg_4(T$,S0$,S1$,"","")
:
DEFFNmsg_3(T$,S0$,S1$,S2$)
=FNmsg_4(T$,S0$,S1$,S2$,"")
:
DEFFNmsg_4(T$,S0$,S1$,S2$,S3$)
LOCAL F%,L%,P%,eb%
SYS "XMessageTrans_Lookup",msg_desc%,T$,msg_text%,256,S0$,S1$,S2$,S3$ TO eb%,,,L%;F%
IF F% AND 1 THEN
    = T$
ELSE
    msg_text%?L%=13
    S0$=$msg_text%
    REM substitute any tokens
    REPEAT
     P%=INSTR(S0$,"`")
     IFP%<>0 THEN
      T$=MID$(S0$,P%,2)
      SYS"XMessageTrans_Lookup",msg_desc%,T$,msg_text%,256 TO ,,,L%;F%
      IF F% AND 1 :=S0$
      msg_text%?L%=13
      S0$=LEFT$(S0$,P%-1)+$msg_text%+MID$(S0$,P%+2)
     ENDIF
    UNTIL P%=0
ENDIF
=S0$
:
DEFPROCmsg_end
IFmsg_desc% THEN
  SYS"MessageTrans_CloseFile",msg_desc%
  SYS"OS_Module",7,,msg_desc%
ENDIF
ENDPROC
REM >>>>>>>>>>>>>>>>>>>
REM errlib 0.01
DEF PROCerr_init
errok% =1
errfatal% =3
ENDPROC

DEF PROCerr_report(err%,errortext$,flags%)
LOCAL OKC%,wimpver%
SYS "XWimp_DragBox",,-1
IF err% =&108D5 OR err% =&108D4 THEN ENDPROC

IF err% =errok% THEN flags% =flags% AND NOT %10
IF err% =errfatal% THEN flags% =(3 <<9) +(%10)
IF flags% AND %10 THEN flags% =flags% OR (3<<9)

OKC% =flags% AND %11
IF OKC% =%11 THEN errortext$ =FNmsg_2("Unexp",LEFT$(errortext$,230 -LEN(FNmsg_0("Unexp"))),STR$(ERL))
IF OKC% =%10 THEN errortext$ =FNmsg_2("Fatal",LEFT$(errortext$,230 -LEN(FNmsg_0("Fatal"))),STR$(ERL))

REM if wimp>350 then replace Cancel with Quit
SYS "Wimp_ReadSysInfo",7 TO wimpver%
IF wimpver% >350 AND (flags% AND %10) >0 THEN
  errortext$ =FNmsg_0("ErrBut")+"{"+LEFT$(errortext$,240 -LEN(FNmsg_0("ErrBut")))

  flags% =flags% AND NOT %10
ENDIF

IF FNerr_box(err%,errortext$,flags%) >1 THEN PROCshutdown
ENDPROC

REM Error categories (at <<9)
REM 0 as 2 (error)
REM 1 information report (information)= just tell user something
REM 2 error report (warning) = tell user about problem, but app will continue
REM 3 program report (program) = an error that should not occur and may require app to quit
REM 4 question report (question) = ask user question (ie DCS)
REM 5 do not use (user 1)
REM 6 do not use (user 2)
DEF FNerr_box(err%,but_msg$,flags%)
LOCAL pos%,but$,err$,taskh%,task$,errf%,v%
pos% =INSTR(but_msg$,"{") :IF pos% THEN pos% -=1

but$ =MID$(but_msg$,0,pos%)
err$ =MID$(but_msg$,INSTR(but_msg$,"{") +1)
err$ =CHR$(err% >>24)+CHR$(err% >>16)+CHR$(err% >>8)+CHR$(err%) +LEFT$(err$,251)

SYS "XWimp_ReadSysInfo",5 TO taskh%;errf%
SYS "XTaskManager_TaskNameFromHandle",taskh% TO task$;v%
errf% =errf% OR v%

IF errf% AND %1 THEN task$ ="Unknown task"

IF but$ >"" THEN
  SYS "Wimp_ReportError",err$,(1<<8) +flags%,task$,,,but$ TO ,ans%
ELSE
  SYS "Wimp_ReportError",err$,(1<<8) +flags%,task$ TO ,ans%
ENDIF
=ans%
