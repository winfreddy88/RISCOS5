REM >!Puzzle.!RunImage

REM Copyright 2015 Castle Technology Ltd
REM
REM Licensed under the Apache License, Version 2.0 (the "License");
REM you may not use this file except in compliance with the License.
REM You may obtain a copy of the License at
REM
REM     http://www.apache.org/licenses/LICENSE-2.0
REM
REM Unless required by applicable law or agreed to in writing, software
REM distributed under the License is distributed on an "AS IS" BASIS,
REM WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
REM See the License for the specific language governing permissions and
REM limitations under the License.
REM
PROCvars
DIM taskid%4:$taskid%="TASK"
DIM message_list%16
DIM menu_buffer%40
DIM message_buffer%256
message_list%!0 = 10: message_list%!4 = &502: message_list%!8 = &400C1: message_list%!12 = 0
messagefile_handle% = FNopen_messagefile("<Puzzle$Dir>.Messages")
puzzle$ = FNmessage_lookup(messagefile_handle%, "Puzzle")
MaxSize% = VAL(FNmessage_lookup(messagefile_handle%, "MaxSize"))
MaxFontSize% = VAL(FNmessage_lookup(messagefile_handle%, "MaxFontSize"))
WidthOfPuzzle = VAL(FNmessage_lookup(messagefile_handle%, "PuzzleSize"))
Chequer0% = EVAL(FNmessage_lookup(messagefile_handle%, "Chequer0"))
Chequer1% = EVAL(FNmessage_lookup(messagefile_handle%, "Chequer1"))
Font$ = FNmessage_lookup(messagefile_handle%, "Font"):IF Font$="" THEN Font$=FNmessage_lookup(messagefile_handle%, "SysFont")
FontSize% = VAL(FNmessage_lookup(messagefile_handle%, "FontSize"))
file%=0:errorflag%=0:IF FNreadchoices THEN errorflag%=1
SYS "Font_ListFonts",,0,%11<<19,,0 TO ,,,R3,,R5
REM Following deallocates space which will not be used, 10000 is the
REM space allowed for non-LOCAL variables, 4096 bytes are allowed for
REM local variables and BASIC stack. MaxSize% is the max. width of puzzle.
END=LOMEM+(MaxSize%*MaxSize%*4)+10000+4096+R3+R5
DIM FontMenu% R3, FontMenuInd% R5, FontBuffer% 40, tempfont% 255, ColourMenu% 412
SYS "Font_ListFonts",,FontMenu%,%11<<19,R3,FontMenuInd%,R5
SYS "Wimp_Initialise",300,!taskid%,puzzle$,message_list% TO version%
`wbcol=3:`tbcol=2:`sco=3:`mbcol=2:`wfcol=7:`tfcol=7:`sci=1:`tbcol2=12
DIM q% 256,buffer% &200
tempfont$=Font$:colbutton%=18
FontHandle%=-1:IF Font$<>FNmessage_lookup(messagefile_handle%, "SysFont") THEN FontHandle%=0
q%!0=-1:q%!4=0:q%!8=0:q%!12=68:q%!16=68
q%!20=&17003002:$(q%+24)="!puzzle"+CHR$13
SYS "Wimp_CreateIcon",,q% TO iconbar%
DIM Templates% 1400, InfoInd% 256,BoardInd% 128, ViewInd% 600
SYS "Wimp_OpenTemplate",,"<Puzzle$Dir>.Templates"
SYS "Wimp_LoadTemplate",,Templates%,InfoInd%,InfoInd%+256,-1,"info",0
SYS "Wimp_CreateWindow",,Templates% TO info%
SYS "Wimp_LoadTemplate",,Templates%,BoardInd%,BoardInd%+128,-1,"board",0
SYS "Wimp_CreateWindow",,Templates% TO board%
SYS "Wimp_LoadTemplate",,Templates%,ViewInd%,ViewInd%+600,-1,"view",0
SYS "Wimp_CreateWindow",,Templates% TO view%
SYS "Wimp_CloseTemplate"
PROCupdateicon(info%,3,FNmessage_lookup(messagefile_handle%, "_Version"))
PROCInitBoard(WidthOfPuzzle-1,MaxSize%)
PROCmode
ReOpenBeforePoll%=FALSE
PROCNewBoard
puzzle%=FNcwindow
DATA (1<<31)+(1<<26)+(1<<25)+(1<<24)+2,`wfcol,`wbcol,0,-puzzle_h%+PY%,puzzle_w%+PX%,0,0,-puzzle_h%+PY%,puzzle_w%+PX%,0,0

SYS Drag,,-1:PROCgetpointer:PROCpopup(puzzle%)
ON ERROR PROCerrorbox:SYS CrMenu,,-1 : REM close menus!
IF errorflag%=1 THEN errorflag%=0:ERROR 2000,FNmessage_lookup(messagefile_handle%, "ChoicesReadErr")
REPEAT
  SYS Poll%,1,q% TO A%
  CASE A% OF
  WHEN 1 :PROCredraw_window(!q%)
  WHEN 2 :PROCopen_window(!q%,q%!4,q%!8,q%!12,q%!16,q%!20,q%!24,q%!28)
  WHEN 3 :PROCclose_window(!q%)
  WHEN 6 :PROCcheckmouse(!q%,q%!4,q%!8,q%!12,q%!16,q%!20)
  WHEN 9 :PROCmenuselect(q%)
  WHEN 17,18:PROCreceive(q%)
  ENDCASE
  IF ReOpenBeforePoll% THEN
    CASE menuhandle% OF
    WHEN FontMenu%
      SYS "Wimp_CreateMenu",,FontMenu%
    WHEN ColourMenu%
      menuhandle%=FNColourMenu(colbutton%)
    OTHERWISE
      SYS "Wimp_CreateMenu",,buffer%
    ENDCASE
    ReOpenBeforePoll%=FALSE
  ENDIF
UNTIL FALSE

DEF PROCreceive(q%)
LOCAL desktop_save_handle%
LOCAL r2%
CASE q%!16 OF
  WHEN 0:PROCfinish:END
  WHEN 10:
    desktop_save_handle% = q%!20
    SYS "OS_ReadVarVal", "Puzzle$Dir", buffer%, 256, 0, 0 TO ,,r2%
    buffer%?r2% = 13
    BPUT #desktop_save_handle%, "Run " + $buffer%
  WHEN &502:REM help request
    q%!12=q%!8:q%!16=&503:help%=q%+20
    help%=FNhelp(q%!32,q%!36,help%):?help%=0
    !q%=(help%+4-q%)ANDNOT3
    SYS "Wimp_SendMessage",17,q%,q%!4
  WHEN &400C1:REM mode change
    PROCmode:PROCrecreatewindow
ENDCASE
ENDPROC

DEF PROCrecreatewindow
LOCAL ERROR
ON ERROR LOCAL ENDPROC
  RESTORE:buffer%!0=puzzle%:SYS "Wimp_GetWindowState",,buffer%
  puzzlewopen%=-(((buffer%!32) AND (1<<16))=(1<<16))
  IF puzzlewopen% THEN
    tx0%=buffer%!4:ty1%=buffer%!16
    SYS "Wimp_DeleteWindow",,buffer%:puzzle%=FNcwindow
    buffer%!0=puzzle%
    buffer%!4=tx0%:buffer%!8=ty1%-puzzle_h%+PY%:buffer%!12=tx0%+puzzle_w%+PX%:buffer%!16=ty1%
    buffer%!20=0:buffer%!24=0
    SYS "Wimp_OpenWindow",,buffer%
  ENDIF
ENDPROC

DEF FNhelp(window%,icon%,to%)
  LOCAL flag%
  $to% = ""
  CASE window% OF
  WHEN puzzle%
    flag%=curside%+1
    $to% = FNmessage_lookup1(messagefile_handle%, "Help", STR$(flag%*flag%-1))
  WHEN info%
    $to% = FNmessage_lookup(messagefile_handle%, "InfoHelp")
  WHEN board%
    $to% = FNmessage_lookup(messagefile_handle%, "BoardHelp")
  WHEN view%
    IF (icon%>=10) AND (icon%<26) THEN
      $to% = FNmessage_lookup(messagefile_handle%, "ViewHelp"+STR$(icon%))
    ELSE
      $to% = FNmessage_lookup(messagefile_handle%, "ViewHelp")
    ENDIF
  WHEN -2
    $to% = FNmessage_lookup(messagefile_handle%, "IBHelp")
  OTHERWISE
    CASE menuhandle% OF
    WHEN puzzle%
      SYS Wimp_GetMenuState%, 1, menu_buffer%, window%, icon%
      CASE menu_buffer%!0 OF
        WHEN -1: $to%=FNmessage_lookup(messagefile_handle%, "HelpMenu")
        WHEN 0: $to%=FNmessage_lookup(messagefile_handle%, "HelpNew")
        WHEN 1: $to%=FNmessage_lookup(messagefile_handle%, "HelpView")
      ENDCASE
    WHEN iconbar%
      SYS Wimp_GetMenuState%, 1, menu_buffer%, window%, icon%
      CASE menu_buffer%!0 OF
        WHEN -1: $to%=FNmessage_lookup(messagefile_handle%, "HelpMenu")
        WHEN 0: $to%=FNmessage_lookup(messagefile_handle%, "IBInfoHelp")
        WHEN 1: $to%=FNmessage_lookup(messagefile_handle%, "IBSaveHelp")
        WHEN 2: $to%=FNmessage_lookup(messagefile_handle%, "IBQuitHelp")
      ENDCASE
    WHEN FontMenu%
      $to%=FNmessage_lookup(messagefile_handle%, "FontHelp")
    WHEN ColourMenu%
      $to%=FNmessage_lookup1(messagefile_handle%, "ColourHelp", FNmessage_lookup(messagefile_handle%, "ColourHelp"+STR$(colbutton%)))
    ENDCASE
  ENDCASE
=to%+LEN($to%)

DEF PROCcheckmouse(mousex%,mousey%,b%,handle%,icon%,ob%)
  IF(b%AND5)THEN
    IFhandle%<>-1THENPROCgetw(handle%)
    CASE handle% OF
    WHEN puzzle%:PROCstrike(mousex%,mousey%,handle%)
    WHEN board%
      CASE icon% OF
        WHEN 1:tempboardsize%-=-(tempboardsize%>2)
          PROCupdateicon(board%,0,STR$(tempboardsize%)+CHR$215+STR$(tempboardsize%))
        WHEN 2:tempboardsize%+=-(tempboardsize%<MaxSize%)
          PROCupdateicon(board%,0,STR$(tempboardsize%)+CHR$215+STR$(tempboardsize%))
        WHEN 3:IF (b%AND4) THEN SYS CrMenu,,-1
          IF tempboardsize%=WidthOfPuzzle THEN
            PROCNewBoard
            PROCrefresh(puzzle%)
          ELSE
            WidthOfPuzzle=tempboardsize%
            tilesize%=(LEN(STR$(WidthOfPuzzle^2))+2-(WidthOfPuzzle<4))*16
            IF FontHandle%>-1 THEN
              tilesize%=(LEN(STR$(WidthOfPuzzle^2))+1-(WidthOfPuzzle<4))*FNcharsize
            ENDIF
            PROCResizeBoard(WidthOfPuzzle-1)
            PROCNewBoard
            puzzle_h%=(curside%+1)*tilesize%+24
            puzzle_w%=(curside%+1)*tilesize%+20
            PROCrecreatewindow
          ENDIF
      ENDCASE
    WHEN view%
      CASE icon% OF
        WHEN 10:REM Set
          IF (b%AND4) THEN PROCclose_window(view%)
          Changed%=0
          IF ((Chequer0%>>4)<>VAL(FNreadicon(view%,17))) OR ((Chequer0% MOD 16)<>VAL(FNreadicon(view%,19))) THEN
            Changed%=1
            Chequer0%=((VAL(FNreadicon(view%,17)))<<4)+VAL(FNreadicon(view%,19))
          ENDIF
          IF ((Chequer1%>>4)<>VAL(FNreadicon(view%,21))) OR ((Chequer1% MOD 16)<>VAL(FNreadicon(view%,23))) THEN
            Changed%=1
            Chequer1%=((VAL(FNreadicon(view%,21)))<<4)+VAL(FNreadicon(view%,23))
          ENDIF
          IF Font$<>FNreadicon(view%,12) THEN Changed%=2:Font$=FNreadicon(view%,12)
          IF FontSize%<>VAL(FNreadicon(view%,14)) THEN Changed%=2:FontSize%=VAL(FNreadicon(view%,14))
          CASE Changed% OF
            WHEN 1:PROCrefresh(puzzle%)
            WHEN 2:tilesize%=(LEN(STR$(WidthOfPuzzle^2))+2-(WidthOfPuzzle<4))*16
              FontHandle%=FNFindFont
              IF FontHandle%>-1 THEN tilesize%=(LEN(STR$(WidthOfPuzzle^2))+1-(WidthOfPuzzle<4))*FNcharsize
              puzzle_h%=(curside%+1)*tilesize%+24
              puzzle_w%=(curside%+1)*tilesize%+20
              PROCrecreatewindow
          ENDCASE
        WHEN 11:REM Cancel
          PROCupdateViewWindow
          IF (b%AND4) THEN PROCclose_window(view%)
        WHEN 25:REM Default
          IF (b%AND4) OR (b%AND1) THEN PROCdefaultbutton
        WHEN 13:REM Font menu
          IF (b%AND4) THEN menuhandle%=FNMenuButton(FontMenu%,view%,13)
        WHEN 15:REM Font size down
          PROCupdateicon(view%,14,STR$(VAL(FNreadicon(view%,14))+(VAL(FNreadicon(view%,14))>6)))
        WHEN 16:REM Font size up
          PROCupdateicon(view%,14,STR$(VAL(FNreadicon(view%,14))-(VAL(FNreadicon(view%,14))<MaxFontSize%)))
        WHEN 18:REM Numbers (A) menu
          IF (b%AND4) THEN colbutton%=18:menuhandle%=FNColourMenu(colbutton%)
        WHEN 20:REM Tiles (A) menu
          IF (b%AND4) THEN colbutton%=20:menuhandle%=FNColourMenu(colbutton%)
        WHEN 22:REM Numbers (B) menu
          IF (b%AND4) THEN colbutton%=22:menuhandle%=FNColourMenu(colbutton%)
        WHEN 24:REM Tiles (B) menu
          IF (b%AND4) THEN colbutton%=24:menuhandle%=FNColourMenu(colbutton%)
      ENDCASE
    WHEN -2:REM Icon bar icon
      buffer%!0=puzzle%:SYS "Wimp_GetWindowState",,buffer%
      IF (((buffer%!32) AND (1<<16))=(1<<16))=0 THEN PROCfront(puzzle%):PROCrecreatewindow
      PROCfront(puzzle%)
    ENDCASE
  ENDIF
  IF(b%AND2)THEN
    CASE handle% OF
    WHEN -2
      PROCdomenu(iconbar%,"IBMenu")
    WHEN puzzle%
      tempboardsize%=WidthOfPuzzle
      PROCupdateicon(board%,0,STR$(tempboardsize%)+CHR$215+STR$(tempboardsize%))
      PROCdomenu(puzzle%,"Menu")
    WHEN view%
      CASE icon% OF
        WHEN 13,18,20,22,24:REM One of the five pop-up menu buttons
        PROCcheckmouse(mousex%,mousey%,4,handle%,icon%,ob%)
      ENDCASE
    ENDCASE
  ENDIF
ENDPROC

REM Set up a menu.  The menu title defines which menu, the message
REM file defines the entries.
DEF PROCdomenu(handle%,menuname$)
  LOCAL menuptr%, menutitle$, i%, max%, indirect%, old%, title%
  indirect% = 0
  menuptr%=buffer%

  menutitle$=FNmessage_lookup(messagefile_handle%, menuname$)
  IF version% < 310 OR LENFNmessage_lookup(messagefile_handle%, menuname$) <= 12 THEN
    max% = LEN(LEFT$(menutitle$,12))
    $menuptr%=menutitle$
  ELSE
    DIM title% LEN(menutitle$) + 1
    $title% = menutitle$
    !menuptr% = title%
    max% = LEN(menutitle$)
    indirect% = 1<<8
  ENDIF

  menuhandle%=handle%:  REM global - says which menu is in use
  old% = menuptr%
  menuptr%!20=44
  menuptr%?12=`tfcol:menuptr%?13=2:menuptr%?14=`wfcol:menuptr%?15=0
  menuptr%!16=(LEN(menutitle$)+1)*16
  menuptr%!24=0
  menuptr%+=4
  i%=-1
  REPEAT
    i% += 1
    menuptr% += 24
  UNTIL FNdomenuitem(menuptr%,menuname$,i%, max%)
  menuptr%!-24=(menuptr%!-24)OR&80
  old%!28 = old%!28 OR indirect%
  IFhandle%=iconbar% SYS CrMenu,,buffer%,mousex%-64,96+(3*44) ELSE SYS CrMenu,,buffer%,mousex%-64,mousey%
ENDPROC

REM FNdomenuitem adds a single menu entry.  If the entry does not
REM exist (because there are fewer entries in the menu) the function
REM does nothing and returns TRUE, else the function returns FALSE
REM (meaning not-at-end).  FNmenuitem returns the text of the menu
REM item.  FNdomenuitem also keeps the menu width (buffer%!16) up-to-date
DEF FNmenuitem(menu$,entry%,RETURN flag%)
  flag%=0
  CASE menu$ OF
  WHEN "Menu":
    CASE entry% OF
    WHEN 0: flag%=(1<<8)+2:=FNmessage_lookup(messagefile_handle%, "New")
    WHEN 1: flag%=0:=FNmessage_lookup(messagefile_handle%, "View")
    ENDCASE
  WHEN "IBMenu":
    CASE entry% OF
    WHEN 0: flag%=(1<<8):=FNmessage_lookup(messagefile_handle%, "IBInfo")
    WHEN 1: flag%=0:=FNmessage_lookup(messagefile_handle%, "IBSave")
    WHEN 2: flag%=0:=FNmessage_lookup(messagefile_handle%, "IBQuit")
    ENDCASE
  ENDCASE
=""

DEF FNdomenuitem(menuptr%,menu$,entry%,RETURN max%)
  LOCAL text$, flag%, len%, ind%
  text$=FNmenuitem(menu$,entry%,flag%)
  IF text$="" THEN =TRUE
  menuptr%!0=flag%:IF (flag% AND (1<<8))=(1<<8) THEN menuptr%!0=flag%-(1<<8)
  REM Bit 1<<8 is normally used to indicate an indirected menu title.
  REM Here we use it to mean 'consult Messages file for submenu pointer'.
  REM The indirected title is worked out separately if appropriate.
  menuptr%!4=-1:IF (flag% AND (1<<8))=(1<<8) THEN menuptr%!4=EVAL(FNmessage_lookup(messagefile_handle%, menu$+STR$(entry%)))
  menuptr%!8=&07000021
  IF LENtext$ > 12 THEN
    DIM ind% (LEN(text$) + 1)
    $ind% = text$
    menuptr%!12 = ind%
    menuptr%!16 = -1
    menuptr%!20 = LENtext$
    menuptr%!8 = menuptr%!8 OR 256
  ELSE
    $(menuptr%+12)=text$
  ENDIF
  len% = (LEN(text$)+1)*16
  IF len%>buffer%!16 buffer%!16=len%
=FALSE

DEF PROCmenuselect(menus%)
  LOCAL msg$, a$
  IF (menuhandle%<>FontMenu%) AND (menuhandle%<>ColourMenu%) THEN SYS DcMenu,,buffer%,menus%,STRING$(200," ")TO,,,a$:IF a$="" THEN ENDPROC
  CASE menuhandle% OF
  WHEN puzzle%
    CASE a$ OF
    WHEN FNmessage_lookup(messagefile_handle%, "New")
      PROCNewBoard
      PROCrefresh(puzzle%)
    WHEN FNmessage_lookup(messagefile_handle%, "View")
      PROCupdateViewWindow
      PROCgetpointer:PROCgetw(view%)
      IF (flags% AND (1<<16))=(1<<16) THEN
        PROCfront(view%)
      ELSE
        xo%=mousex%-(x0%+x1%)/2:yo%=mousey%-(y1%+16)
        PROCopen_window(view%,x0%+xo%,y0%+yo%,x1%+xo%,y1%+yo%,scx%,scy%,-1)
      ENDIF
    ENDCASE
  WHEN iconbar%
    CASE a$ OF
    WHEN FNmessage_lookup(messagefile_handle%, "IBSave")
      IF FNwritechoices THEN ERROR 2000,FNmessage_lookup(messagefile_handle%, "ChoicesWriteErr")
    WHEN FNmessage_lookup(messagefile_handle%, "IBQuit")
      PROCfinish:END
    ENDCASE
  WHEN FontMenu%
    IF (menus%!0)=0 THEN
      tempfont$=FNmessage_lookup(messagefile_handle%, "SysFont")
      FOR N%=4 TO 5:PROCupdateshadedflag(view%,N%,TRUE):NEXT
      FOR N%=14 TO 16:PROCupdateshadedflag(view%,N%,TRUE):NEXT
    ELSE
      SYS "Font_DecodeMenu",0,FontMenu%,menus%,tempfont%,255
      tempfont$="":N%=2
      WHILE ((tempfont%?N%)>32) AND ((tempfont%?N%)<>ASC("\"))
        tempfont$+=CHR$(tempfont%?N%):N%+=1
      ENDWHILE
      FOR N%=4 TO 5:PROCupdateshadedflag(view%,N%,FALSE):NEXT
      FOR N%=14 TO 16:PROCupdateshadedflag(view%,N%,FALSE):NEXT
    ENDIF
    PROCupdateicon(view%,12,tempfont$)
  WHEN ColourMenu%
    colour%=menus%!0
    PROCcolouricon(view%,colbutton%-1,colour%)
    PROCupdateicon(view%,colbutton%-1,STR$(colour%))
  ENDCASE
  SYS "Wimp_GetPointerInfo",,q%
  IF ((q%!8)AND1) THEN ReOpenBeforePoll%=TRUE
ENDPROC

REM This procedure deals with a mouse select or adjust button
REM pick on the board - this means ``move the selected square
REM towards the space'', if the square is on the same row or
REM column as the space.  PROCstrike uses mouse coordinates,
REM PROCmove uses tile coordinates.
DEF PROCstrike(mousex%,mousey%,handle%)
  PROCmove((mousex%-bx%-14)/tilesize%,(by%-16-mousey%)/tilesize%,handle%)
ENDPROC

REM The selected square must be valid and on the row or column
REM of the blank square.
DEF PROCmove(CX%,CY%,handle%)
  IFCX%>=0 AND CX%<=curside% AND CY%>=0 AND CY%<=curside% AND (CX%=puzzle_xblank% OR CY%=puzzle_yblank%) THEN
    IF CX%=puzzle_xblank% THEN
      CASE TRUE OF
      WHEN CY%>puzzle_yblank%
        PROCblockmove(handle%, CX%, puzzle_yblank%+1, 1, CY%-puzzle_yblank%, 0, -1)
        REPEAT
          Bd%(CX%,puzzle_yblank%)=Bd%(CX%,puzzle_yblank%+1)
          puzzle_yblank%+=1
        UNTIL puzzle_yblank%=CY%
      WHEN CY%<puzzle_yblank%
        PROCblockmove(handle%, CX%, CY%, 1, puzzle_yblank%-CY%, 0, 1)
        REPEAT
          Bd%(CX%,puzzle_yblank%)=Bd%(CX%,puzzle_yblank%-1)
          puzzle_yblank%-=1
        UNTIL puzzle_yblank%=CY%
      ENDCASE
    ELSE
      CASE TRUE OF
      WHEN CX%>puzzle_xblank%
        PROCblockmove(handle%, puzzle_xblank%+1, CY%, CX%-puzzle_xblank%, 1, -1, 0)
        REPEAT
          Bd%(puzzle_xblank%,CY%)=Bd%(puzzle_xblank%+1,CY%)
          puzzle_xblank%+=1
        UNTIL puzzle_xblank%=CX%
      WHEN CX%<puzzle_xblank%
        PROCblockmove(handle%, CX%, CY%, puzzle_xblank%-CX%, 1, 1, 0)
        REPEAT
          Bd%(puzzle_xblank%,CY%)=Bd%(puzzle_xblank%-1,CY%)
          puzzle_xblank%-=1
        UNTIL puzzle_xblank%=CX%
      ENDCASE
    ENDIF
    Bd%(CX%,CY%)=0
    PROCinvalidate(handle%, CX%, CY%, 1, 1)
  ELSE
    VDU7
  ENDIF
ENDPROC

REM Resize the board to the given size.  The maximum selectable
REM size is defined by maxside.
DEF PROCResizeBoard(side%)
  LOCAL X%,Y%,T%
  IF side%>maxside% THEN side% = maxside%
  curside%=side%
  T%=1
  FOR Y%=0 TO side%
    FOR X%=0 TO side%
      Bd%(X%,Y%) = T%
      T% += 1
    NEXT
  NEXT
  Bd%(side%,side%) = 0
  puzzle_xblank% = side%
  puzzle_yblank% = side%
ENDPROC

DEF PROCInitBoard(side%,max%)
  maxside%=max%
  DIM Bd%(maxside%,maxside%)
  PROCResizeBoard(side%)
ENDPROC

REM Randomise the board by shifting the space around a
REM few times.  This algorithm is copied from the X11
REM puzzle program, by Don Bennett (HP Labs).  It generates
REM 10x(widthxheight) random moves of the empty tile.
REM
REM The algorithm relies on the board always being ``correct'';
REM ie containing a solvable arrangement.  This is ensured
REM by the initialisation procedure, which is called with the
REM initial width/height of the board.  The board array allows
REM for up to maxside%+1 width/height.
REM
DEF PROCNewBoard
  LOCAL X%,Y%,S%,T%
  S%=curside%+1
  X%=puzzle_xblank%
  Y%=puzzle_yblank%
  FOR i%=1 TO 10*S%*S%
    T%=RND(S%)-1
    WHILE T%>X%:Bd%(X%,Y%)=Bd%(X%+1,Y%):X%+=1:ENDWHILE
    WHILE T%<X%:Bd%(X%,Y%)=Bd%(X%-1,Y%):X%-=1:ENDWHILE
    T%=RND(S%)-1
    WHILE T%>Y%:Bd%(X%,Y%)=Bd%(X%,Y%+1):Y%+=1:ENDWHILE
    WHILE T%<Y%:Bd%(X%,Y%)=Bd%(X%,Y%-1):Y%-=1:ENDWHILE
  NEXT
  Bd%(X%,Y%)=0
  puzzle_xblank%=X%
  puzzle_yblank%=Y%
ENDPROC

DEF PROCfinish
SYS "Wimp_CloseDown"
IF FontHandle%>0 THEN SYS "XFont_LoseFont",FontHandle%
PROCclose_messagefile(messagefile_handle%)
PROCdebug
ENDPROC

DEF FNcwindow
  RESTORE:READ f%,fc%,bc%,x0%,y0%,x1%,y1%,cx0%,cy0%,cx1%,cy1%,nicons%
  scrbars%=FALSE:IF ((puzzle_w%+44)>((ModeX%+1)*PX%)) OR ((puzzle_h%+90)>((ModeY%+1)*PY%)) THEN scrbars%=TRUE
=FNcreate_window(cx0%,cy0%,cx1%,cy1%,0,0,f%+((&F<<27) AND scrbars%),fc%,bc%,x0%,y0%,x1%,y1%,&2D,puzzle$,nicons%)

DEF FNcreate_window(cx0%,cy0%,cx1%,cy1%,scx%,scy%,flags%,fc%,bc%,sx0%,sy0%,sx1%,sy1%,titlef%,title$,nicons%)
!q%=cx0%:q%!4=cy0%:q%!8=cx1%:q%!12=cy1%:q%!16=scx%:q%!20=scy%
q%!24=-1:q%!28=flags%
IFfc%=15ANDbc%=15THEN
  q%?32=15:q%?33=15:q%?34=fc%:q%?35=bc%
ELSE q%?32=`tfcol:q%?33=`tbcol:q%?34=fc%:q%?35=bc%
ENDIF
q%?36=`sco:q%?37=`tbcol:q%?38=`tbcol2:q%?39=0
q%!40=sx0%:q%!44=sy0%:q%!48=sx1%:q%!52=sy1%
q%!56=titlef% OR 256 : REM Puzzle may become longer than 12 chars in foreign language
q%!60=&3000      : REM work area flags
q%!64=0:q%!68=0  : REM reserved
DIM tb% LEN(title$)+1
$tb% = title$+CHR$(0)
q%!72 = tb%
q%!76 = -1
q%!80 = LEN(title$)+1
q%!84=nicons%
LOCALI%,x0%,y0%,x1%,y1%,f%,data$:I%=q%+88
WHILE nicons%>0
  READ x0%,y0%,x1%,y1%,f%,fc%,bc%,data$
  I%!0=x0%:I%!4=y0%:I%!8=x1%:I%!12=y1%
  IF (f%AND&40)=0 THEN bc%=fc%+(bc%<<4)
  I%!16=f%+(bc%<<24)
  IF(f%AND&100)THEN
    ERROR 2000,FNmessage_lookup(messagefile_handle%, "combat")
  ELSE
    $(I%+20)=data$
  ENDIF
  I%=I%+32:nicons%=nicons%-1
ENDWHILE
SYS CreateW,,q% TO handle%
=handle%

DEF PROCmode
SYS OS_ReadModeVariable%,-1,4 TO ,,PX%
PX%=1<<PX%
SYS OS_ReadModeVariable%,-1,5 TO ,,PY%
PY%=1<<PY%
SYS OS_ReadModeVariable%,-1,11 TO ,,ModeX%
SYS OS_ReadModeVariable%,-1,12 TO ,,ModeY%
IF FontHandle%>=0 THEN FontHandle%=FNFindFont
tilesize%=(LEN(STR$(WidthOfPuzzle^2))+2-(WidthOfPuzzle<4))*16
IF FontHandle%>-1 THEN
  tilesize%=(LEN(STR$(WidthOfPuzzle^2))+1-(WidthOfPuzzle<4))*FNcharsize
ENDIF
puzzle_h%=(curside%+1)*tilesize%+24
puzzle_w%=(curside%+1)*tilesize%+20
PROCgetw(view%)
IF (flags% AND (1<<16))=(1<<16) THEN
  IF FontHandle%=-1 THEN
    FOR N%=4 TO 5:PROCupdateshadedflag(view%,N%,TRUE):NEXT
    FOR N%=14 TO 16:PROCupdateshadedflag(view%,N%,TRUE):NEXT
    PROCupdateicon(view%,12,FNmessage_lookup(messagefile_handle%, "SysFont"))
  ELSE
    FOR N%=4 TO 5:PROCupdateshadedflag(view%,N%,FALSE):NEXT
    FOR N%=14 TO 16:PROCupdateshadedflag(view%,N%,FALSE):NEXT
    PROCupdateicon(view%,12,Font$)
  ENDIF
ENDIF
ENDPROC

DEF PROCfront(handle%)
IFhandle%=-1THENENDPROC
PROCgetw(handle%)
PROCopen_window(handle%,x0%,y0%,x1%,y1%,scx%,scy%,-1)
ENDPROC

DEF PROCpopup(handle%)
PROCgetw(handle%)
xo%=mousex%-(x0%+x1%)/4:yo%=mousey%-(y1%+16)
PROCopen_window(handle%,x0%+xo%,y0%+yo%,x1%+xo%,y1%+yo%,scx%,scy%,-1)
ENDPROC

DEF PROCresize(handle%)
  PROCgetw(handle%)
  puzzle_h%=(curside%+1)*tilesize%+24
  puzzle_w%=(curside%+1)*tilesize%+20
  PROCopen_window(handle%,x0%,y0%,x0%+puzzle_w%,y0%+puzzle_h%,0,0,bhandle%)
ENDPROC

DEF PROCopen_window(handle%,x0%,y0%,x1%,y1%,scx%,scy%,bhandle%)
IFhandle%=-1THENENDPROC
q%!0=handle%:q%!28=bhandle%
q%!4=x0%:q%!8=y0%:q%!12=x1%:q%!16=y1%
q%!20=scx%:q%!24=scy%
SYS OpenW,,q%
ENDPROC

DEF PROCgetw(handle%)
!q%=handle%:SYS GetW,,q%
PROCinfo(q%+4):bhandle%=q%!28:flags%=q%!32
ENDPROC

DEF PROCinfo(q%)
x0%=!q%:y0%=q%!4:x1%=q%!8:y1%=q%!12:scx%=q%!16:scy%=q%!20
bx%=x0%-scx%:by%=y1%-scy%
ENDPROC

DEF PROCupdate(handle%,ux0%,uy0%,ux1%,uy1%)
!q%=handle%:q%!4=ux0%:q%!8=uy0%:q%!12=ux1%:q%!16=uy1%
SYS UpdateW,,q% TO more%:PROCinfo(q%+4)
ENDPROC

DEF PROCredraw_window(handle%)
IFhandle%=puzzle% THEN
!q%=handle%:SYS RedrawW,,q% TO more%
PROCinfo(q%+4)
WHILE more%
  SYS Col%,3:RECTANGLE FILL bx%,by%,puzzle_w%,-puzzle_h%
  SYS Col%,7:RECTANGLE bx%+6,by%-8,puzzle_w%-12,16-puzzle_h%
  ox0%=(q%!28-(bx%+14))DIVtilesize%:IFox0%>curside% ox0%=curside%
  ox1%=(q%!36-(bx%+14))DIVtilesize%:IFox1%>curside% ox1%=curside%
  oy0%=-(q%!40-(by%-14))DIVtilesize%:IFoy0%>curside% oy0%=curside%
  oy1%=-(q%!32-(by%-14))DIVtilesize%:IFoy1%>curside% oy1%=curside%
  FORX%=ox0%TOox1%:FORY%=oy0%TOoy1%:PROCTile(X%,Y%,0,0)
  NEXT:NEXT
  SYS GetR%,0,q% TO more%
ENDWHILE
ENDIF
ENDPROC

DEF PROCclose_window(handle%)
!q%=handle%:SYS CloseW,,q%
ENDPROC

DEF PROCvars
LOCAL SToN%
SYS "OS_SWINumberFromString",,"OS_SWINumberFromString" TO SToN%
Wimp    = (1<<18) + (3<<6)
CreateW = Wimp+1
OpenW   = Wimp+5
CloseW  = Wimp+6
RedrawW = Wimp+8
UpdateW = Wimp+9
GetR%   = Wimp+10
GetW    = Wimp+11
GetP    = Wimp+15
Drag    = Wimp+16
CrMenu  = Wimp+20
DcMenu  = Wimp+21
SYS SToN%,,"OS_ReadModeVariable" TO OS_ReadModeVariable%
SYS SToN%,,"OS_ReadMonotonicTime" TO OS_ReadMonotonicTime%
SYS SToN%,,"Wimp_PollIdle" TO Wimp_PollIdle%
SYS SToN%,,"Wimp_Poll" TO Wimp_Poll%
Poll% = Wimp_Poll%
SYS SToN%,,"Wimp_BlockCopy" TO Wimp_BlockCopy%
SYS SToN%,,"Wimp_ForceRedraw" TO Wimp_ForceRedraw%
SYS SToN%,,"Wimp_SetColour" TO Col%
SYS SToN%,,"Wimp_GetMenuState" TO Wimp_GetMenuState%
SYS SToN%,,"MessageTrans_Lookup" TO MessageTrans_Lookup%
ENDPROC

DEF PROCgetpointer
SYS GetP,,q%
mousex%=!q%:mousey%=q%!4:b%=q%!8:handle%=q%!12:icon%=q%!16:ob%=q%!20
ENDPROC

DEF PROCerrorbox
LOCAL ERROR
ON ERROR LOCAL ERROR EXT 1, REPORT$+" ("+STR$(ERL)+")":END
SYS Drag,,-1
!q%=ERR:IF ERR=2000 THEN $(q%+4)=REPORT$+CHR$0 ELSE $(q%+4)=REPORT$+FNmessage_lookup1(messagefile_handle%, "IntErr", STR$(ERL))+CHR$0
SYS "Wimp_ReportError",q%,1,puzzle$
ENDPROC

DEF PROCTile(X%,Y%,DX%,DY%)
  LOCALA%
  A%=Bd%(X%,Y%)
  Offset%=(((A%-1) DIV WidthOfPuzzle) AND 1)*(1-(WidthOfPuzzle AND 1))
  X%=bx%+X%*tilesize%+14+DX%
  Y%=by%-Y%*tilesize%-tilesize%-8-DY%
  IF A% THEN
    SYS Col%,-((Chequer0% MOD 16)*((A% AND 1)=1-Offset%))-((Chequer1% MOD 16)*((A% AND 1)=Offset%)):RECTANGLE FILL X%+PX%,Y%+PY%,tilesize%-8-(2*PX%),tilesize%-8-(2*PY%)
    IF FontHandle%>0 THEN
      FontBuffer%!0=0:REM xoffset spaces
      FontBuffer%!4=0:REM yoffset spaces
      FontBuffer%!8=0:REM xoffset characters
      FontBuffer%!12=0:REM yoffset characters
      FontBuffer%!16=-1:REM no split character
      SYS "Font_ScanString",FontHandle%,STR$(A%),(1<<8) OR (1<<9) OR (1<<5) OR (1<<18),1E6,1E6,FontBuffer%
      xwid%=(FontBuffer%!28)+(FontBuffer%!20):ywid%=(FontBuffer%!32)+(FontBuffer%!24)
      SYS "Font_ConverttoOS",,xwid%,ywid% TO ,xwid%,ywid%
      SYS "Wimp_SetFontColours",,-((Chequer0% MOD 16)*((A% AND 1)=1-Offset%))-((Chequer1% MOD 16)*((A% AND 1)=Offset%)),((A% AND 1)=1-Offset%)-(((Chequer1%>>4) MOD 16)*((A% AND 1)=Offset%))-((A% AND 1)=1-Offset%)-(((Chequer0%>>4) MOD 16)*((A% AND 1)=1-Offset%))
      SYS "Font_Paint",FontHandle%,STR$(A%),512+256+16,X%+((tilesize%-8-xwid%) DIV 2)+((tilesize%-8-xwid%) MOD 2),Y%+((tilesize%-8-ywid%) DIV 2)+((tilesize%-8-ywid%) MOD 2)
    ELSE
      SYS Col%,((A% AND 1)=1-Offset%)-(((Chequer1%>>4) MOD 16)*((A% AND 1)=Offset%))-((A% AND 1)=1-Offset%)-(((Chequer0%>>4) MOD 16)*((A% AND 1)=1-Offset%))
      MOVE X%+((tilesize%-8-(16*LEN(STR$(A%)))) DIV 2),Y%+30+((tilesize%-8-32) DIV 2):PRINT;A%;
    ENDIF
    SYS Col%,7:RECTANGLE X%,Y%,tilesize%-8
  ELSE
    SYS Col%,4:RECTANGLE FILL X%,Y%,tilesize%-8
  ENDIF
ENDPROC

REM Move a block of tiles; convert coordinates to window coords
REM then pass them to the Wimp_BlockCopy routine.  The destination
REM is specified in tile units relative to the source.
DEF PROCblockmove(handle%, SX%, SY%, W%, H%, DX%, DY%)
  W%=W%*tilesize%
  H%=H%*tilesize%
  SX%=SX%*tilesize%+14
  SY%=-SY%*tilesize%-8-H%
  DX%=SX%+DX%*tilesize%
  DY%=SY%-DY%*tilesize%
  SYS Wimp_BlockCopy%,handle%,SX%,SY%,SX%+W%-8+PX%,SY%+H%-8+PY%,DX%,DY%
ENDPROC

REM Invalidate a block of tiles.  The routine causes the Wimp to force
REM a redraw of the required area.
DEF PROCinvalidate(handle%, X%, Y%, W%, H%)
  W%=W%*tilesize%
  H%=H%*tilesize%
  X%=(X%*tilesize%)+14
  Y%=-(Y%*tilesize%)-8-H%
  SYS Wimp_ForceRedraw%,handle%,X%,Y%,X%+W%-8+PX%,Y%+H%-8+PY%
ENDPROC

REM Invalidate the whole window
DEF PROCrefresh(handle%)
  SYS Wimp_ForceRedraw%,handle%,scx%,scy%-puzzle_h%+1,scx%+puzzle_w%,scy%+1
ENDPROC

DEF FNopen_messagefile(name$)
LOCAL mh%
SYS "OS_Module", 6,,,16 TO ,,mh%
SYS "MessageTrans_OpenFile", mh%, name$, 0
=mh%

DEF PROCclose_messagefile(mh%)
SYS "MessageTrans_CloseFile", mh%
SYS "OS_Module", 7,,mh%
ENDPROC

DEF FNmessage_lookup(mh%, tag$)
LOCAL s$
SYS MessageTrans_Lookup%, mh%, tag$, 0, 0, 0, 0, 0, 0 TO ,,s$
=s$

DEF FNmessage_lookup1(mh%, tag$, arg1$)
LOCAL s$
SYS MessageTrans_Lookup%, mh%, tag$, message_buffer%, 256, arg1$, 0, 0, 0 TO ,,s$
=s$

DEF FNFindFont
LOCAL ERROR
ON ERROR LOCAL =-1
IF FontHandle%>-1 THEN SYS "Font_LoseFont",FontHandle%
IF Font$=FNmessage_lookup(messagefile_handle%, "SysFont") THEN =-1
SYS OS_ReadModeVariable%,-1,4 TO ,,xres%
xres%=180/(2^xres%)
SYS OS_ReadModeVariable%,-1,5 TO ,,yres%
yres%=180/(2^yres%)
SYS "Font_FindFont",,Font$,FontSize%*16,FontSize%*16,xres%,yres% TO FontHandle%
SYS "Font_Paint",," ",&10,-1,-1:REM invalidate cache for mode change
=FontHandle%

DEF FNcharsize
FontBuffer%!0=0:REM xoffset spaces
FontBuffer%!4=0:REM yoffset spaces
FontBuffer%!8=0:REM xoffset characters
FontBuffer%!12=0:REM yoffset characters
FontBuffer%!16=-1:REM no split character
xwid%=0:ywid%=0
FOR N%=0 TO 9
  SYS "Font_ScanString",FontHandle%,STR$(N%),(1<<8) OR (1<<9) OR (1<<5) OR (1<<18),1E6,1E6,FontBuffer%
  IF xwid%<(FontBuffer%!28)+(FontBuffer%!20) THEN xwid%=(FontBuffer%!28)+(FontBuffer%!20)
  IF ywid%<=(FontBuffer%!32)+(FontBuffer%!24) THEN ywid%=(FontBuffer%!32)+(FontBuffer%!24)
NEXT N%
SYS "Font_ConverttoOS",,xwid%,ywid% TO ,xwid%,ywid%
IF xwid%=0 THEN FontHandle%=-1:Font$=FNmessage_lookup(messagefile_handle%, "SysFont"):PROCmode:PROCrecreatewindow:ERROR 2000,FNmessage_lookup(messagefile_handle%, "FontErr")
IF ywid%>xwid% THEN =ywid%
=xwid%

DEF PROCupdateicon(Wndw,Icn,Txt$)
q%!0=Wndw:q%!4=Icn:SYS "Wimp_GetIconState",,q%
IF $(q%!28)<>Txt$ THEN
  $(q%!28)=Txt$:q%!8=0:q%!12=0
  SYS "Wimp_SetIconState",,q%
ENDIF
ENDPROC

DEF PROCcolouricon(Wndw,Icn,Col)
q%!0=Wndw:q%!4=Icn:SYS "Wimp_GetIconState",,q%
IF ((q%?27)>>4)=Col THEN ENDPROC
q%!12=(%11111111<<24):q%!8=(Col<<28)
CASE Col OF
  WHEN 4,5,6,7,8,11,13:REM black (colour 0)
  OTHERWISE q%!8+=(7<<24):REM white
ENDCASE
SYS "Wimp_SetIconState",,q%
ENDPROC

DEF PROCupdateshadedflag(Wndw,Icn,State)
q%!0=Wndw:q%!4=Icn:SYS "Wimp_GetIconState",,q%
IF ((q%!24) AND (1<<22))=((-State)<<22) THEN ENDPROC
q%!12=(1<<22):IF State THEN q%!8=(1<<22) ELSE q%!8=(0<<22)
SYS "Wimp_SetIconState",,q%
ENDPROC

DEF FNreadicon(Wndw,Icn)
q%!0=Wndw:q%!4=Icn:SYS "Wimp_GetIconState",,q%
=$(q%!28)

DEF FNMenuButton(menu%,window%,icon%)
q%!0=window%:q%!4=icon%:SYS "Wimp_GetIconState",,q%
menux%=q%!16:menuy%=q%!20
SYS "Wimp_GetWindowState",,q%
menux%+=q%!4-q%!20
menuy%+=q%!16-q%!24
SYS CrMenu,,menu%,menux%,menuy%
=menu%

DEF FNColourMenu(colbutton%)
q%!0=view%:q%!4=colbutton%:SYS "Wimp_GetIconState",,q%
menux%=q%!16:menuy%=q%!20
SYS "Wimp_GetWindowState",,q%
menux%+=q%!4-q%!20
menuy%+=q%!16-q%!24
$ColourMenu%=FNmessage_lookup(messagefile_handle%, "ColourMenu")
tick%=VAL(FNreadicon(view%,colbutton%-1))
ColourMenu%?12=7:ColourMenu%?13=2:ColourMenu%?14=7:ColourMenu%?15=0
ColourMenu%!16=64:ColourMenu%!20=44:ColourMenu%!24=0
FOR N%=0 TO 15
  ColourMenu%!((24*N%)+28)=0
  IF N%=tick% THEN ColourMenu%!((24*N%)+28)+=1
  IF N%=15 THEN ColourMenu%!((24*N%)+28)+=(1<<7)
  ColourMenu%!((24*N%)+28+4)=-1
  ColourMenu%!((24*N%)+28+8)=&31+(N%<<28)
  CASE N% OF
    WHEN 4,5,6,7,8,11,13:REM black (colour 0)
    OTHERWISE ColourMenu%!((24*N%)+28+8)+=(7<<24):REM white
  ENDCASE
  $(ColourMenu%+((24*N%)+28+12))=STR$(N%)
NEXT N%
SYS CrMenu,,ColourMenu%,menux%,menuy%
=ColourMenu%

DEF FNwritechoices
LOCAL ERROR
ON ERROR LOCAL IF file%<>0 THEN CLOSE#file%:file%=0:=TRUE ELSE =TRUE
file%=OPENOUT("<Choices$Write>."+puzzle$)
BPUT#file%,"PuzzleSize:"+STR$(WidthOfPuzzle)
BPUT#file%,"Font:"+Font$
BPUT#file%,"FontSize:"+STR$(FontSize%)
BPUT#file%,"Chequer0:"+STR$(Chequer0%)
BPUT#file%,"Chequer1:"+STR$(Chequer1%)
CLOSE#file%:file%=0
OSCLI("SetType <Choices$Write>."+puzzle$+" Text")
=FALSE

DEF FNreadchoices
LOCAL ERROR
ON ERROR LOCAL IF file%<>0 THEN CLOSE#file%:file%=0:=TRUE ELSE =TRUE
file%=OPENIN("Choices:"+puzzle$)
IF file%=0 THEN =FALSE:REM no saved choices
WidthOfPuzzle=VAL(FNreadline("PuzzleSize")):IF WidthOfPuzzle=-1 THEN WidthOfPuzzle=VAL(FNmessage_lookup(messagefile_handle%, "PuzzleSize")):Crash!
Font$=FNreadline("Font"):IF Font$="-1" THEN Font$=FNmessage_lookup(messagefile_handle%, "Font"):Crash!
FontSize%=VAL(FNreadline("FontSize")):IF FontSize%=-1 THEN FontSize%=VAL(FNmessage_lookup(messagefile_handle%, "FontSize")):Crash!
Chequer0%=VAL(FNreadline("Chequer0")):IF Chequer0%=-1 THEN Chequer0%=VAL(FNmessage_lookup(messagefile_handle%, "Chequer0")):Crash!
Chequer1%=VAL(FNreadline("Chequer1")):IF Chequer1%=-1 THEN Chequer1%=VAL(FNmessage_lookup(messagefile_handle%, "Chequer1")):Crash!
CLOSE#file%:file%=0
=FALSE

DEF FNreadline(token$)
LOCAL ERROR
ON ERROR LOCAL ="-1"
PTR#file%=0:answer$="-1"
REPEAT
  line$=GET$#file%
  IF INSTR(line$,token$+":") THEN answer$=RIGHT$(line$,LEN(line$)-INSTR(line$,token$+":")-LEN(token$))
UNTIL EOF#file% OR (answer$<>"-1")
=answer$

DEF PROCdefaultbutton
  REM Restore settings from Messages ('factory settings')
  IF FNmessage_lookup(messagefile_handle%, "Font")="" OR FNmessage_lookup(messagefile_handle%, "Font")=FNmessage_lookup(messagefile_handle%, "SysFont") THEN
    FOR N%=4 TO 5:PROCupdateshadedflag(view%,N%,TRUE):NEXT
    FOR N%=14 TO 16:PROCupdateshadedflag(view%,N%,TRUE):NEXT
    PROCupdateicon(view%,12,FNmessage_lookup(messagefile_handle%, "SysFont"))
  ELSE
    FOR N%=4 TO 5:PROCupdateshadedflag(view%,N%,FALSE):NEXT
    FOR N%=14 TO 16:PROCupdateshadedflag(view%,N%,FALSE):NEXT
    PROCupdateicon(view%,12,FNmessage_lookup(messagefile_handle%, "Font"))
  ENDIF
  PROCupdateicon(view%,14,STR$(VAL(FNmessage_lookup(messagefile_handle%, "FontSize"))))
  PROCupdateicon(view%,17,STR$(EVAL(FNmessage_lookup(messagefile_handle%, "Chequer0"))>>4)):PROCcolouricon(view%,17,EVAL(FNmessage_lookup(messagefile_handle%, "Chequer0"))>>4)
  PROCupdateicon(view%,19,STR$(EVAL(FNmessage_lookup(messagefile_handle%, "Chequer0")) MOD 16)):PROCcolouricon(view%,19,EVAL(FNmessage_lookup(messagefile_handle%, "Chequer0")) MOD 16)
  PROCupdateicon(view%,21,STR$(EVAL(FNmessage_lookup(messagefile_handle%, "Chequer1"))>>4)):PROCcolouricon(view%,21,EVAL(FNmessage_lookup(messagefile_handle%, "Chequer1"))>>4)
  PROCupdateicon(view%,23,STR$(EVAL(FNmessage_lookup(messagefile_handle%, "Chequer1")) MOD 16)):PROCcolouricon(view%,23,EVAL(FNmessage_lookup(messagefile_handle%, "Chequer1")) MOD 16)
ENDPROC

DEF PROCupdateViewWindow
IF FontHandle%=-1 THEN
  FOR N%=4 TO 5:PROCupdateshadedflag(view%,N%,TRUE):NEXT
  FOR N%=14 TO 16:PROCupdateshadedflag(view%,N%,TRUE):NEXT
  PROCupdateicon(view%,12,FNmessage_lookup(messagefile_handle%, "SysFont"))
ELSE
  FOR N%=4 TO 5:PROCupdateshadedflag(view%,N%,FALSE):NEXT
  FOR N%=14 TO 16:PROCupdateshadedflag(view%,N%,FALSE):NEXT
  PROCupdateicon(view%,12,Font$)
ENDIF
PROCupdateicon(view%,14,STR$(FontSize%))
PROCupdateicon(view%,17,STR$(Chequer0%>>4)):PROCcolouricon(view%,17,Chequer0%>>4)
PROCupdateicon(view%,19,STR$(Chequer0% MOD 16)):PROCcolouricon(view%,19,Chequer0% MOD 16)
PROCupdateicon(view%,21,STR$(Chequer1%>>4)):PROCcolouricon(view%,21,Chequer1%>>4)
PROCupdateicon(view%,23,STR$(Chequer1% MOD 16)):PROCcolouricon(view%,23,Chequer1% MOD 16)
ENDPROC

DEF PROCdebug
  ENDPROC
  LOCAL I%
  PRINT "END=";END;" LOMEM=";LOMEM;" HIMEM=";HIMEM;" TOP=";TOP;" PAGE=";PAGE
  I%=GET
ENDPROC
