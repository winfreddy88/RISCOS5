REM >!Blocks.!RunImage

REM Copyright 2015 Castle Technology Ltd
REM
REM Licensed under the Apache License, Version 2.0 (the "License");
REM you may not use this file except in compliance with the License.
REM You may obtain a copy of the License at
REM
REM     http://www.apache.org/licenses/LICENSE-2.0
REM
REM Unless required by applicable law or agreed to in writing, software
REM distributed under the License is distributed on an "AS IS" BASIS,
REM WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
REM See the License for the specific language governing permissions and
REM limitations under the License.
REM
debugging%=TRUE         :REM if TRUE, errors append the line number and abort

ON ERROR ON ERROR OFF:PROCfatalerror

DATA3,7,11,15,2,6,10,14,1,5,9,13,0,4,8,12
DATA240,1136,1856,1584,864,1632,624
DATA11,14,4,15,8,13,10

DATA 4,3,5,2,6,1,7,0,8,-1,9,-2,10,-3

auto%=0
sussing%=0
moves_per_cycle% = 2

G%=28:REM Size of a square in OS units
H%=0:WASSTOPPED%=0:STOPPED%=1:open%=0:@%=&A0A:DIMB%(7),R%(15),C%(7),Q%(10,30),tryX%(14)
FORA%=0TO15:READR%(A%):NEXT:FORA%=1TO7:READB%(A%):NEXT
FORA%=1TO14:READtryX%(A%):NEXT

DIM height%(10),pen_grommets%(4),h%(3),toph%(3),temph%(10)

DIM taskid%4:$taskid%="TASK"
DIM messbuf% &100
PROCopen_messages("Blocks:Messages")
appname$=FNlookup("Name")
SYS "Wimp_Initialise",200,!taskid%,appname$ TO version%
`wbcol=0:`tbcol=2:`sco=3:`mbcol=2:`wfcol=&7:`tfcol=7:`sci=1:`tbcol2=12
PROCvars
DIM q% &200,menudata% &100,namebuffer% 12

DIM key%(3),newkey%(3)
key%(0)=ASC"2"  :REM turn
key%(1)=ASC" "  :REM drop
key%(2)=ASC"1"  :REM left
key%(3)=ASC"3"  :REM right

maxbuf%=&200:@%=5
DIM buffer% maxbuf%,endbuf% -1:curbuf%=buffer%
DIM block 12,palette% 1024,ttr% 256,factors% 16

sprites% = FNloadsprites("Blocks:Sprites")
PROCinittemplate
SYS "Wimp_OpenTemplate",,"Blocks:Templates"
pat% = FNloadtemplate("main",sprites%)
h_keys% = FNloadtemplate("keys",sprites%)
SYS "Wimp_CloseTemplate"
IF h_keys%=0 THEN ERROR 1,FNlookup1("E00","keys")

N%=RND(TIME OR &80000000)

PROCmakenatives

icpat%=FNiconbar
S%=0

oldtime%=TIME

ON ERROR PROCerror

REPEAT
  SYS Poll%,STOPPED%,q% TO A%
  CASE A% OF
  WHEN 0 :PROCbg_event
  WHEN 1 :PROCredraw_window(!q%)
  WHEN 2 :PROCopen_window(!q%,q%!4,q%!8,q%!12,q%!16,q%!20,q%!24,q%!28)
  WHEN 3 :PROCcloseawindow(!q%)
  WHEN 6 :PROCcheckmouse(!q%,q%!4,q%!8,q%!12,q%!16,q%!20)
  WHEN 8 :PROCkey_pressed(q%!0,q%!4,q%!24)
  WHEN 9 :PROCmenuselect(q%)
  WHEN 10:IF!q%=pat% PROCopen_window(!q%,q%!4,q%!8,q%!12,q%!16,q%!20+32*q%!32,q%!24+64*q%!36,q%!28)
  WHEN 11:IF!q%=pat%THENT-=TIME:WASSTOPPED%=STOPPED%:STOPPED%=1
  WHEN 12:IF!q%=pat%ANDSTOPPED%THENT+=TIME:STOPPED%=WASSTOPPED%
  WHEN 17,18:PROCreceive(q%)
  ENDCASE
UNTIL FALSE

DEF PROCreceive(q%)
CASE q%!16 OF
WHEN 0:PROCfinish:END
WHEN 9,&400c1:PROCmakenatives:SYSfred%,pat%,-1E8,-1E8,1E8,1E8
ENDCASE
ENDPROC

DEF FNcwindow
READ A$,f%,fc%,bc%,x0%,y0%,x1%,y1%,cx0%,cy0%,cx1%,cy1%,nicons%
=FNcreate_window(cx0%,cy0%,cx1%,cy1%,0,0,f%,fc%,bc%,x0%,y0%,x1%,y1%,&2D,A$,nicons%)

DEF PROCcheckmouse(mousex%,mousey%,b%,handle%,icon%,ob%)
IFb%AND2 THEN
  CASE handle% OF
  WHEN -2,pat%:PROCsetnewkeys:PROCdomenu(handle%,FNlookup1("Menu","h_keys%"),appname$)
  ENDCASE
ENDIF
IFb%AND4 THEN
  IFhandle%>-1THENPROCgetw(handle%)
  CASE handle% OF
  WHEN -2:IFopen% THEN
      PROCfront(pat%)
    ELSE
      PROCreopen(pat%):open%=TRUE
      PROCstart
    ENDIF
    SYS "Wimp_SetCaretPosition",pat%,-1,0,0,1<<25,0
  WHEN h_keys%
      CASE icon% OF
      WHEN 4:PROCusenewkeys:SYS "Wimp_CreateMenu",,-1
      WHEN 5:SYS "Wimp_CreateMenu",,-1
      ENDCASE
  ENDCASE
ENDIF
ENDPROC

DEFPROCmakenatives
LOCAL r0%,r1%,r2%,r3%,mode%
REM delete out of date natives
FOR I%=0 TO 7
  SYS spop%,&110,sprites%,"native"+STR$(I%),0,0,0,G%-1,G%-1

  PROCgetpalette( sprites%, "tile"+STR$(I%), palette%, mode% )

  SYS "ColourTrans_SelectTable",mode%,palette%,-1,-1,ttr%

  SYS "OS_ReadModeVariable",mode%,4 TO ,,l2bpx_n%
  SYS "OS_ReadModeVariable",mode%,5 TO ,,l2bpy_n%
  SYS "OS_ReadModeVariable",-1,4 TO ,,l2bpx_d%
  SYS "OS_ReadModeVariable",-1,5 TO ,,l2bpy_d%
  factors%!0=1<<l2bpx_n%
  factors%!4=1<<l2bpy_n%
  factors%!8=1<<l2bpx_d%
  factors%!12=1<<l2bpy_d%

  SYS spop%,&13c,sprites%,"native"+STR$(I%),0 TO r0%,r1%,r2%,r3%

  SYS spop%,&134,sprites%,"tile"+STR$(I%),0,0,0,factors%,ttr%

  SYS spop%,r0%,r1%,r2%,r3%
NEXT

REM Read in the addresses of our sprites.
FOR I%=0 TO 7
  $namebuffer%="native"+STR$(I%)
  SYS spop%,&118,sprites%,namebuffer% TO ,,C%(I%)
NEXT
ENDPROC

DEFPROCgetpalette(spr%,spr$,pal%,RETURN mode%)
LOCAL ts%,I%
SYS spop%,&118,spr%,spr$ TO ,,ts%
mode%=ts%!40
IF ts%!32>44 THEN
  FOR I%=44 TO ts%!32-1 STEP 8
        !pal%=ts%!I%
        pal%+=4
  NEXT
ELSE
        ERROR 1, FNlookup("E01")
ENDIF
ENDPROC

DEF PROCsetnewkeys
LOCAL I%
FOR I%=0 TO 3:newkey%(I%)=key%(I%):PROCseticon(h_keys%,I%,FNkeyname(key%(I%))):NEXT
ENDPROC

DEF PROCseticon(handle%,icon%,string$)
LOCAL addr%
addr% = FNiconaddr(handle%,icon%)
$addr% = string$
q%!0=handle%
q%!4=icon%
q%!8=0
q%!12=0
SYS "Wimp_SetIconState",,q%
ENDPROC

DEF PROCusenewkeys
LOCAL I%,J%
FOR I%=0 TO 2:FOR J%=I%+1 TO 3
IF newkey%(I%)=newkey%(J%) THEN ERROR 1,FNlookup("E02")
NEXT J%:NEXT I%
FOR I%=0 TO 3:key%(I%)=newkey%(I%):NEXT
ENDPROC

DEF PROCcloseawindow(handle%)
PROCgetw(handle%)
xo%=x0%:yo%=y0%:open%=FALSE
PROCclose_window(handle%)
ENDPROC

DEF PROCfinish
PROCclose_messages
SYS "Wimp_CloseDown"
ENDPROC

DEF PROCdomenu(handle%,menu$,menutitle$)
LOCAL cnt%,flags%
menuhandle%=handle%
menuptr%=buffer%
dataptr%=menudata%
i%=0:cnt%=0
menuptr%!20=44
IF LENmenutitle$<=12 THEN
  $menuptr%=menutitle$:flags%=0
ELSE
  !menuptr%=dataptr%:menuptr%!4=0:menuptr%!8=LENmenutitle$
  $dataptr%=menutitle$:dataptr%+=LENmenutitle$+1:flags%=&100
ENDIF
menuptr%?12=`tfcol:menuptr%?13=2:menuptr%?14=`wfcol:menuptr%?15=`wbcol
menuptr%!16=180-24:menuptr%!24=0
menuptr%+=28
REPEAT item$=FNpar(","):PROCmenuitem(item$,cnt%,flags%):cnt%+=1:flags%=0:UNTIL item$=""
menuptr%!-24=(menuptr%!-24)OR&80
IFhandle%=-2 SYS CrMenu,,buffer%,mousex%-64,96+44*4 ELSE SYS CrMenu,,buffer%,mousex%-64,mousey%
ENDPROC

DEF PROCmenuitem(text$,c%,f%)
LOCAL I%
IF text$="" ENDPROC
I%=INSTR(text$,">")
IF I% THEN menuptr%!4 = EVAL(MID$(text$,I%+1)):text$=LEFT$(text$,I%-1) ELSE menuptr%!4 = -1
menuptr%!0=f%
REM
REM Can't use menu text in source as it might have been localised in Messages file.
REM
REM IF text$="Auto" AND auto% THEN menuptr%!0 = 1
REM
IF c%=2 AND auto% THEN menuptr%!0 = f% OR 1
IF LENtext$<=12 THEN
  menuptr%!8=&07000021
  $(menuptr%+12)=text$
ELSE
  menuptr%!8=&07000121:menuptr%!12=dataptr%:menuptr%!16=0:menuptr%!20=LENtext$
  $dataptr%=text$:dataptr%+=LENtext$+1
ENDIF
menuptr%+=24
ENDPROC

DEF FNpar(sep$)
i1%=i%+1:i%=INSTR(menu$+sep$,sep$,i1%)
=MID$(menu$,i1%,i%-i1%)

DEF PROCmenuselect(menus%)
SYS "Wimp_GetPointerInfo",,q%+&80
REM
REM Can't determine menu action by looking at menu text, it might be localised.
REM
REM SYS DcMenu,,buffer%,menus%,STRING$(200," ")TO,,,a$
REM IF a$="" THEN ENDPROC
REM CASE menuhandle% OF
REM WHEN -2,pat%
REM   IF a$="Quit":PROCfinish:END
REM   IF a$="New game":PROCstart
REM   IF a$="Auto":auto%=NOTauto%:PROCtick(buffer%,2,auto%):sussing%=0
REM ENDCASE
REM
REM Use menu item number directly.
REM
IF !menus%=-1 THEN ENDPROC
CASE menuhandle% OF
WHEN -2,pat%
  IF !menus%=3:PROCfinish:END
  IF !menus%=0:PROCstart
  IF !menus%=2:auto%=NOTauto%:PROCtick(buffer%,2,auto%):sussing%=0
ENDCASE
IF q%!&88 AND 1 THEN SYS CrMenu,,buffer%,q%!&80,q%!&84
ENDPROC

DEF PROCtick(menu%,item%,bool%)
LOCAL A%
A%=menu%+28+24*item%
IF bool% THEN !A%=!A% OR 1 ELSE !A%=!A% AND NOT 1
ENDPROC

DEF PROCpat
LOCALX%,Y%
WHILE more%
  SYS Col%,7:MOVE bx%+4,by%+31*G%+48:PRINT FNlookup("Score");" ";S%;:MOVE bx%+4,by%+31*G%+8:PRINT FNlookup("High");" ";H%;
  FORX%=0TO10:FORY%=0TO30
  IFQ%(X%,Y%)THENSYSspop%,&222,sprites%,C%(Q%(X%,Y%)),bx%+X%*G%,by%+Y%*G%,0
  NEXT:NEXT
  SYS GetR%,,q% TO more%
ENDWHILE
ENDPROC

DEF FNcreate_window(cx0%,cy0%,cx1%,cy1%,scx%,scy%,flags%,fc%,bc%,sx0%,sy0%,sx1%,sy1%,titlef%,title$,nicons%)
!q%=cx0%:q%!4=cy0%:q%!8=cx1%:q%!12=cy1%:q%!16=scx%:q%!20=scy%
q%!24=-1:q%!28=flags%
IFfc%=15ANDbc%=15THEN
  q%?32=15:q%?33=15:q%?34=fc%:q%?35=bc%
ELSE q%?32=`tfcol:q%?33=`tbcol:q%?34=fc%:q%?35=bc%
ENDIF
q%?36=`sco:q%?37=`sci:q%?38=`tbcol2:q%?39=0
q%!40=sx0%:q%!44=sy0%:q%!48=sx1%:q%!52=sy1%
q%!56=titlef%
q%!60=&f000      : REM work area flags
q%!64=0:q%!68=0  : REM reserved
$(q%+72)=LEFT$(title$,11)
q%!84=nicons%
LOCALI%,x0%,y0%,x1%,y1%,f%,data$:I%=q%+88
WHILE nicons%>0
  READ x0%,y0%,x1%,y1%,f%,fc%,bc%,data$
  I%!0=x0%:I%!4=y0%:I%!8=x1%:I%!12=y1%
  IF (f%AND&40)=0 THEN bc%=fc%+(bc%<<4)
  I%!16=f%+(bc%<<24)
  IF(f%AND&100)THEN
    READ L%:B%=FNbuffer(L%):I%!20=B%:$B%=data$:I%!24=-1:I%!28=L%
  ELSE
    $(I%+20)=data$
  ENDIF
  I%=I%+32:nicons%=nicons%-1
ENDWHILE
 SYS CreateW,,q% TO handle%
=handle%

DEF PROCfront(handle%)
IFhandle%=-1THENENDPROC
PROCgetw(handle%)
PROCopen_window(handle%,x0%,y0%,x1%,y1%,scx%,scy%,-1)
ENDPROC

DEF PROCreopen(handle%)
PROCgetw(handle%)
PROCopen_window(handle%,x0%,y0%,x1%,y1%,scx%,scy%,-1)
ENDPROC

DEF PROCopen_window(handle%,x0%,y0%,x1%,y1%,scx%,scy%,bhandle%)
IFhandle%=-1THENENDPROC
q%!0=handle%:q%!28=bhandle%
q%!4=x0%:q%!8=y0%:q%!12=x1%:q%!16=y1%
q%!20=scx%:q%!24=scy%
SYS OpenW,,q%
ENDPROC

DEF PROCgetw(handle%)
!q%=handle%:SYS GetW,,q%
PROCinfo(q%+4):bhandle%=q%!28:flags%=q%!32
ENDPROC

DEF PROCinfo(q%)
x0%=!q%:y0%=q%!4:x1%=q%!8:y1%=q%!12:scx%=q%!16:scy%=q%!20
bx%=x0%-scx%:by%=y1%-scy%
ENDPROC

DEF PROCupdate(handle%,ux0%,uy0%,ux1%,uy1%)
!q%=handle%:q%!4=ux0%:q%!8=uy0%:q%!12=ux1%:q%!16=uy1%
SYS UpdateW%,,q% TO more%:PROCinfo(q%+4)
ENDPROC

DEF PROCredraw_window(handle%)
IFhandle%=pat% THEN
!q%=handle%
SYS RedrawW,,q% TO more%
PROCinfo(q%+4)
PROCpat
ENDIF
ENDPROC

DEF PROCclose_window(handle%)
!q%=handle%:SYS CloseW,,q%
ENDPROC

DEF PROCvars
Wimp    = (1<<18) + (3<<6)
CreateW = Wimp+1
OpenW   = Wimp+5
CloseW  = Wimp+6
Poll%   = Wimp+7
RedrawW = Wimp+8
UpdateW% = Wimp+9
GetR%   = Wimp+10
GetW    = Wimp+11
GetP    = Wimp+15
Drag    = Wimp+16
CrMenu  = Wimp+20
DcMenu  = Wimp+21
SYS "OS_SWINumberFromString",,"OS_SpriteOp" TO spop%
SYS "OS_SWINumberFromString",,"Wimp_SetColour" TO Col%
SYS "OS_SWINumberFromString",,"Wimp_ForceRedraw" TO fred%
ENDPROC

DEF FNbuffer(L%)
IFcurbuf%+L%>buffer%+maxbuf%THEN ERROR100,FNlookup("E06")
curbuf%+=L%
=curbuf%-L%

DEF FNiconbar
!q%=-1
q%!4=0:q%!8=0:q%!12=68:q%!16=68
q%!20=&2102
spname$="-Blocks"
DIM q%!24 (LENspname$+1):$(q%!24)=spname$
q%!28=sprites%
q%!32=LENspname$+1
SYS "Wimp_CreateIcon",,q% TO ic%
=ic%

DEF PROCkey_pressed( handle%,icon%,k% )
CASE handle% OF
WHEN pat%
 CASE k% OF
 WHEN key%(1):I=I/3:F%=0
 WHEN key%(3):R%=(P%AND&EEEE)>>1
 IFFNF(P%ANDNOTR%,X%+1,Y%)PROCP(P%AND&1111):X%+=1:PROCP(P%EORR%)
 WHEN key%(2):R%=(P%AND&7777)<<1
 IFFNF(P%ANDNOTR%,X%-1,Y%)PROCP(P%AND&8888):X%-=1:PROCP(P%EORR%)
 WHEN key%(0):R%=FNR(P%):IFFNF(R%ANDNOTP%,X%,Y%)PROCP(P%EORR%):P%=R%
 OTHERWISE SYS "Wimp_ProcessKey",k%
 ENDCASE
WHEN h_keys%
 newkey%(icon%)=k%
 PROCseticon(h_keys%,icon%,FNkeyname(k%))
OTHERWISE SYS "Wimp_ProcessKey",k%
ENDCASE
ENDPROC

DEFPROCP(P%)LOCALA%,B%,C%
FORA%=0TO19:IFP%AND1<<A%THENB%=X%+(A%AND3):C%=Y%+(A%>>2):Q%(B%,C%)=Q%(B%,C%)EORQ%
NEXT
q%!0=pat%
q%!4=X%*G%:q%!8=Y%*G%:q%!12=(X%+4)*G%:q%!16=(C%+5)*G%
SYS UpdateW%,,q% TO flag%
WHILE flag%
    FORA%=0TO19:IFP%AND1<<A%THENB%=X%+(A%AND3):C%=Y%+(A%>>2):SYSspop%,&222,sprites%,C%(Q%(B%,C%)),q%!4-q%!20+B%*G%,q%!16-q%!24+C%*G%,0
    NEXT
    SYS GetR%,,q% TO flag%
ENDWHILE
ENDPROC

DEFFNF(P%,X%,Y%)LOCALA%,B%,C%:FORA%=0TO15:IFP%AND1<<A%THEN
B%=X%+(A%AND3):C%=Y%+(A%>>2):IFB%<0ORB%>10ORC%<0THEN=0
IFQ%(B%,C%)THEN=0
ENDIF:NEXT:=1

DEFPROCL(Y%)LOCALX%,A%:FORX%=0TO10
IFQ%(X%,Y%)ELSEENDPROC
NEXT:SYS"Wimp_BlockCopy",pat%,0,(Y%+1)*G%,11*G%,30*G%,0,Y%*G%
WHILEY%<30:FORX%=0TO10:Q%(X%,Y%)=Q%(X%,Y%+1):NEXT:Y%+=1:ENDWHILE
FOR X%=0 TO 10
Y%=height%(X%)
WHILE Y% > 0 AND Q%(X%,Y%)=0:Y%-=1:ENDWHILE
IF Q%(X%,Y%) THEN Y%+=1
height%(X%)=Y%
NEXT
ENDPROC

DEFFNR(P%)LOCALR%,A%:FORA%=0TO15:IFP%AND1<<A%THENR%+=1<<R%(A%)
NEXT
WHILE (R%AND&F)=0:R%=R%>>4:ENDWHILE
WHILE (R%AND&1111)=0:R%=R%>>1:ENDWHILE
=R%

DEF PROCstart
IFS%>H% H%=S%
S%=0:Q%()=(0):T=TIME:STOPPED%=0
height%()=(0)
sussing%=0
IF FNpiece SYSfred%,pat%,-1000000,-100000,1000000,1000000
ENDPROC

DEF FNpiece
REPEATQ%=RND(7):P%=B%(Q%):FORA%=1TORND(4):P%=FNR(P%):NEXT
IFRND(200)=1P%=RND AND RND AND65535
IFRND(30)=1P%=RND AND 1911
UNTILP%
WHILE (P%AND&F)=0:P%=P%>>4:ENDWHILE
WHILE (P%AND&1111)=0:P%=P%>>1:ENDWHILE
I=30*EXP(-S%/500):F%=1:X%=4:Y%=26
IFFNF(P%,X%,Y%) PROCP(P%):=1 ELSE:=0

 REM returns 0 if not reached bottom, 1 if reached bottom
DEFFNdrop
IFTIME<T ANDF%THEN=0
IFFNF(P%ANDNOT(P%<<4),X%,Y%-1)Y%-=1:PROCP(P%EORP%<<4):T+=I:=0
PROCsuss_grommets
S%+=1:FORA%=29TO0STEP-1:PROCL(A%):NEXT
REM PROCcheck_grommets
sussing%=0
=1

DEFPROCdispscore
SYSfred%,pat%,0,31*G%,11*G%,31*G%+100
ENDPROC

DEF PROCbg_event
IF NOT open% THEN ENDPROC
IF auto% THEN PROCautomove
IF FNdrop PROCdispscore:IF FNpiece=0 STOPPED%=1
ENDPROC

DEF PROCerror
IF debugging% THEN PROCfatalerror
!q%=0
$(q%+4)=REPORT$+CHR$0
SYS "Wimp_ReportError",q%,1,"Dump"
ENDPROC

DEF PROCfatalerror
PROCfinish
report$=REPORT$
IF debugging% THEN report$ += " (internal error "+STR$ERL+")"
IF QUIT THEN ERROR EXT ERR,report$ ELSE PRINT report$:END

DEF FNloadsprites(filename$)
LOCAL type%,size%,sprites%
SYS "OS_File",5,filename$ TO type%,,,,size%
IF type%<>1 THEN ERROR 1,FNlookup1("E03",filename$)
DIM sprites% size%+4
sprites%!0=size%+4
sprites%!4=0
sprites%!8=16
sprites%!12=16
SYS spop%,&10A,sprites%,filename$
=sprites%

DEF PROCinittemplate
ind_size% = 256
DIM scratch% 512,indirected% ind_size%
ind_free%=indirected%
ENDPROC

DEF FNloadtemplate(name$,sparea%)
LOCAL found%,handle%
$namebuffer% = name$
SYS "Wimp_LoadTemplate",,scratch%,ind_free%,indirected%+ind_size%,,namebuffer% TO ,,ind_free%,,,,found%
IF found% THEN
  scratch%!64 = sparea%
  SYS "Wimp_CreateWindow",,scratch% TO handle%
ELSE
  handle%=0
ENDIF
=handle%

DEF FNiconaddr(handle%,icon%)
q%!0=handle%
q%!4=icon%
SYS "Wimp_GetIconState",,q%
IF q%!24 AND &100 THEN = q%!28 ELSE ERROR 1,FNlookup("E04")
=0

DEF FNkeyname(key%)
CASE key% OF
WHEN 13:=FNlookup("Return")
WHEN 32:=FNlookup("Space")
WHEN &180,&181,&182,&183,&184,&185,&186,&187,&188,&189,&1CA,&1CB,&1CC:="F"+STR$(key%AND&F)
WHEN &190,&191,&192,&193,&194,&195,&196,&197,&198,&199,&1DA,&1DB,&1DC:="S-F"+STR$(key%AND&F)
WHEN &1A0,&1A1,&1A2,&1A3,&1A4,&1A5,&1A6,&1A7,&1A8,&1A9,&1EA,&1EB,&1EC:="C-F"+STR$(key%AND&F)
WHEN &1B0,&1B1,&1B2,&1B3,&1B4,&1B5,&1B6,&1B7,&1B8,&1B9,&1FA,&1FB,&1FC:="C-S-F"+STR$(key%AND&F)
WHEN &7F:=FNlookup("Delete")
OTHERWISE:IF key%<32 THEN ="Ctrl-"+CHR$(key%+&40) ELSE = CHR$key%
ENDCASE
=""
>*FX 229,1
>*FX 229,1

------------------------------------------------------------------------------

Position evaluation for automatic movement routines


Called when the computer is doing the moves

DEF PROCautomove
LOCAL I%
FOR I%=1 TO moves_per_cycle%
IF sussing%>=0 THEN PROCsuss_piece
NEXT
IF sussing%>=0 THEN ENDPROC
IF TIME-oldtime% > 10 THEN oldtime%=TIME ELSE ENDPROC
SYS "Wimp_GetCaretPosition",,q%:IF q%!0<>pat% THEN ENDPROC
CASE TRUE OF
WHEN idealP%<>P%:SYS "Wimp_ProcessKey",key%(0)
WHEN idealX%<X%:SYS "Wimp_ProcessKey",key%(2)
WHEN idealX%>X%:SYS "Wimp_ProcessKey",key%(3)
OTHERWISE:IFsussing%<>-2THEN sussing%=-2:SYS "Wimp_ProcessKey",key%(1)
ENDCASE
ENDPROC

Called when we want to decide what to do

DEF PROCsuss_piece
LOCAL I%
IF sussing%=0 THEN
  firstP%=P%
  idealP%=P% : idealX%=5 :REM these are the defaults
  bestvalue% = -1E8
  currentP%=P%
  PROCsussrot(currentP%)
ENDIF
IF currentX%+shapeX1%>10 THEN
  currentP%=FNR(currentP%)
  IF currentP%=firstP% THEN sussing%=-1:ENDPROC
  PROCsussrot(currentP%)
ENDIF
PROCsussmove(currentP%,currentX%)
currentX%+=1
sussing%=1
ENDPROC

DEF PROCsussmove(P%,X%)
LOCAL I%,H%,K%,T%,value%
value%=0
H%=-1E8
FOR I%=shapeX0% TO shapeX1%
K%=height%(X%+I%)-h%(I%)
IF K%>H% THEN H%=K%
NEXT
value% -= H%*100
FOR I%=shapeX0% TO shapeX1%
K%=(H%-height%(X%+I%)+h%(I%)) : IF K%>2 THEN K%=2
value% -= K%*400
NEXT
temph%()=height%()
T%=-1E8
FOR I%=shapeX0% TO shapeX1%
IF toph%(I%) THEN temph%(X%+I%)=H%+toph%(I%)
IF temph%(X%+I%) > T% THEN T%=temph%(X%+I%)
NEXT
value% -= T%*50
FOR I%=0 TO 9
K%=ABS(temph%(I%)-temph%(I%+1))
value% -= 25*K%
NEXT
K%=temph%(1)-temph%(0):IF K%>0 THEN value% -= 25*K%
K%=temph%(9)-temph%(10):IF K%>0 THEN value% -= 25*K%
value% -= RND(10)
IF value% > bestvalue% THEN bestvalue%=value%:idealP%=P%:idealX%=X%
ENDPROC

Set up h%() shapeX0% shapeX1% from current shape at this rotation

DEF PROCsussrot(P%)
LOCAL M%,I%,J%
currentP%=P%
M%=&1111
shapeX0%=0:WHILE (P% AND M%)=0 : shapeX0%+=1:M%=M%<<1 :ENDWHILE
M%=&8888
shapeX1%=3:WHILE (P% AND M%)=0 : shapeX1%-=1:M%=M%>>1 :ENDWHILE
currentX%=-shapeX0%
FOR I%=0 TO 3
  M%=1<<I%:h%(I%)=0
  FOR J%=0 TO 3:IF P% AND M% THEN J%=3 ELSE h%(I%)+=1:M%=M%<<4
  NEXT
NEXT
FOR I%=3 TO 0 STEP -1
  M%=1<<(I%+12):toph%(I%)=4
  FOR J%=0 TO 3:IF P% AND M% THEN J%=3 ELSE toph%(I%)-=1:M%=M%>>4
  NEXT
NEXT
ENDPROC

DEF PROCrandom_move
idealP%=P%
FOR I%=1 TO RND(4):idealP%=FNR(idealP%):NEXT
FOR I%=1 TO 10
idealX%=RND(11)-1:IF FNF(idealP%,idealX%,Y%) THEN I%=20
NEXT
IFI%<20 THEN idealX%=5
sussing%=-1
ENDPROC

Called when a piece has dropped to the bottom

P%,X%,Y% = current position of piece

DEF PROCsuss_grommets
LOCAL I%,H%,K%
PROCsussrot(P%)
FOR I%=shapeX0% TO shapeX1%
IF toph%(I%) THEN height%(X%+I%)=Y%+toph%(I%)
NEXT
ENDPROC

DEF PROCcheck_grommets
LOCAL X%,Y%
FOR X%=0 TO 10
  FOR Y%=30 TO 0 STEP -1
    IF Q%(X%,Y%) THEN
      IF Y%<>height%(X%)-1 THEN ERROR 1,FNlookup("E05")
      Y%=-5
    ENDIF
  NEXT
  IF Y%=-1 AND height%(X%)<>0 THEN ERROR 1,FNlookup("E05")
NEXT
ENDPROC

DEF PROCopen_messages(file$)
  LOCAL s%
  SYS "MessageTrans_FileInfo",,file$ TO ,,s%
  DIM __filebuf% s%
  SYS "MessageTrans_OpenFile",messbuf%,file$,__filebuf%
ENDPROC

DEF PROCclose_messages
  SYS "MessageTrans_CloseFile",messbuf%
ENDPROC

DEF FNstring(a%)
  LOCAL a$
  a$="":WHILE ?a% >= ASC" ":a$+=CHR$(?a%):a%+=1:ENDWHILE
=a$

DEF FNlookup1(token$,p1$)
  LOCAL t%
  SYS "MessageTrans_Lookup",messbuf%,token$,messbuf%+16,240,p1$ TO ,,t%
=FNstring(t%)

DEF FNlookup(token$)=FNlookup1(token$,"")
