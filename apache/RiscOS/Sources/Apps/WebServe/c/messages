/* Copyright 1998 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * WebServe (c.messages)
 *
 * © Acorn Computers Ltd. 1997
 */

#include "structs.h"
#include "include.h"
#include <string.h>
#include "kernel.h"
#include "swis.h"
#include "debug.h"
#include "messages.h"
#include "generic.h"

static struct messages {
        char *value;
} messages[mtoken_MAX] = { { 0 } };
        

char *messages_read(size_t *size, const char *token)
{
        char *str;
        
	if (!_swix(MessageTrans_Lookup, _INR(0,2)|_OUTR(2,3), &mbl, token, 0, &str, size)) {
		return str;
	}

	return NULL;
}

static char outofmemory[] = "outOfMemory";

char *messages_get(message_token t)
{
	if (messages[t].value != NULL) {
	        return messages[t].value;
	}
	else {
	        char tokbuf[16], *ptr;
        	size_t length;
	
	        sprintf(tokbuf, "stMSG%02d", (int)t);
        	ptr = messages_read(&length, tokbuf);
	        if (ptr == NULL) {
			messages[t].value = Strdup(tokbuf);
	        }
        	else {
                	messages[t].value = malloc(length + 1);
	                if (messages[t].value == NULL) {
        	                ptr = NULL;
                	}
	                else {
        	                memcpy(messages[t].value, ptr, length);
                	        messages[t].value[length] = '\0';
	                }
        	}
        
	        return ptr ? ptr : outofmemory;
	}
}

_kernel_oserror *messages_init(void)
{
        int t;
        static _kernel_oserror e = { 0, "Out of memory" };
        
        for (t=0; t<mtoken_MAX; ++t) {
                if (messages_get((message_token) t) == outofmemory) {
                        return &e;
                }
        }
        
        return NULL;
}
