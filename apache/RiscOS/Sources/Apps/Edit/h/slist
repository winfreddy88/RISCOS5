/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -> h.Slist
 * Title:       Slist - singly-linked lists
 * Author:      JGT (converted from MJJ)
 *              Copyright (C) 1988 Acorn Computers Limited
 */

#ifndef _slist_h
#define _slist_h

/* This is a generic package for handling singly-linked lists. The critical
 assumption is that the first item of a record to be added to the list is used
 as the link field. e.g.

 TYPE
   ListPtr = POINTER TO ListRec;
   ListRec = RECORD
     next: ListPtr;    (* 'slist' can be used to chain 'ListRec' items *)
     ...blah blah...   (* on their 'next' field because it is the first *)
   END;                (* field in the record *)
  
*/

extern void * slist_add(void * listhead, void * newelement);
/* Adds 'newelement' to the front of the list whose head is 'listhead'
   Returns new value of listhead. */

extern void * slist_addend(void * listhead, void * newelement);
/* Adds 'newelement' to the end of the list whose head is 'listhead'.
   The link field of 'newelement' is set to NIL
   Returns new value of listhead. */

extern void * slist_remove(void * listhead, void * element);
/* Removes 'element' from the list whose head is 'listhead'
   Returns new value of listhead. */

extern void * slist_joinend(void * listhead, void * newlist);
/* Adds the list headed by 'newlist' to the end of 'listhead'
   Returns new value of listhead. */

#endif

/* End slist.h */
