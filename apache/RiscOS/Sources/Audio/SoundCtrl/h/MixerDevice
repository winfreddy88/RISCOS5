/* Copyright 2003 Tematic Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef GLOBAL_MIXERDEVICE_H
#define GLOBAL_MIXERDEVICE_H

#pragma force_top_level
#pragma include_only_once

#include <stdbool.h>
#include <stdint.h>
#include "Global/HALDevice.h"

struct mixer_device_channel_features
{
  bool fixed: 1;
  bool mono: 1;
  bool default_mute: 1;
  unsigned : 13;
  signed category: 16;
};

struct mixer_device_channel_state
{
  bool mute: 1;
  int32_t gain;
};

struct mixer_device_channel_limits
{
  int32_t mingain;
  int32_t maxgain;
  int32_t step;
};  

struct mixer_device
{
  struct device device;
  struct device *controller;
  uint32_t nchannels;
  struct mixer_device_channel_features (*GetFeatures)(struct mixer_device *, uint32_t channel);
  void (*SetMix)(struct mixer_device *, uint32_t channel, struct mixer_device_channel_state state);
  __value_in_regs struct mixer_device_channel_state (*GetMix)(struct mixer_device *, uint32_t channel);
  void (*GetMixLimits)(struct mixer_device *, uint32_t channel, struct mixer_device_channel_limits *); /* API 0.1 extension */
};

enum
{
  mixer_CATEGORY_SPEAKER    = -1,
  mixer_CATEGORY_HEADPHONES = -2,
  mixer_CATEGORY_LINE_OUT   = -3,
  mixer_CATEGORY_AUX_OUT    = -4,
  mixer_CATEGORY_SYSTEM     = 0,
  mixer_CATEGORY_MIC        = 1,
  mixer_CATEGORY_LINE_IN    = 2,
  mixer_CATEGORY_AUX_IN     = 3,
};

#endif
