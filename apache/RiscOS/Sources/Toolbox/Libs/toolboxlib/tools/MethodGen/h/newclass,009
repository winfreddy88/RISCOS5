/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * h.newclass
 */
 
 
#ifndef __newclass_h
#define __newclass_h

#ifndef __addmethod_h
#include "addmethod.h"
#endif

/*****************************************************
 * Typedefs                                          *
 *****************************************************/
 
typedef struct NewClassMethods
{
  AddMethodBlock *method;
  
  /*-- linked list pointers --*/
  
  struct NewClassMethods *next;
  struct NewClassMethods *prev;
  
} NewClassMethods;


 
typedef struct
{
  char class_title[30];
  char needs[50];
  char source_path[50];
  int no_methods;
  char object_name[20];
  
  /*-- list of associated methods --*/
  
  NewClassMethods *methods;
  
} NewClassBlock;
 


/*****************************************************
 * Functions                                         *
 *****************************************************/
 
/*
 * Name    : newclass_delete_method
 * Desc    : deletes a method from the list for the class
 * Parms   : NewClassBlock   *nclass - pointer to class
 *           AddMethodBlock  *method - pointer to method to delete
 * Returns : none
 */
 
extern void newclass_delete_method ( NewClassBlock *nclass, AddMethodBlock *method );



/*
 * Name    : newclass_copy_method
 * Desc    : copies one method to another
 * Parms   : NewClassBlock   *nclass - pointer to class
 *           AddMethodBlock  *source - pointer to source method block
 * Returns : pointer to new method block or NULL
 */
 
extern AddMethodBlock *newclass_copy_method ( NewClassBlock *nclass, AddMethodBlock *source );


 
/*
 * Name    : newclass_add_method
 * Desc    : adds a method to the specified class' linked list
 *           of methods (or updates one)
 * Parms   : NewClassBlock  *nclass  - pointer to class
 *           AddMethodBlock **method  - pointer to method to add
 *           BOOL            new     - TRUE if it is a new method
 * Returns : True or False on result
 */
 
extern BOOL newclass_add_method ( NewClassBlock *nclass, AddMethodBlock **method, BOOL new );
 

/*
 * Name    : newclass_free
 * Desc    : free's all data associated with class
 * Parms   : NewClassBlock *nclass
 * Returns : none
 */
 
extern void newclass_free ( NewClassBlock *nclass );


/*
 * Name    : newclass_show
 * Desc    : displays the newclass dbox
 * Parms   : none
 * Returns : pointer to filled in NewClassBlock
 *
 * Other Info: returns NULL if couldn't allocate block
 *             or dbox was cancelled
 */
 
extern NewClassBlock *newclass_show ( void );



#endif

