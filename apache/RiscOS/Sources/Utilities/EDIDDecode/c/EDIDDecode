/* Copyright 2012 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include "LinkedList.h"
#include "VersionNum"

#define round(x) ceil(x)

#define MAXMODENAMESIZE		25

#define l81  (double)1.8


#define NOM_HSYNC 8
#define MIN_VSYNCBACK_INT 550
#define M_GRADIENT 600
#define C_OFFSET 40
#define K_BLANKING 128
#define J_SCALING 20



#define CHAR_WIDTH 8
#define MIN_PORCH  1
#define MIN_VSYNC  3
// if K_BLANKING = 0 K_BLANKING = 0.001
#define EQ_M (((double)K_BLANKING/256)*M_GRADIENT)
#define EQ_C ((C_OFFSET-J_SCALING)*((double)K_BLANKING/256))+J_SCALING
#define b120 round((xres/CHAR_WIDTH)*CHAR_WIDTH)
//if interlace b121 = round(yres/2)
#define b121 yres


#define ab105 round(ab41/CHAR_WIDTH)
#define ab111 round((ab41+ab28+ab29)/CHAR_WIDTH)
#define ab123 ((double)ab28/CHAR_WIDTH)
#define ab129 ((double)ab29/CHAR_WIDTH)
#define ab132 (round((double)NOM_HSYNC/100*((double)ab44/CHAR_WIDTH))*CHAR_WIDTH)
#define ab135 ((ab41/2)-ab132)
#define ab138 (ab135+ab132)
#define ab141 ((double)ab132/CHAR_WIDTH)
#define ab147 ((double)ab135/CHAR_WIDTH)
#define ab15 freq
#define ab153 ((double)ab138/CHAR_WIDTH)
#define ab16 b120
#define ab17 b121
#define ab172 (ab60+MIN_PORCH)

#define r28  0
#define r29  0
#define r32  0
#define r59  0
#define r60  0
#define ab53 0
#define ab54 0
#define ab57 0


#define ab28 0
#define ab29 0
#define ab32 (ab16+ab29+ab28)
#define ab35 (((EQ_C-100) + sqrt(pow((100-round(EQ_C)),2)+(0.4*EQ_M*(double)(ab32+ab29+ab28)/freq)))/2/EQ_M*1000 )

#define ab38 (EQ_C-(EQ_M*(double)ab35/1000))
#define ab41 (round(ab32*(double)ab38/(100-ab38)/(2*CHAR_WIDTH))*(2*CHAR_WIDTH))
#define ab44 (ab32+ab41)
#define ab47 (freq/ab44*1000)

#define ab60 (round(MIN_VSYNCBACK_INT*(double)ab47/1000))
#define ab63 (ab60-MIN_VSYNC)
#define ab66 ((double)ab17+ab53+ab54+ab57+ab60+MIN_PORCH)
#define ab69 ((double)ab47/ab66*1000)
#define ab72 ab69
#define ab85 ab17
#define ab93 round((double)ab44/CHAR_WIDTH)
#define ab99 round((double)ab16/CHAR_WIDTH)


#define r105 round((double)r69/CHAR_WIDTH)
#define r111 round((double)(r69+r60+r59)/CHAR_WIDTH)
#define r123 ((double)r59/CHAR_WIDTH)
#define r129 ((double)r60/CHAR_WIDTH)
#define r132 (floor((double)NOM_HSYNC/100*r72/CHAR_WIDTH)*CHAR_WIDTH)
#define r135 (((double)r69/2)-r132)
#define r138 (r135+r132)
#define r141 ((double)r132/CHAR_WIDTH)
#define r147 ((double)r135/CHAR_WIDTH)
#define r15 freq
#define r153  ((double)r138/CHAR_WIDTH)
#define r16 b120
#define r17 b121
#define r172 (r38+MIN_PORCH)

#define ab190 (MIN_PORCH+ab57)
#define r190 (MIN_PORCH+r32)




#define r35 ((((double)1/freq)-(double)MIN_VSYNCBACK_INT/1000000)/(r17+(2*r28)+MIN_PORCH+r32)*1000000)
#define r38 round(MIN_VSYNCBACK_INT/r35)
#define r41 (r38-MIN_VSYNC)
#define r44 (r17+r28+r29+r38+r32+MIN_PORCH)
#define r47 ((double)1/r35/r44*1000000)
#define r50  ((double)r35/((double)freq/r47))
#define r53  ((double)(1/r50/r44*1000000))
#define r56  r53
#define r63 (r16+r59+r60)
#define r66 (EQ_C-(EQ_M*((double)r50/1000)))
#define r69 (floor(r63*r66/(100-r66)/(2*CHAR_WIDTH))*(2*CHAR_WIDTH))
#define r72 (r63+r69)
#define r75 (double)(r72/r50)
#define r78 (double)(1000/r50)
#define r85  r17
#define r90  (r17+r28+r29+r38+r32+MIN_PORCH)
#define r93 round(r72/CHAR_WIDTH)
#define r96 (r16/r75)
#define r99  round((double)r16/CHAR_WIDTH)
#define w105 round((double)w60/CHAR_WIDTH)
#define w111 round((double)(w60+w51+w50)/CHAR_WIDTH)
#define w123 (w50/CHAR_WIDTH)
#define w129 ((double)w51/CHAR_WIDTH)
//#define w132 ((round(((double)NOM_HSYNC/100)*((double)w63/CHAR_WIDTH)))*CHAR_WIDTH)
#define w132 (floor(((double)NOM_HSYNC/100*(double)w63/CHAR_WIDTH))*CHAR_WIDTH)
#define w135 ((double)((double)w60/2)-w132)
#define w138 (w135+w132)
#define w141 ((double)w132/CHAR_WIDTH)
#define w147 ((double)w135/CHAR_WIDTH)
#define w15  freq
#define w153 ((double)w138/CHAR_WIDTH)
#define w16 b120
#define w17 b121
#define w172 (w35+MIN_PORCH)

#define w190 (MIN_PORCH+w32)



#define w28 0
#define w29 0
#define w32 0
#define w35 round(MIN_VSYNCBACK_INT*(double)w15/1000)
#define w38 (w35-MIN_VSYNC)
#define w41 (w17+w28+w29+w32+w35+MIN_PORCH)
#define w44 ((double)w15/w41*1000)
#define w47 w44
#define w50 0
#define w51 0
#define w54 (w16+w51+w50)
#define w57 (double)(EQ_C-((double)EQ_M/w15))
#define w60 (round((double)w54*(double)w57/(100-w57)/(2*CHAR_WIDTH))*(2*CHAR_WIDTH))
#define w63 (w54+w60)
#define w69 ((w63*(double)w15/1000))
#define w85  w17
#define ab90 (ab17+ab53+ab54+ab60+ab57+MIN_PORCH)
#define w90  (w17+w28+w29+w35+w32+MIN_PORCH)
#define w93 round((double)w63/CHAR_WIDTH)
#define w99  round((double)w16/CHAR_WIDTH)
/*----------------------------------------------------------------------------*/

#define f34     b120


//*
//#define f38 f382
#define f381   r78
#define f382   w15
#define f383   ab47
//*
//#define f40   f401
#define f401   r56
#define f402   w47
#define f403   ab72
//*
//#define f42 f422
#define f421 r75
#define f422 w69

#define j42   1
#define j43    CHAR_WIDTH

//*
//#define j49  j492
#define j491  r93
#define j492  w93
#define j493  ab93

//*
//#define j50  j502
#define j501  r99
#define j502  w99
#define j503  ab99

//*
//#define j51  j512
#define j511  r105
#define j512  w105
#define j513  ab105


#define j521  r111
#define j522  w111
#define j523  ab111


//*
//#define j56   j562
#define j561  r123
#define j562  w123
#define j563  ab123

//*
//#define j57   (int)j572
#define j571  r147
#define j572  w147
#define j573  ab147

//*
//#define j58   (int)j582
#define j581  r141
#define j582  w141
#define j583  ab141


//*
//#define j59   (int)j592
#define j591  r153
#define j592  w153
#define j593  ab153

//*
//#define j60   (int)j602
#define j601  r129
#define j602  w129
#define j603  ab129

//*
//#define j62   (int)j622
#define j621  r90
#define j622  w90
#define j623  ab90

#define j631  r85
#define j632  w85
#define j633  ab85





//*
//#define j67   j672
#define j671  r28
#define j672  w28
#define j673  ab53

//*
//#define j68   j682
#define j681  r190
#define j682  w190
#define j683  ab190


//*
//#define j70   (int)j702
#define j701  r41
#define j702  w38
#define j703  ab63

//*
//#define j71   j711
#define j711  r29
#define j712  w29
#define j713  ab54





#define f42  f421
#define j71  j711
#define j70  (int)j701
#define j68  j681
#define j67  j671

#define j60  (int)j601
#define j59  (int)j591
#define j58  (int)j581
#define j57  (int)j571
#define j56  (int)j561






#define EDID_SIZE   128

#define StdTime      0x26
#define StdTimeSize  2
#define StdTimeCount 8

#define DTDSize     18
#define DTDCount    4
#define DTDBase     0x36

#define MAXHSize   0x15
#define MAXVSize   0x16

#define MAXMHSize   JOIN_HILO8(HINibble(14),dtd_base[0x15])
#define MAXMVSize   JOIN_HILO8(LONibble(14),dtd_base[0x16])



#define byte       unsigned char

#define LONibble(byte)   (byte & 0xF)

#define HINibble(byte)   ((byte  >> 4) & 0xF)

#define JOIN_HILO8(hi,lo) (((unsigned)hi<<8) + (unsigned)lo)
#define JOIN_HILO4(hi,lo) (((unsigned)hi<<4) + (unsigned)lo)

#define ESTB1 dtd_base[0x23]
#define ESTB2 dtd_base[0x24]
#define ESTB3 dtd_base[0x25]


#define PIXEL_CLOCK_HI ((unsigned)dtd_base[1])
#define PIXEL_CLOCK_LO ((unsigned)dtd_base[0])

#define PIXEL_CLOCK_K (JOIN_HILO8(PIXEL_CLOCK_HI,PIXEL_CLOCK_LO)*10)

#define H_ACTIVE_HI HINibble((unsigned)dtd_base[4])
#define H_ACTIVE_LO ((unsigned)dtd_base[2])
#define H_ACTIVE    (JOIN_HILO8(H_ACTIVE_HI,H_ACTIVE_LO))

#define H_BLANK_HI LONibble((unsigned)dtd_base[4])
#define H_BLANK_LO (unsigned)dtd_base[3]
#define H_BLANK    JOIN_HILO8(H_BLANK_HI,H_BLANK_LO)

#define H_FPORCH_LO ((unsigned)dtd_base[8])
#define H_FPORCH_HI ((((unsigned)dtd_base[11]) >> 6) & 3)
#define H_FPORCH    JOIN_HILO8(H_FPORCH_HI,H_FPORCH_LO)
#define H_BPORCH  (H_BLANK-H_SYNC-H_FPORCH-(H_BORDER*2))

#define H_SYNC_LO (unsigned)dtd_base[9]
#define H_SYNC_HI ((((unsigned)dtd_base[11]) >> 4) & 3)
//#define H_SYNC_HI (((unsigned)dtd_base[11]) >> 2) & 3
#define H_SYNC    JOIN_HILO8(H_SYNC_HI,H_SYNC_LO)

#define H_BORDER ((unsigned)dtd_base[15])


#define V_ACTIVE_HI HINibble((unsigned)dtd_base[7])
#define V_ACTIVE_LO (unsigned)dtd_base[5]
#define V_ACTIVE    JOIN_HILO8(V_ACTIVE_HI,V_ACTIVE_LO)

#define V_BLANK_HI LONibble((unsigned)dtd_base[7])
#define V_BLANK_LO ((unsigned)dtd_base[6])
#define V_BLANK    JOIN_HILO8(V_BLANK_HI,V_BLANK_LO)

#define V_FPORCH_LO HINibble((unsigned)dtd_base[10])
#define V_FPORCH_HI ((((unsigned)dtd_base[11]) >> 2) & 3)
//#define V_FPORCH_HI (((unsigned)dtd_base[11]) >> 4) & 3
#define V_FPORCH    JOIN_HILO4(V_FPORCH_HI,V_FPORCH_LO)

#define V_SYNC_LO LONibble((unsigned)dtd_base[10])
#define V_SYNC_HI ((((unsigned)dtd_base[11])) & 3)
#define V_SYNC    JOIN_HILO4(V_SYNC_HI,V_SYNC_LO)
#define V_BPORCH  (V_BLANK-V_SYNC-V_FPORCH-(V_BORDER*2))
#define V_BORDER ((unsigned)dtd_base[16])

#define HSYNCPOL ((dtd_base[17]>>2) & 1)
#define VSYNCPOL ((dtd_base[17]>>1) & 1)




#define MODEID(edidp,x) ((*(edidp + StdTime +(x*StdTimeSize))<<8) + (*(edidp + StdTime +(x*StdTimeSize)+1)))
#define IDFREQ(x) ((x & 0x3F)+60)
#define IDXRES(x) (int)((((x>>8) & 0xFF)+31)*8)
#define IDFACTOR(x) (int)((x>>6) & 3)

#define EDID_Extension 0x7E
#define EDID_Checksum  0x7F

#define EDID_Version   0x12
#define EDID_Revision  0x13



#define DTD_HAS_TIMING  0x1;
#define DTD_HAS_SERIAL  0x2;
#define DTD_HAS_VENDOR  0x4;
#define DTD_HAS_MODEL   0x8;

#define MODETYPE_Established  0x1;
#define MODETYPE_Generated    0x2;
#define MODETYPE_Detailed     0x4;
#define MODETYPE_INTERLACE     0x8;

typedef struct _MONINFO
{
	int		MaxDot;
	int		MinH;
	int		MaxH;
	int		MinV;
	int		MaxV;

	int		MaxHSize;
	int		MaxVSize;
	char	ManufacturerID[4];
	int		ModelID;

	int		Week;
	int		Year;
	int		Serial;
	char	Manufacturer;
	int		XSize;
	int		YSize;
	int		Type;
	int		DPMS;
	int		EDIDVersion;
	int		EDIDRevision;
	byte	EDIDData[EDID_SIZE];
	int		Flags;
	char	DTD_Model[14];
	char	DTD_Vendor[14];
	char	DTD_Serial[14];
	LINKED_LISTBASE Mode_List;
} MONINFO, *PMONINFO;




typedef struct _MODEDESC
{
	char	*Comment;
	char	ModeName[MAXMODENAMESIZE];
	int		XRes;
	int		YRes;
	int		PixRate;
	int		HSync;
	int		VSync;
	int		HFrontPorch;
	int		HBackPorch;
	int		VFrontPorch;
	int		VBackPorch;
	int		SyncPulse;
	int		LeftBorder;
	int		RightBorder;
	int		TopBorder;
	int		BottomBorder;
	int		HScan;
	int		VScan;
	int		HTotal;
	int		VTotal;
	int		Refresh;
	int		ShowName;
	int		ModeType;
} MODEDESC, *PMODEDESC;

typedef struct _STDMODE
{
	char	ModeName[MAXMODENAMESIZE];
	int		Refresh;
	int		SyncPulse;
	int		HTotal;
	int		XRes;
	int		HSync;
	int		HFrontPorch;
	int		HBackPorch;
	double	PixRate;
	int		VTotal;
	int		YRes;
	int		VSync;
	int		VFrontPorch;
	int		VBackPorch;
} STDMODE, *PSTDMODE;

#define NO_INT 1
typedef struct _STDMODE1
{
	char	ModeName[MAXMODENAMESIZE];
	int		Refresh;
	int		XRes;
	int		YRes;
	int		PixRate;
	int		HBackPorch;
	int		HFrontPorch;
	int		VBackPorch;
	int		VFrontPorch;
	int		HSync;
	int		VSync;
	int		SyncPulse;
	int		Interlace;
} STDMODE1, *PSTDMODE1;

static STDMODE STANDARD_MODES[27] = {
 /*00*/  "VGA-350",70,2,800,640,96,16,48,25.175,449,350,2,37,60,
 /*01*/  "NEC PC9801",56,3,848,640,64,64,80,21.05,440,400,8,7,25,
 /*02*/  "VGA-GRAPH",70,1,800,640,96,16,48,25.175,449,400,2,12,35,
 /*03*/  "NEC PC9821",70,3,800,640,64,16,80,25.197,449,400,2,13,34,
 /*04*/  "VESA-PAL",50,3,800,640,96,16,48,25.175,629,480,2,62,85,
 /*05*/  "VGA-480",60,3,800,640,96,16,48,25.175,525,480,2,10,33,
 /*06*/  "APPLE MAC-480",66,3,864,640,64,64,96,30.24,525,480,3,3,39,
 /*07*/  "VESA-480-72Hz",72,3,832,640,40,16,120,31.5,520,480,3,1,20,
 /*08*/  "VESA-480-75Hz",75,3,840,640,64,16,120,31.5,500,480,3,1,16,
 /*09*/  "VGA-400-TEXT",70,1,900,720,108,18,54,28.322,449,400,2,12,35,
 /*10*/  "APPLE MAC-800",75,3,1152,832,64,32,224,57.2832,667,624,3,1,39,
 /*11*/  "SVGA",56,0,1024,800,72,24,128,36,625,600,2,1,22,
 /*12*/  "VESA-600-60Hz",60,0,1056,800,128,40,88,40,628,600,4,1,23,
 /*13*/  "VESA-600-72Hz",72,0,1040,800,120,56,64,50,666,600,6,37,23,
 /*14*/  "VESA-600-75Hz",75,0,1056,800,80,16,160,49.5,625,600,3,1,21,
 /*15*/  "XGA",60,3,1344,1024,136,24,160,65,806,768,6,3,29,
 /*16*/  "COMPAQ-XGA",66,0,1328,1024,176,16,112,71.664,816,768,4,8,36,
 /*17*/  "VESA-768-70Hz",70,3,1328,1024,136,24,144,75,806,768,6,3,29,
 /*18*/  "VESA-768-75Hz",75,0,1312,1024,96,16,176,78.75,800,768,3,1,28,
 /*19*/  "APPLE MAC-768",75,3,1328,1024,96,32,176,80,803,768,3,3,29,
 /*20*/  "(60Hz)",60,0,1480,1152,96,40,192,80,912,864,3,13,32,
 /*21*/  "(70Hz)",70,0,1480,1152,96,32,200,94.499,912,864,3,1,44,
 /*22*/  "(75Hz)",75,0,1600,1152,128,64,256,108,900,864,2,2,32,
 /*23*/  "(60Hz)",60,0,1800,1280,112,96,312,108,1000,960,3,1,36,
 /*24*/  "(70Hz)",70,0,1800,1280,112,96,312,135,1000,960,3,1,36,
 /*25*/  "(75Hz)",75,0,1688,1280,112,48,248,108,1066,1024,3,1,38,
 /*26*/  "VESA 1024-75Hz",75,0,1688,1280,144,16,248,135,1066,1024,3,1,38
};

#if 0
static STDMODE1 STANDARD_MODES1[3] = {
 /*00 3*/  {"",60,640,480,25200, 48,16,33,10,96,2,0,NO_INT},
 /*00 4*/  {"",72,640,480,31500,128,24,29, 9,40,2,0,NO_INT},
 /*00 5*/  {"",75,640,480,31500,120,16,16, 1,64,3,0,NO_INT}
};
#endif

 /*05*/ /* "VGA-480",60,3,800,640,96,16,48,25.175,525,480,2,10,33,
                   vf hres  vres
                   60, 640, 480,96,16,48,33,10,2,39682*/



//LINKED_LISTBASE   base_Modelist;
//PLINKED_LISTBASE Mode_list = &base_Modelist;
/*----------------------------------------------------------------------------*/
static void AddMode(PMONINFO moninfo, PMODEDESC mode)
{
	PMODEDESC newmode;
	PMODEDESC tmpmode;
	newmode = (PMODEDESC)malloc(sizeof(MODEDESC));
	*newmode = *mode;
	PLINKED_LIST listpointer;
	listpointer = moninfo->Mode_List.FirstEntry;
	int exists = 0;

	while ((listpointer->Next != NULL) && (listpointer != NULL))
	{
		tmpmode = (PMODEDESC)listpointer->This;
		if ((tmpmode->XRes == mode->XRes) &&
			(tmpmode->YRes == mode->YRes) &&
			(tmpmode->Refresh == mode->Refresh))
		{
			exists = 1;
		}
		listpointer = listpointer->Next;
	}


	if (exists == 0)
	{
		LinkedList_AddEntry(&moninfo->Mode_List, (int *)newmode);
	}
}

#if 0
/*----------------------------------------------------------------------------*/
static int stdmodetomodedesc1(PSTDMODE1 stdmode, PMODEDESC mode)
{
	mode->ShowName		= 1;
	mode->XRes			= stdmode->XRes;
	mode->YRes			= stdmode->YRes;
	mode->PixRate		= stdmode->PixRate;
	mode->HSync			= stdmode->HSync;
	mode->HFrontPorch	= stdmode->HFrontPorch;
	mode->HBackPorch	= stdmode->HBackPorch;
	mode->LeftBorder	= 0;
	mode->RightBorder	= 0;
	mode->VSync			= stdmode->VSync;
	mode->VFrontPorch	= stdmode->VFrontPorch;
	mode->VBackPorch	= stdmode->VBackPorch;
	mode->TopBorder		= 0;
	mode->BottomBorder	= 0;
	mode->SyncPulse		= stdmode->SyncPulse;

	return 1;
}
#endif


/*----------------------------------------------------------------------------*/
static int stdmodetomodedesc(PSTDMODE stdmode, PMODEDESC mode)
{
	mode->ShowName		= 1;
	mode->XRes			= stdmode->XRes;
	mode->YRes			= stdmode->YRes;
	mode->PixRate		= (int)(stdmode->PixRate * 1000);
	mode->HSync			= stdmode->HSync;
	mode->HFrontPorch	= stdmode->HFrontPorch;
	mode->HBackPorch	= stdmode->HBackPorch;
	mode->LeftBorder	= 0;
	mode->RightBorder	= 0;
	mode->VSync			= stdmode->VSync;
	mode->VFrontPorch	= stdmode->VFrontPorch;
	mode->VBackPorch	= stdmode->VBackPorch;
	mode->TopBorder		= 0;
	mode->BottomBorder	= 0;
	mode->SyncPulse		= stdmode->SyncPulse;
	if ((mode->XRes + mode->HFrontPorch + mode->HBackPorch + mode->HSync) != stdmode->HTotal)
	{
//		mode->RightBorder =
//		mode->LeftBorder = ((mode->XRes + mode->HFrontPorch + mode->HBackPorch + mode->HSync)
//						 - stdmode->HTotal) / 2;
	}

	if ((mode->YRes + mode->VFrontPorch + mode->VBackPorch + mode->VSync) != stdmode->VTotal)
	{
//		mode->TopBorder =
//		mode->BottomBorder = ((mode->YRes + mode->VFrontPorch + mode->VBackPorch + mode->VSync)
//						   - stdmode->VTotal) / 2;
	}

	return 1;
}

/*----------------------------------------------------------------------------*/

static void output_modedesc(PMODEDESC mode)
{
//	printf("\n # %s", mode->Comment);
	printf("\n# Mode: %s", mode->ModeName);
	printf("\n# Bounds: H %.2fkHz, V %.2fHz DClock %.2fMHz",
		   (double)mode->HScan/1000,
		   (double)mode->VScan/1000,
		   (double)mode->PixRate/1000);
	printf("\nstartmode");
	printf("\n mode_name:%d x %d", mode->XRes, mode->YRes);
	printf("\n x_res:%d", mode->XRes);
	printf("\n y_res:%d", mode->YRes);
	printf("\n pixel_rate:%d", mode->PixRate);
	printf("\n h_timings:%d,%d,%d,%d,%d,%d",
		   mode->HSync,
		   mode->HBackPorch,
		   mode->LeftBorder,
		   mode->XRes,
		   mode->RightBorder,
		   mode->HFrontPorch);
	printf("\n v_timings:%d,%d,%d,%d,%d,%d",
		   mode->VSync,
		   mode->VBackPorch,
		   mode->TopBorder,
		   mode->YRes,
		   mode->BottomBorder,
		   mode->VFrontPorch);
	printf("\n sync_pol:%d", mode->SyncPulse);
	printf("\nendmode\n");
}

/*----------------------------------------------------------------------------*/
static void calc_mode_bounds(PMODEDESC mode)
{
	mode->HTotal = mode->HSync + mode->HBackPorch + mode->LeftBorder + mode->RightBorder
				 + mode->HFrontPorch + mode->XRes;
	mode->VTotal = mode->VSync + mode->VBackPorch + mode->TopBorder + mode->BottomBorder
				 + mode->VFrontPorch + mode->YRes;
	mode->VScan  = (int)((double)(((double)(mode->PixRate * 1000))
				 / ((double)mode->VTotal * mode->HTotal)) * 1000);
	mode->HScan  = (mode->PixRate * 1000) / (mode->HTotal);
	mode->Refresh= (int)mode->VScan / 1000;
	sprintf(mode->ModeName, "VESA %d x %d @ %.0fHz", mode->XRes, mode->YRes,
			(double)mode->VScan / 1000);
}
/*----------------------------------------------------------------------------*/
static void getsupportedmode(PMONINFO moninfo, int modenumber)
{
	MODEDESC mode;
	int modeused = 0;

	switch (modenumber)
	{
		case 0 :
			printf("\n720x400 - 70Hz (IBM)");
			printf("\nNone yet");
			break;
		case 1 :
			printf("\n720x400 - 88Hz (XGA2)");
			printf("\nNone yet");
			break;
		case 2 :
			printf("\n640x480 - 60Hz (VGA)");
			modeused = stdmodetomodedesc(&STANDARD_MODES[5], &mode);
			break;
		case 3 :
			printf("\n640x480 - 67Hz (Apple Mac)");
			printf("\nNone yet");
			break;
		case 4 :
			printf("\n640x480 - 72Hz (VESA)");
			modeused = stdmodetomodedesc(&STANDARD_MODES[7], &mode);
			break;
		case 5 :
			printf("\n640x480 - 75Hz (VESA)");
			modeused = stdmodetomodedesc(&STANDARD_MODES[8], &mode);
			break;
		case 6 :
			printf("\n800x600 - 56Hz (VESA)");
			printf("\nNone yet");
			break;
		case 7 :
			printf("\n800x600 - 60Hz (VESA)");
			modeused = stdmodetomodedesc(&STANDARD_MODES[12], &mode);
			break;
		case 8 :
			printf("\n800x600 - 72Hz (VESA)");
			modeused = stdmodetomodedesc(&STANDARD_MODES[13], &mode);
			break;
		case 9 :
			printf("\n800x600 - 75Hz (VESA)");
			modeused = stdmodetomodedesc(&STANDARD_MODES[14], &mode);
			break;
		case 10 :
			printf("\n832x624 - 75Hz (Mac II)");
			printf("\nNone yet");
			break;
		case 11 :
			printf("\n1024x768 - 87Hz interlaced (8514A)");
			printf("\nNone yet");
			break;
		case 12 :
			printf("\n1024x768 - 60Hz (VESA)");
			printf("\nNone yet");
			break;
		case 13 :
			printf("\n1024x768 - 70Hz (VESA)");
			modeused = stdmodetomodedesc(&STANDARD_MODES[17], &mode);
			break;
		case 14 :
			printf("\n1024x768 - 75Hz (VESA)");
			modeused = stdmodetomodedesc(&STANDARD_MODES[18], &mode);
			break;
		case 15 :
			printf("\n1280x1024 - 75Hz (VESA)");
			modeused = stdmodetomodedesc(&STANDARD_MODES[26], &mode);
			break;
		case 16 :
			printf("\n- Unknown mode");
			break;
		case 17 :
			printf("\n- Unknown mode");
			break;
		case 18 :
			printf("\n- Unknown mode");
			break;
		case 19 :
			printf("\n- Unknown mode");
			break;
		case 20 :
			printf("\n- Unknown mode");
			break;
		case 21 :
			printf("\n- Unknown mode");
			break;
		case 22 :
			printf("\n- Unknown mode");
			break;
		case 23 :
			printf("\n1152 x 870 - 75Hz Apple Mac");
			break;
	}
	if (modeused == 1)
	{
		calc_mode_bounds(&mode);
		AddMode(moninfo, &mode);
	}
}


/*----------------------------------------------------------------------------*/
static void generate_mode(double xres, double yres, double freq, PMODEDESC mode)
{
	printf("%d x %d @ %d ", (int)xres, (int)yres, (int)freq);

	mode->XRes = (int)f34;
	mode->YRes = (int)yres;

	mode->PixRate = (int)(f42 * 1000);
	mode->HSync = j58 * j43;
	mode->HBackPorch = j59 * j43;
	mode->LeftBorder = j56 * j43;
	mode->RightBorder = j60 * j43;
	mode->HFrontPorch = j57 * j43;
	mode->VSync = MIN_VSYNC;
	mode->VBackPorch = j70;
	mode->TopBorder = j67;
	mode->BottomBorder = j71;
	mode->VFrontPorch = j68;
	mode->SyncPulse = 0;
	calc_mode_bounds(mode);
#if 0
	mode->HTotal = mode->HSync + mode->HBackPorch + mode->LeftBorder + mode->RightBorder
				 + mode->HFrontPorch + mode->XRes;
	mode->VTotal = mode->VSync + mode->VBackPorch + mode->TopBorder + mode->BottomBorder
				 + mode->VFrontPorch + mode->YRes;
	mode->VScan  = (int)((double)(((double)(mode->PixRate * 1000))
				 / ((double)mode->VTotal * mode->HTotal)) * 1000);
	mode->HScan  = (mode->PixRate * 1000) / (mode->HTotal);
	printf(mode->ModeName,"%d x %d @ %.0fHz", mode->XRes, mode->YRes,
		   (double)mode->VScan / 1000);
#else
	sprintf(mode->ModeName, "GEN  %d x %d @ %.0fHz", mode->XRes, mode->YRes,
			(double)mode->VScan / 1000);
#endif
}
/*----------------------------------------------------------------------------*/

static void dtd_block_to_modedesc(byte *dtd_base, PMONINFO moninfo)
{
	MODEDESC mode;
	int dotclock, htotal, vtotal;
	double vfreq, hfreq;

	if (H_ACTIVE != 0)
	{
		dotclock = PIXEL_CLOCK_K * 1000;
		htotal	 = H_ACTIVE + H_BLANK;
		vtotal	 = V_ACTIVE + V_BLANK;
		vfreq	 = dotclock / (double)(htotal * vtotal);
		hfreq	 = dotclock / (double)(htotal * 1000);

		printf("\n# DTD %d x %d  %.2fHz - H %.2fkHz, DotClock %.2fMHz",
			   H_ACTIVE, V_ACTIVE, vfreq, hfreq, (double)dotclock / 1000000);

		mode.XRes = H_ACTIVE;
		mode.YRes = V_ACTIVE;
		mode.PixRate = PIXEL_CLOCK_K;
		mode.HSync = H_SYNC;
		mode.HBackPorch = H_BPORCH;
		mode.LeftBorder = H_BORDER;
		mode.RightBorder = H_BORDER;
		mode.HFrontPorch = H_FPORCH;
		mode.VSync = V_SYNC;
		mode.VBackPorch = V_BPORCH;
		mode.TopBorder = V_BORDER;
		mode.BottomBorder = V_BORDER;
		mode.VFrontPorch = V_FPORCH;
		mode.SyncPulse = (!HSYNCPOL + (!VSYNCPOL<<1));
		calc_mode_bounds(&mode);
		sprintf(mode.ModeName, "DTD   %d x %d @ %dHz", H_ACTIVE, V_ACTIVE, mode.Refresh);
		AddMode(moninfo, &mode);
		printf("\nX size:%d ysize: %d", MAXMHSize, MAXMVSize);
	}
}

/*----------------------------------------------------------------------------*/
/*int fuzzy_calc_freq(double xres,double yres,int freqbase60,byte byte2)
{
 int freq;
 freq=(byte2-freqbase60)+60;
 //printf("@ %dHz",freq);
 if(freq<60){freq=freq+64;}
 return freq;
}*/
/*----------------------------------------------------------------------------*/
static void stdtime_lookup(int modeid, PMONINFO moninfo)
{
	int res;
	MODEDESC mode;
	byte byte1;
	byte1 = modeid >> 8;
	res = modeid >> 6;
	int freq;
	double xres, yres = 0;

	xres = IDXRES(modeid);
	switch (IDFACTOR(modeid))
	{
		case 0 :
			if (moninfo->EDIDRevision >= 3)
			{
				/* valid for EDID v1.3 and later */
				yres = (int)xres * 0.625;	/* 10:16 */
			}
			else
			{
				yres = xres;				/* 1:1 */
			}
			break;
		case 1 :
			yres = (int)xres * 0.75;		/* 3:4 */
			break;
		case 2 :
			yres = (int)xres * 0.8;			/* 4:5 */
			break;
		case 3 :
			yres = (int)xres * 0.5625;		/* 9:16 */
			break;
	}

	freq = IDFREQ(modeid);
	if (((modeid >> 8) & 0xFF) != 1)
	{
		printf("\n#ID: %x ", modeid);

		generate_mode(xres, yres, freq, &mode);
		AddMode(moninfo, &mode);
	}
	else
	{
		if (xres == 0)
		{
			printf("\nUnknown mode %x", modeid);
		}
	}
}
/*----------------------------------------------------------------------------*/

static void established_timing(PMONINFO moninfo)
{
	byte *dtd_base = moninfo->EDIDData;
	/*printf("\n Established Timings:%x",EstabTiming);*/
	int i;
	for (i = 0; i < 8; ++i)
	{
		if (((ESTB1 >> i) & 1) == 1)
		{
			printf("\nSupported %d", i);
			getsupportedmode(moninfo, i);
		}
	}

	for (i = 0; i < 8; ++i)
	{
		if (((ESTB2 >> i) & 1) == 1)
		{
			printf("\nSupported %d", i + 8);
			getsupportedmode(moninfo, i + 8);
		}
	}

	for (i = 0; i < 8; ++i)
	{
		if (((ESTB3 >> i) & 1) == 1)
		{
			printf("\nSupported %d", i + 16);
			getsupportedmode(moninfo, i + 16);
		}
	}
}

/*----------------------------------------------------------------------------*/
static int get_extd_type(byte *dtd_base)
{
	if ((dtd_base[0]) == 1)
	{
		return 1;
	}
	if (dtd_base[0] + dtd_base[1] + dtd_base[2] == 0)
	{
		return dtd_base[3];
	}
	return 0;
}
/*----------------------------------------------------------------------------*/



static void fill_EDID(PMONINFO moninfo,byte *edid_block)
{
	memcpy((char *)moninfo->EDIDData, (char *)edid_block, EDID_SIZE);
}
/*----------------------------------------------------------------------------*/
static void fill_EDID_version(PMONINFO moninfo)
{
	moninfo->EDIDVersion  = moninfo->EDIDData[EDID_Version];
	moninfo->EDIDRevision = moninfo->EDIDData[EDID_Revision];
}
/*----------------------------------------------------------------------------*/
static void Check_EDID_Checksum(byte *EDIDData)
{
	byte count = 0;
	int  i;
	for (i = 0; i < EDID_SIZE; ++i)
	{
		count = count + EDIDData[i];
	}
	if (count == 0)
	{
		printf("\nChecksum OK");
	}
	else
	{
		printf("\nChecksum Failed:%x, was %x should be %x", count, EDIDData[127],
			   (0 - (count - EDIDData[127])) &0xff);
		printf("\n*******************************");
		printf("\nDo not trust the following data");
		printf("\n*******************************");
//		exit(0);
	}
}
/*----------------------------------------------------------------------------*/
static void fill_EDID_Size(PMONINFO moninfo)
{
	moninfo->MaxVSize = moninfo->EDIDData[MAXHSize];
	moninfo->MaxHSize = moninfo->EDIDData[MAXVSize]+1;
}
/*----------------------------------------------------------------------------*/

static void Get_DTD_ASCII(byte *dtd, char *data)
{
	int i;
	for (i = 0; i < 14; ++i)
	{
		data[i] = dtd[i];
		if (data[i] == 0x0A)
		{
			data[i] = 0;
		}
	}
}

/*----------------------------------------------------------------------------*/
static void Decode_EDID_DTD(PMONINFO moninfo, int i)
{
	byte *dtd = moninfo->EDIDData + DTDBase + (i * DTDSize);

	switch (get_extd_type(dtd))
	{
		case 0x00: /* normal detailed descriptor block */
//			printf("\n*********************DTD");
			dtd_block_to_modedesc(dtd, moninfo);
			break;
		case 0x01: /* empty */
			printf("\n*********************EMPTY");
			break;
		case 0xFF: /* serial number */
			printf("\n*********************SER NUM");
			moninfo->Flags = DTD_HAS_SERIAL;
			Get_DTD_ASCII(dtd + 5, moninfo->DTD_Serial);
			break;
		case 0xFE: /* vendor name */
			printf("\n*********************VENDOR");
			moninfo->Flags = DTD_HAS_VENDOR;
			Get_DTD_ASCII(dtd+5,moninfo->DTD_Vendor);
			break;
		case 0xFC: /* Model name */
			printf("\n*********************MODEL");
			moninfo->Flags = DTD_HAS_MODEL;
			Get_DTD_ASCII(dtd + 5, moninfo->DTD_Model);
			printf(" %s \n ", moninfo->DTD_Model);
			break;
		case 0xfD: /* frequency range */
			moninfo->Flags = DTD_HAS_TIMING;
			moninfo->MinH = dtd[7] * 1000;
			moninfo->MaxH = dtd[8] * 1000;
			moninfo->MinV = dtd[5];
			moninfo->MaxV = dtd[6];
			moninfo->MaxDot = dtd[9] * 10000000;
			break;
		default:
			printf("\nUnknown DTD Block");
			break;
	}
}

/*----------------------------------------------------------------------------*/
static void fill_EDID_Vendor(PMONINFO moninfo)
{
	byte *base = moninfo->EDIDData + 0x08;
	moninfo->ManufacturerID[0] = ((base[0] >> 2) & 0x1F) + 64;
	moninfo->ManufacturerID[1] = ((base[0] & 0x03) << 3) + ((base[1] >> 5) & 0x7) + 64;
	moninfo->ManufacturerID[2] = (base[1] & 0x1F) + 64;
	moninfo->ManufacturerID[3] = 0;
	moninfo->ModelID = (int)((unsigned int)base[2] + ((unsigned int)base[3] << 8));
	moninfo->Week = base[8];
	moninfo->Year = base[9] + 1990;
	moninfo->Serial = (int)(((unsigned int)base[7] << 24)
						  + ((unsigned int)base[6] << 16)
						  + ((unsigned int)base[5] << 8)
						  + (unsigned int)base[4]);
	printf("\n ------------- %s %x, Made Week:%d of %d, Serial: %d",
		   moninfo->ManufacturerID,
		   moninfo->ModelID,
		   moninfo->Week,
		   moninfo->Year,
		   moninfo->Serial);
}

/*----------------------------------------------------------------------------*/
int main(int argc, char *argv[])
{
	int   i;
	byte *edid_block;
	FILE *file;

	const char *appversion = "Decode EDID Version " Module_MajorVersion;
	MONINFO edidinfo;
	LinkedList_Init(&edidinfo.Mode_List);
	edidinfo.MaxDot = 0;
	edidinfo.MinH = 0;
	edidinfo.MaxH = 0;
	edidinfo.MinV = 0;
	edidinfo.MaxV = 0;
	strcpy(edidinfo.DTD_Model, "");
	edidinfo.MaxHSize = 0;
	edidinfo.MaxVSize = 0;

	if (argc == 4)
	{
//		printf("\nfile_format:1\nmonitor_title:Test\nDPMS_state:0");
		MODEDESC mode;
		generate_mode((double)atoi(argv[1]), (double)atoi(argv[2]),
					  (double)atol(argv[3]), &mode);
		output_modedesc(&mode);
		exit(0);
	}
	printf("\n%s\n\n", appversion);

	if (argc < 2)
	{
		printf("\nNo input file\n");
		exit(0);
	}

	edid_block = malloc(EDID_SIZE);
	file = fopen(argv[1], "r");
	if (file == NULL)
	{
		printf("\nFile %s wont open\n", argv[1]);
		exit(0);
	}
	fread(edid_block, EDID_SIZE, 1, file);
	fclose(file);

	fill_EDID(&edidinfo,edid_block);
	free(edid_block);

	fill_EDID_version(&edidinfo);
	fill_EDID_Vendor(&edidinfo);
	printf("\nEDID VERSION %d, REVISION %d", edidinfo.EDIDVersion, edidinfo.EDIDRevision);
	Check_EDID_Checksum(edidinfo.EDIDData);

	fill_EDID_Size(&edidinfo);

	for (i = 0; i < DTDCount; i++)
	{
		Decode_EDID_DTD(&edidinfo, i);
	}

	for (i = 0; i < StdTimeCount; i++)
	{
		stdtime_lookup(MODEID(edidinfo.EDIDData, i), &edidinfo);
	}

	established_timing(&edidinfo);


	PLINKED_LIST current_listItem = edidinfo.Mode_List.FirstEntry;

	printf("\n# Monitor description file for %s %x\n# Created by %s\n",
		   edidinfo.ManufacturerID, edidinfo.ModelID, appversion);
	printf("\n# Max Viewable H %d cm / %.1f inch", edidinfo.MaxHSize, edidinfo.MaxHSize*0.39);
	printf("\n# Max Viewable V %d cm / %.1f inch", edidinfo.MaxVSize, edidinfo.MaxVSize*0.39);
	double diag = sqrt(pow(edidinfo.MaxHSize, 2) + pow(edidinfo.MaxVSize, 2));
	printf("\n# Diagonal Viewable %.1f cm / %.1f inch", diag, diag*0.39);
	printf("\n# ");
	printf("\n# Line Rate:    %d-%dkHz", edidinfo.MinH/1000, edidinfo.MaxH/1000);
	printf("\n# Frame Rate:   %d-%dHz", edidinfo.MinV, edidinfo.MaxV);
	printf("\n# Max Dot Rate: %dMHz", edidinfo.MaxDot/1000000);

	printf("\nfile_format:1\nmonitor_title:Test\nDPMS_state:3\n");

	do
	{
		if (current_listItem->This != NULL)
		{
			PMODEDESC pM = (PMODEDESC)current_listItem->This;
			/* only generate allowed pixel rates */
			if ((1000 * pM->PixRate) <= edidinfo.MaxDot)
			{
				output_modedesc(pM);
			}
			current_listItem = current_listItem->Next;
		}
	} while (current_listItem != NULL);

	printf("\n#End\n\n");
	return 0;
}
