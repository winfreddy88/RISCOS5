/* Copyright 2012 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <stdio.h>
#include <stdlib.h>
#include "LinkedList.h"


int LinkedList_Init(PLINKED_LISTBASE Base)
{
	Base->Entries = 0;
	Base->FirstEntry = NULL;
	Base->LastEntry = NULL;
	return 0;
}
#if 0
/*----------------------------------------------------------------------------*/
int LinkedList_AddEntry(PLINKED_LISTBASE Base, void *Item)
{
	/* Add to end of list*/
	PLINKED_LIST listItem;

	listItem = Base->LastEntry;
	Base->LastEntry = (PLINKED_LIST)calloc(sizeof(LINKED_LIST), 1);
	Base->LastEntry->Previous = listItem;
	Base->LastEntry->This = Item;
	Base->LastEntry->Next = NULL;

	if (listItem != NULL)
	{
		listItem->Next = Base->LastEntry;
	}
	else
	{
		Base->FirstEntry = Base->LastEntry;
	}
	Base->Entries ++;
	/* debug_log("\nAdded list entry, now %d", Base->Entries);*/
	return 0;
}
#endif
/*----------------------------------------------------------------------------*/
void LinkedList_AddEntry(PLINKED_LISTBASE Base, void *Item)
{
	/* Add to start of list */
	PLINKED_LIST listItem;

	listItem = Base->FirstEntry;
	Base->FirstEntry = (PLINKED_LIST)calloc(sizeof(LINKED_LIST), 1);
	Base->FirstEntry->Previous = NULL;
	Base->FirstEntry->This = Item;
	Base->FirstEntry->Next = listItem;
	if (listItem != NULL)
	{
		listItem->Previous = Base->FirstEntry;
	}
	else
	{
		Base->LastEntry = Base->FirstEntry;
	}
	Base->Entries ++;
	/* debug_log("\nAdded list entry, now %d", Base->Entries);*/
}
/*----------------------------------------------------------------------------*/
PLINKED_LIST LinkedList_RemoveEntry(PLINKED_LISTBASE Base,PLINKED_LIST listItem)
{
	PLINKED_LIST Listentry = listItem->Next;
	if (listItem->Previous != NULL)
	{
		listItem->Previous->Next = listItem->Next;
	}
	else
	{
		if (listItem->Next != NULL)
		{
			Base->FirstEntry = listItem->Next;
		}
	}
	if (listItem->Next != NULL)
	{
		listItem->Next->Previous = listItem->Previous;
	}
	else
	{
		if (listItem->Previous != NULL)
		{
			Base->LastEntry = listItem->Previous;
		}
	}

	if ((listItem->Next == NULL) && (listItem->Previous == NULL))
	{
		Base->FirstEntry = NULL;
		Base->LastEntry = NULL;
	}
	/*debug_log("\nfree(listItem");*/
	free(listItem);
	Base->Entries --;
	/*debug_log("\nRemoved list entry, now %d", Base->Entries);*/
	return Listentry;
}
/*----------------------------------------------------------------------------*/
PLINKED_LIST LinkedList_GetEntry(PLINKED_LISTBASE Base, int entry)
{
	PLINKED_LIST listentry;
	int current = 0;
	if (((Base->Entries) < entry) || (entry < 0))
	{
		return NULL;
	}
	listentry = Base->FirstEntry;

	while ((Base->Entries - current) != entry)
	{
		listentry = listentry->Next;
		current++;
	}
	return listentry;
}
