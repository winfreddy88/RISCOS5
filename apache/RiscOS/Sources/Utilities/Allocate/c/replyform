/* Copyright 2015 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Name   : replyform.c
 * Desc   : reply form control for the !allocate application
 * Auther : James Bye
 * Date   : 26-Jul-1994
 *
 *
 */
 
 
/*-- from CLib --*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"

#include "Global/FileTypes.h"

/*-- from RISC_OSLib --*/

#include "werr.h"
#include "trace.h"
#include "msgs.h"

/*-- from my headers --*/

#include "file.h"
#include "object.h"
#include "replyform.h"
#include "guard.h"
#include "details.h"


/*************************************************************
 * Static variables                                          *
 *************************************************************/

static char writeb[2048];



/*************************************************************
 * Static functions                                          *
 *************************************************************/

/*
 * checks to see if there are any of the specified object type
 * in the list of objects
 */
 
static BOOL any_objects ( int id, DataFileObjectList *objects )
{
  while(objects != NULL)
  {
    if(id == objects->object->id)
      return(TRUE);
    objects = objects->next;
  }
  
  return(FALSE);
}


/*
 * does the writing of the header for the specified object id
 */
 
static _kernel_oserror *do_write_objects_hdr ( int fh, int id )
{
char token[20];

  /*-- copy across the appropriate message token depending --*/
  /*-- on which object id was passed in                    --*/
  
  switch(id)
  {
    case Object_SWIChunk    : strcpy(token,"RFSWIT"); break;
    case Object_Messages    : strcpy(token,"RFMessT"); break;
    case Object_Reservation : strcpy(token,"RFResT"); break;
    case Object_FileType    : strcpy(token,"RFFTypeT"); break;
    case Object_ErrorBlock  : strcpy(token,"RFErrorT"); break;
    case Object_Podule      : strcpy(token,"RFPoduleT"); break;
    case Object_DrawTags    : strcpy(token,"RFDrawTT"); break;
    case Object_DrawObjects : strcpy(token,"RFDrawOT"); break;
    case Object_FilingSystem: strcpy(token,"RFFST"); break;
    case Object_Services    : strcpy(token,"RFServT"); break;
    case Object_Devices     : strcpy(token,"RFDevT"); break;
  }

  /*-- write the header --*/
  
  sprintf(writeb,"\n\n%s\n",msgs_lookup(token));
  
  return(file_writebytes(fh,writeb,0,strlen(writeb),-1));
}


/*
 * writes out the objects of a particular type in their desired format
 */
 
static _kernel_oserror *do_write_objects ( int fh, int id, DataFileObjectList *objects )
{
_kernel_oserror *e = NULL;

  while(objects != NULL)
  {
    if(objects->object->id == id)
    {
  
      /*-- build the output buffer depending on the specfied object id --*/
  
      switch(id)
      {
        case Object_SWIChunk    : 
        
             sprintf(writeb,"\n\t%s :\t%s\n\t%s :\n",
                     msgs_lookup("RFSWI1"),objects->object->data.swichunk.prefix,
                     msgs_lookup("RFSWI2"));
             break;

        case Object_Messages    : 
        
             sprintf(writeb,"\n\t%s :\t%s\n\t%s :\n",
                     msgs_lookup("RFMess1"),objects->object->data.messages.description,
                     msgs_lookup("RFMess2"));
             break;
             
        case Object_Reservation : 
        
             sprintf(writeb,"\n\t%s\t\t%s",
                     objects->object->data.reservation.text,
                     objects->object->data.reservation.type);
             break;                     
             
        case Object_FileType    : 
        
             sprintf(writeb,"\n\t%s :\t%s\n\t%s :\n",
                     msgs_lookup("RFFType1"),objects->object->data.filetype.fname,
                     msgs_lookup("RFFType2"));
             break;
             
        case Object_ErrorBlock  : 
        
             sprintf(writeb,"\n\t%s :\t%s\n\t%s :\n",
                     msgs_lookup("RFError1"),objects->object->data.errorblock.description,
                     msgs_lookup("RFError2"));
             break;
        
        case Object_Podule      : 
        
             sprintf(writeb,"\n\t%s :\t%d\n\t%s :\t%s\n\t%s :\n",
                     msgs_lookup("RFPodule1"),objects->object->data.podule.manf,
                     msgs_lookup("RFPodule2"),objects->object->data.podule.podule_name,
                     msgs_lookup("RFPodule3"));
             break;
             
        case Object_DrawTags    :  
        
             sprintf(writeb,"\n\t%s :\t%s\n\t%s :\n",
                     msgs_lookup("RFDrawT1"),objects->object->data.drawtag.description,
                     msgs_lookup("RFDrawT2"));
             break;
             
        case Object_DrawObjects :  
        
             sprintf(writeb,"\n\t%s :\t%s\n\t%s :\n",
                     msgs_lookup("RFDrawO1"),objects->object->data.drawobject.description,
                     msgs_lookup("RFDrawO2"));
             break; 
             
        case Object_FilingSystem :
        
             sprintf(writeb,"\n\t%s :\t%s\n\t%s :\n",
                     msgs_lookup("RFFS1"),objects->object->data.filingsystem.name,
                     msgs_lookup("RFFS2"));
             break;
             
        case Object_Services     :
        
             sprintf(writeb,"\n\t%s :\t%s\n\t%s :\n",
                     msgs_lookup("RFServ1"),objects->object->data.services.description,
                     msgs_lookup("RFServ2"));
             break;
             
        case Object_Devices   :
        
             sprintf(writeb,"\n\t%s :\t%s\n\t%s :\n",
                     msgs_lookup("RFDev1"),objects->object->data.devices.name,
                     msgs_lookup("RFDev2"));
             break;        
             
      }

      /*-- write the output buffer --*/
      
      if((e = file_writebytes(fh,writeb,0,strlen(writeb),-1)) != NULL)
        goto finish;
    }
    
    objects = objects->next;
  }
  
finish:

  return(e);
}

  
/*************************************************************
 * External functions                                        *
 *************************************************************/
 
/*
 * Name     : replyform_generate
 * Desc     : generates a textual reply form
 * Parms    : char *filename 
 *            DataFileObjectList *objects - pointer to list of objects
 * Returns  : True or False on result
 */
 
extern BOOL replyform_generate ( char *filename, DataFileObjectList *objects )
{
_kernel_oserror *e = NULL;
int fh = 0;
int current_object = 0;

  /*-- open the output file --*/
  
  if((e = file_open(filename,&fh,OPEN_NEW_READ_WRITE)) != NULL)
    goto finish;
    
  /*-- write the start --*/
  
  sprintf(writeb,"%s\n",msgs_lookup("RFTitle"));
  if((e = file_writebytes(fh,writeb,0,strlen(writeb),-1)) != NULL)
    goto finish;
    
  /*-- write the objects in groups --*/
  
  while(current_object <= Object_Max)
  {
    if(any_objects(current_object,objects))
    {
      if((e = do_write_objects_hdr(fh,current_object)) != NULL)
        goto finish;
      if((e = do_write_objects(fh,current_object,objects)) != NULL)
        goto finish;
    }
    
    /*-- increment the current object type --*/
    
    current_object++;
  }
  
  /*-- write the end --*/
  
  sprintf(writeb,"\n\n%s\n",msgs_lookup("RFEnd"));
  if((e = file_writebytes(fh,writeb,0,strlen(writeb),-1)) != NULL)
    goto finish;


finish:

  if(fh != 0)
  {
    file_close(fh);
    file_writecat18(filename,FileType_Text);
  }
  
  if(e != NULL)
  {
    werr(0,"%s",e->errmess);
    return(FALSE);
  }
  
  return(TRUE);
}


/*-- end --*/
