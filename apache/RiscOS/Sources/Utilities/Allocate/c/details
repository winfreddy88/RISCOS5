/* Copyright 2015 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Name  : c.details
 * Desc  : Details handler for allocation application
 * Author: James Bye
 * Date  : 1st December 1993
 */

#include "werr.h"
#include "msgs.h"
#include "dbox.h"
#include "wimp.h"

#include "trace.h"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"

#include "Global/FileTypes.h"

#include "file.h"
#include "details.h"


/**************************************************
 * Icon definitions				  *
 **************************************************/

#define i_Details_Name		 3
#define i_Details_Company	 4
#define i_Details_DevNo		 5
#define i_Details_Address1       6
#define i_Details_Address2       7
#define i_Details_Address3       8
#define i_Details_Address4       9
#define i_Details_Phone		11
#define i_Details_Fax		12
#define i_Details_EMail		10
#define i_Details_Set		20
#define i_Details_Cancel	16

/**************************************************
 * Other definitions				  *
 **************************************************/

#define Details_File_R  "Choices:Allocate.Details"
#define Details_File_W  "<Choices$Write>.Allocate.Details"
#define Details_File_WDir "<Choices$Write>.Allocate"

/**************************************************
 *  Static Data/Functions			  *
 **************************************************/

static dbox            details;
static BOOL            open = FALSE;
static DetailsInfo     data;


/*
 * get details from dbox
 */

static void get_details ( void )
{
  dbox_getfield(details,i_Details_Name,data.name,50);
  dbox_getfield(details,i_Details_Company,data.company,50);
  dbox_getfield(details,i_Details_DevNo,data.dev_no,12);
  dbox_getfield(details,i_Details_Phone,data.phone,50);
  dbox_getfield(details,i_Details_Fax,data.fax,50);
  dbox_getfield(details,i_Details_EMail,data.email,50);
  dbox_getfield(details,i_Details_Address1,data.address1,50);
  dbox_getfield(details,i_Details_Address2,data.address2,50);
  dbox_getfield(details,i_Details_Address3,data.address3,50);
  dbox_getfield(details,i_Details_Address4,data.address4,50);
}



/*
 * set details from dbox
 */

static void set_details ( void )
{
  dbox_setfield(details,i_Details_Name,data.name);
  dbox_setfield(details,i_Details_Company,data.company);
  dbox_setfield(details,i_Details_DevNo,data.dev_no);
  dbox_setfield(details,i_Details_Phone,data.phone);
  dbox_setfield(details,i_Details_Fax,data.fax);
  dbox_setfield(details,i_Details_EMail,data.email);
  dbox_setfield(details,i_Details_Address1,data.address1);
  dbox_setfield(details,i_Details_Address2,data.address2);
  dbox_setfield(details,i_Details_Address3,data.address3);
  dbox_setfield(details,i_Details_Address4,data.address4);
}




/*
 * event handler for the dbox
 */

static void details_events ( dbox d, void *handle )
{
dbox_field f;

  handle = handle;

  /*-- see what event we got --*/

  f = dbox_get(d);
  tracef1("Got event %d\n",(int)f);

  switch(dbox_get(d))
  {
    case i_Details_Set    :  get_details();
                             details_save();
    case dbox_CLOSE       :
    case i_Details_Cancel :  dbox_dispose(&d);
    			     open = FALSE;
    			     break;
  }
}




/**************************************************
 * External Functions				  *
 **************************************************/

/*
 * Name    : details_set
 * Desc    : sets the developer details
 * Parms   : DetailsInfo *d - pointer to details
 * Returns : none
 */

extern void details_set ( DetailsInfo *d )
{
  memcpy(&data,d,sizeof(DetailsInfo));
}



/*
 * Name    : details_get_ptr
 * Desc    : gets a pointer to the details data
 * Parms   : none
 * Returns : pointer to details
 */

extern DetailsInfo *details_get_ptr ( void )
{
  return(&data);
}


/*
 * Name    : details_load
 * Desc    : loads the details file
 * Parms   : none
 * Returns : True or False on result
 */

extern BOOL details_load ( void )
{
  if(file_load(Details_File_R,(int)&data) != NULL)
  {
    return(FALSE);
  }

  return(TRUE);
}



/*
 * Name    : details_save
 * Desc    : saves the details file
 * Parms   : none
 * Returns : True or False on result
 */

extern BOOL details_save ( void )
{
  /* Try to save to choices */
  file_createdir(Details_File_WDir, 0); /* Create with default entries */
  if(file_memdump(Details_File_W,FileType_Data,(char *)&data,sizeof(DetailsInfo)) != NULL)
  {
    return(FALSE);
  }

  return(TRUE);
}



/*
 * Name:    details_show
 * Desc:    Shows the details window
 * Parms:   None
 * Returns: True or False on result
 */

extern BOOL details_show ( void )
{
  /*-- only open if not open --*/

  if(!open)
  {
  wimp_caretstr c;

    /*-- load the details file --*/

    details_load();

    /*-- create and open dbox --*/

    details = dbox_new("details");
    if(!details)
      return(FALSE);
    dbox_showstatic(details);
    dbox_eventhandler(details,details_events,NULL);
    open = TRUE;

    /*-- set the caret to be in the first icon --*/

    c.w = dbox_syshandle(details);
    c.i = i_Details_Name;
    c.x = c.y = 0;
    c.height = -1;
    c.index  = -1;
    wimp_set_caret_pos(&c);

    set_details();
  }

  return(TRUE);
}


