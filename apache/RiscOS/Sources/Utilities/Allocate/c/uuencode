/* Copyright 2015 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Name   : uuencode.c
 * Desc   : uuencode routines
 * Auther : James Bye
 * Date   : 25-Jul-1994
 *
 *
 */


/*-- from CLib --*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "kernel.h"

#include "Global/FileTypes.h"

/*-- mine --*/

#include "file.h"


#define	ENC(c) ((c) ? ((c) & 077) + ' ': '`')


/*
 * does the actual uuencoding
 */

static _kernel_oserror *do_encode ( int fh, char *buffer, int size )
{
_kernel_oserror *e = NULL;
int i = 0;
char temp[50];
int x;
int ch;
char *p;

  while(i <= size)
  {
    x = 0;

    /*-- copy bytes into temp buffer --*/

    while(x <= 45 && x <= i )
    {
      temp[x++] = buffer[i++];
    }

    /*-- do the encoding --*/

    ch = ENC(x);

    if((e = file_writeabyte(fh,ch)) != NULL)
      goto finish;

    for(p = (char *)&temp;x>0;x-=3,p+=3)
    {
      ch = *p >> 2;
      ch = ENC(ch);
      if((e = file_writeabyte(fh,ch)) != NULL)
        goto finish;
      ch = ((*p << 4) & 060 | ((p[1]) >> 4) & 017);
      ch = ENC(ch);
      if((e = file_writeabyte(fh,ch)) != NULL)
        goto finish;
      ch = ((p[1] << 2) & 074) | ((p[2] >> 6) & 03);
      ch = ENC(ch);
      if((e = file_writeabyte(fh,ch)) != NULL)
        goto finish;
      ch = p[2] & 077;
      ch = ENC(ch);
      if((e = file_writeabyte(fh,ch)) != NULL)
        goto finish;
    }

    /*-- write carraige return --*/

    if((e = file_writeabyte(fh,'\n')) != NULL)
      goto finish;
  }

  /*-- end of uuencoding buffer --*/

  ch = ENC('\0');
  if((e = file_writeabyte(fh,ch)) != NULL)
    goto finish;
  if((e = file_writeabyte(fh,'\n')) != NULL)
    goto finish;


finish:

  return(e);
}


/******************************************************
 * External functions                                 *
 ******************************************************/

/*
 * Name    : uuencode_buffer_to_file
 * Desc    : writes a buffer to a file, uuencoding on the way
 * Parms   : void *buffer     - pointer to buffer to encode
 *           int   size       - size of buffer
 *           char *filename   - destination filename
 *           char *leafname   - leafname for uunecode start
 * Returns : pointer to error block
 */

extern _kernel_oserror *uuencode_buffer_to_file ( void *buffer, int size, char *filename,
                                                  char *leafname )
{
_kernel_oserror *e = NULL;
int fh = 0;
char temp[100];

  /*-- open the destination file --*/

  if((e = file_open(filename,&fh,OPEN_NEW_READ_WRITE)) != NULL)
    goto finish;

  /*-- write the start of the uuencoded file --*/

  sprintf(temp,"begin 644 %s\n",leafname);

  if((e = file_writebytes(fh,temp,0,strlen(temp),-1)) != NULL)
    goto finish;

  /*-- do the uuencoding --*/

  if((e = do_encode(fh,buffer,size)) != NULL)
    goto finish;

  /*-- write the end of the uuncoded file --*/

  strcpy(temp,"end\n");

  if((e = file_writebytes(fh,temp,0,strlen(temp),-1)) != NULL)
    goto finish;


finish:

  if(fh != 0)
  {
    file_close(fh);
    file_writecat18(filename,FileType_Text);
  }

  return(e);
}


/*
 * Name    : uuencode_buffer_to_file_tail
 * Desc    : writes a buffer to the end of a file, uuencoding on the way
 * Parms   : void *buffer     - pointer to buffer to encode
 *           int   size       - size of buffer
 *           char *filename   - destination filename
 *           char *leafname   - leafname for uunecode start
 * Returns : pointer to error block
 */

extern _kernel_oserror *uuencode_buffer_to_file_tail ( void *buffer, int size, char *filename,
                                                       char *leafname )
{
_kernel_oserror *e = NULL;
int fh = 0;
char temp[100];

  /*-- open the destination file --*/

  if((e = file_open(filename,&fh,OPEN_EXIST_READ_WRITE)) != NULL)
    goto finish;

  /*-- move to end of file --*/
  {
    int end;
    if((e = file_read_ext(fh,&end)) != NULL)
      goto finish;
    if((e = file_write_seqptr(fh,end)) != NULL)
      goto finish;
  }

  /*-- write the start of the uuencoded file --*/

  sprintf(temp,"begin 644 %s\n",leafname);

  if((e = file_writebytes(fh,temp,0,strlen(temp),-1)) != NULL)
    goto finish;

  /*-- do the uuencoding --*/

  if((e = do_encode(fh,buffer,size)) != NULL)
    goto finish;

  /*-- write the end of the uuncoded file --*/

  strcpy(temp,"end\n");

  if((e = file_writebytes(fh,temp,0,strlen(temp),-1)) != NULL)
    goto finish;


finish:

  if(fh != 0)
  {
    file_close(fh);
    file_writecat18(filename,FileType_Text);
  }

  return(e);
}

