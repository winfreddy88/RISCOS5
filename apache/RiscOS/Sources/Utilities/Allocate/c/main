/* Copyright 2015 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Name   : main.c
 * Desc   : Main control for the !allocate application
 * Auther : James Bye
 * Date   : 18-Jul-1994
 *
 *
 */

#include "wimp.h"        /*  access to WIMP SWIs                      */
#include "wimpt.h"       /*  wimp task facilities                     */
#include "win.h"         /*  registering window handlers              */
#include "event.h"       /*  poll loops, etc                          */
#include "baricon.h"     /*  putting icon on icon bar                 */
#include "werr.h"        /*  error reporting                          */
#include "res.h"         /*  access to resources                      */
#include "resspr.h"      /*  sprite resources                         */
#include "flex.h"        /*  dynamic mem alloc from WIMP              */
#include "template.h"    /*  reading in template file                 */
#include "dbox.h"        /*  dialogue box handling                    */
#include "msgs.h"

#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#include "kernel.h"

#include "Global/FileTypes.h"

#include "trace.h"

#include "details.h"
#include "alist.h"
#include "object.h"
#include "datafile.h"
#include "helpwin.h"

#define m_IconBar_Info 		1
#define m_IconBar_Details       2
#define m_IconBar_Quit 		3


static menu iconbar_menu;
static wimp_i iconbar_icon;

/**************************************************
 * Icon definitions                               *
 **************************************************/

#define i_DCExit_Text      0
#define i_DCExit_Discard   1
#define i_DCExit_Cancel    2


/**************************************************
 * Static functions                               *
 **************************************************/

/*
 * shows the exit warning box (if it needs to)
 * (returns TRUE if you can exit safely)
 */

static BOOL exit_warn ( void )
{
BOOL do_exit = TRUE;
int f;

  if(alist_any_edited())
  {
  dbox d = dbox_new("dc_exit");

    dbox_show(d);
    dbox_setfield(d,i_DCExit_Text,msgs_lookup("DCE01"));
    f = dbox_fillin(d);
    dbox_dispose(&d);
    if(f == i_DCExit_Discard)
      do_exit = TRUE;
    else
      do_exit = FALSE;
  }

  return(do_exit);
}




/*
 * shows information about the application
 */

static void show_info ( void )
{
dbox d = dbox_new("info");

  dbox_show(d);
  dbox_setfield(d,4,msgs_lookup("_Version"));
  dbox_fillin(d);
  dbox_dispose(&d);
}



/*
 * click proc for the iconbar
 */

extern void click_proc ( wimp_i i )
{
  iconbar_icon = i;

  alist_show(NULL);
}




/*
 * menu handler for the iconbar
 */

static void iconbar_menu_events ( void *handle, char *hit )
{
  handle = handle;

  switch(hit[0])
  {
     case m_IconBar_Info    : show_info();
                              break;
     case m_IconBar_Details : if(!details_show())
     				werr(0,"%s",msgs_lookup("Det01"));
     			      break;
     case m_IconBar_Quit    : if(exit_warn())
                                exit(0);
                              break;
  }
}


/*
 * unknown loader for the iconbar
 */

static BOOL unknown_events ( wimp_eventstr *e, void *handle )
{
  handle = handle;

  switch(e->e)
  {
    case wimp_ESEND        :
    case wimp_ESENDWANTACK :

      switch(e->data.msg.hdr.action)
      {
         case wimp_MDATALOAD :
         case wimp_MDATASAVE :
         case wimp_MDATAOPEN :

           if(e->data.msg.data.dataload.type == FileType_Allocate)
           {
             wimp_msgstr msg;

                alist_show(e->data.msg.data.dataload.name);

                /*-- acknowledge the message --*/

                msg = e->data.msg;
                msg.hdr.your_ref = e->data.msg.hdr.my_ref;
                msg.hdr.action = wimp_MDATALOADOK;
                wimp_sendmessage(wimp_ESEND,&msg,e->data.msg.hdr.task);

                return(TRUE);
           }
      }
  }
  return(FALSE);
}




/*
 * loader for the iconbar
 */

static void iconbar_loader ( wimp_eventstr *e, void *handle )
{
  handle = handle;

  switch(e->e)
  {
    case wimp_ESEND        :
    case wimp_ESENDWANTACK :

      switch(e->data.msg.hdr.action)
      {
         case wimp_MDATALOAD :
         case wimp_MDATASAVE :
         case wimp_MDATAOPEN :

           if(e->data.msg.data.dataload.type == FileType_Allocate)
           {
             alist_show(e->data.msg.data.dataload.name);
           }
      }
  }
}




/**************************************************
 * Main C function                                *
 **************************************************/

int main ( int argc, char *argv[] )
{
#if (0)
#ifdef ANSILIB
  __heap_checking_on_all_allocates(TRUE);
  __heap_checking_on_all_deallocates(TRUE);
#endif
#endif

  /*-- init ourselves with the wimp --*/

  res_init("Allocate");

  msgs_readfile("<Allocate$Dir>.Messages");

  wimpt_init("Allocate");
  res_init("Allocate");
  resspr_init();
  flex_init();
  template_init();
  dbox_init();

  /*-- allow stack extension --*/

#if 0
  /* JRF: Flex is already marked as flex_budge in modern RISC OSLib */
  _kernel_register_slotextend(flex_budge);
#endif

  /*-- init our own modules --*/

  object_init();
  alist_init();
  helpwin_init();

  /*-- turn on tracing --*/

  trace_on();

  /*-- place the icon on the iconbar --*/

  baricon("!allocate",1,click_proc);

  /*-- create & attach the menu to the iconbar --*/

  iconbar_menu = menu_new(msgs_lookup("MIBTitle"),msgs_lookup("MIBHits"));
  event_attachmenu(win_ICONBAR,iconbar_menu,iconbar_menu_events,NULL);

  /*-- load file is asked to --*/

  if(argc > 1)
    alist_show(argv[1]);

  /*-- load details file and show details window if file not present --*/

  if(!details_load())
    details_show();

  /*-- attach loader for the iconbar --*/

  win_register_event_handler(win_ICONBARLOAD,iconbar_loader,NULL);

  /*-- attach unknown event handler to collect double clicking on filetype --*/

  win_add_unknown_event_processor(unknown_events,NULL);

  /*-- inifinite polling loop --*/

  while(TRUE)
    event_process();
}

/*-- end --*/

