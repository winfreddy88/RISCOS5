/* Copyright 2015 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*
 * Name   : object.h
 * Desc   : object control for the !allocate application
 * Auther : James Bye
 * Date   : 18-Jul-1994
 *
 *
 */


#ifndef __object_h
#define __object_h


/*-- object id codes --*/

#define Object_SWIChunk       0
#define Object_Messages       1
#define Object_Reservation    2
#define Object_FileType       3
#define Object_ErrorBlock     4
#define Object_Podule         5
#define Object_DrawTags       6
#define Object_DrawObjects    7
#define Object_FilingSystem   8
#define Object_Services       9
#define Object_Devices       10

#define Object_Max           10
#define Object_All           -1

/*-- SWI Chunk object --*/

typedef struct
{
  char prefix[20];
  char description[100];
} SWIChunk;


/*-- Messages object --*/

typedef struct
{
  char description[100];
} Messages;


/*-- Reservation object --*/

typedef struct
{
  char text[40];
  char type[20];
} Reservation;


/*-- file data --*/

typedef struct
{
  int size;
  void *data;
} FileData;


/*-- filetype object --*/

typedef struct
{
  char appname[12];
  char fname[9];
  BOOL double_clicking;
  FileData sprite;
  FileData prod_desc;
  FileData format;
} FileType;


/*-- error block object --*/

typedef struct
{
  char description[100];
} ErrorBlock;


/*-- draw tag object --*/

typedef struct
{
  char description[100];
} DrawTags;


/*-- draw object object --*/

typedef struct
{
  char description[100];
} DrawObjects;



/*-- filing systems object --*/

typedef struct
{
  char name[20];
  char select[20];
} FilingSystem;



/*-- podule object --*/

typedef struct
{
  BOOL allocate_manf;
  int  manf;
  char podule_name[20];
  char description[100];
} Podule;


/*-- devices object --*/

typedef struct
{
  char name[20];
  char description[100];
} Devices;


/*-- services object --*/

typedef struct
{
  char description[100];
} Services;



/*-- object block --*/

typedef struct
{
  int id;
  int size;

  union
  {
    SWIChunk      swichunk;
    Messages      messages;
    Reservation   reservation;
    FileType      filetype;
    ErrorBlock    errorblock;
    Podule        podule;
    DrawTags      drawtag;
    DrawObjects   drawobject;
    FilingSystem  filingsystem;
    Services      services;
    Devices       devices;
  } data;
} ObjectBlock;


/*-- add function --*/

typedef void (*ObjectAddFunc) ( BOOL new, ObjectBlock *o, void *handle );


/*
 * Name     : object_free
 * Desc     : free's an object and any data associated with in
 * Parms    : ObjectBlock *object
 * Returns  : none
 */

extern void object_free ( ObjectBlock *object );


/*
 * Name     : object_build_description
 * Desc     : builds a description string for a specified object
 * Parms    : ObjectBlock *object  - pointer to allocated object
 *            char        *desc    - destination for description string
 *            int          size    - size of description string
 * Returns  : none
 */

extern void object_build_description ( ObjectBlock *object, char *desc, int size );



/*
 * Name     : object_show
 * Desc     : shows a window for the specified object type
 * Parms    : int id                   - object id for the type of object
 *            ObjectBlock *object      - pointer to object data to show (can be NULL
 *                                       if a new object is being shown )
 *            ObjectAddFunc update     - add function
 *            void *handle             - user defined handle
 * Returns  : True or False on result
 */

extern BOOL object_show ( int id, ObjectBlock *object, ObjectAddFunc add, void *handle );


/*
 * Name     : object_init
 * Desc     : init's various stuff for the object module
 * Parms    : none
 * Returns  : True or FALSE on result
 */

extern BOOL object_init ( void );


/*
 * Name     : object_describe
 * Desc     : describes's an object into a buffer
 * Parms    : ObjectBlock *object
 *            buffer-> the buffer to write to
 *            size = the length of the buffer
 * Returns  : size written
 */

extern int object_describe ( ObjectBlock *object, char *buffer, int size );


#endif
