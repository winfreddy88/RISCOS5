; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; >Where
;
; Disassembled by SID on Wed,09 Mar 2011.01:38:47
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Services
        GET     Hdr:ModHand
        GET     Hdr:EnvNumbers


        AREA    |Asm$$Code|, CODE, READONLY, PIC


; ******************************************************************************
;
; <- Main entry point
;
Module_BaseAddr                                         ; Address &0, referenced once
        B       skip_it
        DCD     &79766748
        DCD     &216C6776                               ; =ROT13("Utility!")
        DCD     data - Module_BaseAddr
        DCD     0
        DCD     32
skip_it
        Push    "R1-R7,R14"
        SUB     R13,R13,#&10                            ; =16
loop_1                                                  ; Address &8, referenced once
        LDRB    R0,[R1,#0]
        CMP     R0,#&20                                 ; =" "
        ADDEQ   R1,R1,#1
        BEQ     loop_1
        BCC     skip
        MOV     R0,#&80000010
        SWI     XOS_ReadUnsigned
        BVS     skip_3
        MOV     R7,R2
        B       skip_1
skip                                                    ; Address &30, referenced once
        MOV     R0,#ExceptionDumpArea                   ; =13
        MOV     R1,#0
        MOV     R2,#0
        MOV     R3,#0
        SWI     XOS_ChangeEnvironment
        BVS     skip_3
        LDR     R7,[R1,#60]
        TEQ     R0,R0
        TEQ     PC,PC
        BICNE   R7,R7,#&FC000003                        ; Warning: May be unsafe in 32-bit modes
skip_1                                                  ; Address &58, referenced once
        SWI     XOS_WriteS
        DCB     "Address ", 0
        ALIGN
code_1                                                  ; Address &68, not referenced
        MOV     R0,R7
        MOV     R1,R13
        MOV     R2,#&10                                 ; =16
        SWI     XOS_ConvertHex8
        SWI     XOS_Write0
        MOV     R1,#0
        MOV     R2,#0
loop                                                    ; Address &84, referenced twice
        MOV     R0,#ModHandReason_GetNames              ; =12
        SWI     XOS_Module
        BVS     skip_2
        LDR     R4,[R3,#-4]
        SUBS    R0,R7,R3
        BCC     loop
        CMP     R0,R4
        BCS     loop
        SWI     XOS_WriteS
        DCB     " is at offset ", 0
        ALIGN
code                                                    ; Address &B8, not referenced
        MOV     R1,R13
        MOV     R2,#&10                                 ; =16
        SWI     XOS_ConvertHex8
        SWI     XOS_Write0
        SWI     XOS_WriteS
        DCB     " in module ", 0
        ALIGN
code_2                                                  ; Address &D8, not referenced
        LDR     R0,[R3,#16]
        ADD     R0,R0,R3
        SWI     XOS_Write0
        B       code_3
skip_2                                                  ; Address &E8, referenced once
        SWI     XOS_WriteS
        DCB     " is not in any module", 0
        ALIGN
code_3                                                  ; Address &104, referenced once
        SWI     XOS_NewLine
skip_3                                                  ; Address &108, referenced twice
        ADD     R13,R13,#&10                            ; =16
        Pull    "R1-R7,PC"
        DCB     "32OK"
data                                                    ; Address &110, not referenced

        END
