; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; >rmdir
;
; Disassembled by SID on Wed,09 Mar 2011.01:39:01
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Services


        AREA    |Asm$$Code|, CODE, READONLY, PIC


; ******************************************************************************
;
; <- Main entry point
;
Module_BaseAddr                                         ; Address &0, referenced once
        B       skip_it
        DCD     &79766748
        DCD     &216C6776                               ; =ROT13("Utility!")
        DCD     data - Module_BaseAddr
        DCD     0
        DCD     32
skip_it
        Push    "R2,R3,R14"
        BL      subroutine_3
        MOV     R0,R12
        ADR     R2,subroutine
loop_1                                                  ; Address &10, referenced once
        LDRB    R3,[R2],#1
        STRB    R3,[R0],#1
        CMP     R3,#&20                                 ; =" "
        BNE     loop_1
        BL      subroutine_1
        LDRB    R2,[R0,#-1]
        CMP     R2,#&2E                                 ; ="."
        SUBEQ   R0,R0,#1
        MOV     R2,#&0D                                 ; =13
        STRB    R2,[R0,#0]
        MOV     R0,R12
        SWI     XOS_CLI
        Pull    "R2,R3,PC"

; ******************************************************************************
;
; Subroutine (e.g. called with BL)
;
subroutine                                              ; Address &44, referenced once
	DCB	"%delete "
	ALIGN

; ******************************************************************************
;
; Subroutine (e.g. called with BL)
;
subroutine_1                                            ; Address &4C, referenced once
        Push    "R2,R5,R14"
        MOV     R2,#0
loop_2                                                  ; Address &54, referenced once
        LDRB    R5,[R1,R2]
        STRB    R5,[R0,R2]
        ADD     R2,R2,#1
        CMP     R5,#&3A                                 ; =":"
        ADDEQ   R0,R0,R2
        ADDEQ   R1,R1,R2
        BEQ     skip_1
        CMP     R5,#&20                                 ; =" "
        BGT     loop_2
skip_1                                                  ; Address &78, referenced once
        LDRB    R5,[R1,#0]
        CMP     R5,#&2F                                 ; ="/"
        BNE     code
        MOV     R5,#&24                                 ; ="$"
        STRB    R5,[R0],#1
        MOV     R5,#&2E                                 ; ="."
        STRB    R5,[R0],#1
        ADD     R1,R1,#1
        B       code

; ******************************************************************************
;
; Subroutine (e.g. called with BL)
;
subroutine_2                                            ; Address &9C, not referenced
        CMP     R5,#&2E                                 ; ="."
        BNE     code
        LDRB    R5,[R1,#1]
        CMP     R5,#&2E                                 ; ="."
        BEQ     code
        MOV     R5,#&40                                 ; ="@"
        STRB    R5,[R0],#1
        ADD     R1,R1,#1
code                                                    ; Address &BC, referenced 6 times
        LDRB    R5,[R1,#0]
        CMP     R5,#&20                                 ; =" "
        Pull    "R2,R5,PC", LE                          ; Warning: Conditional LDM/STM slow on StrongARM and XScale
        CMP     R5,#&2E                                 ; ="."
        BNE     skip_3
        LDRB    R5,[R1,#1]
        CMP     R5,#&2F                                 ; ="/"
        BEQ     skip_4
        CMP     R5,#&20                                 ; =" "
        BGT     skip_5
        SUB     R1,R1,#1
skip_4                                                  ; Address &E8, referenced once
        ADD     R1,R1,#2
        MOV     R5,#&40                                 ; ="@"
        B       skip_2
skip_5                                                  ; Address &F4, referenced once
        CMP     R5,#&2E                                 ; ="."
        BNE     skip_3
        LDRB    R5,[R1,#2]
        CMP     R5,#&2F                                 ; ="/"
        BEQ     skip
        CMP     R5,#&20                                 ; =" "
        BGT     skip_3
        SUB     R1,R1,#1
skip                                                    ; Address &114, referenced once
        ADD     R1,R1,#3
        MOV     R5,#&5E                                 ; ="^"
skip_2                                                  ; Address &11C, referenced once
        STRB    R5,[R0],#1
        MOV     R5,#&2E                                 ; ="."
        STRB    R5,[R0],#1
        B       code
skip_3                                                  ; Address &12C, referenced 3 times
        LDRB    R5,[R1],#1
        CMP     R5,#&2F                                 ; ="/"
        MOVEQ   R5,#&2E                                 ; ="."
        CMP     R5,#&7E                                 ; ="~"
        MOVEQ   R5,#&26                                 ; ="&"
        STRB    R5,[R0],#1
        B       code

; ******************************************************************************
;
; Subroutine (e.g. called with BL)
;
subroutine_3                                            ; Address &148, referenced once
        Push    "R2,R14"
loop                                                    ; Address &14C, referenced once
        LDRB    R2,[R1,#0]
        CMP     R2,#&20                                 ; =" "
        CMPNE   R2,#8
        Pull    "R2,PC", NE                             ; Warning: Conditional LDM/STM slow on StrongARM and XScale
        ADD     R1,R1,#1
        B       loop
string_ARM_TLA_01f                                      ; Address &164, not referenced
        DCB     "ARM TLA [0.1f]", 0
        ALIGN
        DCD     &EFFAE148
        DCB     "32OK"
data                                                    ; Address &178, not referenced

        END
