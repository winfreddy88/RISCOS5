/* Copyright 2014 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef UIMAGE_H
#define UIMAGE_H

#include <stdint.h>
#include <stdbool.h>

typedef struct {
  /* Note - all values are big-endian! */
  uint32_t magic;
  uint32_t header_crc;
  uint32_t timestamp;
  uint32_t length;
  uint32_t load_addr;
  uint32_t exec_addr;
  uint32_t data_crc;
  uint8_t os;
  uint8_t arch;
  uint8_t type;
  uint8_t compression;
  char name[32];
} uimage_header;

extern bool uimage_hasheader(const char *rom, uint32_t len); /* Return true if valid uImage header is found */

extern bool uimage_checksum_valid(const uimage_header *header); /* Return true if uImage header data checksum matches actual data checksum */

extern void uimage_fixup(uimage_header *header, uint32_t len); /* Fixup uImage header following any changes to image */

extern void uimage_info(const uimage_header *header); /* Print info for header */

#endif
