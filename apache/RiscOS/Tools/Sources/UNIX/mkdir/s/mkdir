; Copyright 2003 Tematic Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
;
; mkdir utility
;
; Syntax: mkdir [-p] <Unix path>
;
; This will create a directory using a Unix-style path as input.
; If the -p is specified parent directories will be created if they do not
; already exist.

;
; On entry R0 = pointer to command line
;          R1 = pointer to command tail
;          R12 = pointer to workspace
;          R13 = pointer to workspace end (stack)
;          R14 = return address
;          USR mode, interrupts enabled

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Proc

        GET     VersionASM

        AREA    |Asm$$Code|, CODE, READONLY, PIC

; ******************************************************************************
;
; <- Main entry point
;
base
        B       skip_it
        DCD     &79766748
        DCD     &216C6776                               ; =ROT13("Utility!")
        DCD     data - base
        DCD     0
        DCD     32
skip_it
        ENTRY
mkdir   Entry
        BL      check_options
        BL      skip_whitespace
        MOV     R0,R12       ; The buffer for initial path conversion
        ADD     R9,R12,#512  ; The buffer for canonicalised name
        ; Put '%cdir ' in command buffer
        ADR     R2,cdir_cmd
1
        LDRB    R3,[R2],#1
        ADD     R0,R0,#1
        STRB    R3,[R9],#1
        CMP     R3,#32
        BNE     %B1
        MOV     R8,R0
        ; Convert the parameter from a Unix to a RISC OS path
        BL      convert_path
        ; Remove any trailing '.'
        LDRB    R2,[R0,#-1]
        CMP     R2,#"."
        SUBEQ   R0,R0,#1
        MOV     R2,#13
        STRB    R2,[R0]
        ; Canonicalise the name
        MOV     R0,#37
        MOV     R1,R8
        MOV     R2,R9
        MOV     R3,#0
        MOV     R4,#0
        MOV     R5,#500
        SWI     XOS_FSControl
        EXIT    VS
        ; Make a note of where the pathname string terminator character is
        RSB     R8,R5,#500
        ADD     R9,R8,R9
        ; Was '-p' option specified?
        CMP     R7,#0
        BEQ     %F4
        ; It was - create intermediate directories
        MOV     R7,R9
        ADD     R3,R12,#512
2
        LDRB    R0,[R3]
        CMP     R0,#"."
        BNE     %F3
        MOV     R0,#0
        STRB    R0,[R3]
        ADD     R0,R12,#512
        SWI     XOS_CLI
        EXIT    VS
        MOV     R0,#"."
        STRB    R0,[R3]
3
        ADD     R3,R3,#1
        CMP     R3,R7
        BNE     %B2
4
        ADD     R0,R12,#512
        SWI     XOS_CLI
        EXIT

cdir_cmd
        DCB     "%cdir ", 0
        ALIGN

; ******************************************************************************
;
; check_options
;

options
        DCB     "p", 0
        ALIGN

        ROUT
check_options   Entry "R2-R6"
        ADR     R3,options
        MOV     R7,#0
        LDRB    R2,[R1]
        CMP     R2,#"-"
        EXIT    NE
1
        LDRB    R2,[R1,#1]!
        CMP     R2,#32
        EXIT    LE
        MOV     R5,#0
        MOV     R6,#1
2
        LDRB    R4,[R3,R5]
        CMP     R4,#0
        BEQ     %B1
        CMP     R4,R2
        ORREQ   R7,R7,R6,LSL R5
        BEQ     %B1
        ADD     R5,R5,#1
        B       %B2

; ******************************************************************************
;
; convert_path
;

        GBLL    AllowSlashes
AllowSlashes SETL {TRUE}

        ROUT
convert_path    Entry "R2,R5"
        MOV     R2,#0
        ; If the path contains a colon, copy everything up to and including it
        ; to the buffer unchanged.
1
        LDRB    R5,[R1,R2]
        STRB    R5,[R0,R2]
        ADD     R2,R2,#1
        CMP     R5,#":"
 [ AllowSlashes
        ; Actually, if we're treating a colon differently because it's a RISC OS
        ; file system or path separator, why not assume that no translation is
        ; required at all if we find one? This allows us slashes in RISC OS
        ; format directory names (eg "AcornC/C++")
        BEQ     %F10
 |
        ADDEQ   R0,R0,R2
        ADDEQ   R1,R1,R2
        BEQ     %F2
 ]
        CMP     R5,#32
        BGT     %B1
2
        LDRB    R5,[R1]
        CMP     R5,#"/"
        BNE     %F3
        ; Deal with initial '/'
        MOV     R5,#"$"
        STRB    R5,[R0],#1
        MOV     R5,#"."
        STRB    R5,[R0],#1
        ADD     R1,R1,#1

; The following code was in the original binary, but is never used.
        [ {FALSE}
        B       %F3

        CMP     R5,#"."
        BNE     %F3
        LDRB    R5,[R1,#1]
        CMP     R5,#"."
        BEQ     %F3
        MOV     R5,#"@"
        STRB    R5,[R0],#1
        ADD     R1,R1,#1
        ]
3
        LDRB    R5,[R1]
        CMP     R5,#32
        EXIT    LE
        CMP     R5,#"."
        BNE     %F8
        ; Deal with '.'
        LDRB    R5,[R1,#1]
        CMP     R5,#"/"
        BEQ     %F4
        CMP     R5,#32
        BGT     %F5
        SUB     R1,R1,#1
4
        ADD     R1,R1,#2
        ; '.' and './' converted to '@'
        MOV     R5,#"@"
        B       %F7
5
        CMP     R5,#"."
        BNE     %F8
        ; Deal with '..'
        LDRB    R5,[R1,#2]
        CMP     R5,#"/"
        BEQ     %F6
        CMP     R5,#32
        BGT     %F8
        SUB     R1,R1,#1
6
        ; '..' and '../' converted to '^'
        ADD     R1,R1,#3
        MOV     R5,#"^"
7
        STRB    R5,[R0],#1
        MOV     R5,#"."
        STRB    R5,[R0],#1
        B       %B3
8
        ; Convert '/' to '.'; convert '~' to '&'
        LDRB    R5,[R1],#1
        CMP     R5,#"/"
        MOVEQ   R5,#"."
        CMP     R5,#"~"
        MOVEQ   R5,#"&"
        STRB    R5,[R0],#1
        B       %B3
 [ AllowSlashes
9
        LDRB    R5,[R1,R2]
        STRB    R5,[R0,R2]
        ADD     R2,R2,#1
10
        CMP     R5,#32
        BGT     %B9
        ADD     R0,R0,R2
        ADD     R1,R1,R2
        EXIT
 ]

; ******************************************************************************
;
; skip_whitespace
;
        ROUT
skip_whitespace Entry "R2"
1
        LDRB    R2,[R1]
        CMP     R2,#32
        CMPNE   R2,#8
        EXIT    NE
        ADD     R1,R1,#1
        B       %B1

        DCB     Module_ComponentName," ",Module_HelpVersion, 0
        ALIGN
        DCB     "32OK"
data

        END
