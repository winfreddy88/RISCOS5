
; Reconstructed from a disassembly of the original binary
; BA 2003-11-06

        AREA    |Asm$$Code|, CODE, READONLY

        IMPORT  |x$stack_overflow_1|
        IMPORT  |_sprintf|
        IMPORT  |tmpnam|
        IMPORT  |_os_cmd|
        IMPORT  |__ctype|
        IMPORT  |free|
        IMPORT  |remove|
        IMPORT  |_kernel_setenv|
        IMPORT  |system|
        IMPORT  |fopen|
        IMPORT  |__flsbuf|
        IMPORT  |__filbuf|
        IMPORT  |fclose|
        IMPORT  |strdup|

        MACRO
        Return  $regs, $cond
      [ {CONFIG}=26
        LDM$cond.DB R11,{$regs,R11,R13,PC}^
      |
        LDM$cond.DB R11,{$regs,R11,R13,PC}
      ]
        MEND

        EXPORT  |popen|
|popen|
        MOV     R12,R13
        STMDB   R13!,{R0,R1,R4-R9,R11,R12,R14,PC}
        SUB     R11,R12,#4
        SUB     R12,R13,#&0150                          ; =336
        CMP     R12,R10
        BLLT    |x$stack_overflow_1|
        MOV     R4,R0
        SUB     R13,R13,#&14                            ; =20
        MVN     R0,#0
        STR     R0,[R13,#12]
        LDRB    R0,[R1,#1]
        CMP     R0,#0
        MOVNE   R0,#0
        Return  "R4-R9",NE
        LDRB    R0,[R1,#0]
        CMP     R0,#&72                                 ; ="r"
        BNE     skip_350
        MOV     R0,#1
        B       skip_358
skip_350
        CMP     R0,#&77                                 ; ="w"
        MOVNE   R0,#0
        Return  "R4-R9",NE
        MOV     R0,#2
skip_358
        STR     R0,[R13,#16]
        MOV     R9,#0
loop_193
        ADD     R0,R9,R9,LSL #2
        LDR     R1,=data_73090
        ADD     R0,R1,R0,LSL #2
        LDR     R0,[R0,#12]
        CMP     R0,#0
        BEQ     skip_369
        ADD     R9,R9,#1
        CMP     R9,#&14                                 ; =20
        BLT     loop_193
skip_369
        CMP     R9,#&14                                 ; =20
        MOVGE   R0,#0
        Return  "R4-R9",GE
        MOV     R2,R9
        MOV     R0,R13
        ADR     R1,string_109
        BL      |_sprintf|
        MOV     R0,R13
        BL      |tmpnam|
        MOVS    R5,R0
        MOVEQ   R0,#0
        Return  "R4-R9",EQ
        LDR     R0,[R13,#16]
        CMP     R0,#1
        BNE     skip_646
        SUB     R13,R13,#&0100                          ; =256
        MOV     R0,R4
        BL      |_os_cmd|
        MOV     R7,R0
        LDRB    R0,[R4,#0]
        CMP     R0,#&25                                 ; ="%"
        MOVEQ   R7,#1
        ADDEQ   R4,R4,#1
        CMP     R7,#0
        BNE     skip_1231
        LDR     R1,=|__ctype|
        B       skip_1275

string_109
        DCB     "Pipe%.2d", 0
        ALIGN

loop_64
        ADD     R4,R4,#1
skip_1275
        LDRB    R0,[R4,#0]
        CMP     R0,#0
        BEQ     skip_416
        LDRB    R0,[R1,R0]
        ANDS    R0,R0,#1
        BNE     loop_64
skip_416
        MOV     R0,R4
        B       skip_436
loop_128
        ADD     R0,R0,#1
skip_436
        LDRB    R2,[R0,#0]
        CMP     R2,#0
        BEQ     skip_437
        LDRB    R2,[R1,R2]
        ANDS    R2,R2,#1
        BEQ     loop_128
skip_437
        MOV     R3,R0
        MOV     R2,R5
        STMDB   R13!,{R2,R3}
        SUB     R2,R0,R4
        MOV     R3,R4
        ADD     R0,R13,#8
        ADR     R1,string_71
        BL      |_sprintf|
        ADD     R13,R13,#8
        B       skip_1205

string_71
        DCB     "%.*s > %s%s", 0
        ALIGN

skip_1231
        ADR     R0,string_76
        BL      |tmpnam|
        MOVS    R6,R0
        BNE     skip_1215
        MOV     R0,R5
        BL      |free|
        MOV     R0,#0
        Return  "R4-R9"

string_76
        DCB     "Pipe:Tmp", 0
        ALIGN

skip_1215
        MOV     R3,R6
        MOV     R2,R4
        MOV     R0,R13
        ADR     R1,string_83
        BL      |_sprintf|
skip_1205
        CMP     R0,#&FF                                 ; ="ÿ"
        BLE     skip_504
        CMP     R7,#0
        BEQ     skip_491
        MOV     R0,R6
        BL      |remove|
        MOV     R0,R6
        BL      |free|
skip_491
        MOV     R0,R5
        BL      |free|
        MOV     R0,#0
        Return  "R4-R9"

string_83
        DCB     "%s{ > %s }", 0
        ALIGN

skip_504
        ADR     R1,string_30
        ADR     R0,string_160
        BL      |_kernel_setenv|
        MOV     R0,R13
        BL      |system|
        STR     R0,[R13,#268]
        CMN     R0,#2
        BNE     skip_528
        MOV     R0,R6
        BL      |remove|
        MOV     R0,R6
        BL      |free|
        MOV     R0,R5
        BL      |free|
        MOV     R0,#0
        Return  "R4-R9"

string_30
        DCB     "0", 0
        ALIGN

string_160
        DCB     "Sys$ReturnCode", 0
        ALIGN

skip_528
        CMP     R7,#0
        BEQ     skip_628
        SUB     R13,R13,#4
        MOV     R0,R6
        ADR     R1,string_99
        BL      |fopen|
        MOV     R8,R0
        MOV     R0,R5
        ADR     R1,string_100
        BL      |fopen|
        MOV     R7,R0
        CMP     R8,#0
        BEQ     skip_530
        CMP     R7,#0
        BNE     skip_568
skip_530
        MOV     R0,R6
        BL      |remove|
        MOV     R0,R6
        BL      |free|
        MOV     R0,R5
        BL      |free|
        MOV     R0,#0
        Return  "R4-R9"

string_99
        DCB     "r", 0
        ALIGN

string_100
        DCB     "w", 0
        ALIGN

loop_333
        LDR     R0,[R13,#0]
        CMP     R0,#&0D                                 ; =13
        BEQ     skip_568
        LDR     R0,[R7,#8]
        SUB     R0,R0,#1
        STR     R0,[R7,#8]
        CMP     R0,#0
        BLT     skip_1115
        LDR     R0,[R13,#0]
        LDR     R1,[R7,#0]
        STRB    R0,[R1],#1
        STR     R1,[R7,#0]
        B       skip_568
skip_1115
        MOV     R1,R7
        LDR     R0,[R13,#0]
        BL      |__flsbuf|
skip_568
        LDR     R0,[R8,#4]
        SUB     R0,R0,#1
        STR     R0,[R8,#4]
        CMP     R0,#0
        BLT     skip_578
        LDR     R1,[R8,#0]
        LDRB    R0,[R1],#1
        STR     R1,[R8,#0]
        B       skip_587
skip_578
        MOV     R0,R8
        BL      |__filbuf|
skip_587
        STR     R0,[R13,#0]
        CMN     R0,#1
        BEQ     skip_590
        LDR     R0,[R7,#12]
        ANDS    R0,R0,#&80                              ; ="€"
        BEQ     loop_333
skip_590
        LDR     R0,[R8,#12]
        ANDS    R0,R0,#&80                              ; ="€"
        BNE     skip_599
        LDR     R0,[R7,#12]
        ANDS    R0,R0,#&80                              ; ="€"
        BEQ     skip_3030
skip_599
        MOV     R0,#1
        B       skip_617
skip_3030
        MOV     R0,#0
skip_617
        STR     R0,[R13,#0]
        MOV     R0,R8
        BL      |fclose|
        MOV     R0,R7
        BL      |fclose|
        MOV     R0,R6
        BL      |remove|
        MOV     R0,R6
        BL      |free|
        LDR     R0,[R13,#0]
        CMP     R0,#0
        BEQ     skip_622
        MOV     R0,R5
        BL      |free|
        MOV     R0,#0
        Return  "R4-R9"
skip_622
        ADD     R13,R13,#4
skip_628
        MOV     R0,R5
        ADR     R1,string_99
        BL      |fopen|
        MOVS    R6,R0
        BNE     skip_640
        MOV     R0,R5
        BL      |free|
        MOV     R0,#0
        Return  "R4-R9"
skip_640
        ADD     R13,R13,#&0100                          ; =256
        B       skip_656
skip_646
        MOV     R0,R5
        ADR     R1,string_100
        BL      |fopen|
        MOVS    R6,R0
        BNE     skip_656
        MOV     R0,R5
        BL      |free|
        MOV     R0,#0
        Return  "R4-R9"
skip_656
        MOV     R0,R4
        BL      |strdup|
        ADD     R1,R9,R9,LSL #2
        LDR     R2,=data_73090
        ADD     R1,R2,R1,LSL #2
        STMIA   R1,{R0,R5,R6}
        LDR     R0,[R13,#16]
        STR     R0,[R1,#12]
        LDR     R0,[R13,#12]
        STR     R0,[R1,#16]
        MOV     R0,R6
        Return  "R4-R9"




        EXPORT  |pclose|
pclose
        MOV     R12,R13
        STMDB   R13!,{R0,R4-R8,R11,R12,R14,PC}
        SUB     R11,R12,#4
        SUB     R12,R13,#&0134                          ; =308
        CMP     R12,R10
        BLLT    |x$stack_overflow_1|
        MOV     R4,R0
        MOV     R8,#0
        MOV     R0,R8
        LDR     R1,=data_73090
loop_41
        ADD     R2,R0,R0,LSL #2
        ADD     R2,R1,R2,LSL #2
        LDR     R2,[R2,#8]
        CMP     R2,R4
        BEQ     skip_686
        ADD     R0,R0,#1
        CMP     R0,#&14                                 ; =20
        BLT     loop_41
skip_686
        CMP     R0,#&14                                 ; =20
        MVNGE   R0,#0
        Return  "R4-R8",GE
        ADD     R0,R0,R0,LSL #2
        ADD     R6,R1,R0,LSL #2
        LDR     R0,[R6,#12]
        CMP     R0,#1
        BNE     skip_695
        LDR     R5,[R6,#16]
        MOV     R0,R4
        BL      |fclose|
        LDR     R0,[R6,#4]
        BL      |remove|
        B       skip_793
skip_695
        SUB     R13,R13,#&0100                          ; =256
        LDR     R0,[R6,#0]
        MOV     R5,R0
        BL      |_os_cmd|
        MOV     R7,R0
        LDRB    R0,[R5,#0]
        CMP     R0,#&25                                 ; ="%"
        MOVEQ   R7,#1
        ADDEQ   R5,R5,#1
        MOV     R0,R4
        BL      |fclose|
        CMP     R7,#0
        BEQ     skip_707
        LDR     R3,[R6,#4]
        MOV     R2,R5
        MOV     R0,R13
        ADR     R1,string_124
        BL      |_sprintf|
        B       skip_907

string_124
        DCB     "%s{ < %s }", 0
        ALIGN

skip_707
        LDR     R1,=|__ctype|
        B       skip_725
loop_129
        ADD     R5,R5,#1
skip_725
        LDRB    R0,[R5,#0]
        CMP     R0,#0
        BEQ     skip_732
        LDRB    R0,[R1,R0]
        ANDS    R0,R0,#1
        BNE     loop_129
skip_732
        MOV     R0,R5
        B       skip_743
loop_23
        ADD     R0,R0,#1
skip_743
        LDRB    R2,[R0,#0]
        CMP     R2,#0
        BEQ     skip_913
        LDRB    R2,[R1,R2]
        ANDS    R2,R2,#1
        BEQ     loop_23
skip_913
        MOV     R3,R0
        STMDB   R13!,{R3}
        LDR     R3,[R6,#4]
        STMDB   R13!,{R3}
        SUB     R2,R0,R5
        MOV     R3,R5
        ADD     R0,R13,#8
        ADR     R1,string_133
        BL      |_sprintf|
        ADD     R13,R13,#8
skip_907
        CMP     R0,#&FF                                 ; ="ÿ"
        BLE     skip_774
        MVN     R5,#0
        B       skip_781

string_133
        DCB     "%.*s < %s%s", 0
        ALIGN

skip_774
        ADR     R1,string_30
        ADR     R0,string_160
        BL      |_kernel_setenv|
        MOV     R0,R13
        BL      |system|
        MOV     R5,R0
skip_781
        LDR     R0,[R6,#4]
        BL      |remove|
        ADD     R13,R13,#&0100                          ; =256
skip_793
        STR     R8,[R6,#12]
        LDR     R0,[R6,#4]
        BL      |free|
        LDR     R0,[R6,#0]
        BL      |free|
        MOV     R0,R5
        Return  "R4-R8"



        AREA    |Asm$$ZIData|, DATA, NOINIT

data_73090
        %       12*&14


        END
