#ifndef _perl_acorn_h
#define _perl_acorn_h

#define mktemp tmpnam
extern int unlink(char *file);
extern int exec_cmdv(int chain,SV *arglast);
extern void execv(char *cmd, char **argv);
extern int fileno(FILE *file);
extern int fstat(int fd, struct stat *buf);
extern int _is_text( SV * sv );
extern int _is_bin( SV * sv );
extern int mkdir(char *dir);
extern int rmdir(char *dir);
extern void sleep(unsigned len);
extern int do_aspawn(SV *really,SV **mark, SV **sp);
extern int do_spawn(char *cmd);
extern int chmod(const char *path, unsigned int mode);

/* Exported routines missing from the original sources */
extern int chdir (const char *path);
bool _os_cmd(const char *cmd);
char *strdup(const char *string);

/* And directory handling, also missing from original sources */

/* A struct describing a directory entry, only d_name is mandatory */
struct direct
{
  char *d_name; /* pointer to name of entry */
};

/* A private struct describing a directory being enumerated */
typedef struct
{
  char *name;
  int offset;
  struct direct pbuffer;
  char buffer[256];
}
DIR;

/* Return an opaque handle on a directory, or NULL for failure */
DIR *opendir(const char *dirname);

/* Finish enumerating a directory */
void closedir(DIR *dir);

/* Return a pointer to a struct desribing the next entry in a directory,
   or NULL if none */
struct direct *readdir(DIR *dir);

#endif
