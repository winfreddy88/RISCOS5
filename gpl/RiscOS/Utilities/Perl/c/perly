#ifndef lint
static char yysccsid[] = "@(#)yaccpar 1.8 (Berkeley) 01/20/91";
#endif
#define YYBYACC 1
#line 16 "perly.y"
#include "EXTERN.h"
#include "perl.h"

static void
dep()
{
    deprecate("\"do\" to call subroutines");
}

#define YYERRCODE 256
short yylhs[] = {                                        -1,
   30,    0,    5,    3,    6,    6,    6,    7,    7,    7,
    7,   21,   21,   21,   21,   21,   21,   11,   11,   11,
    9,    9,    9,    9,   29,   29,    8,    8,    8,    8,
    8,    8,    8,    8,   10,   10,   25,   25,   28,   28,
    1,    1,    1,    1,    2,    2,   31,   31,    4,   32,
   32,   33,   13,   13,   13,   13,   12,   12,   12,   26,
   26,   26,   26,   26,   26,   26,   27,   27,   14,   14,
   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
   14,   14,   14,   14,   14,   14,   14,   14,   22,   22,
   23,   23,   23,   20,   15,   16,   17,   18,   19,   24,
   24,   24,   24,
};
short yylen[] = {                                         2,
    0,    2,    4,    0,    0,    2,    2,    2,    1,    2,
    3,    1,    1,    3,    3,    3,    3,    0,    2,    6,
    6,    6,    4,    4,    0,    2,    7,    7,    5,    5,
    8,    7,   10,    3,    0,    1,    0,    1,    0,    1,
    1,    1,    1,    1,    4,    3,    4,    4,    0,    3,
    2,    4,    3,    3,    2,    1,    2,    3,    1,    3,
    5,    6,    3,    5,    2,    4,    1,    1,    3,    3,
    3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
    5,    3,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    2,    3,    2,    3,    2,    4,    3,    3,    1,
    1,    4,    5,    4,    1,    1,    1,    5,    6,    5,
    6,    5,    4,    5,    1,    1,    3,    4,    3,    2,
    2,    4,    5,    4,    5,    1,    2,    1,    2,    2,
    1,    3,    3,    4,    4,    6,    1,    1,    0,    1,
    0,    1,    2,    2,    2,    2,    2,    2,    2,    1,
    1,    1,    1,
};
short yydefred[] = {                                      1,
    0,    5,    0,   40,   49,   49,    0,    0,    6,   41,
    7,    9,    0,   42,   43,   44,    0,    0,    0,   51,
    0,   12,    4,  137,    0,    0,  115,    0,   49,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   10,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    8,    0,    0,    0,    0,    0,  105,  107,
  101,    0,    0,  138,    0,   46,    0,   50,    0,    0,
    5,  150,  153,  152,  151,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  148,    0,  121,    0,    0,    0,    0,
    0,    0,   55,    0,    0,   65,    0,  129,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   96,    0,
  144,  145,  146,  147,  149,    0,   34,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   88,
   89,    0,    0,    0,    0,    0,    0,    0,   11,   45,
   48,   47,   52,    0,   63,    0,    0,   99,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   36,
    0,  132,  133,    0,    0,    0,    0,    0,    0,   98,
    0,  119,    0,    0,    0,   95,   26,    0,    0,    0,
    0,    0,    0,   53,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   67,    0,   68,    0,    0,    0,    0,    0,    0,  117,
    0,    3,    0,  135,    0,    0,   29,    0,   30,    0,
    0,    0,   23,    0,   24,    0,    0,    0,  134,  143,
   66,    0,  122,    0,  124,    0,   97,    0,    0,    0,
    0,    0,    0,    0,  104,    0,  102,    0,  113,  118,
   64,    0,    0,    0,    0,   19,    0,    0,    0,    0,
    0,   61,  123,  125,  112,    0,  110,    0,    0,  103,
    0,  108,  114,  136,   27,   28,   21,    0,   22,    0,
   32,    0,  111,  109,   62,    0,    0,   31,    0,    0,
   20,   33,
};
short yydgoto[] = {                                       1,
    9,   10,   81,   17,   84,    3,   11,   12,   63,  188,
  253,   64,  195,   66,   67,   68,   69,   70,   71,   72,
  190,   80,  196,   86,  180,   74,  234,   13,  137,    2,
   14,   15,   16,
};
short yysindex[] = {                                      0,
    0,    0, -109,    0,    0,    0,  -47, -221,    0,    0,
    0,    0,  585,    0,    0,    0, -106, -207,    3,    0,
 2059,    0,    0,    0,   94,   94,    0,   27,    0,  -21,
  -13,  -12,  -10,   11, 2059,   31,   34,   38,   94, 1787,
 2059,  961, -173, 1853, 1029, 1960, 2059, 2059, 2059, 2059,
 2059, 1140,    0, 2059, 2059, 1237,   94,   94,   94,   94,
   94, -187,    0,   50,  232, 3898,  -65,  -59,    0,    0,
    0,   60,   56,    0,  -20,    0,  -26,    0,   50,   57,
    0,    0,    0,    0,    0, 2059,   78, 2059,  -20, 1853,
  -20, 1853,  -20, 1853,  -20, 1853,  -20, 1305,   79, 3898,
   80, 1416,  909,    0,   83,    0,  927,  -19,  927,   -5,
  -54, 2059,    0,    0,  -65,    0, 2059,    0,  927,  450,
  450,  450,  -83,  -83,   40,  -41,  450,  450,    0,  -90,
    0,    0,    0,    0,    0,  -20,    0, 2059, 1853, 1853,
 1853, 1853, 1853, 1853, 1853, 2059, 2059, 2059, 2059, 2059,
 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059, 2059,    0,
    0,  -22, 1853, 1853, 1853, 1853, 1853, 1512,    0,    0,
    0,    0,    0, -102,    0, 1853, 1351,    0, -210,   84,
 -187,  -39, -187,  -17, -167,   35, -167,   70,  365,    0,
 1853,    0,    0,   44,    5,   91, 1853, 1581, 1688,    0,
    9,    0,   50, 1853,   48,    0,    0, 3898, -210, -210,
 -210, -210, -155,    0,  -48,  746,  927, 1382,  338, 1360,
 3898,  469,  797, 1069, 1103, 1180, 1455,  450,  450, 1853,
    0, 1853,    0,  100,  -87,  -44,  -84,   76,  -77,    0,
   46,    0,  108,    0, 2059,  -20,    0,  -20,    0,  -20,
  -20,  106,    0,  -20,    0, 1853,  -20,   58,    0,    0,
    0,   81,    0,   87,    0,  111,    0,  -73, 1853,   28,
 2059,  122,  -68, 1853,    0,   43,    0,   47,    0,    0,
    0, 2945, -187, -187, -167,    0, 1853, -167,  101, -187,
  -20,    0,    0,    0,    0,  -62,    0, 4048,   49,    0,
  132,    0,    0,    0,    0,    0,    0,  116,    0, 1305,
    0, -187,    0,    0,    0,  -20,  134,    0, -167,  -20,
    0,    0,
};
short yyrindex[] = {                                      0,
    0,    0,  105,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  121,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 2263, 1892,    0,    0,    0,    0,
    0,    0,    0,    0, 2761, 2803,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    1,    0,  697,    4,  153, 2869, 2912,    0,    0,
    0, 2151,    0,    0,    0,    0,    0,    0, 2309,    0,
    0,    0,    0,    0,    0, 2351,    0,    0,    0,  141,
    0,    0,    0,    0,    0,    0,    0,  124,    0, 2544,
    0,    0,  143,    0, 2212,    0, 3721, 2869, 3753,    0,
    0, 2351,    0,  435,  526,    0,    0,    0, 3786, 3215,
 3255, 3311, 3062, 3174, 2413,    0, 3347, 3390,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 2610,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  857,    0,  143,    0,    0,    7,    0,
    1,    0,    1,    0,   53,    0,   53,    0,  126,    0,
    0,    0,    0,    0,  145,    0,    0,    0,    0,    0,
    0,    0, 2460,    0, 2719,    0,    0, 2586,   14,   16,
   18,   20,  -37,    0,    0, 1443, 3822, 1763,  390, 3649,
 2845,    0, 4045, 4002, 3970, 3865, 3685, 3504, 3606,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  128,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  143,    0,    0,    0,    0,    0,    0,
    0,    0,    1,    1,   53,    0,    0,   53,    0,    1,
    0,    0,    0,    0,    0,    0,    0,  311,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  147,
    0,    1,    0,    0,    0,    0,    0,    0,   53,    0,
    0,    0,
};
short yygindex[] = {                                      0,
    0,    0,    0,   23,  209,  109,    0,    0,    0, -121,
 -152,   -3,  345, 4241,  878,    0,    0,    0,    0,    0,
  178,  -32, -166,  494,  -64,    0,    0,    0, -113,    0,
    0,    0,    0,
};
#define YYTABLESIZE 4512
short yytable[] = {                                     205,
   25,  248,  206,   54,  201,  275,   54,  163,  277,  243,
  270,   20,  116,   58,  276,  279,   23,   79,   90,  295,
  199,   54,  242,  250,  300,  165,   92,   94,   18,   96,
  313,  167,  171,   25,  255,   21,   25,   25,   25,  145,
   25,   79,   25,   25,   13,   25,   58,   38,  260,   77,
   98,   89,   18,  175,   16,   54,   17,  164,   14,   25,
   15,   78,   13,  166,   25,   38,   88,  247,  232,  249,
  101,  165,   16,  102,   17,  254,   14,  103,   15,  202,
  143,  144,   79,  112,  259,   18,  280,  136,   18,   18,
   18,   25,   18,  138,   18,   18,   23,   18,  291,  168,
  230,   23,   23,  164,    2,  251,  252,  301,   79,   23,
   23,   18,   23,  203,  169,  173,   18,  176,  191,  200,
  192,  292,  198,   25,  246,   25,   25,  293,  256,   58,
  204,  261,  307,  267,  278,  309,  144,   39,  269,  274,
   39,   39,   39,   18,   39,  287,   39,   39,  281,   39,
   75,  294,  297,    4,    5,    6,  316,    7,    8,  310,
    4,    5,    6,   39,    7,    8,  321,  302,   39,  305,
  306,  303,  315,  314,  320,   18,  311,   18,   18,  139,
  299,   37,   35,  141,   13,  142,   37,   35,  317,  174,
   73,  289,    0,   59,    0,   39,   59,    0,  318,    0,
  143,  144,    0,  143,  144,    0,  143,  144,    0,   19,
   59,   59,    0,  143,  144,    0,   23,  143,  144,    0,
    0,   62,  143,  144,    0,   76,  162,   39,  143,  144,
   39,   54,   54,   54,   54,  231,  143,  144,   91,   93,
   95,   97,  143,  144,    0,   59,  143,  144,  106,  143,
  144,  143,  144,   54,  118,    0,   25,   25,   25,   25,
   25,   25,    0,   25,   25,   25,   25,   25,   25,   25,
   25,   25,   25,  143,  144,    0,   25,   25,    0,   25,
   25,   25,    0,  170,    0,  172,   25,   25,   25,   25,
   25,    0,    0,   25,   25,  143,  144,  178,    0,  181,
   25,  183,    0,  185,   25,  187,   25,   25,   18,   18,
   18,   18,   18,   18,    0,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   18,  143,  144,    0,   18,   18,
    0,   18,   18,   18,  143,  144,  143,  144,   18,   18,
   18,   18,   18,    0,  207,   18,   18,    0,  143,  144,
   82,   81,   18,    0,   81,   83,   18,   65,   18,   18,
   39,   39,   39,   39,   39,   39,  143,  144,   81,   81,
   39,  143,  144,   39,   39,   39,   39,  143,  144,    0,
   39,   39,    0,   39,   39,   39,  111,    0,  113,    0,
   39,   39,   39,   39,   39,    0,  126,   39,   39,    0,
  130,  143,  144,   81,   39,  257,  143,  144,   39,    0,
   39,   39,  143,  144,    0,    0,    0,    0,    0,    0,
    0,   59,   59,   59,   59,    0,    0,    0,  163,    0,
   71,    0,    0,   71,  179,    0,  182,    0,  184,    0,
  186,    0,  189,   59,   59,    0,  194,   71,   71,    0,
    0,    0,   71,    0,  283,    0,  284,    0,  285,  286,
  145,    0,  288,    0,    0,  290,    0,  150,    0,    0,
  150,  150,  150,    0,  150,  137,  150,  150,  137,  150,
    0,    0,   71,  209,  210,  211,  212,  213,  214,  215,
    0,    0,  137,  137,    0,    0,    0,  137,  150,  312,
  139,  140,  141,  142,    0,    0,    0,  235,  236,  237,
  238,  239,  241,    0,    0,    0,    0,    0,    0,   87,
    0,    0,  143,  144,  319,  137,  271,  137,  322,    0,
    0,  152,  104,    0,    0,  258,    0,    0,  117,    0,
  163,  262,  264,  266,    0,    0,    0,    0,  268,    0,
  131,  132,  133,  134,  135,    0,    0,  137,  151,  163,
  150,  151,  151,  151,    0,  151,  100,  151,  151,  100,
  151,    0,  145,    0,  272,    0,  273,    0,    0,   81,
   81,   81,   81,  100,  100,    0,    0,    0,  100,  151,
    0,  145,    0,    0,    0,    0,  197,    0,    0,    0,
  179,   81,   81,    0,    0,   81,    0,    0,    0,    0,
    0,    0,    0,  296,    0,    0,    0,   47,  100,    0,
   58,   60,   57,    0,   52,    0,   61,   55,    0,   54,
    0,  308,    0,  139,  140,  141,  142,    0,    0,  158,
    0,    0,  159,   53,    0,  160,  161,  162,   59,    0,
    0,  151,    0,    0,   65,  143,  144,    0,   71,   71,
   71,   71,    0,    0,    0,    0,    0,   71,    0,    0,
    0,   71,   71,   71,   71,   56,    0,    0,    0,    0,
   71,   71,    0,    0,   71,   71,   71,   71,   71,    0,
   71,  150,  150,  150,  150,  150,    0,    0,    0,    0,
  150,    0,    0,  137,  137,  137,  137,   23,    0,    0,
   48,  150,  137,  150,  150,  150,  137,  137,  137,  137,
  150,  150,  150,  150,  150,  137,  137,  150,  150,  137,
  137,  137,  137,  137,  150,  137,  137,   56,  150,  137,
  150,  150,  137,  137,  137,    0,  146,    0,    0,    0,
  147,  148,  149,  150,  159,   56,    0,  160,  161,  162,
    0,    0,    0,  151,  153,  154,  155,  156,    0,  157,
  158,    0,    0,  159,    0,    0,  160,  161,  162,    0,
    0,    0,  151,  151,  151,  151,  151,    0,    0,   56,
    0,  151,    0,    0,  100,  100,  100,  100,    0,    0,
    0,    0,  151,  100,  151,  151,  151,  100,  100,  100,
  100,  151,  151,  151,  151,  151,  100,  100,  151,  151,
  100,  100,  100,  100,  100,  151,  100,  100,    0,  151,
  100,  151,  151,  100,  100,  100,  163,    0,    0,    0,
   22,   24,   25,   26,   27,   28,    0,    0,    0,    0,
   29,    0,    0,   30,   31,   32,   33,    0,    0,    0,
   34,   35,    0,   36,   37,   38,    0,    0,  145,    0,
   39,   40,   41,   42,   43,    0,    0,   44,   45,    0,
    0,    0,    0,    0,   46,    0,    0,  163,   49,   39,
   50,   51,   39,   39,   39,    0,   39,    0,   39,   39,
    0,   39,   85,   85,    0,    0,    0,    0,    0,    0,
    0,   99,    0,    0,    0,   39,   85,  108,    0,  145,
   39,    0,  115,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   85,   85,   85,   85,   85,    0,
    0,   47,    0,    0,   58,   60,   57,   39,   52,    0,
   61,   55,    0,   54,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   56,   56,   56,   56,    0,
    0,    0,   59,    0,    0,    0,    0,    0,    0,   39,
  115,    0,   39,    0,    0,    0,    0,   56,   56,    0,
    0,    0,    0,   47,    0,    0,   58,   60,   57,   56,
   52,    0,   61,   55,    0,   54,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  163,    0,  110,
    0,    0,    0,    0,   59,    0,    0,  147,  148,  149,
  150,   23,    0,    0,   48,    0,    0,    0,    0,  233,
    0,  153,  154,  155,  156,    0,  157,  158,    0,  145,
  159,   56,    0,  160,  161,  162,    0,    0,    0,    0,
    0,   47,    0,    0,   58,   60,   57,    0,   52,    0,
   61,   55,    0,   54,    0,    0,    0,    0,  147,  148,
  149,  150,    0,    0,    0,    0,   48,    0,    0,    0,
    0,    0,   59,  154,  155,  156,    0,  157,  158,    0,
    0,  159,    0,    0,  160,  161,  162,    0,    0,    0,
    0,    0,   39,   39,   39,   39,   39,   39,    0,   56,
    0,    0,   39,    0,    0,   39,   39,   39,   39,    0,
    0,    0,   39,   39,    0,   39,   39,   39,    0,    0,
    0,    0,   39,   39,   39,   39,   39,    0,    0,   39,
   39,   23,    0,    0,   48,    0,   39,    0,    0,  163,
   39,    0,   39,   39,    0,  114,   25,   26,   27,   28,
   83,    0,   47,    0,   29,   58,   60,   57,    0,   52,
  125,   61,   55,    0,   54,   35,    0,   36,   37,   38,
    0,  145,    0,  163,   39,   40,   41,   42,   43,    0,
    0,   44,   45,   59,    0,    0,    0,    0,   46,    0,
  149,  150,   49,    0,   50,   51,    0,   24,   25,   26,
   27,   28,    0,    0,    0,  145,   29,  157,  158,    0,
   56,  159,    0,    0,  160,  161,  162,   35,    0,   36,
   37,   38,    0,    0,    0,    0,   39,   40,   41,   42,
   43,    0,    0,   44,   45,    0,    0,    0,    0,    0,
   46,    0,    0,    0,   49,   48,   50,   51,    0,   47,
  163,    0,   58,   60,   57,    0,   52,    0,   61,   55,
    0,   54,    0,    0,    0,  114,   25,   26,   27,   28,
   83,    0,    0,    0,   29,    0,    0,    0,    0,    0,
   59,    0,  145,    0,    0,   35,    0,   36,   37,   38,
    0,    0,    0,    0,   39,   40,   41,   42,   43,    0,
    0,    0,   45,    0,    0,    0,    0,   56,   46,  129,
    0,    0,   49,    0,   50,   51,    0,   47,    0,    0,
   58,   60,   57,    0,   52,    0,   61,   55,    0,   54,
  147,  148,  149,  150,    0,    0,    0,    0,    0,    0,
    0,    0,   48,    0,    0,    0,  155,  156,   59,  157,
  158,    0,    0,  159,    0,    0,  160,  161,  162,    0,
    0,    0,    0,    0,  147,  148,  149,  150,    0,    0,
    0,  244,    0,    0,  245,   56,   24,   25,   26,   27,
   28,  156,    0,  157,  158,   29,    0,  159,    0,    0,
  160,  161,  162,  152,    0,    0,   35,    0,   36,   37,
   38,    0,    0,    0,    0,   39,   40,   41,   42,   43,
   48,    0,   44,   45,    0,    0,    0,    0,    0,   46,
    0,  163,    0,   49,    0,   50,   51,    0,   47,    0,
  163,   58,   60,   57,    0,   52,  193,   61,   55,    0,
   54,  147,  148,  149,  150,    0,    0,    0,    0,    0,
    0,    0,  163,  145,    0,    0,    0,    0,    0,   59,
  157,  158,  145,   78,  159,    0,   78,  160,  161,  162,
    0,    0,    0,   24,   25,   26,   27,   28,    0,    0,
   78,   78,   29,    0,  145,   78,   56,    0,    0,    0,
    0,    0,    0,   35,    0,   36,   37,   38,    0,    0,
    0,    0,   39,   40,   41,   42,   43,    0,    0,   44,
   45,    0,    0,    0,    0,   78,   46,    0,    0,    0,
   49,   48,   50,   51,   47,  163,    0,   58,   60,   57,
    0,   52,  240,   61,   55,    0,   54,    0,    0,    0,
   22,   24,   25,   26,   27,   28,    0,    0,    0,    0,
   29,    0,    0,    0,    0,   59,    0,  145,    0,    0,
    0,   35,    0,   36,   37,   38,    0,    0,    0,    0,
   39,   40,   41,   42,   43,    0,    0,   44,   45,    0,
    0,    0,   56,    0,   46,    0,    0,    0,   49,    0,
   50,   51,    0,   47,    0,    0,   58,   60,   57,    0,
   52,  263,   61,   55,    0,   54,    0,    0,  146,    0,
    0,    0,  147,  148,  149,  150,    0,   48,    0,    0,
    0,    0,    0,  149,   59,  151,  153,  154,  155,  156,
    0,  157,  158,    0,    0,  159,    0,    0,  160,  161,
  162,  158,    0,  147,  159,  149,  150,  160,  161,  162,
    0,   56,   24,   25,   26,   27,   28,    0,    0,    0,
    0,   29,  157,  158,    0,    0,  159,    0,    0,  160,
  161,  162,   35,    0,   36,   37,   38,    0,    0,    0,
    0,   39,   40,   41,   42,   43,   48,    0,   44,   45,
    0,   78,   78,   78,   78,   46,    0,    0,    0,   49,
   47,   50,   51,   58,   60,   57,    0,   52,  265,   61,
   55,    0,   54,   78,   78,    0,    0,   78,  149,  150,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   59,    0,    0,    0,    0,  158,    0,    0,  159,
    0,    0,  160,  161,  162,    0,    0,    0,   24,   25,
   26,   27,   28,    0,    0,    0,    0,   29,   56,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   35,    0,
   36,   37,   38,    0,    0,    0,    0,   39,   40,   41,
   42,   43,    0,   75,   44,   45,   75,    0,    0,    0,
    0,   46,    0,   48,    0,   49,    0,   50,   51,   47,
   75,   75,   58,   60,   57,   75,   52,    0,   61,   55,
    0,   54,    0,    0,    0,    0,    0,   24,   25,   26,
   27,   28,    0,    0,    0,    0,   29,    0,    0,    0,
   59,    0,    0,    0,    0,   75,    0,   35,    0,   36,
   37,   38,    0,    0,    0,    0,   39,   40,   41,   42,
   43,    0,    0,   44,   45,    0,    0,   56,    0,    0,
   46,    0,    0,    0,   49,   47,   50,   51,   58,   60,
   57,    0,   52,    0,   61,   55,    0,   54,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   23,
    0,    0,   48,    0,    0,    0,   59,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  131,    0,    0,  131,    0,    0,    0,    0,
    0,    0,    0,   56,   24,   25,   26,   27,   28,  131,
  131,    0,    0,   29,  131,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   35,    0,   36,   37,   38,    0,
    0,    0,    0,   39,   40,   41,   42,   43,   48,    0,
   44,   45,  131,    0,  131,    0,    0,   46,    0,    0,
    0,   49,   47,   50,   51,   58,   60,   57,    0,   52,
    0,   61,   55,    0,   54,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  131,    0,    0,    0,    0,    0,
    0,    0,    0,   59,    0,    0,    0,    0,    0,    0,
    0,   75,   75,   75,   75,    0,    0,    0,    0,    0,
   75,    0,    0,  105,   25,   26,   27,   28,    0,    0,
   56,    0,   29,   75,   75,    0,    0,   75,   75,   75,
   75,   75,    0,   35,    0,   36,   37,   38,    0,    0,
    0,    0,   39,   40,   41,   42,   43,    0,    0,    0,
   45,    0,   23,    0,    0,   48,   46,    0,    0,    0,
   49,   47,   50,   51,   58,   60,   57,    0,   52,    0,
   61,   55,    0,   54,    0,    0,    0,    0,    0,   24,
   25,   26,   27,   28,    0,    0,    0,    0,   29,    0,
    0,    0,   59,    0,    0,    0,    0,    0,    0,   35,
    0,   36,   37,   38,    0,    0,    0,    0,   39,   40,
   41,   42,   43,    0,    0,   44,   45,    0,    0,   56,
    0,    0,   46,    0,    0,    0,   49,    0,   50,   51,
  131,  131,  131,  131,    0,    0,    0,    0,    0,  131,
    0,    0,    0,  131,  131,  131,  131,    0,    0,    0,
    0,    0,  131,  131,   48,    0,  131,  131,  131,  131,
  131,  116,  131,  131,  116,    0,  131,    0,    0,  131,
  131,  131,    0,    0,    0,    0,    0,    0,  116,  116,
    0,    0,    0,  116,    0,    0,   24,   25,   26,   27,
   28,    0,    0,    0,    0,   29,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   35,    0,   36,   37,
   38,  116,    0,  116,    0,   39,   40,   41,   42,   43,
    0,    0,  137,   45,    0,  137,    0,    0,    0,   46,
    0,    0,    0,   49,    0,   50,   51,    0,    0,  137,
  137,    0,    0,  116,  137,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  137,  126,  137,    0,  126,    0,    0,    0,
    0,    0,    0,    0,    0,   24,   25,   26,   27,   28,
  126,  126,    0,    0,   29,  126,    0,    0,    0,    0,
    0,    0,    0,    0,  137,   35,    0,   36,   37,   38,
    0,    0,    0,    0,   39,   40,   41,   42,   43,  140,
    0,    0,   45,    0,    0,  126,    0,    0,   46,    0,
    0,    0,   49,    0,   50,   51,  140,  140,    0,    0,
    0,  140,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  126,    0,    0,    0,    0,
    0,  139,    0,    0,  139,    0,    0,    0,    0,  140,
    0,  140,    0,    0,    0,    0,    0,    0,  139,  139,
    0,    0,    0,  139,    0,    0,    0,    0,    0,  116,
  116,  116,  116,    0,    0,    0,    0,    0,  116,    0,
    0,  140,  116,  116,  116,  116,    0,    0,    0,    0,
    0,  116,  116,  139,    0,  116,  116,  116,  116,  116,
    0,  116,  116,   94,    0,  116,   94,    0,  116,  116,
  116,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   94,   94,    0,  139,    0,   94,    0,    0,    0,    0,
  137,  137,  137,  137,    0,    0,    0,    0,    0,  137,
    0,    0,    0,  137,  137,  137,  137,    0,    0,    0,
   60,    0,  137,  137,    0,   94,  137,  137,  137,  137,
  137,    0,  137,  137,    0,    0,  137,   60,   60,  137,
  137,  137,   60,    0,    0,    0,    0,    0,    0,    0,
    0,  126,  126,  126,  126,   94,    0,    0,    0,    0,
  126,    0,    0,    0,  126,  126,  126,  126,    0,    0,
   60,    0,   60,  126,  126,    0,    0,  126,  126,  126,
  126,  126,    0,  126,  126,    0,    0,  126,    0,    0,
  126,  126,  126,    0,    0,    0,    0,  140,  140,  140,
  140,    0,   60,    0,  127,    0,  140,  127,    0,    0,
  140,  140,  140,  140,    0,    0,    0,    0,    0,  140,
  140,  127,  127,  140,  140,  140,  140,  140,    0,  140,
  140,    0,    0,  140,    0,    0,  140,  140,  140,  139,
  139,  139,  139,    0,    0,    0,   58,    0,  139,   58,
    0,    0,  139,  139,  139,  139,  127,    0,    0,    0,
    0,  139,  139,   58,   58,  139,  139,  139,  139,  139,
   57,  139,  139,   57,    0,  139,    0,    0,  139,  139,
  139,    0,    0,    0,    0,    0,    0,   57,   57,    0,
    0,    0,   57,    0,    0,    0,    0,    0,   58,    0,
    0,   94,   94,   94,   94,    0,    0,    0,    0,    0,
   94,    0,    0,    0,   94,   94,   94,   94,    0,    0,
    0,    0,   57,   94,   94,    0,    0,   94,   94,   94,
   94,   94,    0,   94,   94,    0,    0,   94,    0,    0,
   94,   94,   94,    0,    0,    0,    0,    0,   60,   60,
   60,   60,   57,    0,    0,    0,    0,   60,    0,    0,
    0,   60,   60,   60,   60,    0,    0,    0,    0,    0,
   60,   60,    0,    0,   60,   60,   60,   60,   60,   93,
   60,   60,   93,    0,   60,    0,    0,   60,   60,   60,
    0,    0,    0,    0,    0,    0,   93,   93,    0,    0,
    0,   93,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  139,    0,    0,  139,    0,    0,    0,    0,    0,
    0,   93,  127,  127,  127,  127,    0,    0,  139,  139,
    0,    0,    0,  139,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  127,  127,    0,    0,    0,    0,
    0,   93,    0,  128,    0,    0,  128,    0,    0,    0,
    0,    0,    0,  139,   58,   58,   58,   58,    0,    0,
  128,  128,    0,    0,    0,  128,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   58,   58,   57,   57,
   57,   57,    0,    0,    0,   69,    0,   57,   69,    0,
    0,   57,   57,   57,   57,  128,    0,    0,    0,    0,
   57,   57,   69,   69,   57,   57,   57,   57,   57,  100,
   57,   57,  100,    0,   57,    0,    0,   57,   57,   57,
    0,    0,    0,    0,    0,    0,  100,  100,    0,    0,
    0,  100,    0,    0,    0,    0,    0,   69,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  106,    0,    0,  106,    0,    0,    0,    0,
    0,  100,    0,    0,    0,    0,    0,    0,    0,  106,
  106,    0,    0,    0,  106,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  304,    0,   93,   93,   93,
   93,    0,    0,    0,    0,    0,   93,    0,    0,    0,
   93,   93,   93,   93,  106,    0,    0,  152,    0,   93,
   93,    0,    0,   93,   93,   93,   93,   93,    0,   93,
   93,    0,    0,   93,    0,    0,   93,   93,   93,  139,
  139,  139,  139,    0,    0,  163,    0,    0,  139,    0,
    0,    0,  139,  139,  139,  139,    0,    0,    0,    0,
    0,  139,  139,    0,    0,  139,  139,  139,  139,  139,
    0,  139,  139,    0,    0,  139,    0,  145,  139,  139,
  139,  128,  128,  128,  128,    0,    0,    0,    0,    0,
  128,    0,    0,    0,  128,  128,  128,  128,    0,    0,
    0,    0,    0,  128,  128,    0,    0,  128,  128,  128,
  128,  128,   90,  128,  128,   90,    0,  128,    0,    0,
  128,  128,  128,   69,   69,   69,   69,    0,    0,   90,
   90,    0,    0,    0,   90,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   69,   69,  100,  100,  100,
  100,    0,    0,    0,    0,    0,  100,    0,    0,    0,
  100,  100,  100,  100,   90,    0,    0,    0,    0,  100,
  100,    0,    0,  100,  100,  100,  100,  100,    0,  100,
  100,    0,    0,  100,    0,    0,  100,  100,  100,    0,
  106,  106,  106,  106,    0,    0,    0,    0,    0,  106,
    0,    0,    0,  106,  106,  106,  106,    0,    0,    0,
    0,    0,  106,  106,    0,    0,  106,  106,  106,  106,
  106,    0,  106,  106,   91,    0,  106,   91,    0,  106,
  106,  106,  146,    0,    0,    0,  147,  148,  149,  150,
    0,   91,   91,    0,    0,    0,   91,    0,    0,  151,
  153,  154,  155,  156,    0,  157,  158,    0,    0,  159,
    0,    0,  160,  161,  162,   85,    0,    0,   85,    0,
    0,    0,    0,    0,    0,    0,   91,    0,    0,    0,
    0,    0,   85,   85,    0,    0,    0,   85,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   86,    0,    0,   86,    0,
    0,    0,    0,    0,    0,    0,    0,   85,    0,    0,
    0,    0,   86,   86,    0,    0,    0,   86,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   90,   90,   90,   90,    0,    0,    0,    0,    0,   90,
    0,    0,    0,   90,   90,   90,   90,   86,    0,    0,
    0,   87,   90,   90,   87,    0,   90,   90,   90,   90,
   90,    0,   90,   90,    0,    0,   90,    0,   87,   87,
    0,    0,    0,   87,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   83,    0,    0,
   83,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   87,   83,   83,    0,    0,    0,   83,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   84,    0,    0,   84,    0,    0,    0,    0,    0,   83,
    0,    0,   91,   91,   91,   91,    0,   84,   84,    0,
    0,   91,   84,    0,    0,   91,   91,   91,   91,    0,
    0,    0,    0,    0,   91,   91,    0,    0,   91,   91,
   91,   91,   91,    0,   91,   91,    0,    0,   91,    0,
    0,    0,   84,   85,   85,   85,   85,    0,    0,    0,
    0,    0,   85,    0,    0,    0,   85,   85,   85,   85,
    0,    0,    0,    0,    0,   85,   85,    0,    0,   85,
   85,   85,   85,   85,    0,   85,   85,    0,    0,    0,
    0,    0,    0,   86,   86,   86,   86,    0,    0,    0,
    0,    0,   86,    0,    0,    0,   86,   86,   86,   86,
    0,    0,    0,    0,   82,   86,   86,   82,    0,   86,
   86,   86,   86,   86,    0,   86,   86,    0,    0,    0,
    0,   82,   82,    0,    0,    0,   82,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   87,
   87,   87,   87,    0,    0,    0,    0,    0,   87,    0,
    0,    0,   87,   87,   87,   87,   82,    0,    0,    0,
    0,   87,   87,    0,    0,   87,   87,   87,   87,   87,
    0,   87,   87,    0,    0,   83,   83,   83,   83,    0,
    0,    0,    0,    0,   83,    0,    0,    0,   83,   83,
   83,   83,    0,    0,    0,    0,    0,   83,   83,    0,
    0,   83,   83,   83,   83,   83,   70,   83,   83,   70,
    0,    0,    0,    0,    0,    0,    0,    0,   84,   84,
   84,   84,    0,   70,   70,    0,    0,   84,   70,    0,
    0,   84,   84,   84,   84,    0,    0,    0,    0,    0,
   84,   84,    0,    0,   84,   84,   84,   84,   84,   72,
   84,   84,   72,    0,    0,    0,    0,    0,   70,    0,
    0,    0,    0,    0,    0,    0,   72,   72,    0,    0,
    0,   72,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   73,    0,    0,   73,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   72,   73,   73,    0,    0,    0,   73,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  120,    0,    0,  120,    0,    0,    0,    0,    0,
    0,    0,   82,   82,   82,   82,    0,   73,  120,  120,
    0,   82,    0,  120,    0,   82,   82,   82,   82,    0,
    0,    0,    0,   92,   82,   82,   92,    0,   82,   82,
   82,   82,   82,    0,   82,   82,    0,    0,    0,    0,
   92,   92,    0,  120,    0,   92,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  130,    0,    0,  130,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  130,  130,   92,    0,    0,  130,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   74,    0,    0,   74,    0,    0,    0,    0,
    0,    0,    0,    0,   70,   70,   70,   70,  130,   74,
   74,    0,    0,   70,   74,    0,    0,   70,   70,   70,
   70,    0,    0,    0,    0,    0,   70,   70,    0,    0,
   70,   70,   70,   70,   70,   76,   70,   70,   76,    0,
    0,    0,    0,    0,   74,    0,    0,   72,   72,   72,
   72,    0,   76,   76,    0,    0,   72,   76,    0,    0,
   72,   72,    0,   72,    0,    0,    0,    0,    0,   72,
   72,    0,    0,   72,   72,   72,   72,   72,    0,   72,
    0,    0,    0,   73,   73,   73,   73,   76,    0,    0,
  152,    0,   73,    0,    0,    0,   73,   73,    0,    0,
    0,    0,    0,    0,    0,   73,   73,    0,    0,   73,
   73,   73,   73,   73,    0,   73,    0,    0,  163,  120,
  120,  120,  120,    0,    0,    0,    0,    0,  120,    0,
    0,    0,  120,  120,    0,    0,    0,    0,    0,    0,
   77,  120,  120,   77,    0,  120,  120,  120,  120,  120,
  145,   92,   92,   92,   92,    0,    0,   77,   77,    0,
   92,    0,   77,    0,   92,   92,    0,    0,    0,    0,
    0,    0,   79,   92,   92,   79,    0,   92,   92,   92,
   92,   92,    0,    0,  130,  130,  130,  130,    0,   79,
   79,    0,   77,  130,   79,    0,    0,  130,  130,    0,
    0,    0,    0,    0,    0,    0,  130,  130,    0,    0,
  130,  130,  130,  130,  130,   80,    0,    0,   80,    0,
   74,   74,   74,   74,   79,    0,    0,    0,    0,   74,
    0,    0,   80,   80,   74,    0,    0,   80,    0,    0,
  152,    0,   74,   74,    0,    0,   74,   74,   74,   74,
   74,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   76,   76,   76,   76,   80,  163,    0,
    0,    0,   76,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   76,   76,    0,    0,   76,
   76,   76,   76,   76,    0,    0,    0,    0,    0,    0,
  145,    0,    0,    0,    0,  146,    0,    0,    0,  147,
  148,  149,  150,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  151,  153,  154,  155,  156,    0,  157,  158,
    0,    0,  159,    0,    0,  160,  161,  162,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   77,   77,
   77,   77,    0,    0,    0,    0,    0,   77,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   77,   77,    0,    0,   77,   77,   77,   77,    0,    0,
   79,   79,   79,   79,    0,  100,    0,    0,    0,   79,
  107,  109,    0,    0,    0,    0,  119,  120,  121,  122,
  123,  124,   79,   79,  127,  128,   79,   79,   79,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   80,   80,   80,   80,    0,    0,    0,
    0,    0,   80,    0,    0,  146,    0,    0,  177,  147,
  148,  149,  150,    0,    0,   80,   80,    0,    0,   80,
   80,    0,    0,  153,  154,  155,  156,    0,  157,  158,
    0,    0,  159,    0,    0,  160,  161,  162,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  208,    0,
    0,    0,    0,    0,    0,    0,  216,  217,  218,  219,
  220,  221,  222,  223,  224,  225,  226,  227,  228,  229,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  282,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  298,
};
short yycheck[] = {                                      41,
    0,   41,   93,   41,   59,   93,   44,   91,   93,  176,
   59,   59,   45,   36,   59,   93,  123,   21,   40,   93,
   40,   59,  125,   41,   93,   91,   40,   40,    6,   40,
   93,   91,   59,   33,  187,  257,   36,   37,   38,  123,
   40,   45,   42,   43,   41,   45,   36,   41,   44,  257,
   40,   29,    0,   86,   41,   93,   41,  123,   41,   59,
   41,   59,   59,  123,   64,   59,   40,  181,   91,  183,
   40,   91,   59,   40,   59,   41,   59,   40,   59,  112,
  291,  292,   86,  257,   41,   33,   41,  275,   36,   37,
   38,   91,   40,   44,   42,   43,  123,   45,   41,   40,
  123,  123,  123,  123,    0,  273,  274,  274,  112,  123,
  123,   59,  123,  117,   59,   59,   64,   40,   40,  125,
   41,   41,   40,  123,   41,  125,  126,   41,   59,   36,
   91,   41,  285,  125,   59,  288,  292,   33,   91,   40,
   36,   37,   38,   91,   40,   40,   42,   43,   41,   45,
  257,   41,  125,  263,  264,  265,   41,  267,  268,   59,
  263,  264,  265,   59,  267,  268,  319,  125,   64,  283,
  284,  125,   41,  125,   41,  123,  290,  125,  126,   59,
   59,   41,   59,   41,   59,   41,   59,   41,  310,   81,
   13,  256,   -1,   41,   -1,   91,   44,   -1,  312,   -1,
  291,  292,   -1,  291,  292,   -1,  291,  292,   -1,  257,
   58,   59,   -1,  291,  292,   -1,  123,  291,  292,   -1,
   -1,   13,  291,  292,   -1,   17,  310,  123,  291,  292,
  126,  269,  270,  271,  272,  258,  291,  292,   30,   31,
   32,   33,  291,  292,   -1,   93,  291,  292,   40,  291,
  292,  291,  292,  291,   46,   -1,  256,  257,  258,  259,
  260,  261,   -1,  263,  264,  265,  266,  267,  268,  269,
  270,  271,  272,  291,  292,   -1,  276,  277,   -1,  279,
  280,  281,   -1,   75,   -1,   77,  286,  287,  288,  289,
  290,   -1,   -1,  293,  294,  291,  292,   89,   -1,   91,
  300,   93,   -1,   95,  304,   97,  306,  307,  256,  257,
  258,  259,  260,  261,   -1,  263,  264,  265,  266,  267,
  268,  269,  270,  271,  272,  291,  292,   -1,  276,  277,
   -1,  279,  280,  281,  291,  292,  291,  292,  286,  287,
  288,  289,  290,   -1,  136,  293,  294,   -1,  291,  292,
  257,   41,  300,   -1,   44,  262,  304,   13,  306,  307,
  256,  257,  258,  259,  260,  261,  291,  292,   58,   59,
  266,  291,  292,  269,  270,  271,  272,  291,  292,   -1,
  276,  277,   -1,  279,  280,  281,   42,   -1,   44,   -1,
  286,  287,  288,  289,  290,   -1,   52,  293,  294,   -1,
   56,  291,  292,   93,  300,   41,  291,  292,  304,   -1,
  306,  307,  291,  292,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  269,  270,  271,  272,   -1,   -1,   -1,   91,   -1,
   41,   -1,   -1,   44,   90,   -1,   92,   -1,   94,   -1,
   96,   -1,   98,  291,  292,   -1,  102,   58,   59,   -1,
   -1,   -1,   63,   -1,  246,   -1,  248,   -1,  250,  251,
  123,   -1,  254,   -1,   -1,  257,   -1,   33,   -1,   -1,
   36,   37,   38,   -1,   40,   41,   42,   43,   44,   45,
   -1,   -1,   93,  139,  140,  141,  142,  143,  144,  145,
   -1,   -1,   58,   59,   -1,   -1,   -1,   63,   64,  291,
  269,  270,  271,  272,   -1,   -1,   -1,  163,  164,  165,
  166,  167,  168,   -1,   -1,   -1,   -1,   -1,   -1,   26,
   -1,   -1,  291,  292,  316,   91,   58,   93,  320,   -1,
   -1,   63,   39,   -1,   -1,  191,   -1,   -1,   45,   -1,
   91,  197,  198,  199,   -1,   -1,   -1,   -1,  204,   -1,
   57,   58,   59,   60,   61,   -1,   -1,  123,   33,   91,
  126,   36,   37,   38,   -1,   40,   41,   42,   43,   44,
   45,   -1,  123,   -1,  230,   -1,  232,   -1,   -1,  269,
  270,  271,  272,   58,   59,   -1,   -1,   -1,   63,   64,
   -1,  123,   -1,   -1,   -1,   -1,  103,   -1,   -1,   -1,
  256,  291,  292,   -1,   -1,  295,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  269,   -1,   -1,   -1,   33,   93,   -1,
   36,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
   -1,  287,   -1,  269,  270,  271,  272,   -1,   -1,  302,
   -1,   -1,  305,   59,   -1,  308,  309,  310,   64,   -1,
   -1,  126,   -1,   -1,  310,  291,  292,   -1,  269,  270,
  271,  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,
   -1,  282,  283,  284,  285,   91,   -1,   -1,   -1,   -1,
  291,  292,   -1,   -1,  295,  296,  297,  298,  299,   -1,
  301,  257,  258,  259,  260,  261,   -1,   -1,   -1,   -1,
  266,   -1,   -1,  269,  270,  271,  272,  123,   -1,   -1,
  126,  277,  278,  279,  280,  281,  282,  283,  284,  285,
  286,  287,  288,  289,  290,  291,  292,  293,  294,  295,
  296,  297,  298,  299,  300,  301,  302,   41,  304,  305,
  306,  307,  308,  309,  310,   -1,  278,   -1,   -1,   -1,
  282,  283,  284,  285,  305,   59,   -1,  308,  309,  310,
   -1,   -1,   -1,  295,  296,  297,  298,  299,   -1,  301,
  302,   -1,   -1,  305,   -1,   -1,  308,  309,  310,   -1,
   -1,   -1,  257,  258,  259,  260,  261,   -1,   -1,   93,
   -1,  266,   -1,   -1,  269,  270,  271,  272,   -1,   -1,
   -1,   -1,  277,  278,  279,  280,  281,  282,  283,  284,
  285,  286,  287,  288,  289,  290,  291,  292,  293,  294,
  295,  296,  297,  298,  299,  300,  301,  302,   -1,  304,
  305,  306,  307,  308,  309,  310,   91,   -1,   -1,   -1,
  256,  257,  258,  259,  260,  261,   -1,   -1,   -1,   -1,
  266,   -1,   -1,  269,  270,  271,  272,   -1,   -1,   -1,
  276,  277,   -1,  279,  280,  281,   -1,   -1,  123,   -1,
  286,  287,  288,  289,  290,   -1,   -1,  293,  294,   -1,
   -1,   -1,   -1,   -1,  300,   -1,   -1,   91,  304,   33,
  306,  307,   36,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   25,   26,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   34,   -1,   -1,   -1,   59,   39,   40,   -1,  123,
   64,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   57,   58,   59,   60,   61,   -1,
   -1,   33,   -1,   -1,   36,   37,   38,   91,   40,   -1,
   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  269,  270,  271,  272,   -1,
   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,  123,
  103,   -1,  126,   -1,   -1,   -1,   -1,  291,  292,   -1,
   -1,   -1,   -1,   33,   -1,   -1,   36,   37,   38,   91,
   40,   -1,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   91,   -1,   59,
   -1,   -1,   -1,   -1,   64,   -1,   -1,  282,  283,  284,
  285,  123,   -1,   -1,  126,   -1,   -1,   -1,   -1,  162,
   -1,  296,  297,  298,  299,   -1,  301,  302,   -1,  123,
  305,   91,   -1,  308,  309,  310,   -1,   -1,   -1,   -1,
   -1,   33,   -1,   -1,   36,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   -1,   -1,   -1,   -1,  282,  283,
  284,  285,   -1,   -1,   -1,   -1,  126,   -1,   -1,   -1,
   -1,   -1,   64,  297,  298,  299,   -1,  301,  302,   -1,
   -1,  305,   -1,   -1,  308,  309,  310,   -1,   -1,   -1,
   -1,   -1,  256,  257,  258,  259,  260,  261,   -1,   91,
   -1,   -1,  266,   -1,   -1,  269,  270,  271,  272,   -1,
   -1,   -1,  276,  277,   -1,  279,  280,  281,   -1,   -1,
   -1,   -1,  286,  287,  288,  289,  290,   -1,   -1,  293,
  294,  123,   -1,   -1,  126,   -1,  300,   -1,   -1,   91,
  304,   -1,  306,  307,   -1,  257,  258,  259,  260,  261,
  262,   -1,   33,   -1,  266,   36,   37,   38,   -1,   40,
   41,   42,   43,   -1,   45,  277,   -1,  279,  280,  281,
   -1,  123,   -1,   91,  286,  287,  288,  289,  290,   -1,
   -1,  293,  294,   64,   -1,   -1,   -1,   -1,  300,   -1,
  284,  285,  304,   -1,  306,  307,   -1,  257,  258,  259,
  260,  261,   -1,   -1,   -1,  123,  266,  301,  302,   -1,
   91,  305,   -1,   -1,  308,  309,  310,  277,   -1,  279,
  280,  281,   -1,   -1,   -1,   -1,  286,  287,  288,  289,
  290,   -1,   -1,  293,  294,   -1,   -1,   -1,   -1,   -1,
  300,   -1,   -1,   -1,  304,  126,  306,  307,   -1,   33,
   91,   -1,   36,   37,   38,   -1,   40,   -1,   42,   43,
   -1,   45,   -1,   -1,   -1,  257,  258,  259,  260,  261,
  262,   -1,   -1,   -1,  266,   -1,   -1,   -1,   -1,   -1,
   64,   -1,  123,   -1,   -1,  277,   -1,  279,  280,  281,
   -1,   -1,   -1,   -1,  286,  287,  288,  289,  290,   -1,
   -1,   -1,  294,   -1,   -1,   -1,   -1,   91,  300,   93,
   -1,   -1,  304,   -1,  306,  307,   -1,   33,   -1,   -1,
   36,   37,   38,   -1,   40,   -1,   42,   43,   -1,   45,
  282,  283,  284,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  126,   -1,   -1,   -1,  298,  299,   64,  301,
  302,   -1,   -1,  305,   -1,   -1,  308,  309,  310,   -1,
   -1,   -1,   -1,   -1,  282,  283,  284,  285,   -1,   -1,
   -1,   41,   -1,   -1,   44,   91,  257,  258,  259,  260,
  261,  299,   -1,  301,  302,  266,   -1,  305,   -1,   -1,
  308,  309,  310,   63,   -1,   -1,  277,   -1,  279,  280,
  281,   -1,   -1,   -1,   -1,  286,  287,  288,  289,  290,
  126,   -1,  293,  294,   -1,   -1,   -1,   -1,   -1,  300,
   -1,   91,   -1,  304,   -1,  306,  307,   -1,   33,   -1,
   91,   36,   37,   38,   -1,   40,   41,   42,   43,   -1,
   45,  282,  283,  284,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,  123,   -1,   -1,   -1,   -1,   -1,   64,
  301,  302,  123,   41,  305,   -1,   44,  308,  309,  310,
   -1,   -1,   -1,  257,  258,  259,  260,  261,   -1,   -1,
   58,   59,  266,   -1,  123,   63,   91,   -1,   -1,   -1,
   -1,   -1,   -1,  277,   -1,  279,  280,  281,   -1,   -1,
   -1,   -1,  286,  287,  288,  289,  290,   -1,   -1,  293,
  294,   -1,   -1,   -1,   -1,   93,  300,   -1,   -1,   -1,
  304,  126,  306,  307,   33,   91,   -1,   36,   37,   38,
   -1,   40,   41,   42,   43,   -1,   45,   -1,   -1,   -1,
  256,  257,  258,  259,  260,  261,   -1,   -1,   -1,   -1,
  266,   -1,   -1,   -1,   -1,   64,   -1,  123,   -1,   -1,
   -1,  277,   -1,  279,  280,  281,   -1,   -1,   -1,   -1,
  286,  287,  288,  289,  290,   -1,   -1,  293,  294,   -1,
   -1,   -1,   91,   -1,  300,   -1,   -1,   -1,  304,   -1,
  306,  307,   -1,   33,   -1,   -1,   36,   37,   38,   -1,
   40,   41,   42,   43,   -1,   45,   -1,   -1,  278,   -1,
   -1,   -1,  282,  283,  284,  285,   -1,  126,   -1,   -1,
   -1,   -1,   -1,  284,   64,  295,  296,  297,  298,  299,
   -1,  301,  302,   -1,   -1,  305,   -1,   -1,  308,  309,
  310,  302,   -1,  282,  305,  284,  285,  308,  309,  310,
   -1,   91,  257,  258,  259,  260,  261,   -1,   -1,   -1,
   -1,  266,  301,  302,   -1,   -1,  305,   -1,   -1,  308,
  309,  310,  277,   -1,  279,  280,  281,   -1,   -1,   -1,
   -1,  286,  287,  288,  289,  290,  126,   -1,  293,  294,
   -1,  269,  270,  271,  272,  300,   -1,   -1,   -1,  304,
   33,  306,  307,   36,   37,   38,   -1,   40,   41,   42,
   43,   -1,   45,  291,  292,   -1,   -1,  295,  284,  285,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   64,   -1,   -1,   -1,   -1,  302,   -1,   -1,  305,
   -1,   -1,  308,  309,  310,   -1,   -1,   -1,  257,  258,
  259,  260,  261,   -1,   -1,   -1,   -1,  266,   91,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  277,   -1,
  279,  280,  281,   -1,   -1,   -1,   -1,  286,  287,  288,
  289,  290,   -1,   41,  293,  294,   44,   -1,   -1,   -1,
   -1,  300,   -1,  126,   -1,  304,   -1,  306,  307,   33,
   58,   59,   36,   37,   38,   63,   40,   -1,   42,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,  257,  258,  259,
  260,  261,   -1,   -1,   -1,   -1,  266,   -1,   -1,   -1,
   64,   -1,   -1,   -1,   -1,   93,   -1,  277,   -1,  279,
  280,  281,   -1,   -1,   -1,   -1,  286,  287,  288,  289,
  290,   -1,   -1,  293,  294,   -1,   -1,   91,   -1,   -1,
  300,   -1,   -1,   -1,  304,   33,  306,  307,   36,   37,
   38,   -1,   40,   -1,   42,   43,   -1,   45,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,
   -1,   -1,  126,   -1,   -1,   -1,   64,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   91,  257,  258,  259,  260,  261,   58,
   59,   -1,   -1,  266,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  277,   -1,  279,  280,  281,   -1,
   -1,   -1,   -1,  286,  287,  288,  289,  290,  126,   -1,
  293,  294,   91,   -1,   93,   -1,   -1,  300,   -1,   -1,
   -1,  304,   33,  306,  307,   36,   37,   38,   -1,   40,
   -1,   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  269,  270,  271,  272,   -1,   -1,   -1,   -1,   -1,
  278,   -1,   -1,  257,  258,  259,  260,  261,   -1,   -1,
   91,   -1,  266,  291,  292,   -1,   -1,  295,  296,  297,
  298,  299,   -1,  277,   -1,  279,  280,  281,   -1,   -1,
   -1,   -1,  286,  287,  288,  289,  290,   -1,   -1,   -1,
  294,   -1,  123,   -1,   -1,  126,  300,   -1,   -1,   -1,
  304,   33,  306,  307,   36,   37,   38,   -1,   40,   -1,
   42,   43,   -1,   45,   -1,   -1,   -1,   -1,   -1,  257,
  258,  259,  260,  261,   -1,   -1,   -1,   -1,  266,   -1,
   -1,   -1,   64,   -1,   -1,   -1,   -1,   -1,   -1,  277,
   -1,  279,  280,  281,   -1,   -1,   -1,   -1,  286,  287,
  288,  289,  290,   -1,   -1,  293,  294,   -1,   -1,   91,
   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,  306,  307,
  269,  270,  271,  272,   -1,   -1,   -1,   -1,   -1,  278,
   -1,   -1,   -1,  282,  283,  284,  285,   -1,   -1,   -1,
   -1,   -1,  291,  292,  126,   -1,  295,  296,  297,  298,
  299,   41,  301,  302,   44,   -1,  305,   -1,   -1,  308,
  309,  310,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   -1,   -1,   -1,   63,   -1,   -1,  257,  258,  259,  260,
  261,   -1,   -1,   -1,   -1,  266,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  277,   -1,  279,  280,
  281,   91,   -1,   93,   -1,  286,  287,  288,  289,  290,
   -1,   -1,   41,  294,   -1,   44,   -1,   -1,   -1,  300,
   -1,   -1,   -1,  304,   -1,  306,  307,   -1,   -1,   58,
   59,   -1,   -1,  123,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   91,   41,   93,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  258,  259,  260,  261,
   58,   59,   -1,   -1,  266,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,  277,   -1,  279,  280,  281,
   -1,   -1,   -1,   -1,  286,  287,  288,  289,  290,   41,
   -1,   -1,  294,   -1,   -1,   93,   -1,   -1,  300,   -1,
   -1,   -1,  304,   -1,  306,  307,   58,   59,   -1,   -1,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  123,   -1,   -1,   -1,   -1,
   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   91,
   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,
   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,  269,
  270,  271,  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,
   -1,  123,  282,  283,  284,  285,   -1,   -1,   -1,   -1,
   -1,  291,  292,   93,   -1,  295,  296,  297,  298,  299,
   -1,  301,  302,   41,   -1,  305,   44,   -1,  308,  309,
  310,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   58,   59,   -1,  123,   -1,   63,   -1,   -1,   -1,   -1,
  269,  270,  271,  272,   -1,   -1,   -1,   -1,   -1,  278,
   -1,   -1,   -1,  282,  283,  284,  285,   -1,   -1,   -1,
   41,   -1,  291,  292,   -1,   93,  295,  296,  297,  298,
  299,   -1,  301,  302,   -1,   -1,  305,   58,   59,  308,
  309,  310,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  269,  270,  271,  272,  123,   -1,   -1,   -1,   -1,
  278,   -1,   -1,   -1,  282,  283,  284,  285,   -1,   -1,
   91,   -1,   93,  291,  292,   -1,   -1,  295,  296,  297,
  298,  299,   -1,  301,  302,   -1,   -1,  305,   -1,   -1,
  308,  309,  310,   -1,   -1,   -1,   -1,  269,  270,  271,
  272,   -1,  123,   -1,   41,   -1,  278,   44,   -1,   -1,
  282,  283,  284,  285,   -1,   -1,   -1,   -1,   -1,  291,
  292,   58,   59,  295,  296,  297,  298,  299,   -1,  301,
  302,   -1,   -1,  305,   -1,   -1,  308,  309,  310,  269,
  270,  271,  272,   -1,   -1,   -1,   41,   -1,  278,   44,
   -1,   -1,  282,  283,  284,  285,   93,   -1,   -1,   -1,
   -1,  291,  292,   58,   59,  295,  296,  297,  298,  299,
   41,  301,  302,   44,   -1,  305,   -1,   -1,  308,  309,
  310,   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,
   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   93,   -1,
   -1,  269,  270,  271,  272,   -1,   -1,   -1,   -1,   -1,
  278,   -1,   -1,   -1,  282,  283,  284,  285,   -1,   -1,
   -1,   -1,   93,  291,  292,   -1,   -1,  295,  296,  297,
  298,  299,   -1,  301,  302,   -1,   -1,  305,   -1,   -1,
  308,  309,  310,   -1,   -1,   -1,   -1,   -1,  269,  270,
  271,  272,  123,   -1,   -1,   -1,   -1,  278,   -1,   -1,
   -1,  282,  283,  284,  285,   -1,   -1,   -1,   -1,   -1,
  291,  292,   -1,   -1,  295,  296,  297,  298,  299,   41,
  301,  302,   44,   -1,  305,   -1,   -1,  308,  309,  310,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   93,  269,  270,  271,  272,   -1,   -1,   58,   59,
   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  291,  292,   -1,   -1,   -1,   -1,
   -1,  123,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,
   -1,   -1,   -1,   93,  269,  270,  271,  272,   -1,   -1,
   58,   59,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,  269,  270,
  271,  272,   -1,   -1,   -1,   41,   -1,  278,   44,   -1,
   -1,  282,  283,  284,  285,   93,   -1,   -1,   -1,   -1,
  291,  292,   58,   59,  295,  296,  297,  298,  299,   41,
  301,  302,   44,   -1,  305,   -1,   -1,  308,  309,  310,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   93,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   58,
   59,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   41,   -1,  269,  270,  271,
  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,
  282,  283,  284,  285,   93,   -1,   -1,   63,   -1,  291,
  292,   -1,   -1,  295,  296,  297,  298,  299,   -1,  301,
  302,   -1,   -1,  305,   -1,   -1,  308,  309,  310,  269,
  270,  271,  272,   -1,   -1,   91,   -1,   -1,  278,   -1,
   -1,   -1,  282,  283,  284,  285,   -1,   -1,   -1,   -1,
   -1,  291,  292,   -1,   -1,  295,  296,  297,  298,  299,
   -1,  301,  302,   -1,   -1,  305,   -1,  123,  308,  309,
  310,  269,  270,  271,  272,   -1,   -1,   -1,   -1,   -1,
  278,   -1,   -1,   -1,  282,  283,  284,  285,   -1,   -1,
   -1,   -1,   -1,  291,  292,   -1,   -1,  295,  296,  297,
  298,  299,   41,  301,  302,   44,   -1,  305,   -1,   -1,
  308,  309,  310,  269,  270,  271,  272,   -1,   -1,   58,
   59,   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,  269,  270,  271,
  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,
  282,  283,  284,  285,   93,   -1,   -1,   -1,   -1,  291,
  292,   -1,   -1,  295,  296,  297,  298,  299,   -1,  301,
  302,   -1,   -1,  305,   -1,   -1,  308,  309,  310,   -1,
  269,  270,  271,  272,   -1,   -1,   -1,   -1,   -1,  278,
   -1,   -1,   -1,  282,  283,  284,  285,   -1,   -1,   -1,
   -1,   -1,  291,  292,   -1,   -1,  295,  296,  297,  298,
  299,   -1,  301,  302,   41,   -1,  305,   44,   -1,  308,
  309,  310,  278,   -1,   -1,   -1,  282,  283,  284,  285,
   -1,   58,   59,   -1,   -1,   -1,   63,   -1,   -1,  295,
  296,  297,  298,  299,   -1,  301,  302,   -1,   -1,  305,
   -1,   -1,  308,  309,  310,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,   -1,
   -1,   -1,   58,   59,   -1,   -1,   -1,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   93,   -1,   -1,
   -1,   -1,   58,   59,   -1,   -1,   -1,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  269,  270,  271,  272,   -1,   -1,   -1,   -1,   -1,  278,
   -1,   -1,   -1,  282,  283,  284,  285,   93,   -1,   -1,
   -1,   41,  291,  292,   44,   -1,  295,  296,  297,  298,
  299,   -1,  301,  302,   -1,   -1,  305,   -1,   58,   59,
   -1,   -1,   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,
   44,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   93,   58,   59,   -1,   -1,   -1,   63,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,   93,
   -1,   -1,  269,  270,  271,  272,   -1,   58,   59,   -1,
   -1,  278,   63,   -1,   -1,  282,  283,  284,  285,   -1,
   -1,   -1,   -1,   -1,  291,  292,   -1,   -1,  295,  296,
  297,  298,  299,   -1,  301,  302,   -1,   -1,  305,   -1,
   -1,   -1,   93,  269,  270,  271,  272,   -1,   -1,   -1,
   -1,   -1,  278,   -1,   -1,   -1,  282,  283,  284,  285,
   -1,   -1,   -1,   -1,   -1,  291,  292,   -1,   -1,  295,
  296,  297,  298,  299,   -1,  301,  302,   -1,   -1,   -1,
   -1,   -1,   -1,  269,  270,  271,  272,   -1,   -1,   -1,
   -1,   -1,  278,   -1,   -1,   -1,  282,  283,  284,  285,
   -1,   -1,   -1,   -1,   41,  291,  292,   44,   -1,  295,
  296,  297,  298,  299,   -1,  301,  302,   -1,   -1,   -1,
   -1,   58,   59,   -1,   -1,   -1,   63,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  269,
  270,  271,  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,
   -1,   -1,  282,  283,  284,  285,   93,   -1,   -1,   -1,
   -1,  291,  292,   -1,   -1,  295,  296,  297,  298,  299,
   -1,  301,  302,   -1,   -1,  269,  270,  271,  272,   -1,
   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,  283,
  284,  285,   -1,   -1,   -1,   -1,   -1,  291,  292,   -1,
   -1,  295,  296,  297,  298,  299,   41,  301,  302,   44,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  269,  270,
  271,  272,   -1,   58,   59,   -1,   -1,  278,   63,   -1,
   -1,  282,  283,  284,  285,   -1,   -1,   -1,   -1,   -1,
  291,  292,   -1,   -1,  295,  296,  297,  298,  299,   41,
  301,  302,   44,   -1,   -1,   -1,   -1,   -1,   93,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   58,   59,   -1,   -1,
   -1,   63,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   93,   58,   59,   -1,   -1,   -1,   63,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  269,  270,  271,  272,   -1,   93,   58,   59,
   -1,  278,   -1,   63,   -1,  282,  283,  284,  285,   -1,
   -1,   -1,   -1,   41,  291,  292,   44,   -1,  295,  296,
  297,  298,  299,   -1,  301,  302,   -1,   -1,   -1,   -1,
   58,   59,   -1,   93,   -1,   63,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   41,   -1,   -1,   44,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   58,   59,   93,   -1,   -1,   63,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   41,   -1,   -1,   44,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  269,  270,  271,  272,   93,   58,
   59,   -1,   -1,  278,   63,   -1,   -1,  282,  283,  284,
  285,   -1,   -1,   -1,   -1,   -1,  291,  292,   -1,   -1,
  295,  296,  297,  298,  299,   41,  301,  302,   44,   -1,
   -1,   -1,   -1,   -1,   93,   -1,   -1,  269,  270,  271,
  272,   -1,   58,   59,   -1,   -1,  278,   63,   -1,   -1,
  282,  283,   -1,  285,   -1,   -1,   -1,   -1,   -1,  291,
  292,   -1,   -1,  295,  296,  297,  298,  299,   -1,  301,
   -1,   -1,   -1,  269,  270,  271,  272,   93,   -1,   -1,
   63,   -1,  278,   -1,   -1,   -1,  282,  283,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,   -1,   -1,  295,
  296,  297,  298,  299,   -1,  301,   -1,   -1,   91,  269,
  270,  271,  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,
   -1,   -1,  282,  283,   -1,   -1,   -1,   -1,   -1,   -1,
   41,  291,  292,   44,   -1,  295,  296,  297,  298,  299,
  123,  269,  270,  271,  272,   -1,   -1,   58,   59,   -1,
  278,   -1,   63,   -1,  282,  283,   -1,   -1,   -1,   -1,
   -1,   -1,   41,  291,  292,   44,   -1,  295,  296,  297,
  298,  299,   -1,   -1,  269,  270,  271,  272,   -1,   58,
   59,   -1,   93,  278,   63,   -1,   -1,  282,  283,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  291,  292,   -1,   -1,
  295,  296,  297,  298,  299,   41,   -1,   -1,   44,   -1,
  269,  270,  271,  272,   93,   -1,   -1,   -1,   -1,  278,
   -1,   -1,   58,   59,  283,   -1,   -1,   63,   -1,   -1,
   63,   -1,  291,  292,   -1,   -1,  295,  296,  297,  298,
  299,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  269,  270,  271,  272,   93,   91,   -1,
   -1,   -1,  278,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  291,  292,   -1,   -1,  295,
  296,  297,  298,  299,   -1,   -1,   -1,   -1,   -1,   -1,
  123,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,  282,
  283,  284,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  295,  296,  297,  298,  299,   -1,  301,  302,
   -1,   -1,  305,   -1,   -1,  308,  309,  310,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  269,  270,
  271,  272,   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  291,  292,   -1,   -1,  295,  296,  297,  298,   -1,   -1,
  269,  270,  271,  272,   -1,   35,   -1,   -1,   -1,  278,
   40,   41,   -1,   -1,   -1,   -1,   46,   47,   48,   49,
   50,   51,  291,  292,   54,   55,  295,  296,  297,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  269,  270,  271,  272,   -1,   -1,   -1,
   -1,   -1,  278,   -1,   -1,  278,   -1,   -1,   88,  282,
  283,  284,  285,   -1,   -1,  291,  292,   -1,   -1,  295,
  296,   -1,   -1,  296,  297,  298,  299,   -1,  301,  302,
   -1,   -1,  305,   -1,   -1,  308,  309,  310,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  138,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  146,  147,  148,  149,
  150,  151,  152,  153,  154,  155,  156,  157,  158,  159,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  245,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  271,
};
#define YYFINAL 1
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 310
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"'!'",0,0,"'$'","'%'","'&'",0,"'('","')'","'*'","'+'","','","'-'",0,0,0,0,0,0,0,
0,0,0,0,0,"':'","';'",0,0,0,"'?'","'@'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,"'['",0,"']'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,"'{'",0,"'}'","'~'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"WORD","METHOD","FUNCMETH","THING",
"PMFUNC","PRIVATEREF","LABEL","FORMAT","SUB","ANONSUB","PACKAGE","USE","WHILE",
"UNTIL","IF","UNLESS","ELSE","ELSIF","CONTINUE","FOR","LOOPEX","DOTDOT","FUNC0",
"FUNC1","FUNC","RELOP","EQOP","MULOP","ADDOP","DOLSHARP","DO","LOCAL",
"HASHBRACK","NOAMP","OROP","ANDOP","NOTOP","LSTOP","ASSIGNOP","OROR","ANDAND",
"BITOROP","BITANDOP","UNIOP","SHIFTOP","MATCHOP","UMINUS","REFGEN","POWOP",
"PREINC","PREDEC","POSTINC","POSTDEC","ARROW",
};
char *yyrule[] = {
"$accept : prog",
"$$1 :",
"prog : $$1 lineseq",
"block : '{' remember lineseq '}'",
"remember :",
"lineseq :",
"lineseq : lineseq decl",
"lineseq : lineseq line",
"line : label cond",
"line : loop",
"line : label ';'",
"line : label sideff ';'",
"sideff : error",
"sideff : expr",
"sideff : expr IF expr",
"sideff : expr UNLESS expr",
"sideff : expr WHILE expr",
"sideff : expr UNTIL expr",
"else :",
"else : ELSE block",
"else : ELSIF '(' expr ')' block else",
"cond : IF '(' expr ')' block else",
"cond : UNLESS '(' expr ')' block else",
"cond : IF block block else",
"cond : UNLESS block block else",
"cont :",
"cont : CONTINUE block",
"loop : label WHILE '(' texpr ')' block cont",
"loop : label UNTIL '(' expr ')' block cont",
"loop : label WHILE block block cont",
"loop : label UNTIL block block cont",
"loop : label FOR scalar '(' expr ')' block cont",
"loop : label FOR '(' expr ')' block cont",
"loop : label FOR '(' nexpr ';' texpr ';' nexpr ')' block",
"loop : label block cont",
"nexpr :",
"nexpr : sideff",
"texpr :",
"texpr : expr",
"label :",
"label : LABEL",
"decl : format",
"decl : subrout",
"decl : package",
"decl : use",
"format : FORMAT startsub WORD block",
"format : FORMAT startsub block",
"subrout : SUB startsub WORD block",
"subrout : SUB startsub WORD ';'",
"startsub :",
"package : PACKAGE WORD ';'",
"package : PACKAGE ';'",
"use : USE WORD listexpr ';'",
"expr : expr ANDOP expr",
"expr : expr OROP expr",
"expr : NOTOP expr",
"expr : argexpr",
"argexpr : argexpr ','",
"argexpr : argexpr ',' term",
"argexpr : term",
"listop : LSTOP indirob argexpr",
"listop : FUNC '(' indirob expr ')'",
"listop : term ARROW method '(' listexprcom ')'",
"listop : METHOD indirob listexpr",
"listop : FUNCMETH indirob '(' listexprcom ')'",
"listop : LSTOP listexpr",
"listop : FUNC '(' listexprcom ')'",
"method : METHOD",
"method : scalar",
"term : term ASSIGNOP term",
"term : term POWOP term",
"term : term MULOP term",
"term : term ADDOP term",
"term : term SHIFTOP term",
"term : term RELOP term",
"term : term EQOP term",
"term : term BITANDOP term",
"term : term BITOROP term",
"term : term DOTDOT term",
"term : term ANDAND term",
"term : term OROR term",
"term : term '?' term ':' term",
"term : term MATCHOP term",
"term : '-' term",
"term : '+' term",
"term : '!' term",
"term : '~' term",
"term : REFGEN term",
"term : term POSTINC",
"term : term POSTDEC",
"term : PREINC term",
"term : PREDEC term",
"term : LOCAL term",
"term : '(' expr ')'",
"term : '(' ')'",
"term : '[' expr ']'",
"term : '[' ']'",
"term : HASHBRACK expr ';' '}'",
"term : HASHBRACK ';' '}'",
"term : ANONSUB startsub block",
"term : scalar",
"term : star",
"term : scalar '[' expr ']'",
"term : term ARROW '[' expr ']'",
"term : term '[' expr ']'",
"term : hsh",
"term : ary",
"term : arylen",
"term : scalar '{' expr ';' '}'",
"term : term ARROW '{' expr ';' '}'",
"term : term '{' expr ';' '}'",
"term : '(' expr ')' '[' expr ']'",
"term : '(' ')' '[' expr ']'",
"term : ary '[' expr ']'",
"term : ary '{' expr ';' '}'",
"term : THING",
"term : amper",
"term : amper '(' ')'",
"term : amper '(' expr ')'",
"term : NOAMP WORD listexpr",
"term : DO term",
"term : DO block",
"term : DO WORD '(' ')'",
"term : DO WORD '(' expr ')'",
"term : DO scalar '(' ')'",
"term : DO scalar '(' expr ')'",
"term : LOOPEX",
"term : LOOPEX term",
"term : UNIOP",
"term : UNIOP block",
"term : UNIOP term",
"term : FUNC0",
"term : FUNC0 '(' ')'",
"term : FUNC1 '(' ')'",
"term : FUNC1 '(' expr ')'",
"term : PMFUNC '(' term ')'",
"term : PMFUNC '(' term ',' term ')'",
"term : WORD",
"term : listop",
"listexpr :",
"listexpr : argexpr",
"listexprcom :",
"listexprcom : expr",
"listexprcom : expr ','",
"amper : '&' indirob",
"scalar : '$' indirob",
"ary : '@' indirob",
"hsh : '%' indirob",
"arylen : DOLSHARP indirob",
"star : '*' indirob",
"indirob : WORD",
"indirob : scalar",
"indirob : block",
"indirob : PRIVATEREF",
};
#endif
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#ifdef YYSTACKSIZE
#ifndef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#endif
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
YYSTYPE yyval;
YYSTYPE yylval;
#line 545 "perly.y"
 /* PROGRAM */
#line 1347 "y.tab.c"
#define YYABORT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab

struct ysv {
    short* yyss;
    YYSTYPE* yyvs;
    int oldyydebug;
    int oldyynerrs;
    int oldyyerrflag;
    int oldyychar;
    YYSTYPE oldyyval;
    YYSTYPE oldyylval;
};

void
yydestruct(ptr)
void* ptr;
{
    struct ysv* ysave = (struct ysv*)ptr;
    if (ysave->yyss) Safefree(ysave->yyss);
    if (ysave->yyvs) Safefree(ysave->yyvs);
    yydebug	= ysave->oldyydebug;
    yynerrs	= ysave->oldyynerrs;
    yyerrflag	= ysave->oldyyerrflag;
    yychar	= ysave->oldyychar;
    yyval	= ysave->oldyyval;
    yylval	= ysave->oldyylval;
    Safefree(ysave);
}

int
yyparse()
{
    register int yym, yyn, yystate;
    register short *yyssp;
    register YYSTYPE *yyvsp;
    short* yyss;
    YYSTYPE* yyvs;
    unsigned yystacksize = YYSTACKSIZE;
    int retval = 0;
#if YYDEBUG
    register char *yys;
    extern char *getenv();
#endif

    struct ysv *ysave = (struct ysv*)safemalloc(sizeof(struct ysv));
    SAVEDESTRUCTOR(yydestruct, ysave);
    ysave->oldyydebug	= yydebug;
    ysave->oldyynerrs	= yynerrs;
    ysave->oldyyerrflag	= yyerrflag;
    ysave->oldyychar	= yychar;
    ysave->oldyyval	= yyval;
    ysave->oldyylval	= yylval;

#if YYDEBUG
    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    /*
    ** Initialize private stacks (yyparse may be called from an action)
    */
    ysave->yyss = yyss = (short*)safemalloc(yystacksize*sizeof(short));
    ysave->yyvs = yyvs = (YYSTYPE*)safemalloc(yystacksize*sizeof(YYSTYPE));
    if (!yyvs || !yyss)
	goto yyoverflow;

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            fprintf(stderr, "yydebug: state %d, reading %d (%s)\n", yystate,
                    yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            fprintf(stderr, "yydebug: state %d, shifting to state %d\n",
                    yystate, yytable[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
	    /*
	    ** reallocate and recover.  Note that pointers
	    ** have to be reset, or bad things will happen
	    */
	    int yyps_index = (yyssp - yyss);
	    int yypv_index = (yyvsp - yyvs);
	    yystacksize += YYSTACKSIZE;
	    ysave->yyvs = yyvs =
		(YYSTYPE*)realloc((char*)yyvs,yystacksize * sizeof(YYSTYPE));
	    ysave->yyss = yyss =
		(short*)realloc((char*)yyss,yystacksize * sizeof(short));
	    if (!yyvs || !yyss)
		goto yyoverflow;
	    yyssp = yyss + yyps_index;
	    yyvsp = yyvs + yypv_index;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    fprintf(stderr,
		     "yydebug: state %d, error recovery shifting to state %d\n",
		     *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
		    /*
		    ** reallocate and recover.  Note that pointers
		    ** have to be reset, or bad things will happen
		    */
		    int yyps_index = (yyssp - yyss);
		    int yypv_index = (yyvsp - yyvs);
		    yystacksize += YYSTACKSIZE;
		    ysave->yyvs = yyvs = (YYSTYPE*)realloc((char*)yyvs,
			yystacksize * sizeof(YYSTYPE));
		    ysave->yyss = yyss = (short*)realloc((char*)yyss,
			yystacksize * sizeof(short));
		    if (!yyvs || !yyss)
			goto yyoverflow;
		    yyssp = yyss + yyps_index;
		    yyvsp = yyvs + yypv_index;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    fprintf(stderr,
			"yydebug: error recovery discarding state %d\n",
			*yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            fprintf(stderr,
		"yydebug: state %d, error recovery discards token %d (%s)\n",
		yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        fprintf(stderr, "yydebug: state %d, reducing by rule %d (%s)\n",
                yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 1:
#line 83 "perly.y"
{
#if defined(YYDEBUG) && defined(DEBUGGING)
		    yydebug = (debug & 1);
#endif
		    expect = XSTATE;
		}
break;
case 2:
#line 90 "perly.y"
{ newPROG(yyvsp[0].opval); }
break;
case 3:
#line 94 "perly.y"
{ yyval.opval = block_end(yyvsp[-3].ival,yyvsp[-2].ival,yyvsp[-1].opval); }
break;
case 4:
#line 98 "perly.y"
{ yyval.ival = block_start(); }
break;
case 5:
#line 102 "perly.y"
{ yyval.opval = Nullop; }
break;
case 6:
#line 104 "perly.y"
{ yyval.opval = yyvsp[-1].opval; }
break;
case 7:
#line 106 "perly.y"
{   yyval.opval = append_list(OP_LINESEQ,
				(LISTOP*)yyvsp[-1].opval, (LISTOP*)yyvsp[0].opval);
			    pad_reset_pending = TRUE;
			    if (yyvsp[-1].opval && yyvsp[0].opval) hints |= HINT_BLOCK_SCOPE; }
break;
case 8:
#line 113 "perly.y"
{ yyval.opval = newSTATEOP(0, yyvsp[-1].pval, yyvsp[0].opval); }
break;
case 10:
#line 116 "perly.y"
{ if (yyvsp[-1].pval != Nullch) {
			      yyval.opval = newSTATEOP(0, yyvsp[-1].pval, newOP(OP_NULL, 0));
			    }
			    else {
			      yyval.opval = Nullop;
			      copline = NOLINE;
			    }
			    expect = XSTATE; }
break;
case 11:
#line 125 "perly.y"
{ yyval.opval = newSTATEOP(0, yyvsp[-2].pval, yyvsp[-1].opval);
			  expect = XSTATE; }
break;
case 12:
#line 130 "perly.y"
{ yyval.opval = Nullop; }
break;
case 13:
#line 132 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 14:
#line 134 "perly.y"
{ yyval.opval = newLOGOP(OP_AND, 0, yyvsp[0].opval, yyvsp[-2].opval); }
break;
case 15:
#line 136 "perly.y"
{ yyval.opval = newLOGOP(OP_OR, 0, yyvsp[0].opval, yyvsp[-2].opval); }
break;
case 16:
#line 138 "perly.y"
{ yyval.opval = newLOOPOP(OPf_PARENS, 1, scalar(yyvsp[0].opval), yyvsp[-2].opval); }
break;
case 17:
#line 140 "perly.y"
{ yyval.opval = newLOOPOP(OPf_PARENS, 1, invert(scalar(yyvsp[0].opval)), yyvsp[-2].opval);}
break;
case 18:
#line 144 "perly.y"
{ yyval.opval = Nullop; }
break;
case 19:
#line 146 "perly.y"
{ yyval.opval = scope(yyvsp[0].opval); }
break;
case 20:
#line 148 "perly.y"
{ copline = yyvsp[-5].ival;
			    yyval.opval = newSTATEOP(0, 0,
				newCONDOP(0, yyvsp[-3].opval, scope(yyvsp[-1].opval), yyvsp[0].opval)); }
break;
case 21:
#line 154 "perly.y"
{ copline = yyvsp[-5].ival;
			    yyval.opval = newCONDOP(0, yyvsp[-3].opval, scope(yyvsp[-1].opval), yyvsp[0].opval); }
break;
case 22:
#line 157 "perly.y"
{ copline = yyvsp[-5].ival;
			    yyval.opval = newCONDOP(0,
				invert(scalar(yyvsp[-3].opval)), scope(yyvsp[-1].opval), yyvsp[0].opval); }
break;
case 23:
#line 161 "perly.y"
{ copline = yyvsp[-3].ival;
			    deprecate("if BLOCK BLOCK");
			    yyval.opval = newCONDOP(0, scope(yyvsp[-2].opval), scope(yyvsp[-1].opval), yyvsp[0].opval); }
break;
case 24:
#line 165 "perly.y"
{ copline = yyvsp[-3].ival;
			    deprecate("unless BLOCK BLOCK");
			    yyval.opval = newCONDOP(0, invert(scalar(scope(yyvsp[-2].opval))),
						scope(yyvsp[-1].opval), yyvsp[0].opval); }
break;
case 25:
#line 172 "perly.y"
{ yyval.opval = Nullop; }
break;
case 26:
#line 174 "perly.y"
{ yyval.opval = scope(yyvsp[0].opval); }
break;
case 27:
#line 178 "perly.y"
{ copline = yyvsp[-5].ival;
			    yyval.opval = newSTATEOP(0, yyvsp[-6].pval,
				    newWHILEOP(0, 1, (LOOP*)Nullop,
					yyvsp[-3].opval, yyvsp[-1].opval, yyvsp[0].opval) ); }
break;
case 28:
#line 183 "perly.y"
{ copline = yyvsp[-5].ival;
			    yyval.opval = newSTATEOP(0, yyvsp[-6].pval,
				    newWHILEOP(0, 1, (LOOP*)Nullop,
					invert(scalar(yyvsp[-3].opval)), yyvsp[-1].opval, yyvsp[0].opval) ); }
break;
case 29:
#line 188 "perly.y"
{ copline = yyvsp[-3].ival;
			    yyval.opval = newSTATEOP(0, yyvsp[-4].pval,
				    newWHILEOP(0, 1, (LOOP*)Nullop,
					scope(yyvsp[-2].opval), yyvsp[-1].opval, yyvsp[0].opval) ); }
break;
case 30:
#line 193 "perly.y"
{ copline = yyvsp[-3].ival;
			    yyval.opval = newSTATEOP(0, yyvsp[-4].pval,
				    newWHILEOP(0, 1, (LOOP*)Nullop,
					invert(scalar(scope(yyvsp[-2].opval))), yyvsp[-1].opval, yyvsp[0].opval)); }
break;
case 31:
#line 198 "perly.y"
{ yyval.opval = newFOROP(0, yyvsp[-7].pval, yyvsp[-6].ival, mod(yyvsp[-5].opval, OP_ENTERLOOP),
				yyvsp[-3].opval, yyvsp[-1].opval, yyvsp[0].opval); }
break;
case 32:
#line 201 "perly.y"
{ yyval.opval = newFOROP(0, yyvsp[-6].pval, yyvsp[-5].ival, Nullop, yyvsp[-3].opval, yyvsp[-1].opval, yyvsp[0].opval); }
break;
case 33:
#line 204 "perly.y"
{  copline = yyvsp[-8].ival;
			    yyval.opval = append_elem(OP_LINESEQ,
				    newSTATEOP(0, yyvsp[-9].pval, scalar(yyvsp[-6].opval)),
				    newSTATEOP(0, yyvsp[-9].pval,
					newWHILEOP(0, 1, (LOOP*)Nullop,
					    scalar(yyvsp[-4].opval), yyvsp[0].opval, scalar(yyvsp[-2].opval)) )); }
break;
case 34:
#line 211 "perly.y"
{ yyval.opval = newSTATEOP(0,
				yyvsp[-2].pval, newWHILEOP(0, 1, (LOOP*)Nullop,
					Nullop, yyvsp[-1].opval, yyvsp[0].opval)); }
break;
case 35:
#line 217 "perly.y"
{ yyval.opval = Nullop; }
break;
case 37:
#line 222 "perly.y"
{ (void)scan_num("1"); yyval.opval = yylval.opval; }
break;
case 39:
#line 227 "perly.y"
{ yyval.pval = Nullch; }
break;
case 41:
#line 232 "perly.y"
{ yyval.ival = 0; }
break;
case 42:
#line 234 "perly.y"
{ yyval.ival = 0; }
break;
case 43:
#line 236 "perly.y"
{ yyval.ival = 0; }
break;
case 44:
#line 238 "perly.y"
{ yyval.ival = 0; }
break;
case 45:
#line 242 "perly.y"
{ newFORM(yyvsp[-2].ival, yyvsp[-1].opval, yyvsp[0].opval); }
break;
case 46:
#line 244 "perly.y"
{ newFORM(yyvsp[-1].ival, Nullop, yyvsp[0].opval); }
break;
case 47:
#line 248 "perly.y"
{ newSUB(yyvsp[-2].ival, yyvsp[-1].opval, yyvsp[0].opval); }
break;
case 48:
#line 250 "perly.y"
{ newSUB(yyvsp[-2].ival, yyvsp[-1].opval, Nullop); expect = XSTATE; }
break;
case 49:
#line 254 "perly.y"
{ yyval.ival = start_subparse(); }
break;
case 50:
#line 258 "perly.y"
{ package(yyvsp[-1].opval); }
break;
case 51:
#line 260 "perly.y"
{ package(Nullop); }
break;
case 52:
#line 264 "perly.y"
{ utilize(yyvsp[-3].ival, yyvsp[-2].opval, yyvsp[-1].opval); }
break;
case 53:
#line 268 "perly.y"
{ yyval.opval = newLOGOP(OP_AND, 0, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 54:
#line 270 "perly.y"
{ yyval.opval = newLOGOP(yyvsp[-1].ival, 0, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 55:
#line 272 "perly.y"
{ yyval.opval = newUNOP(OP_NOT, 0, scalar(yyvsp[0].opval)); }
break;
case 57:
#line 277 "perly.y"
{ yyval.opval = yyvsp[-1].opval; }
break;
case 58:
#line 279 "perly.y"
{ yyval.opval = append_elem(OP_LIST, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 60:
#line 284 "perly.y"
{ yyval.opval = convert(yyvsp[-2].ival, OPf_STACKED,
				prepend_elem(OP_LIST, newGVREF(yyvsp[-2].ival,yyvsp[-1].opval), yyvsp[0].opval) ); }
break;
case 61:
#line 287 "perly.y"
{ yyval.opval = convert(yyvsp[-4].ival, OPf_STACKED,
				prepend_elem(OP_LIST, newGVREF(yyvsp[-4].ival,yyvsp[-2].opval), yyvsp[-1].opval) ); }
break;
case 62:
#line 290 "perly.y"
{ yyval.opval = convert(OP_ENTERSUB, OPf_STACKED|OPf_SPECIAL,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, yyvsp[-5].opval, list(yyvsp[-1].opval)),
				    newUNOP(OP_METHOD, 0, yyvsp[-3].opval))); }
break;
case 63:
#line 295 "perly.y"
{ yyval.opval = convert(OP_ENTERSUB, OPf_STACKED|OPf_SPECIAL,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, yyvsp[-1].opval, list(yyvsp[0].opval)),
				    newUNOP(OP_METHOD, 0, yyvsp[-2].opval))); }
break;
case 64:
#line 300 "perly.y"
{ yyval.opval = convert(OP_ENTERSUB, OPf_STACKED|OPf_SPECIAL,
				append_elem(OP_LIST,
				    prepend_elem(OP_LIST, yyvsp[-3].opval, list(yyvsp[-1].opval)),
				    newUNOP(OP_METHOD, 0, yyvsp[-4].opval))); }
break;
case 65:
#line 305 "perly.y"
{ yyval.opval = convert(yyvsp[-1].ival, 0, yyvsp[0].opval); }
break;
case 66:
#line 307 "perly.y"
{ yyval.opval = convert(yyvsp[-3].ival, 0, yyvsp[-1].opval); }
break;
case 69:
#line 315 "perly.y"
{ yyval.opval = newASSIGNOP(OPf_STACKED, yyvsp[-2].opval, yyvsp[-1].ival, yyvsp[0].opval); }
break;
case 70:
#line 317 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 71:
#line 319 "perly.y"
{   if (yyvsp[-1].ival != OP_REPEAT)
				scalar(yyvsp[-2].opval);
			    yyval.opval = newBINOP(yyvsp[-1].ival, 0, yyvsp[-2].opval, scalar(yyvsp[0].opval)); }
break;
case 72:
#line 323 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 73:
#line 325 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 74:
#line 327 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 75:
#line 329 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 76:
#line 331 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 77:
#line 333 "perly.y"
{ yyval.opval = newBINOP(yyvsp[-1].ival, 0, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval)); }
break;
case 78:
#line 335 "perly.y"
{ yyval.opval = newRANGE(yyvsp[-1].ival, scalar(yyvsp[-2].opval), scalar(yyvsp[0].opval));}
break;
case 79:
#line 337 "perly.y"
{ yyval.opval = newLOGOP(OP_AND, 0, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 80:
#line 339 "perly.y"
{ yyval.opval = newLOGOP(OP_OR, 0, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 81:
#line 341 "perly.y"
{ yyval.opval = newCONDOP(0, yyvsp[-4].opval, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 82:
#line 343 "perly.y"
{ yyval.opval = bind_match(yyvsp[-1].ival, yyvsp[-2].opval, yyvsp[0].opval); }
break;
case 83:
#line 346 "perly.y"
{ yyval.opval = newUNOP(OP_NEGATE, 0, scalar(yyvsp[0].opval)); }
break;
case 84:
#line 348 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 85:
#line 350 "perly.y"
{ yyval.opval = newUNOP(OP_NOT, 0, scalar(yyvsp[0].opval)); }
break;
case 86:
#line 352 "perly.y"
{ yyval.opval = newUNOP(OP_COMPLEMENT, 0, scalar(yyvsp[0].opval));}
break;
case 87:
#line 354 "perly.y"
{ yyval.opval = newUNOP(OP_REFGEN, 0, mod(yyvsp[0].opval,OP_REFGEN)); }
break;
case 88:
#line 356 "perly.y"
{ yyval.opval = newUNOP(OP_POSTINC, 0,
					mod(scalar(yyvsp[-1].opval), OP_POSTINC)); }
break;
case 89:
#line 359 "perly.y"
{ yyval.opval = newUNOP(OP_POSTDEC, 0,
					mod(scalar(yyvsp[-1].opval), OP_POSTDEC)); }
break;
case 90:
#line 362 "perly.y"
{ yyval.opval = newUNOP(OP_PREINC, 0,
					mod(scalar(yyvsp[0].opval), OP_PREINC)); }
break;
case 91:
#line 365 "perly.y"
{ yyval.opval = newUNOP(OP_PREDEC, 0,
					mod(scalar(yyvsp[0].opval), OP_PREDEC)); }
break;
case 92:
#line 368 "perly.y"
{ yyval.opval = localize(yyvsp[0].opval,yyvsp[-1].ival); }
break;
case 93:
#line 370 "perly.y"
{ yyval.opval = sawparens(yyvsp[-1].opval); }
break;
case 94:
#line 372 "perly.y"
{ yyval.opval = sawparens(newNULLLIST()); }
break;
case 95:
#line 374 "perly.y"
{ yyval.opval = newANONLIST(yyvsp[-1].opval); }
break;
case 96:
#line 376 "perly.y"
{ yyval.opval = newANONLIST(Nullop); }
break;
case 97:
#line 378 "perly.y"
{ yyval.opval = newANONHASH(yyvsp[-2].opval); }
break;
case 98:
#line 380 "perly.y"
{ yyval.opval = newANONHASH(Nullop); }
break;
case 99:
#line 382 "perly.y"
{ yyval.opval = newANONSUB(yyvsp[-1].ival, yyvsp[0].opval); }
break;
case 100:
#line 384 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 101:
#line 386 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 102:
#line 388 "perly.y"
{ yyval.opval = newBINOP(OP_AELEM, 0, oopsAV(yyvsp[-3].opval), scalar(yyvsp[-1].opval)); }
break;
case 103:
#line 390 "perly.y"
{ yyval.opval = newBINOP(OP_AELEM, 0,
					ref(newAVREF(yyvsp[-4].opval),OP_RV2AV),
					scalar(yyvsp[-1].opval));}
break;
case 104:
#line 394 "perly.y"
{ assertref(yyvsp[-3].opval); yyval.opval = newBINOP(OP_AELEM, 0,
					ref(newAVREF(yyvsp[-3].opval),OP_RV2AV),
					scalar(yyvsp[-1].opval));}
break;
case 105:
#line 398 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 106:
#line 400 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 107:
#line 402 "perly.y"
{ yyval.opval = newUNOP(OP_AV2ARYLEN, 0, ref(yyvsp[0].opval, OP_AV2ARYLEN));}
break;
case 108:
#line 404 "perly.y"
{ yyval.opval = newBINOP(OP_HELEM, 0, oopsHV(yyvsp[-4].opval), jmaybe(yyvsp[-2].opval));
			    expect = XOPERATOR; }
break;
case 109:
#line 407 "perly.y"
{ yyval.opval = newBINOP(OP_HELEM, 0,
					ref(newHVREF(yyvsp[-5].opval),OP_RV2HV),
					jmaybe(yyvsp[-2].opval));
			    expect = XOPERATOR; }
break;
case 110:
#line 412 "perly.y"
{ assertref(yyvsp[-4].opval); yyval.opval = newBINOP(OP_HELEM, 0,
					ref(newHVREF(yyvsp[-4].opval),OP_RV2HV),
					jmaybe(yyvsp[-2].opval));
			    expect = XOPERATOR; }
break;
case 111:
#line 417 "perly.y"
{ yyval.opval = newSLICEOP(0, yyvsp[-1].opval, yyvsp[-4].opval); }
break;
case 112:
#line 419 "perly.y"
{ yyval.opval = newSLICEOP(0, yyvsp[-1].opval, Nullop); }
break;
case 113:
#line 421 "perly.y"
{ yyval.opval = prepend_elem(OP_ASLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_ASLICE, 0,
					list(yyvsp[-1].opval),
					ref(yyvsp[-3].opval, OP_ASLICE))); }
break;
case 114:
#line 427 "perly.y"
{ yyval.opval = prepend_elem(OP_HSLICE,
				newOP(OP_PUSHMARK, 0),
				    newLISTOP(OP_HSLICE, 0,
					list(yyvsp[-2].opval),
					ref(oopsHV(yyvsp[-4].opval), OP_HSLICE)));
			    expect = XOPERATOR; }
break;
case 115:
#line 434 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 116:
#line 436 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, 0,
				scalar(yyvsp[0].opval)); }
break;
case 117:
#line 439 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED, scalar(yyvsp[-2].opval)); }
break;
case 118:
#line 441 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    list(append_elem(OP_LIST, yyvsp[-1].opval, scalar(yyvsp[-3].opval)))); }
break;
case 119:
#line 444 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_STACKED,
			    list(append_elem(OP_LIST,
				yyvsp[0].opval, newCVREF(scalar(yyvsp[-1].opval))))); }
break;
case 120:
#line 448 "perly.y"
{ yyval.opval = newUNOP(OP_DOFILE, 0, scalar(yyvsp[0].opval)); }
break;
case 121:
#line 450 "perly.y"
{ yyval.opval = newUNOP(OP_NULL, OPf_SPECIAL, scope(yyvsp[0].opval)); }
break;
case 122:
#line 452 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_SPECIAL|OPf_STACKED,
			    list(prepend_elem(OP_LIST,
				scalar(newCVREF(scalar(yyvsp[-2].opval))), Nullop))); dep();}
break;
case 123:
#line 456 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_SPECIAL|OPf_STACKED,
			    list(append_elem(OP_LIST,
				yyvsp[-1].opval,
				scalar(newCVREF(scalar(yyvsp[-3].opval)))))); dep();}
break;
case 124:
#line 461 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_SPECIAL|OPf_STACKED,
			    list(prepend_elem(OP_LIST,
				scalar(newCVREF(scalar(yyvsp[-2].opval))), Nullop))); dep();}
break;
case 125:
#line 465 "perly.y"
{ yyval.opval = newUNOP(OP_ENTERSUB, OPf_SPECIAL|OPf_STACKED,
			    list(prepend_elem(OP_LIST,
				yyvsp[-1].opval,
				scalar(newCVREF(scalar(yyvsp[-3].opval)))))); dep();}
break;
case 126:
#line 470 "perly.y"
{ yyval.opval = newOP(yyvsp[0].ival, OPf_SPECIAL);
			    hints |= HINT_BLOCK_SCOPE; }
break;
case 127:
#line 473 "perly.y"
{ yyval.opval = newLOOPEX(yyvsp[-1].ival,yyvsp[0].opval); }
break;
case 128:
#line 475 "perly.y"
{ yyval.opval = newOP(yyvsp[0].ival, 0); }
break;
case 129:
#line 477 "perly.y"
{ yyval.opval = newUNOP(yyvsp[-1].ival, 0, yyvsp[0].opval); }
break;
case 130:
#line 479 "perly.y"
{ yyval.opval = newUNOP(yyvsp[-1].ival, 0, yyvsp[0].opval); }
break;
case 131:
#line 481 "perly.y"
{ yyval.opval = newOP(yyvsp[0].ival, 0); }
break;
case 132:
#line 483 "perly.y"
{ yyval.opval = newOP(yyvsp[-2].ival, 0); }
break;
case 133:
#line 485 "perly.y"
{ yyval.opval = newOP(yyvsp[-2].ival, OPf_SPECIAL); }
break;
case 134:
#line 487 "perly.y"
{ yyval.opval = newUNOP(yyvsp[-3].ival, 0, yyvsp[-1].opval); }
break;
case 135:
#line 489 "perly.y"
{ yyval.opval = pmruntime(yyvsp[-3].opval, yyvsp[-1].opval, Nullop); }
break;
case 136:
#line 491 "perly.y"
{ yyval.opval = pmruntime(yyvsp[-5].opval, yyvsp[-3].opval, yyvsp[-1].opval); }
break;
case 139:
#line 497 "perly.y"
{ yyval.opval = Nullop; }
break;
case 140:
#line 499 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 141:
#line 503 "perly.y"
{ yyval.opval = Nullop; }
break;
case 142:
#line 505 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
case 143:
#line 507 "perly.y"
{ yyval.opval = yyvsp[-1].opval; }
break;
case 144:
#line 511 "perly.y"
{ yyval.opval = newCVREF(yyvsp[0].opval); }
break;
case 145:
#line 515 "perly.y"
{ yyval.opval = newSVREF(yyvsp[0].opval); }
break;
case 146:
#line 519 "perly.y"
{ yyval.opval = newAVREF(yyvsp[0].opval); }
break;
case 147:
#line 523 "perly.y"
{ yyval.opval = newHVREF(yyvsp[0].opval); }
break;
case 148:
#line 527 "perly.y"
{ yyval.opval = newAVREF(yyvsp[0].opval); }
break;
case 149:
#line 531 "perly.y"
{ yyval.opval = newGVREF(0,yyvsp[0].opval); }
break;
case 150:
#line 535 "perly.y"
{ yyval.opval = scalar(yyvsp[0].opval); }
break;
case 151:
#line 537 "perly.y"
{ yyval.opval = scalar(yyvsp[0].opval);  }
break;
case 152:
#line 539 "perly.y"
{ yyval.opval = scope(yyvsp[0].opval); }
break;
case 153:
#line 542 "perly.y"
{ yyval.opval = yyvsp[0].opval; }
break;
#line 2157 "y.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            fprintf(stderr,
		"yydebug: after reduction, shifting from state 0 to state %d\n",
		YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                fprintf(stderr, "yydebug: state %d, reading %d (%s)\n",
                        YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        fprintf(stderr,
	    "yydebug: after reduction, shifting from state %d to state %d\n",
	    *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
	/*
	** reallocate and recover.  Note that pointers
	** have to be reset, or bad things will happen
	*/
	int yyps_index = (yyssp - yyss);
	int yypv_index = (yyvsp - yyvs);
	yystacksize += YYSTACKSIZE;
	ysave->yyvs = yyvs =
	    (YYSTYPE*)realloc((char*)yyvs,yystacksize * sizeof(YYSTYPE));
	ysave->yyss = yyss =
	    (short*)realloc((char*)yyss,yystacksize * sizeof(short));
	if (!yyvs || !yyss)
	    goto yyoverflow;
	yyssp = yyss + yyps_index;
	yyvsp = yyvs + yypv_index;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("Out of memory for yacc stack");
yyabort:
    retval = 1;
yyaccept:
    return retval;
}
