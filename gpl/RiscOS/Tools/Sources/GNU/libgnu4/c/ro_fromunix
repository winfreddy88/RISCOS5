/* ro_fromunix.c
   Filename translation from Unix-style to RISC OS.
   Copyright (C) 1999 Darren Salt.
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions are
   met:
   1. Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
   3. All advertising materials mentioning features or use of this software
      must display the following acknowledgement:
        This product includes software developed by Darren Salt.
   4. The name of the author may not be used to endorse or promote products
      derived from this software without specific prior written permission.

   This software is provided by the author "as is" and any express or implied
   warranties including, but not limited to, the implied warranties of
   merchantability and fitness for a particular purpose are disclaimed. in no
   event shall the author be liable for any direct, indirect, incidental,
   special, exemplary, or consequential damages (including, but not limited
   to, procurement of substitute goods or services; loss of use, data, or
   profits; or business interruption) however caused and on any theory of
   liability, whether in contract, strict liability, or tort (including
   negligence or otherwise) arising in any way out of the use of this
   software, even if advised of the possibility of such damage.
 */

/* Written by Darren Salt <ds@youmustbejoking.demon.co.uk>.  */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "system.h"
#include "ro_uname.h"

extern const char *__ro_ext_getenv (const char *env);


/* Munge the filename into RISC OS format.
   (See the header file for more info.)  */
const char *
ro_fromunix (const char *filename, const char *extensions_string)
{
  static char *buffer = 0;
  const char *start;
  const char *lastdot;
  const char *lastslash;
  const char *p, *end;
  char *q;
  int root = 0, tmp, i, seenslash;
  int len;

  if (!extensions_string)
    return filename;

  if (extensions_string[0] == '$')
    extensions_string = __ro_ext_getenv (extensions_string + 1);

  /* translate: "/..." = root dir, "~..." = home dir */
  switch (filename[0])
    {
    case '/':
      /* Root or temporary.  */
      tmp = !memcmp (filename, "/tmp", 4);
      root = !tmp;
      if (tmp)
	{
	  start = strchr (filename + 4, '/');
	  if (start)
	    start ++;
	  else
	    start = filename + 4 + (filename[5] == '/');
	}
      else
        start = filename + 1;
      break;
    case '~':
      root = 2;
      start = strchr (filename, '/');
      if (!start)
	start = filename;
      start++;
      tmp = 0;
      break;
    /* Do we need to cope with '$HOME'?  */
    default:
      start = filename;
      tmp = root = 0;
    }

  /* Check for name of form "foo.bar" or "path/foo.bar".
     Record offset of last slash and last following dot,
     or just the last dot if there's no slash.  */
  lastslash = strrchr (filename, '/');
  lastdot = strrchr (lastslash ? lastslash : filename, '.');
  if (!lastslash && !lastdot)
    {
      if (root)
	{
	  buffer = xrealloc (buffer, strlen (start) + 3);
	  sprintf (buffer, "%c.%s", root - 1 ? '&' : '$', start);
	  return buffer;
	}
      else
	return start;
    }

  /* We have one slash (or the start of the string), but not necessarily a
     dot. If we have the dot, we need to point past the slash, else we can
     forget about it.  */

  if (!lastdot)
    lastslash = 0;
  else if (lastslash)
    lastslash++;

  /* Is the name following the last slash in our extensions string?  */
  if (lastdot && *extensions_string)
    {
      int len = strlen (lastdot+1);
      const char *q = extensions_string - 1;
      do
	{
	  p = q + 1;
	  q = strchr (p, ':');
	  if ((q ? q - p : strlen (p)) == len && !memcmp (p, lastdot+1, len))
	    goto is_in_ext;
	}
      while (q);
    }
  /* No - forget about the slashes.  */
  lastdot = lastslash = 0;

is_in_ext:
  /* Yes - remember about the slashes.  */

  /* Copy name into our buffer, with translation.  */
  if (tmp)
    {
      buffer = xrealloc (buffer, len = strlen (start) + 16);
      q = stpcpy (buffer, "<Wimp$ScrapDir>");
      if (start[-1] == '/')
	*q++ = '.';
    }
  else
    {
      buffer = xrealloc (buffer, len = strlen (start) + (root ? 3 : 1));
      q = buffer;
    }
  switch (root)
    {
    case 2:
      /* '~[<user>]' user root directory - prefix with '&' */
      *q++ = '&';
      *q++ = '.';
      break;
    case 1:
      /* '/' main root directory - prefix with '$' */
      *q++ = '$';
      *q++ = '.';
      break;
    }
  seenslash = 2;
  for (i = 2; i >= 0; --i)
    {
      /* This switch causes the extension swapping.  */
      switch (i)
	{
	case 2:
	  if (!lastslash || start == lastslash)
	    continue;
	  p = start - 1;
	  end = lastslash - 1;
	  break;
	case 1:
	  if (!lastdot)
	    continue;
	  if (q != buffer)
	    *q++ = '.';
	  p = lastdot;
	  end = lastdot + strlen (lastdot);
	  break;
	default:
	  if (lastdot)
	    {
	      *q++ = '.';
	      if (lastslash)
		p = lastslash - 1;
	      else
		p = start - 1;
	      end = lastdot;
	    }
	  else
	    {
	      p = start - 1;
	      end = start + strlen (start);
	    }
	  break;
	}
      if (seenslash == 2)
	seenslash = 1;
      /* Copy the filename segment.  */
      while (++p < end)
	{
	  switch (*p)
	    {
	    case '/': *q++ = '.'; seenslash = 1; continue;
	    /* DOSFS-style translation.  */
	    case '#': *q++ = '?'; break;
	    case '$': *q++ = '<'; break;
	    case '%': *q++ = ';'; break;
	    case '&': *q++ = '+'; break;
	    case '@': *q++ = '='; break;
	    case '^': *q++ = '^'; break;
	    /* Other special/illegal characters */
	    case '"':
	    case '*':
	    case ':':
	    case '\\':
	    case '|': *q++ = '?'; break;
	    /* Going dotty!  */
	    case '.':
	      if (seenslash)
		{
		  if (p[1] == '/')
		    q--;
		  else if (p[1] == '.' && p[2] == '/')
		    {
		      p++;
		      *q++ = '^';
		    }
		}
	      else
	        *q++ = '/';
	      break;
	    default:
	      *q++ = *p;
	    }
	  seenslash = 0;
	}
    }
  /* Remove any trailing dot.  */
  if (q > buffer && q[-1] == '/')
    q--;
  /* Terminate the string.  */
  *q = 0;

  /* Done.  */
  return buffer;
}
