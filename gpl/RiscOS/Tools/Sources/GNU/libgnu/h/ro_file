/* ro_file.h -- POSIX-style open(), close(), stat() and some related
   functions.
   Copyright (C) 1999 Free Software Foundation, Inc.
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions are
   met:
   1. Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
   3. All advertising materials mentioning features or use of this software
      must display the following acknowledgement:
        This product includes software developed by Darren Salt.
   4. The name of the author may not be used to endorse or promote products
      derived from this software without specific prior written permission.

   This software is provided by the author "as is" and any express or implied
   warranties including, but not limited to, the implied warranties of
   merchantability and fitness for a particular purpose are disclaimed. in no
   event shall the author be liable for any direct, indirect, incidental,
   special, exemplary, or consequential damages (including, but not limited
   to, procurement of substitute goods or services; loss of use, data, or
   profits; or business interruption) however caused and on any theory of
   liability, whether in contract, strict liability, or tort (including
   negligence or otherwise) arising in any way out of the use of this
   software, even if advised of the possibility of such damage.
 */

/* Written by Darren Salt <ds@youmustbejoking.demon.co.uk>.  */

/* bits of Unix fcntl.h, unistd.h, stdio.h, stat.h */

#ifndef __FCNTL_H
#define __FCNTL_H

#include <stdio.h>
#include <time.h>

#ifdef __cplusplus
extern "C" {
#endif

/* These fcntlbits are derived from 4.4 BSD.  */

#define O_OMASK 	3

/* File access modes for open and fcntl.  */

/* Open for read only.  */
#define O_RDONLY	0
/* Open for write only.  */
#define O_WRONLY	1
/* Open for read/write.  */
#define O_RDWR		2

/* Bits OR'd into the second argument to open.  */

/* Create file if it doesn't exist.  */
#define O_CREAT 	0x0200
/* Fail if file already exists.  */
#define O_EXCL		0x0800
/* Truncate file to zero length.  */
#define O_TRUNC	    	0x0400
/* Send SIGIO to owner when data is ready.  */
#define O_ASYNC		0x0040
/* Synchronous writes.  */
#define O_FSYNC		0x0080
#define O_SYNC		O_FSYNC
/* Open with shared file lock.  */
#define O_SHLOCK	0x0010
/* Open with shared exclusive lock.  */
#define O_EXLOCK	0x0020

/* File status flags for open and fcntl.  */

/* Writes append to the file.  */
#define O_APPEND	0x0008
/* Non-blocking I/O.  */
#define O_NONBLOCK      0x0004
#define O_NDELAY	O_NONBLOCK

/* close on exec() flag - must be bit 8 */
#define O_EXECCL	0x0100

#define O_BINARY	0x2000
#define O_TEXT		0x1000

#define O_PIPE		0x4000 /* UnixLib specific */

/* Mask for file access modes.  This is system-dependent in case
   some system ever wants to define some other flavor of access.  */
#define	O_ACCMODE	(O_RDONLY|O_WRONLY|O_RDWR)


/* Duplicate file descriptor.  */
#define F_DUPFD 	0
/* Return file descriptor flags.  */
#define F_GETFD 	1
/* Set file descriptor flags.  */
#define F_SETFD 	2
/* Read file status flags.  */
#define F_GETFL 	3
/* Set file status flags.  */
#define F_SETFL 	4
/* Get owner (receiver of SIGIO).  */
#define F_GETOWN        5
/* Set owner (receiver of SIGIO).  */
#define F_SETOWN        6
/* Get record locking info.  */
#define F_GETLK	        7
/* Set record locking info (non-blocking).  */
#define F_SETLK		8
/* Set record locking info (blocking).  */
#define F_SETLKW	9

/* Bits in the file status flags returned by F_GETFL.  */
#define FREAD		1
#define	FWRITE		2

/* Traditional BSD names the O_* bits.  */
#define FASYNC		O_ASYNC
#define FCREAT		O_CREAT
#define FEXCL		O_EXCL
#define FTRUNC		O_TRUNC
#define FNOCTTY		O_NOCTTY
#define FFSYNC		O_FSYNC
#define FSYNC		O_SYNC
#define FAPPEND		O_APPEND
#define FNONBLOCK	O_NONBLOCK
#define FNDELAY		O_NDELAY

/* If set, cause the file descriptor to be closed if an exec function
   is used.  Initially, set clear.  */
#define FD_CLOEXEC	O_EXECCL


/* Open FILE and return a new file descriptor for it, or -1 on error.
   OFLAG determines the type of access used.  If O_CREAT is on OFLAG, the
   third argument is taken as a `mode_t', the mode of the created file.  */
extern int open (const char *file, int oflag, ...);


/* Return the file handle for a given FILE.  */
extern int gnufileno(FILE *f);


/* Is this a terminal (ie. not redirected)? */
extern int isatty(int fd);


/* From unistd.h: */

/* Move fd's file position to offset bytes from the:
   beginning of the file (if SEEK_SET),
   the current position (if SEEK_CUR),
   or the end of the file (SEEK_END).
   Return the new file position.  */
extern long int lseek (int fd, long int offset, int whence);

/* Close the file descriptor fd.  */
extern int close (int fd);

/* Open file & set access. */
extern int creat (const char *file, int mode);

/* Read nbytes into buf from fd.  */
extern size_t read (int fd, void *buf, size_t nbytes);

/* Write n bytes of buf to fd.  */
extern size_t write (int fd, const void *buf, size_t n);


#define HAVE_STRUCT_UTIMBUF 1

struct utimbuf
{
  time_t actime;
  time_t modtime;
};

/* Reopen a file */
extern FILE *fdopen(int fd, const char *mode);

/* Set the file's datestamp */
extern int utime (const char *file, const struct utimbuf *time);

/* Set the file's attributes */
extern int chmod (const char *file, int attr);

/* Change directory */
extern int chdir (const char *);


/* Create a directory */
extern int mkdir (const char *);
#define mkdir(x,y) (mkdir)((x))

/* Remove a directory */
#define rmdir(x) remove((x))

/* Get current directory */
extern int getcwd (char *, int);

/* Move/rename file */
extern int movefile (const char *old, const char *new);
#define rename(x,y) movefile(x,y)

/* Copy file */
extern int copyfile (const char *old, const char *new);

/* Filename from file handle */
extern const char *fileno_to_name (int fd);


/* Object checks */
extern int isdir (const char *);
extern int isfile (const char *);

/* From stdio.h: */

/* Create a new stream connected to a pipe running the given command.  */
extern FILE *popen (const char *command, const char *modes);

/* Close a stream opened by popen and return the status of its child.  */
extern int pclose (FILE *stream);


/* Munged from stat.h: */

struct stat {
  long 		st_mode; /* File mode. */
  long	 	st_size; /* Size of file, in bytes. */
  time_t	st_atime; /* Time of last access. */
  time_t	st_mtime; /* Time of last modification. */
  time_t	st_ctime; /* Time of last status change. */
  int		st_type; /* File type. */
  long          ro_load, ro_exec;
};

/* Bit masks.  */

/* Extract the file type code portion of a mode value.  */
#define S_IFMT		(3<<16)

/* File type code for a directory. */
#define S_IFDIR 	(2<<16)
/* File type code for a regular file. */
#define S_IFREG 	(1<<16)
/* Unimplemented. */
#define S_IFIFO 	0
#define S_IFPORT	0
#define S_IFCHR 	0
#define S_IFBLK 	0
#define S_IFLNK 	0
#define S_ISUID 	0
#define S_ISGID 	0
#define S_IFSOCK        0

/* Protection bits.  */

#define S_ISVTX 	0
/* Owner rwx */
#define S_IREAD         0x1
#define S_IWRITE	0x2
#define S_IEXEC		0x1

/* Owner rwx */
#define S_IXUSR 0x1
#define S_IWUSR 0x2
#define S_IRUSR 0x1
#define S_IRWXU 0x3

/* Group rwx */
#define	S_IRGRP	0x10
#define	S_IWGRP	0x20
#define	S_IXGRP	0x10
#define	S_IRWXG	0x30

/* Others rwx */
#define	S_IROTH	0x10
#define	S_IWOTH	0x20
#define	S_IXOTH	0x10
#define	S_IRWXO	0x30


/* Return nonzero if the file is a directory. */
#define S_ISDIR(x)  ((x) & S_IFDIR)
/* Return nonzero if the file is a regular file. */
#define S_ISREG(x)  ((x) & S_IFREG)
/* Unimplemented. */
#define S_ISCHR(x)  (0)
#define S_ISBLK(x)  (0)
#define S_ISFIFO(x) (0)
#define S_ISLNK(x)  (0)
#define S_ISSOCK(x) (0)

extern int stat (const char *, struct stat *);
extern int fstat (int, struct stat *);

#define ISSLASH(c) ((c)=='.')
#define IS_SLASH(c) ((c)=='.')

#define FILESYSTEM_PREFIX_LEN(x) 0


#ifndef _IOBIN
# define _IOBIN 4
#endif

#define SET_BINARY(fd) \
  { \
    if (!isatty (fd)) \
      __iob[fd].__flag |= _IOBIN; \
  }
void (SET_BINARY)(int);

#define SET_BINARY2(f, g) \
  { \
    SET_BINARY (f); \
    SET_BINARY (g); \
  }
void (SET_BINARY2)(int, int);

#define SETVBUF(a,b,c,d) setvbuf ((a), (b), (c), (d))

#define fseeko(x,y,z) (-1)

#ifdef __cplusplus
	}
#endif

#endif
