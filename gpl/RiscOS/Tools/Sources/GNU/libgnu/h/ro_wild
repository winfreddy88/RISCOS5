/* ro_wild.h -- RISC OS wildcarded filename expansion library.
   Copyright (C) 1999 Free Software Foundation, Inc.
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions are
   met:
   1. Redistributions of source code must retain the above copyright notice,
   this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
   3. All advertising materials mentioning features or use of this software
   must display the following acknowledgement:
   This product includes software developed by Darren Salt.
   4. The name of the author may not be used to endorse or promote products
   derived from this software without specific prior written permission.

   This software is provided by the author "as is" and any express or implied
   warranties including, but not limited to, the implied warranties of
   merchantability and fitness for a particular purpose are disclaimed. in no
   event shall the author be liable for any direct, indirect, incidental,
   special, exemplary, or consequential damages (including, but not limited
   to, procurement of substitute goods or services; loss of use, data, or
   profits; or business interruption) however caused and on any theory of
   liability, whether in contract, strict liability, or tort (including
   negligence or otherwise) arising in any way out of the use of this
   software, even if advised of the possibility of such damage.
 */

/* Written by Darren Salt <ds@youmustbejoking.demon.co.uk>.  */

/* The purpose of this library is to return the names of all existing files
 * and directories which match the specified wildcarded object name, one at a
 * time.
 *
 * An object is a normal file, a directory, or an image file.
 * This library treats image files as directories.
 * Directory read errors, and the affected directories, are quietly ignored.
 *
 * Typical usage:
 *
 * // Does the object name contain wildcards?
 *   if (ro_wild_test (objectname))
 *   {
 * // The object name is wildcarded
 *     char *file;
 *     ro_wild *wild = ro_wild_init (objectname);
 * // |file| will contain 0 when there are no more matching object names
 *     while ((file = ro_wild_next (wild)) != 0)
 *     {
 * // we have an object name - let's do something with it
 *       process (file);
 *     }
 * // if no object names were returned, do something, eg. display an error
 *     if (! ro_wild_finish (wild))
 *     {
 *       fprintf (stderr, "'%s' not found", objectname);
 *     }
 *   }
 *   else
 *   {
 * // The object name is not wildcarded
 *     process (objectname);
 *   }
 */

#ifndef __ro_wild_h
#define __ro_wild_h

/* These structures are for internal use only. */

typedef struct ro_wild_path_t
  {
    char *pathvar, *pathstart, *pathend;
    char *pathtail;
    struct ro_wild_path_t *up;
  }
ro_wild_path;

typedef struct ro_wild_t
  {
    int offset;
    int state, wildcard, b, e, found;
    char *processed, *remaining;
    char *path, *node;
    ro_wild_path *pathvar;
    struct ro_wild_t *up, *down;
  }
ro_wild;


extern int ro_wild_test (const char *);
/* Return nonzero if the given object name contains wildcards. */

extern ro_wild *ro_wild_init (const char *);
/* Initialise a search for objects matching the given wildcarded object name.
 * Returns a pointer to a search structure.
 */

extern char *ro_wild_next (ro_wild *);
/* Return the next matching object name, or 0 if there are no more.
 * This requires the search structure pointer returned by ro_wild_init().
 * The returned string is read only and is stored in an internal buffer; you
 * are advised to make a local copy.
 */

extern int ro_wild_finish (ro_wild *);
/* Finish. (Frees up the search structure; you must discard your pointer.)
 * Returns 0 if no object names were returned, else returns 1; this is useful
 * for error reporting purposes.
 */

#endif
