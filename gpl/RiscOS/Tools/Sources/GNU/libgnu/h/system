/* system.h -- system-dependent definitions; RISC OS implementation
   Copyright (C) 1999 Free Software Foundation, Inc.

   This library is free software; you can redistribute it and/or modify it
   under the terms of the GNU Library General Public License as published by
   the Free Software Foundation; either version 2, or (at your option) any
   later version.

   This library is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
   or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
   for more details.

   You should have received a copy of the GNU Library General Public License
   along with this library; if not, write to the Free Software Foundation,
   Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

/* Written by Darren Salt <ds@youmustbejoking.demon.co.uk>, using some
   material from other sources.  */

#ifndef __system_ro_h
#define __system_ro_h

#ifndef __STDC__
# define __STDC__ 1
#endif


/* General #includes.  */

#include <kernel.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <signal.h>
#include <errno.h>
#include <setjmp.h>
#include <ctype.h>
#include <locale.h>
#include <limits.h>

#include "ro_file.h"


/* A few typedefs.  */

#ifdef __GCC__
typedef long long intmax_t;
typedef unsigned long long uintmax_t;
#else
typedef long intmax_t;
typedef unsigned long uintmax_t;
# ifndef __attribute__
#  define __attribute__(x)
# endif
#endif
typedef signed long ssize_t;
typedef long strtol_t;
#define false (0)
#define true (1)
typedef unsigned int bool;

#define UINTMAX_MAX UINT_MAX
#define SIZE_MAX 2048*1024

#ifndef RETSIGTYPE
#define RETSIGTYPE void
#endif

#if 0
#define __P(Args) (Args)
#endif

#ifndef PARAMS
#define PARAMS(x) x
#endif
/*#define VOID void*/


/* Say that various things are available.  */

#define STDC_HEADERS	1

#define HAVE_ALLOCA_H	1
#define HAVE_ASSERT_H	1
#define HAVE_CONFIG_H	1
#define HAVE_CTYPE_H	1
#define HAVE_ERRNO_H	1
#define HAVE_FLOAT_H	1
#define HAVE_KERNEL_H	1
#define HAVE_LIMITS_H	1
#define HAVE_LOCALE_H	1
#define HAVE_MATH_H	1
#define HAVE_SETJMP_H	1
#define HAVE_SIGNAL_H	1
#define HAVE_STDARG_H	1
#define HAVE_STDDEF_H	1
#define HAVE_STDIO_H	1
#define HAVE_STDLIB_H	1
#define HAVE_STRING_H	1
#define HAVE_TIME_H	1
#define HAVE_VARARGS_H  1

#define HAVE_FLOOR	1
#define HAVE_GETCWD	1
#define HAVE_ISATTY	1
#define HAVE_MKDIR	1
#define HAVE_MODF	1
#define HAVE_SETLOCALE	1
#define HAVE_STRERROR	1
#define HAVE_TMPNAM	1
#define HAVE_VPRINTF	1
#define HAVE_STRCHR	1

#define HAVE_RINT	0

#define HAVE_DECL_GETENV     1
#define HAVE_DECL_MALLOC     1

#define HAVE_DECL_STRERROR_R 0

#define WITH_REGEX	1

#define PATH_MAX	1024

#define ATTRIBUTE_UNUSED

/* Signal handlers and signal numbers.  */

#if defined SIG_DFL && !defined __GNUC__
# ifdef Handler
#  undef Handler
# endif
typedef void Handler(int);
# undef SIG_DFL
# undef SIG_IGN
# undef SIG_ERR
# define SIG_DFL ((Handler*)-1)
# define SIG_IGN ((Handler*)-2)
# define SIG_ERR ((Handler*)-3)
#endif

#undef EDOM
#undef ERANGE
#ifdef ENOENT
# undef ENOENT
#endif
#ifdef EIO
# undef EIO
#endif
#ifdef EBADDESC
# undef EBADDESC
#endif
#ifdef EEXIST
# undef EEXIST
#endif
#ifdef EISDIR
# undef EISDIR
#endif
#ifdef EINVAL
# undef EINVAL
#endif
#ifdef ENOSPC
# undef ENOSPC
#endif

#define EOSERR	 -1
#define EDOM	 1
#define ERANGE	 2
#define ENOENT	 3
#define EIO	 4
#define EBADDESC 5
#define EEXIST	 6
#define EISDIR	 7
#define EINVAL	 8
#define ENOSPC	 9
#define ENOMEM	 10


/* Tab expansion for when stdout is not redirected.  */

#define CHECK_TAB_EXPAND(tab) \
  { \
    if (__iob[1].__file == 0 /*|| _swi (0x5E, 3|1<<16, -1,-1)*/) \
      tab = 1; \
  }


/* Some general #defines.  */

#define STREQ(x,y)	(!strcmp ((x),(y)))
int (STREQ)(const char *, const char *);

#define unlink(x)	remove(x)
#define sleep(x)
#define kill(x,y)	exit(0)
#define _exit(x)	exit(x)

#define min(x,y) ((x)<(y) ? (x) : (y))
#define max(x,y) ((x)>(y) ? (x) : (y))
#define MIN(x,y) ((x)<(y) ? (x) : (y))
#define MAX(x,y) ((x)>(y) ? (x) : (y))

#define bcopy(from, to, len) memcpy(to, from, len)
#define bzero(ptr, len) memset(ptr, 0, len)

#ifndef CHAR_BIT
# define CHAR_BIT 8
#endif


/* General functions.  */

extern char *strdup(const char *);
extern char *xstrdup(const char *);
extern char *stpcpy(char *, const char *);
extern void xexit (int);
extern char *substring (const char *, const char *);

extern char *ds_getenv(const char *);

#include "xalloc.h"

#define safe_read(x,y,z) read(x,y,z)
#define full_write(x,y,z) write(x,y,z)


/* A few RISC OS bits, including replacement error & temporary file functions.
 */

extern const char *filename_lastdirchar(const char *const name);
extern const char *zp_tmpnam(char *);
extern FILE *zp_tmpfile(void);
extern const char *zp_tmpread(FILE *);

extern void ds_perror(const char *);
extern const char *ds_strerror(int);
#define perror(x) ds_perror(x)
#define strerror(x) ds_strerror(x)

extern int __ro_return_os_error (const _kernel_oserror * const err);

/* We need this somewhere...  */

#define execvp(x,y) (execvp)(y)
extern int (execvp)(char **);


/* Factor out some of the common --help and --version processing code.  */

#define GETOPT_HELP_CHAR 250
#define GETOPT_VERSION_CHAR 251

#define GETOPT_HELP_OPTION_DECL \
  "help", no_argument, 0, GETOPT_HELP_CHAR
#define GETOPT_VERSION_OPTION_DECL \
  "version", no_argument, 0, GETOPT_VERSION_CHAR

#define case_GETOPT_HELP_CHAR			\
  case GETOPT_HELP_CHAR:			\
    usage (EXIT_SUCCESS);			\
    break;

#include "closeout.h"
#include "version-etc.h"

#define case_GETOPT_VERSION_CHAR(Program_name, Authors)			\
  case GETOPT_VERSION_CHAR:						\
    version_etc (stdout, Program_name, GNU_PACKAGE, VERSION, Authors);	\
    close_stdout ();							\
    exit (EXIT_SUCCESS);						\
    break;


/* File stuff.  */

#define _PTR_T
#ifndef __STDDEF_H
typedef void *ptr_t;
#endif
typedef long off_t;
typedef int mode_t;
#define OFF_T_MAX (0x7FFFFFFF)

#ifndef STDIN_FILENO
# ifdef USING_POSIX
#  define STDIN_FILENO  0
#  define STDOUT_FILENO 1
#  define STDERR_FILENO 2
# else
#  define STDIN_FILENO  stdin
#  define STDOUT_FILENO stdout
#  define STDERR_FILENO stderr
# endif
#endif

#define STAT_BLOCKSIZE(x) 4096

#ifndef errno
extern int errno;
#endif

#ifndef EXIT_FAILURE
# define EXIT_FAILURE 1
#endif

#ifndef EXIT_SUCCESS
# define EXIT_SUCCESS 0
#endif

#if !defined(SEEK_SET)
#define SEEK_SET 0
#define SEEK_CUR 1
#define SEEK_END 2
#endif

#define DEV_BSIZE 4096

#define ST_BLKSIZE(statbuf) DEV_BSIZE

#define NULL_DEVICE "null:"


/* Character set.  */

#define IN_CTYPE_DOMAIN(c) 1

#define ISBLANK(c) ((c) == ' ' || (c) == '\t')
#define ISGRAPH(c) (isgraph (c))

#define ISPRINT(c) (isprint (c))
#define ISALNUM(c) (isalnum (c))
#define ISALPHA(c) (isalpha (c))
#define ISCNTRL(c) (iscntrl (c))
#define ISLOWER(c) (islower (c))
#define ISPUNCT(c) (ispunct (c))
#define ISSPACE(c) (isspace (c))
#define ISUPPER(c) (isupper (c))
#define ISXDIGIT(c) (isxdigit (c))
#define ISDIGIT_LOCALE(c) (isdigit (c))
#define ISDIGIT(c) ((unsigned) (c) - '0' <= 9)

#define TOLOWER(c) (tolower (c))
#define TOUPPER(c) (toupper (c))


/* Take care of NLS matters.  */

#if ENABLE_NLS
# include <libintl.h>
#else
# undef bindtextdomain
# define bindtextdomain(Domain, Directory) /* empty */
# undef textdomain
# define textdomain(Domain) /* empty */
# define gettext(Text) Text
#endif
#ifndef _
#define _(Text) gettext(Text)
#endif
#ifndef N_
#define N_(Text) Text
#endif


/* Multibyte character -> singlebyte character */

#define mbswidth(str,flags) strlen (str)


/* Other bits */

#ifndef filename_cmp
#define filename_cmp(a, b) strcmp (a, b)
#endif

int strcasecmp (const char *, const char *);
int strncasecmp (const char *, const char *, size_t);

#define HAVE_FORK 0
#define HAVE_SETMODE 0

#ifndef initialize_main
#define initialize_main(argcp, argvp)
#endif

#ifdef SYSTEM_QUOTE_ARG
#undef SYSTEM_QUOTE_ARG
#endif
#define SYSTEM_QUOTE_ARG(q, a) \
  { \
    *(q)++ = '"'; \
    for (;  *(a);  *(q)++ = *(a)++) \
      if (*(a) == '"') \
	{ \
	  *(q)++ = '"'; \
	  *(q)++ = '\\'; \
	  *(q)++ = '"'; \
	} \
    *(q)++ = '"'; \
  }


#define TYPE_SIGNED(t) (! ((t) 0 < (t) -1))
#define TYPE_MINIMUM(t) ((t) (TYPE_SIGNED (t) \
			      ? ~ (t) 0 << (sizeof (t) * CHAR_BIT - 1) : (t) 0))
#define TYPE_MAXIMUM(t) (~ (t) 0 - TYPE_MINIMUM (t))

#define INT_STRLEN_BOUND(t) ((sizeof (t) * CHAR_BIT - 1) * 302 / 1000 + 2)

#ifdef lint
# define IF_LINT(Code) Code
#else
# define IF_LINT(Code) /* empty */
#endif

#undef ATTRIBUTE_NORETURN
#define ATTRIBUTE_NORETURN

#endif
