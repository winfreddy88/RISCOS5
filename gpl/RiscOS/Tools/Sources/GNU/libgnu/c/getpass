/* Copyright (C) 1992,93,94,95,96,97,98,99,2000 Free Software Foundation, Inc.
   This file is part of the GNU C Library.

   The GNU C Library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Library General Public License as
   published by the Free Software Foundation; either version 2 of the
   License, or (at your option) any later version.

   The GNU C Library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with the GNU C Library; see the file COPYING.LIB.  If not,
   write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#if HAVE_CONFIG_H
# include <config.h>
#endif

#include <stdio.h>
#ifndef __riscos
#include <termios.h>
#include <unistd.h>
#endif
#include "getline.h"

/* It is desirable to use this bit on systems that have it.
   The only bit of terminal state we want to twiddle is echoing, which is
   done in software; there is no need to change the state of the terminal
   hardware.  */

#ifndef TCSASOFT
# define TCSASOFT 0
#endif

#ifdef __riscos
#include <swis.h>
static int stdin_file;
static int stdout_file;
static int my_in_file;
static int my_out_file;

static void
atexit_close (void)
{
  /* Evil. Probably better to fopen ("rawkbd:", "r") :-) */
  if (stdin->__file && stdin->__file == my_in_file)
    stdin->__file = stdin_file;
  if (stdout->__file && stdout->__file == my_out_file)
    stdout->__file = stdout_file;
  if (my_in_file)
    {
      _swix (OS_Find, _INR (0, 1), 0, my_in_file);
      my_in_file = 0;
    }
  if (my_out_file)
    {
      _swi (OS_Find, _INR (0, 1), 0, my_out_file);
      my_out_file = 0;
    }
}
#endif

char *
getpass (const char *prompt)
{
#ifdef __riscos
# define in stdin
# define out stdout
# define tty_changed 0
  static int first = 1;
#else
  FILE *in, *out;
  struct termios s, t;
  int tty_changed;
#endif
  static char *buf;
  static size_t bufsize;
  ssize_t nread;

  /* Try to write to and read from the terminal if we can.
     If we can't open the terminal, use stderr and stdin.  */
#ifndef __riscos
  in = fopen ("/dev/tty", "w+");
  if (in == NULL)
    {
      in = stdin;
      out = stderr;
    }
  else
    out = in;

  /* Turn echoing off if it is on now.  */

  if (tcgetattr (gnufileno (in), &t) == 0)
    {
      /* Save the old one. */
      s = t;
      /* Tricky, tricky. */
      t.c_lflag &= ~(ECHO|ISIG);
      tty_changed = (tcsetattr (gnufileno (in), TCSAFLUSH|TCSASOFT, &t) == 0);
    }
  else
    tty_changed = 0;
#endif

  /* Write the prompt.  */
  fputs (prompt, out);
  fflush (out);

#ifdef __riscos
  if (first)
    {
      first = 0;
      atexit (atexit_close);
    }
  stdin_file = stdin->__file;
  my_in_file = stdin->__file = _swi (OS_Find, _INR (0, 1), 0x43, "rawkbd:");
  stdout_file = stdout->__file;
  my_out_file = stdout->__file = _swi (OS_Find, _INR (0, 1), 0x83, "null:");
#endif

  /* Read the password.  */
  nread = getline (&buf, &bufsize, in);
  if (buf != NULL)
    {
      if (nread < 0)
	buf[0] = '\0';
      else if (buf[nread - 1] == '\n')
	{
	  /* Remove the newline.  */
	  buf[nread - 1] = '\0';
	  if (tty_changed)
	    /* Write the newline that was not echoed.  */
	    putc ('\n', out);
	}
    }

  /* Restore the original setting.  */
#ifdef __riscos
  atexit_close ();
#else
  if (tty_changed)
    (void) tcsetattr (gnufileno (in), TCSAFLUSH|TCSASOFT, &s);

  if (in != stdin)
    /* We opened the terminal; now close it.  */
    fclose (in);
#endif

  return buf;
}
