/* ds_error.c
   An implementation of perror() and strerror(), supporting more values
   of errno than the SCL.
   Copyright (C) 1999 Darren Salt
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions are
   met:
   1. Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
   3. All advertising materials mentioning features or use of this software
      must display the following acknowledgement:
        This product includes software developed by Darren Salt.
   4. The name of the author may not be used to endorse or promote products
      derived from this software without specific prior written permission.

   This software is provided by the author "as is" and any express or implied
   warranties including, but not limited to, the implied warranties of
   merchantability and fitness for a particular purpose are disclaimed. in no
   event shall the author be liable for any direct, indirect, incidental,
   special, exemplary, or consequential damages (including, but not limited
   to, procurement of substitute goods or services; loss of use, data, or
   profits; or business interruption) however caused and on any theory of
   liability, whether in contract, strict liability, or tort (including
   negligence or otherwise) arising in any way out of the use of this
   software, even if advised of the possibility of such damage.
 */

/* Written by Darren Salt <ds@youmustbejoking.demon.co.uk>.  */

#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <kernel.h>

extern char *strdup(const char *);


static const char *const msglist[] = {
  "No error (errno = 0)",
  "function argument out of range",
  "function result not representable",
  "no such file or directory",
  "I/O error",
  "bad file descriptor",
  "file exists",
  "is a directory",
  "invalid parameters",
  "device full",
  "out of memory"
};

#define msglist_size (sizeof(msglist)/sizeof(char*))

static const char *
get_os_error (void)
{
  static const char *err = 0;
  _kernel_oserror *x = _kernel_last_oserror ();

  if (x)
    {
      free((void*)err);
      return err = strdup(x->errmess);
    }
  return 0;
}


const char *
ds_strerror (int no)
{
  if (no == -1)
    {
      const char *err = get_os_error ();
      return err ? err : "OS error";
    }
  if ((unsigned) no < msglist_size)
    return msglist[no];
  else
    {
      static char bad[] = "Unknown error (errno=0000000000)";
      sprintf (bad + 21, "%u)", (unsigned) no);
      return bad;
    }
}


void
ds_perror (const char *msg)
{
  if (msg)
    fprintf (stderr, "%s: %s\n", msg, ds_strerror (errno));
  else
    fprintf (stderr, "%s\n", ds_strerror (errno));
  errno=0;
}
