;  closeout.s -- closeout for RISC OS
;  Copyright (C) 1999 Darren Salt
;  All rights reserved.

;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions are
;  met:
;  1. Redistributions of source code must retain the above copyright notice,
;     this list of conditions and the following disclaimer.
;  2. Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in the
;     documentation and/or other materials provided with the distribution.
;  3. All advertising materials mentioning features or use of this software
;     must display the following acknowledgement:
;       This product includes software developed by Darren Salt.
;  4. The name of the author may not be used to endorse or promote products
;     derived from this software without specific prior written permission.

;  This software is provided by the author "as is" and any express or implied
;  warranties including, but not limited to, the implied warranties of
;  merchantability and fitness for a particular purpose are disclaimed. in no
;  event shall the author be liable for any direct, indirect, incidental,
;  special, exemplary, or consequential damages (including, but not limited
;  to, procurement of substitute goods or services; loss of use, data, or
;  profits; or business interruption) however caused and on any theory of
;  liability, whether in contract, strict liability, or tort (including
;  negligence or otherwise) arising in any way out of the use of this
;  software, even if advised of the possibility of such damage.

;  Written by Darren Salt <ds@youmustbejoking.demon.co.uk>.

;  (Following description from GNU closeout.c)

;  Close standard output, exiting with status STATUS on failure. If a program
;  writes *anything* to stdout, that program should `fflush' stdout and make
;  sure that it succeeds before exiting.  Otherwise, suppose that you go to
;  the extreme of checking the return status of every function that does an
;  explicit write to stdout.  The last printf can succeed in writing to the
;  internal stream buffer, and yet the fclose(stdout) could still fail (due
;  e.g., to a disk full error) when it tries to write out that buffered data.
;  Thus, you would be left with an incomplete output file and the offending
;  program would exit successfully.
;
;  FIXME: note the fflush suggested above is implicit in the fclose we
;  actually do below.  Consider doing only the fflush and/or using setvbuf to
;  inhibit buffering.
;
;  Besides, it's wasteful to check the return value from every call that
;  writes to stdout -- just let the internal stream state record the failure.
;  That's what the ferror test is checking below.
;
;  It's important to detect such failures and exit nonzero because many tools
;  (most notably `make' and other build-management systems) depend on being
;  able to detect failure in other tools via their exit status.

	GET	s.~include
	GET	hdr.system

	AREA	|Asm$$Code|, CODE, READONLY

	EXPORT	close_stdout
	EXPORT	close_stdout_status
	EXPORT	close_stdout_set_status

	IMPORT	ferror
	IMPORT	fclose
	IMPORT	error		; assume no return from here
	IMPORT	__iob
	IMPORT	__errno

close_stdout_set_status
	MOV	PC,R14

	HEAD	"close_stdout"
close_stdout
	MOV	r0, #1
close_stdout_status
	FNJSRA	"r4"
	MOV	r4,r0
	LDR	r0,=__iob+&28	; stdout
	BL	ferror
	TEQ	r0,#0
	MOVNE	r1,#0
	BNE	__error
	LDR	r0,=__iob+&28	; stdout
	BL	fclose
	TEQ	r0,#0
	FNRTSA	EQ
	LDR	r1,=__errno
	LDR	r1,[r1]
__error	MOV	r0,r4
	ADR	r2,msg
	FNPULLA
	B	error

msg	=	"write error", 0
	ALIGN


	END
