;  alloca.s -- alloca for RISC OS + SharedCLibrary (but not libgcc)
;  Copyright (C) 1999 Darren Salt
;  All rights reserved.

;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions are
;  met:
;  1. Redistributions of source code must retain the above copyright notice,
;     this list of conditions and the following disclaimer.
;  2. Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in the
;     documentation and/or other materials provided with the distribution.
;  3. All advertising materials mentioning features or use of this software
;     must display the following acknowledgement:
;       This product includes software developed by Darren Salt.
;  4. The name of the author may not be used to endorse or promote products
;     derived from this software without specific prior written permission.

;  This software is provided by the author "as is" and any express or implied
;  warranties including, but not limited to, the implied warranties of
;  merchantability and fitness for a particular purpose are disclaimed. in no
;  event shall the author be liable for any direct, indirect, incidental,
;  special, exemplary, or consequential damages (including, but not limited
;  to, procurement of substitute goods or services; loss of use, data, or
;  profits; or business interruption) however caused and on any theory of
;  liability, whether in contract, strict liability, or tort (including
;  negligence or otherwise) arising in any way out of the use of this
;  software, even if advised of the possibility of such damage.

;  Written by Darren Salt <ds@youmustbejoking.demon.co.uk>.


; void *alloca(int)

; This implementation of alloca() uses malloc() to claim the blocks (stack
; extension isn't practical), and fiddles the stack frame in order to ensure
; that its 'free' code is called.

; An alloca()-claimed block will be freed when the function which set up the
; current stack frame is exited; this will normally be the function which
; called alloca() to claim the block.

; If (and only if) there is no stack frame, then alloca() behaves exactly as
; malloc(); you must call free().

	GET	s.~include

magic	*	0xD5A110CA	; "DS alloca"

	AREA	|Asm$$Code|, CODE, READONLY

	EXPORT	alloca
	EXPORT	___arm_alloca_alloc

	IMPORT	malloc
	IMPORT	free
	IMPORT	abort

;___arm_alloca_setjmp	; setjmp wrapper
;___arm_alloca_longjmp	; longjmp wrapper

___arm_alloca_alloc
alloca	FNJSR
	ADD	r0,r0,#12
	BL	malloc		; allocate the memory
	TEQ	r0,#0
	TEQNE	r11,#0
	FNRTS	EQ		; return early if malloc failed
	LDR	lr,=alloca_head
	LDR	r2,[fp,#-4]	; get return address of caller
	LDR	r1,[lr]		;  and current head of alloca list
	LDR	r3,=magic
	STMIA	r0,{r1-r3}	; store them together with a magic word
	STR	r0,[lr]		; this block now heads the list
	AND	r2,r2,#&FC000003; flag bits
	ADR	r1,alloca_free
	ORR	r2,r2,r1	; point at our 'free' function
	STR	r2,[fp,#-4]	; let's play havoc with backtraces :-)
	ADD	r0,r0,#12	; point past our header info
	FNRTS

alloca_free
	LDR	lr,=alloca_head
	STMFD	r13!,{r0-r4}	; preserve registers
	LDR	r0,[lr]		; get the head of the alloca list
	LDR	r1,=magic
	LDR	r2,[r0,#8]	; read the magic word,
	LDMIA	r0,{r3,r4}	;  addr of next block, and return address
	TEQ	r1,r2		; is the magic word OK?
	BNE	abort		; ... if not :-(
	STR	r3,[lr]		; next block moved to list head
	BL	free		; free this block
	MOV	lr,r4
	LDMFD	sp!,{r0-r4}	; restore registers
	FNRET			; and return


	AREA	|Asm$$Code$$alloca|, CODE, READONLY

	EXPORT	___arm_alloca_setjmp
	EXPORT	___arm_alloca_longjmp

	IMPORT	setjmp
	IMPORT	longjmp

___arm_alloca_setjmp
	LDR	ip,=alloca_head	; for later freeing if longjmp is called
	STR	ip,[r0],#4
	B	setjmp

___arm_alloca_longjmp
	LDR	r3,[r0],#4
	STMFD	sp!,{r0,lr}
	LDR	r2,=alloca_head
___free	LDR	r0,[r2]		; free any blocks claimed since this
	TEQ	r0,r3		; jmp_buf was initialised
	LDMEQFD	sp!,{r0,r4,r5,lr}
	BEQ	longjmp
	BL	alloca_free
	B	___free


	AREA	|ASM$$Data|, DATA, NOINIT

alloca_head
	&	0


	END
