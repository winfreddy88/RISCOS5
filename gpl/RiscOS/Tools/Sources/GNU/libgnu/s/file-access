;  file-access.s -- various file access functions
;   read(), write(), close(), lseek(), fileno(),
;   chmod(), chdir(), mkdir(), getcwd()
;  Copyright © 1999 Darren Salt.
;  All rights reserved.

;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions are
;  met:
;  1. Redistributions of source code must retain the above copyright notice,
;     this list of conditions and the following disclaimer.
;  2. Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in the
;     documentation and/or other materials provided with the distribution.
;  3. All advertising materials mentioning features or use of this software
;     must display the following acknowledgement:
;       This product includes software developed by Darren Salt.
;  4. The name of the author may not be used to endorse or promote products
;     derived from this software without specific prior written permission.

;  This software is provided by the author "as is" and any express or implied
;  warranties including, but not limited to, the implied warranties of
;  merchantability and fitness for a particular purpose are disclaimed. in no
;  event shall the author be liable for any direct, indirect, incidental,
;  special, exemplary, or consequential damages (including, but not limited
;  to, procurement of substitute goods or services; loss of use, data, or
;  profits; or business interruption) however caused and on any theory of
;  liability, whether in contract, strict liability, or tort (including
;  negligence or otherwise) arising in any way out of the use of this
;  software, even if advised of the possibility of such damage.

;  Written by Darren Salt <ds@youmustbejoking.demon.co.uk>.

	GET	s.~include
	GET	hdr.system

	IMPORT	__iob
	IMPORT	__errno
	IMPORT	fclose
	IMPORT	ferror
	IMPORT	fread
	IMPORT	fseek
	IMPORT	ftell
	IMPORT	fwrite

	IMPORT	_kernel_udiv

	IMPORT	__ro_ifdot
	IMPORT	__ro_return_os_error

;************
; POSIX-like
;************

	AREA	|C$$code_1|, CODE, READONLY

; int read (int fd, void *buf, size_t n_bytes)

	EXPORT	read
read	MOV	a4,#1
	B	__ro_internal_rw


	AREA	|C$$code_2|, CODE, READONLY

; int write (int fd, void *buf, size_t n_bytes)

	EXPORT	write
write	MOV	a4,#0
	B	__ro_internal_rw


	AREA	|C$$code_3|, CODE, READONLY

; int close (int fd)

	EXPORT	close
close	CMP	a1,#_SYS_OPEN
	MOVHS	a1,#0
	FNRET	HS
	LDR	a2,=__iob
	ADD	a2,a2,a1,LSL #5	; add |fd| * sizeof(FILE)
	ADD	a1,a2,a1,LSL #3
	B	fclose


	AREA	|C$$code_4|, CODE, READONLY

; long int lseek (int fd, long int offset, int whence)

	EXPORT	lseek
	HEAD	"lseek"
lseek	FNJSRA	"v1"
	CMP	a1,#_SYS_OPEN
	LDRHS	lr,=__errno
	MOVHS	a1,#EBADDESC
	STRHS	a1,[lr]
	MOVHS	a1,#-1
	FNRTSA	HS
	LDR	v1,=__iob
	ADD	v1,v1,a1,LSL #5	; add |fd| * sizeof(FILE)
	ADD	v1,v1,a1,LSL #3
	MOV	a1,v1
	BL	fseek
	TEQ	a1,#0
	MOVNE	a1,#-1
	MOVEQ	a1,v1
	BLEQ	ftell
	FNRTSA


	AREA	|C$$code_5|, CODE, READONLY

; int gnufileno (FILE *f)

	EXPORT	gnufileno
gnufileno LDR	a2,=__iob
	SUB	a2,a1,a2
	CMP	a2,#sizeof_FILE * _SYS_OPEN
	MOVHS	a1,#-1
	FNRET	HS
	MOV	a1,#sizeof_FILE
	B	_kernel_udiv	; returns the quotient in R0


	AREA	|C$$code_6|, CODE, READONLY

; int chmod (const char *file, int attr)
; note that these are RISC OS attribute bits

	EXPORT	chmod
	HEAD	"chmod"
chmod	FNJSRA	"v1-v3"
	MOV	r5,a2
	MOV	r1,a1
	MOV	r0,#4
	SWI	&20008 ; XOS_File DeleteObject
	MOVVC	a1,#0
	FNPULLA
	B	__ro_return_os_error


	AREA	|C$$code_7|, CODE, READONLY

; int chdir (const char *dir)

	EXPORT	chdir
chdir	STMFD	sp!,{lr}
	MOV	r1,a1
	MOV	r0,#0
	SWI	&20029 ; XOS_FSControl SetCSD
	MOVVC	a1,#0
	LDMFD	sp!,{lr}
	B	__ro_return_os_error


	AREA	|C$$code_8|, CODE, READONLY

; int mkdir (const char *dir)

	EXPORT	mkdir
	HEAD	"mkdir"
mkdir	FNJSRA	"v1-v3"
	MOV	r4,#0
	MOV	r1,a1
	MOV	r0,#8
	SWI	&20008 ; XOS_File CreateDirectory
	MOVVC	a1,#0
	FNPULLA
	B	__ro_return_os_error


	AREA	|C$$code_9|, CODE, READONLY

; int getcwd (char *dir, int len)

	EXPORT	getcwd
	HEAD	"getcwd"
getcwd	FNJSRA	"v1-v2"
	MOV	r5,a2
	MOV	r4,#0
	MOV	r3,#0
	MOV	r2,a1
	ADR	r1,at
	MOV	r0,#37
	SWI	&20029 ; XOS_FSControl CanonicalisePath
	MOVVC	a1,#-1
	FNRTSA	VC
	BL	__ro_return_os_error
	MOV	a1,#0
	FNRTSA
at	&	64 ; "@"


	AREA	|C$$code_10|, CODE, READONLY

; int isatty (int fd)

	EXPORT	isatty
isatty	CMP	a1,#_SYS_OPEN
	MOVHS	a1,#0
	FNRET	HS
	LDR	a2,=__iob
	ADD	a2,a2,a1,LSL #5
	ADD	a2,a2,a1,LSL #3 ; a2 += &28 * a1
	LDR	a1,[a2,#__file]
	TEQ	a1,#0
	MOVEQ	a1,#1
	MOVNE	a1,#0
	FNRET


	AREA	|C$$code_11|, CODE, READONLY

; int isdir (const char *)

	EXPORT	isdir
isdir	FNJSRA	"v1,v2"
	MOV	a2,a1
	MOV	a1,#17
	SWI	&20008
	MOVVS	a1,#0
	MOVVC	a1,a1,LSR #1
	ANDVC	a1,a1,#1
	FNRET


	AREA	|C$$code_12|, CODE, READONLY

; int isfile (const char *)

	EXPORT	isdir
isfile	FNJSRA	"v1,v2"
	MOV	a2,a1
	MOV	a1,#17
	SWI	&20008
	MOVVS	a1,#0
	ANDVC	a1,a1,#1
	FNRET


;***********
; Non-POSIX
;***********


	AREA	|C$$code_101|, CODE, READONLY

; int copyfile (const char *old, const char *new)

	EXPORT	copyfile
	HEAD	"copyfile"
copyfile
	FNJSRA	"v1-v2"
	MOV	v1,a1
	MOV	v2,a2
	MOV	a1,a2
	BL	__ro_ifdot
	TEQ	a1,#0
	FNRTSA	NE
	MOV	r0,#26
	MOV	r1,v1
	MOV	r2,v2
	MOV	r3,#&200
	SWI	&20029 ; XOS_FSControl CopyFile
	MOVVC	a1,#0
	FNRTSA
	B	__ro_return_os_error


;***********
; Internals
;***********

	AREA	|__ro_internal_rw$$Code|, CODE, READONLY

; size_t __ro_internal_rw (int fd, void *buf, size_t nbytes, int read)
; fread/fwrite handler code.

	HEAD	"__ro_internal_rw"
__ro_internal_rw
	FNJSRA	"v1"
	STMFD	sp!,{a3,a4}
	CMP	a1,#_SYS_OPEN	; if file handle is out of range,
	LDR	lr,=__errno	;   set errno to EBADDESC & return -1
	MOVHS	ip,#EBADDESC
	MOVLO	ip,#0		; (else zero errno)
	STR	ip,[lr]
	MOVHS	a1,#-1
	FNRTSA	HS
	LDR	v1,=__iob
	ADD	v1,v1,a1,LSL #5	; add |fd| * sizeof(FILE)
	ADD	v1,v1,a1,LSL #3
	MOV	a1,a2		; set up params for fread/fwrite
	MOV	a2,#1
	TEQ	a4,#0		; Z set if writing
	MOV	a4,v1
	BEQ	call_fwrite
	BL	fread
	B	return
call_fwrite
	BL	fwrite
return	LDMFD	sp!,{a3,a4}
	LDR	a2,[v1,#__flag]
	TST	a2,#_IOERR	; ferror(&__iob[fd]): return -1 if set,
	MOVNE	a1,#-1		;   else return the fread/fwrite result
	FNRTSA	NE
	TEQ	a1,a3		; but check for incomplete xfer
	TEQNE	a4,#1		; and that we're not reading
	FNRTSA	EQ		; return if complete or reading
	LDR	a3,=__errno
	LDR	lr,[a3]
	TEQ	lr,#0
	MOVEQ	lr,#ENOSPC	; and set errno appropriately
	STREQ	lr,[a3]
	FNRTSA


	END
