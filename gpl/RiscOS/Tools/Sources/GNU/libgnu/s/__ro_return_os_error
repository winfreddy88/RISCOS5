;  int __ro_return_os_error (const _kernel_oserror * const err)
;  Return a RISC OS error message, setting errno to EOSERR (-1).
;  Copyright (C) 1999 Darren Salt
;  All rights reserved.

;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions are
;  met:
;  1. Redistributions of source code must retain the above copyright notice,
;     this list of conditions and the following disclaimer.
;  2. Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in the
;     documentation and/or other materials provided with the distribution.
;  3. All advertising materials mentioning features or use of this software
;     must display the following acknowledgement:
;       This product includes software developed by Darren Salt.
;  4. The name of the author may not be used to endorse or promote products
;     derived from this software without specific prior written permission.

;  This software is provided by the author "as is" and any express or implied
;  warranties including, but not limited to, the implied warranties of
;  merchantability and fitness for a particular purpose are disclaimed. in no
;  event shall the author be liable for any direct, indirect, incidental,
;  special, exemplary, or consequential damages (including, but not limited
;  to, procurement of substitute goods or services; loss of use, data, or
;  profits; or business interruption) however caused and on any theory of
;  liability, whether in contract, strict liability, or tort (including
;  negligence or otherwise) arising in any way out of the use of this
;  software, even if advised of the possibility of such damage.

;  Written by Darren Salt <ds@youmustbejoking.demon.co.uk>.

	GET	s.~include
	GET	hdr.system

	IMPORT	__errno
	IMPORT	strncpy

	AREA	|__ro_return_os_error$$Code|, CODE, READONLY

	EXPORT	__ro_return_os_error
	HEAD	"__ro_return_os_error"
__ro_return_os_error
	TEQ	a1,#0
	FNRET	EQ		; return early if no error
	FNJSRA	"v1,v2"
	MOV	v1,a1
	MOV	a1,#6
	MOV	a2,#0
	MOV	a3,#0
	MOV	a4,#0
	SWI	&20040		; find out where the SCL error buffer is
	ADD	v2,a4,#4
	LDR	a1,[v1]
	STR	a1,[v2]
	ADD	a1,v2,#4
	ADD	a2,v1,#4
	MOV	a3,#99		; allow for too-small error buffer :-(
	BL	strncpy
	MOV	a1,#0
	STRB	a1,[v2,#103]
	LDR	a2,=__errno
	MOV	a1,#EOSERR
	STR	a1,[a2]
	MOV	a1,#1
	FNRTSA

	END
