/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "Licence").
 * You may not use this file except in compliance with the Licence.
 *
 * You can obtain a copy of the licence at
 * cddl/RiscOS/Sources/HWSupport/ATA/SATADriver/LICENCE.
 * See the Licence for the specific language governing permissions
 * and limitations under the Licence.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the Licence file. If applicable, add the
 * following below this CDDL HEADER, with the fields enclosed by
 * brackets "[]" replaced with your own identifying information:
 * Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */
/*
 * Copyright 2015 Ben Avison.  All rights reserved.
 * Use is subject to license terms.
 */

/** \file util.c
 * Miscellaneous odds and ends.
 */

#include <stddef.h>
#include "swis.h"

#include "Global/HALEntries.h"
#include "Global/NewErrors.h"
#include "Interface/ATA.h"

#include "SyncLib/spinrw.h"

#include "message.h"
#include "util.h"

/** Convert from controller/port number to pointer to our struct for it.
 *  If lookup is successful, this function returns with a read lock held on the AHCI controller array.
 *  \arg cpid           Controller/port number to lookup
 *  \arg allow_inactive Not an error if port previously failed reset
 *  \arg port           Pointer through which to return port block pointer
 *  \return             Pointer to error block in event of unsuccessful lookup
 */
_kernel_oserror *util_find_port(uint32_t cpid, bool allow_inactive, ahciport_t **port)
{
  spinrw_read_lock(&g_ahci_lock);
  if (cpid >= 32 ||
      ((allow_inactive && !g_ahci.port[cpid].valid) ||
       (!allow_inactive && !g_ahci.port[cpid].active)))
  {
    spinrw_read_unlock(&g_ahci_lock);
    return MESSAGE_ERRORLOOKUP(true, ATA_BadCPID, 0);
  }
  *port = &g_ahci.port[cpid];
  return NULL;
}

/** Convert from controller/port and device numbers to pointer to our structs for them.
 *  If lookup is successful, this function returns with a read lock held on the AHCI controller array.
 *  \arg cpid Controller/port number to lookup
 *  \arg deviceid Device ID to lookup
 *  \arg port Pointer through which to return port block pointer
 *  \arg device Pointer through which to return device block pointer
 *  \return   Pointer to error block in event of unsuccessful lookup
 */
_kernel_oserror *util_find_port_and_device(uint32_t cpid, uint32_t deviceid, ahciport_t **restrict port, satadevice_t **restrict device)
{
  spinrw_read_lock(&g_ahci_lock);
  if (cpid >= 32 || !g_ahci.port[cpid].active)
  {
    spinrw_read_unlock(&g_ahci_lock);
    return MESSAGE_ERRORLOOKUP(true, ATA_BadCPID, 0);
  }
  if (!g_ahci.port[cpid].device[deviceid].valid)
  {
    spinrw_read_unlock(&g_ahci_lock);
    return MESSAGE_ERRORLOOKUP(true, ATA_BadDeviceID, 0);
  }
  *port = &g_ahci.port[cpid];
  *device = &g_ahci.port[cpid].device[deviceid];
  return NULL;
}

/** Delay for at least the specified number of microseconds */
void util_microdelay(uint32_t us)
{
  _swix(OS_Hardware, _IN(0)|_INR(8,9), us, 0, EntryNo_HAL_CounterDelay);
}
