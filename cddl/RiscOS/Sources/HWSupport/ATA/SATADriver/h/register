/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "Licence").
 * You may not use this file except in compliance with the Licence.
 *
 * You can obtain a copy of the licence at
 * cddl/RiscOS/Sources/HWSupport/ATA/SATADriver/LICENCE.
 * See the Licence for the specific language governing permissions
 * and limitations under the Licence.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the Licence file. If applicable, add the
 * following below this CDDL HEADER, with the fields enclosed by
 * brackets "[]" replaced with your own identifying information:
 * Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */
/*
 * Copyright 2015 Ben Avison.  All rights reserved.
 * Use is subject to license terms.
 */

#ifndef REGISTER_H
#define REGISTER_H

#include <stdint.h>

/* Shadow register (aka task file) bitfields */

#define STATUS_BSY  (1u<<7)  // Busy
#define STATUS_DRDY (1u<<6)  // Device Ready (command-specific)
#define STATUS_DF   (1u<<5)  // Device Fault (command-specific)
#define STATUS_SE   (1u<<5)  // Stream Error (command-specific)
#define STATUS_DWE  (1u<<4)  // Deferred Write Error (command-specific)
#define STATUS_SERV (1u<<4)  // Service (command-specific)
#define STATUS_DRQ  (1u<<3)  // Data Request
#define STATUS_ERR  (1u<<0)  // Error

#define FEATURES_PACKET_DMADIR (1u<<2)  // PACKET command: DMA is from device to host
#define FEATURES_PACKET_DMA    (1u<<0)  // PACKET command: use DMA

#define ERROR_ICRC        (1u<<7)  // Interface CRC
#define ERROR_UNC         (1u<<6)  // Uncorrectable Error
#define ERROR_IDNF        (1u<<4)  // ID Not Found
#define ERROR_SENSE_SHIFT (4)      // Sense key (ATAPI only)
#define ERROR_SENSE_MASK  (0xFu<<ERROR_SENSE_SHIFT)
#define ERROR_ABRT        (1u<<2)  // Abort
#define ERROR_ILRER       (1u<<1)  // Insufficient LBA Range Entries Remaining
#define ERROR_EOM         (1u<<1)  // End of Media (ATAPI only)
#define ERROR_CCTO        (1u<<0)  // Command Completion Time Out
#define ERROR_MED         (1u<<0)  // Media Error
#define ERROR_APRRR       (1u<<0)  // Attempted Partial Range Removal
#define ERROR_INCS        (1u<<0)  // Insufficient NV Cache space
#define ERROR_ILU         (1u<<0)  // Illegal Length Indicator (ATAPI only)

#define DEVICE_MAGIC      (0xA0u)  // Magic bits should be 1 for compatibility

#define CONTROL_SRST      (1u<<2)  // Software reset

/* ATA commands (mostly these are the responsibility of ADFS) */

enum
{
  ATACOMMAND_RESET_DEVICE           = 0x08,
  ATACOMMAND_PACKET                 = 0xA0,
  ATACOMMAND_IDENTIFY_PACKET_DEVICE = 0xA1,
  ATACOMMAND_IDENTIFY_DEVICE        = 0xEC,
};

#define PACKET_COMMAND_BYTE_COUNT 8192  // Used to be 4K for old ADFS, but AHCI spec says to use 8L

/* Port multiplier commands */

enum
{
  PMCOMMAND_READ_PORT_MULTIPLIER  = 0xE4,
  PMCOMMAND_WRITE_PORT_MULTIPLIER = 0xE8,
};

/* Generic SATA controller register bitfields */

#define SSTATUS_IPM_SHIFT    (8)  // Interface Power Management
#define SSTATUS_IPM_NODEV    (0u<<SSTATUS_IPM_SHIFT)  // Device not present or communication not established
#define SSTATUS_IPM_ACTIVE   (1u<<SSTATUS_IPM_SHIFT)  // Interface in active state
#define SSTATUS_IPM_PARTIAL  (2u<<SSTATUS_IPM_SHIFT)  // Interface in Partial power management state
#define SSTATUS_IPM_SLUMBER  (6u<<SSTATUS_IPM_SHIFT)  // Interface in Slumber power management state
#define SSTATUS_IPM_DEVSLEEP (8u<<SSTATUS_IPM_SHIFT)  // Interface in DevSleep power management state
#define SSTATUS_IPM_MASK     (0xFu<<SSTATUS_IPM_SHIFT)
#define SSTATUS_SPD_SHIFT    (4)  // Current Interface Speed
#define SSTATUS_SPD_MASK     (0xFu<<SSTATUS_SPD_SHIFT)
#define SSTATUS_DET_SHIFT    (0)  // Device Detection
#define SSTATUS_DET_NODEV    (0u<<SSTATUS_DET_SHIFT)  // No device detected and Phy communication not established
#define SSTATUS_DET_DEV_NE   (1u<<SSTATUS_DET_SHIFT)  // Device presence detected but Phy communication not established
#define SSTATUS_DET_DEV      (3u<<SSTATUS_DET_SHIFT)  // Device presence detected and Phy communication established
#define SSTATUS_DET_OFFLINE  (4u<<SSTATUS_DET_SHIFT)  // Phy in offline mode as a result of the interface being disabled or running in a BIST loopback mode
#define SSTATUS_DET_MASK     (0xFu<<SSTATUS_DET_SHIFT)

#define SCONTROL_PMP_SHIFT       (16)      // PM Port field to insert into transmitted FISes
#define SCONTROL_PMP_MASK        (0xFu<<SCONTROL_PMP_SHIFT)
#define SCONTROL_PSM_ACTIVE      (1u<<14)  // Select Power Management - initiate transition to Active
#define SCONTROL_PSM_SLUMBER     (1u<<13)  // Select Power Management - initiate transition to Slumber
#define SCONTROL_PSM_PARTIAL     (1u<<12)  // Select Power Management - initiate transition to Partial
#define SCONTROL_IPM_NO_DEVSLEEP (1u<<10)  // Interface Power Management Transitions Allowed - DevSleep disabled
#define SCONTROL_IPM_NO_SLUMBER  (1u<<9)   // Interface Power Management Transitions Allowed - Slumber disabled
#define SCONTROL_IPM_NO_PARTIAL  (1u<<8)   // Interface Power Management Transitions Allowed - Partial disabled
#define SCONTROL_SPD_SHIFT       (4)       // Speed Allowed
#define SCONTROL_SPD_MASK        (0xFu<<SCONTROL_SPD_SHIFT)
#define SCONTROL_DET_SHIFT       (0)       // Device Detection Initialization
#define SCONTROL_DET_NOOP        (0u<<SCONTROL_DET_SHIFT)
#define SCONTROL_DET_COMRESET    (1u<<SCONTROL_DET_SHIFT)
#define SCONTROL_DET_DISABLE     (4u<<SCONTROL_DET_SHIFT)
#define SCONTROL_DET_MASK        (0xFu<<SCONTROL_DET_SHIFT)

#define SERROR_DIAG_A (1u<<27)  // Port Selector presence detected
#define SERROR_DIAG_X (1u<<26)  // Exchanged
#define SERROR_DIAG_F (1u<<25)  // Unknown FIS Type
#define SERROR_DIAG_T (1u<<24)  // Transport state transition error
#define SERROR_DIAG_S (1u<<23)  // Link Sequence Error
#define SERROR_DIAG_H (1u<<22)  // Handshake Error
#define SERROR_DIAG_C (1u<<21)  // CRC Error
#define SERROR_DIAG_D (1u<<20)  // Disparity Error
#define SERROR_DIAG_B (1u<<19)  // 10B to 8B Decode Error
#define SERROR_DIAG_W (1u<<18)  // ComWake
#define SERROR_DIAG_I (1u<<17)  // Phy Internal Error
#define SERROR_DIAG_N (1u<<16)  // PhyRdy Change
#define SERROR_ERR_E (1u<<11)   // Internal Error
#define SERROR_ERR_P (1u<<10)   // Protocol Error
#define SERROR_ERR_C (1u<<9)    // Persistent Communication or Data Integrity Error
#define SERROR_ERR_T (1u<<8)    // Transient Data Integrity Error
#define SERROR_ERR_M (1u<<1)    // Recovered Communications Error
#define SERROR_ERR_I (1u<<0)    // Recovered Data Integrity Error

#define PM_CONTROL_PORT 15   // Control port on port multipliers

/* SATA FIS types */

typedef enum
{
  FISTYPE_RHD = 0x27,  // Register FIS - Host to Device
  FISTYPE_RDH = 0x34,  // Register FIS - Device to Host
  FISTYPE_DA  = 0x39,  // DMA Activate FIS - Device to Host
  FISTYPE_DS  = 0x41,  // DMA Setup FIS - Bi-directional
  FISTYPE_D   = 0x46,  // Data FIS - Bi-directional
  FISTYPE_BA  = 0x58,  // BIST Activate FIS = Bi-directional
  FISTYPE_PS  = 0x5F,  // PIO Setup - Device to Host
  FISTYPE_SDB = 0xA1,  // Set Device Bits FIS - Device to Host
}
data_fis_type_t;

/* FIS layouts */

typedef struct
{
  uint8_t fis_type;
  uint8_t c_i_pmp;
  uint8_t command_status;
  uint8_t features7_0_error;
  uint8_t lba7_0;
  uint8_t lba15_8;
  uint8_t lba23_16;
  uint8_t device;
  uint8_t lba31_24;
  uint8_t lba39_32;
  uint8_t lba47_40;
  uint8_t features15_8;
  uint8_t count7_0;
  uint8_t count15_8;
  uint8_t icc;
  uint8_t control;
  uint8_t reserved[4];
}
register_fis_t;

/* FIS bitfields */

#define FIS_RHD_C (1u<<7)
#define FIS_RHD_PMP (0xFu<<0)

/* SATA device signatures */

typedef enum
{
  SATA_SIG_ATA   =  0x00000101,                  // SATA drive
  SATA_SIG_ATAPI = (0xEB140101 - 0x100000000),   // SATAPI drive
  SATA_SIG_SEMB  = (0xC33C0101 - 0x100000000),   // Enclosure management bridge
  SATA_SIG_PM    = (0x96690101 - 0x100000000),   // Port multiplier
}
sata_sig_t;

/* Port multiplier port/general status and control registers */

typedef enum
{
  /* These are per-port */
  PM_PSCR_SSTATUS = 0,
  PM_PSCR_SERROR,
  PM_PSCR_SCONTROL,
  PM_PSCR_SACTIVE,
  PM_PSCR_SNOTIFICATION,
  PM_PSCR_PHY_EVENT_COUNTERS = 256,

  /* These are global to the port multiplier and accessed by specifying the control port */
  PM_GSCR_PRODUCT_IDENTIFIER = 0,
  PM_GSCR_REVISION_INFORMATION,
  PM_GSCR_PORT_INFORMATION,
  PM_GSCR_ERROR_INFORMATION = 32,
  PM_GSCR_ERROR_INFORMATION_BIT_ENABLE,
  PM_GSCR_PHY_EVENT_COUNTER_CONTROL,
  PM_GSCR_FEATURES_SUPPORTED = 64,
  PM_GSCR_FEATURES_ENABLED = 96,
  PM_GSCR_PHY_EVENT_COUNTERS = 256,
}
pm_scr_t;

/* AHCI registers */

typedef volatile struct
{
  uint64_t pxclb;    // +0x00 Port x Command List Base [physical] Address
  uint64_t pxfb;     // +0x08 Port x FIS Base [physical] Address
  uint32_t pxis;     // +0x10 Port x Interrupt Status
  uint32_t pxie;     // +0x14 Port x Interrupt Enable
  uint32_t pxcmd;    // +0x18 Port x Command and Status
  uint32_t reserved1;
  uint32_t pxtfd;    // +0x20 Port x Task File Data
  uint32_t pxsig;    // +0x24 Port x Signature
  uint32_t pxssts;   // +0x28 Port x Serial ATA Status (SCR0: SStatus)
  uint32_t pxsctl;   // +0x2C Port x Serial ATA Control (SCR2: SControl)
  uint32_t pxserr;   // +0x30 Port x Serial ATA Error (SCR1: SError)
  uint32_t pxsact;   // +0x34 Port x Serial ATA Active (SCR3: SActive)
  uint32_t pxci;     // +0x38 Port x Command Issue
  uint32_t pxsntf;   // +0x3C Port x Serial ATA Notification (SCR4: SNotification)
  uint32_t pxfbs;    // +0x40 Port x FIS-based Switching Control
  uint32_t pxdevslp; // +0x44 Port x Device Sleep
  uint32_t reserved2[(0x80-0x48)/sizeof(uint32_t)];
} port_regset_t;

typedef volatile struct
{
  uint32_t cap;       // +0x00 Host Capabilities
  uint32_t ghc;       // +0x04 Global Host Control
  uint32_t is;        // +0x08 Interrupt Status
  uint32_t pi;        // +0x0C Ports Implemented
  uint32_t vs;        // +0x10 Version
  uint32_t ccc_ctl;   // +0x14 Command Completion Coalescing Control
  uint32_t ccc_ports; // +0x18 Command Completion Coalsecing Ports
  uint32_t em_loc;    // +0x1C Enclosure Management Location
  uint32_t em_ctl;    // +0x20 Enclosure Management Control
  uint32_t cap2;      // +0x24 Host Capabilities Extended
  uint32_t bohc;      // +0x28 BIOS/OS Handoff Control and Status
  uint32_t reserved[(0x100-0x2C)/sizeof(uint32_t)];
  port_regset_t port[32];
} hba_regset_t;

/* AHCI register bit definitions */

#define CAP_S64A      (1u<<31)  // Supports 64-bit Addressing
#define CAP_SNCQ      (1u<<30)  // Supports Native Command Queuing
#define CAP_SSNTF     (1u<<29)  // Supports SNotification Register
#define CAP_SMPS      (1u<<28)  // Supports Mechanical Presence Switch
#define CAP_SSS       (1u<<27)  // Supports Staggered Spin-up
#define CAP_SALP      (1u<<26)  // Supports Aggressive Link Power Management
#define CAP_SAL       (1u<<25)  // Supports Activity LED
#define CAP_SCLO      (1u<<24)  // Supports Command List Override
#define CAP_ISS_SHIFT (20)      // Interface Speed Support
#define CAP_ISS_GEN1  (1u<<CAP_ISS_SHIFT)
#define CAP_ISS_GEN2  (2u<<CAP_ISS_SHIFT)
#define CAP_ISS_GEN3  (3u<<CAP_ISS_SHIFT)
#define CAP_ISS_MASK  (0xFu<<CAP_ISS_SHIFT)
#define CAP_SAM       (1u<<18)  // Supports AHCI mode only
#define CAP_SPM       (1u<<17)  // Supports Port Multiplier
#define CAP_FBSS      (1u<<16)  // FIS-based Switching Supported
#define CAP_PMD       (1u<<15)  // PIO Multiple DRQ Block
#define CAP_SSC       (1u<<14)  // Slumber State Capable
#define CAP_PSC       (1u<<13)  // Partial State Capable
#define CAP_NCS_SHIFT (8)       // Number of Command Slots
#define CAP_NCS_MASK  (0x1Fu<<CAP_NCS_SHIFT)
#define CAP_CCCS      (1u<<7)  // Command Completion Coalescing Supported
#define CAP_EMS       (1u<<6)  // Enclosure Management Supported
#define CAP_SXS       (1u<<5)  // Supports External SATA
#define CAP_NP_SHIFT  (0)      // Number of Ports
#define CAP_NP_MASK   (0x1Fu<<CAP_NP_SHIFT)

#define GHC_AE   (1u<<31)  // AHCI Enable
#define GHC_MRSM (1u<<2)   // MSI Revert to Single Message
#define GHC_IE   (1u<<1)   // Interrupt Enable
#define GHC_HR   (1u<<0)   // HBA Reset

#define IRQ_CPD (1u<<31)  // Cold Port Detect
#define IRQ_TFE (1u<<30)  // Task File Error
#define IRQ_HBF (1u<<29)  // Host Bus Fatal Error
#define IRQ_HBD (1u<<28)  // Host Bus Data Error
#define IRQ_IF  (1u<<27)  // Interface Fatal Error
#define IRQ_INF (1u<<26)  // Interface Non-fatal Error
#define IRQ_OF  (1u<<24)  // Overflow Status
#define IRQ_IPM (1u<<23)  // Incorrect Port Multiplier
#define IRQ_PRC (1u<<22)  // PhyRdy Change
#define IRQ_DMP (1u<<7)   // Device Mechanical Presence
#define IRQ_PC  (1u<<6)   // Port Change
#define IRQ_DP  (1u<<5)   // Descriptor Processed
#define IRQ_UF  (1u<<4)   // Unknown FIS
#define IRQ_SDB (1u<<3)   // Set Device Bits
#define IRQ_DS  (1u<<2)   // DMA Setup FIS
#define IRQ_PS  (1u<<1)   // PIO Setup FIS
#define IRQ_DHR (1u<<0)   // Device to Host Register FIS

#define PXCMD_ICC_SHIFT    (28)     // Interface Communication Control
#define PXCMD_ICC_DEVSLEEP (8u<<PXCMD_ICC_SHIFT)
#define PXCMD_ICC_SLUMBER  (6u<<PXCMD_ICC_SHIFT)
#define PXCMD_ICC_PARTIAL  (2u<<PXCMD_ICC_SHIFT)
#define PXCMD_ICC_ACTIVE   (1u<<PXCMD_ICC_SHIFT)
#define PXCMD_ICC_IDLE     (0u<<PXCMD_ICC_SHIFT)
#define PXCMD_ICC_NOOP     (0u<<PXCMD_ICC_SHIFT)
#define PXCMD_ICC_MASK     (0xFu<<PXCMD_ICC_SHIFT)
#define PXCMD_ASP          (1u<<27)  // Aggressive Slumber / Partial
#define PXCMD_ALPE         (1u<<26)  // Aggressive Link Power Management Enable
#define PXCMD_DLAE         (1u<<25)  // Drive LED on ATAPI Enable
#define PXCMD_ATAPI        (1u<<24)  // Device is ATAPI
#define PXCMD_APSTE        (1u<<23)  // Automatic Partial to Slumber Transitions Enabled
#define PXCMD_FBSCP        (1u<<22)  // FIS-based Switching Capable Port
#define PXCMD_ESP          (1u<<21)  // External SATA Port
#define PXCMD_CPD          (1u<<20)  // Cold Presence Detection
#define PXCMD_MPSP         (1u<<19)  // Mechanical Presence Switch Attached to Port
#define PXCMD_HPCP         (1u<<18)  // Hot Plug Capable Port
#define PXCMD_PMA          (1u<<17)  // Port Multiplier Attached
#define PXCMD_CPS          (1u<<16)  // Cold Presence State
#define PXCMD_CR           (1u<<15)  // Command List Running
#define PXCMD_FR           (1u<<14)  // FIS Receive Running
#define PXCMD_MPSS         (1u<<13)  // Mechanical Presence Switch State
#define PXCMD_CCS_SHIFT    (8)       // Current Command Slot
#define PXCMD_CCS_MASK     (0x1Fu<<PXCMD_CCS_SHIFT)
#define PXCMD_FRE          (1u<<4)  // FIS Receive Enable
#define PXCMD_CLO          (1u<<3)  // Command List Override
#define PXCMD_POD          (1u<<2)  // Power On Device
#define PXCMD_SUD          (1u<<1)  // Spin-Up Device
#define PXCMD_ST           (1u<<0)  // Start

#define PXTFD_ERR_SHIFT    (8)  // Error
#define PXTFD_ERR_MASK     (0xFFu<<PXTFD_ERR_SHIFT)
#define PXTFD_STS_SHIFT    (0)  // Status
#define PXTFS_STS_MASK     (0xFFu<<PXTFD_STS_SHIFT)

/* AHCI data structures */

typedef struct
{
  uint32_t description_info;  // +0x00 Miscellaneous
  uint32_t prdbc;             // +0x04 PRD Byte Count
  uint64_t ctba;              // +0x08 Command Table Base Address
  uint32_t reserved[4];
} ahci_command_hdr_t;

#define AHCI_COMMAND_HDR_ALIGN 1024

typedef struct
{
  uint64_t dba;      // +0x00 Data Base Address
  uint32_t reserved;
  uint32_t dbc;      // +0x0C Data Byte Count
} ahci_prdt_entry_t;

#define AHCI_DBC_MAX (1u<<22) /* at most 4 MB per PRDT entry */
#define AHCI_DBC_I   (1u<<31) /* interrupt-generating bit */

typedef struct
{
  uint8_t           cfis[64];     // +0x00 Command FIS
  uint8_t           acmd[16];     // +0x40 ATAPI Command
  uint32_t          reserved[12];
  ahci_prdt_entry_t prdt[];       // +0x80 Physical Region Description Table
} ahci_command_table_t;

#define AHCI_COMMAND_TABLE_ALIGN 128

/* A PRDT can actually contain up to 65535 entries, but we need to keep memory
 * requirements manageable. If it's any smaller than this, then if the logical
 * memory scatter list is as fragmented as it can be without invoking the bounce
 * buffer (i.e. lots of 2-byte blocks) then we wouldn't be able to transfer even
 * a single 4K sector. */
#define AHCI_MAX_PRDT_ENTRIES 2048

typedef struct
{
  uint32_t       dsfis[7];  // +0x00 DMA Setup FIS
  uint32_t       reserved1;
  uint32_t       psfis[6];  // +0x20 PIO Setup FIS
  uint32_t       reserved2[2];
  register_fis_t rfis;      // +0x40 D2H Register FIS
  uint32_t       reserved3;
  uint32_t       sdbfis[2]; // +0x58 Set Device Bits FIS
  uint32_t       ufis[16];  // +0x60 Unknown FIS
  uint32_t       reserved4[24];
} ahci_received_fis_t;

#define AHCI_RECEIVED_FIS_ALIGN 256

/* AHCI data structure bit definitions */

#define COMMANDHDR_PRDTL_SHIFT   (16)      // Physical Region Descriptor Table Length
#define COMMANDHDR_PRDTL_MASK    (0xFFFFu<<COMMANDHDR_PRDTL_SHIFT)
#define COMMANDHDR_PMP_SHIFT     (12)      // Port Multiplier Port
#define COMMANDHDR_PMP_MASK      (0xFu<<COMMANDHDR_PMP_SHIFT)
#define COMMANDHDR_C             (1u<<10)  // Clear Busy upon R_OK
#define COMMANDHDR_B             (1u<<9)   // BIST
#define COMMANDHDR_R             (1u<<8)   // Reset
#define COMMANDHDR_P             (1u<<7)   // Prefetchable
#define COMMANDHDR_W             (1u<<6)   // Write
#define COMMANDHDR_A             (1u<<5)   // ATAPI
#define COMMANDHDR_CFL_SHIFT     (0)       // Command FIS Length
#define COMMANDHDR_CFL_MASK      (0x1Fu<<COMMANDHDR_CFL_SHIFT)

#endif
