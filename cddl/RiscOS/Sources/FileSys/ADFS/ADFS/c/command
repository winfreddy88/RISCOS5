/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "Licence").
 * You may not use this file except in compliance with the Licence.
 *
 * You can obtain a copy of the licence at
 * cddl/RiscOS/Sources/FileSys/ADFS/ADFS/LICENCE.
 * See the Licence for the specific language governing permissions
 * and limitations under the Licence.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the Licence file. If applicable, add the
 * following below this CDDL HEADER, with the fields enclosed by
 * brackets "[]" replaced with your own identifying information:
 * Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */
/*
 * Copyright 2015 Ben Avison.  All rights reserved.
 * Use is subject to license terms.
 */

/** \file command.c
 * Implementation of star commands.
 */

#include <stdlib.h>
#include <stddef.h>
#include <stdio.h>
#include <errno.h>
#include <stdint.h>
#include "swis.h"

#include "Global/CMOS.h"
#include "Global/FSNumbers.h"
#include "Global/OsBytes.h"
#include "Global/RISCOS.h"
#include "Interface/HighFSI.h"

#include "ADFSHdr.h"
#include "command.h"
#include "globals.h"
#include "message.h"

_kernel_oserror *command_adfs(void)
{
  return _swix(OS_FSControl, _INR(0,1), FSControl_SelectFS, fsnumber_adfs);
}

_kernel_oserror *command_configure_syntax_adfsdircache(void)
{
  printf("%s\n", message_lookup_direct("CADFDIR"));
  return NULL;
}

_kernel_oserror *command_status_adfsdircache(void)
{
  /* Use OS_ReadMemMapInfo to discover the RAM size, rather than relying on an
   * undocumented return register from OS_SetEnv like old ADFS did! */
  uint32_t page_size, num_pages, ram_size;
  _swix(OS_ReadMemMapInfo, _OUTR(0,1), &page_size, &num_pages);
  ram_size = page_size * num_pages;

  /* Read dir cache from CMOS byte 199 */
  uint32_t dir_cache = 0;
  _swix(OS_Byte, _INR(0,1)|_OUT(2), OsByte_ReadCMOS, DIR_CACHE_BYTE, &dir_cache);
  if (dir_cache == 0)
  {
    /* For consistency with old ADFS, we print the actual cache size even if the
     * CMOS is set to zero.
     * There's a chance we might be back-ported to tiny machines one day, so
     * honour the rules for value 0 as with old ADFS. */
#ifdef ENABLE_BACKGROUND_TRANSFERS
    if (ram_size <= 1024*1024)
      dir_cache = ram_size / 512 / 1024;
    else
      dir_cache = ram_size / 256 / 1024;
#else
    dir_cache = ram_size / 128 / 1024;
#endif
    dir_cache = MIN(dir_cache, 255);
  }
  printf("ADFSDirCache %uK\n", dir_cache);
  return NULL;
}

_kernel_oserror *command_syntax_adfsdircache(void)
{
  printf("%s\n", message_lookup_direct("SADFDIR"));
  return NULL;
}

_kernel_oserror *command_configure_adfsdircache(const char *dircache)
{
  uint32_t dircache_num;
  _kernel_oserror *e = _swix(OS_ReadUnsigned, _INR(0,1)|_OUT(2), 1<<30, dircache, &dircache_num);
  if (e)
    return e;
  return _swix(OS_Byte, _INR(0,2), OsByte_WriteCMOS, DIR_CACHE_BYTE, dircache_num);
}

_kernel_oserror *command_configure_syntax_drive(void)
{
  printf("%s\n", message_lookup_direct("CADFDRI"));
  return NULL;
}

_kernel_oserror *command_status_drive(void)
{
  uint32_t default_drive;
  _swix(OS_Byte, _INR(0,1)|_OUT(2), OsByte_ReadCMOS, DEFAULT_DRIVE_BYTE, &default_drive);
  default_drive = ((default_drive & DEFAULT_DRIVE_MASK) >> DEFAULT_DRIVE_SHIFT);
  printf("Drive      %u\n", default_drive);
  return NULL;
}

_kernel_oserror *command_syntax_drive(void)
{
  printf("%s\n", message_lookup_direct("SADFDRI"));
  return NULL;
}

_kernel_oserror *command_configure_drive(const char *drive)
{
  uint32_t default_drive;
  uint32_t cmos;
  char *after;
  errno = 0;
  default_drive = (uint32_t) strtoul(drive, &after, 10);
  if (errno == ERANGE || after == drive)
    return configure_NUMBER_NEEDED;
  if (default_drive > DEFAULT_DRIVE_MASK >> DEFAULT_DRIVE_SHIFT)
    return configure_TOO_LARGE;
  _swix(OS_Byte, _INR(0,1)|_OUT(2), OsByte_ReadCMOS, DEFAULT_DRIVE_BYTE, &cmos);
  cmos = cmos &~ DEFAULT_DRIVE_MASK;
  cmos |= default_drive << DEFAULT_DRIVE_SHIFT;
  _swix(OS_Byte, _INR(0,2), OsByte_WriteCMOS, DEFAULT_DRIVE_BYTE, cmos);
  return NULL;
}
