/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "Licence").
 * You may not use this file except in compliance with the Licence.
 *
 * You can obtain a copy of the licence at
 * cddl/RiscOS/Sources/FileSys/ADFS/ADFS/LICENCE.
 * See the Licence for the specific language governing permissions
 * and limitations under the Licence.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the Licence file. If applicable, add the
 * following below this CDDL HEADER, with the fields enclosed by
 * brackets "[]" replaced with your own identifying information:
 * Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */
/*
 * Copyright 2015 Ben Avison.  All rights reserved.
 * Use is subject to license terms.
 */

#ifndef GLOBALS_H
#define GLOBALS_H

#include <stdint.h>
#include "kernel.h"
#include "swis.h"

#include "SyncLib/spin.h"
#include "SyncLib/spinrw.h"

/* Defines */

#ifdef DEBUG_ENABLED
#ifdef DEBUGLIB
#include "DebugLib/DebugLib.h"
#undef dprintf
#define dprintf(...)    _dprintf("", __VA_ARGS__)
#else
#include <stdio.h>
#define dprintf printf
#endif
#else
#define dprintf(...) do; while(0)
#endif

#ifdef __GNUC__
#define PACKED(x) x __attribute__((packed))
#else
#define PACKED(x) __packed x
#endif

/** Build switch, whether to do background ops */
#undef ENABLE_BACKGROUND_TRANSFERS

/** Base address of the module as a byte pointer */
#define MODULE_BASE_ADDRESS (*(const char **)&base)

/** Filing system title, as passed to FileCore */
#define FILING_SYSTEM_TITLE "ADFS"

/** Filing system author */
#define FILING_SYSTEM_AUTHOR "Piccolo Systems"

/** CMOS byte containing default drive */
#define DEFAULT_DRIVE_BYTE (StartCMOS)

/** CMOS bit position of default drive */
#define DEFAULT_DRIVE_SHIFT (0)

/** CMOS bit mask of default drive */
#define DEFAULT_DRIVE_MASK  (0x7 << DEFAULT_DRIVE_SHIFT)

/** CMOS byte containing directory cache */
#define DIR_CACHE_BYTE (ADFSDirCacheCMOS)

/** CMOS byte containing file cache */
#define FILE_CACHE_BYTE (ADFSFileCacheCMOS)

/** Number of floppy drives to declare to FileCore */
#define NUM_FLOPPIES (0)

/** Number of hard drives to declare to FileCore */
#define NUM_WINNIES  (4)

/** Buffer size for media type name */
#define MEDIA_TYPE_NAME_LEN (20)

/** Number of retries to use on reads and writes */
#define RETRIES (16) /* same as old ADFS uses for hard discs */

/** Number of retries to use on verifies */
#define VERIFY_RETRIES (1) /* same as old ADFS uses for hard discs */

/** Test for sector alignment */
#define IS_SECTOR_ALIGNED(x,s) (((x) & ((s) - 1)) == 0)

/** A quick macro to silence compiler warnings about unused parameters */
#define IGNORE(x) do { (void)(x); } while(0)

#define MAX(a,b) ((a)>(b)?(a):(b))
#define MIN(a,b) ((a)<(b)?(a):(b))

/* Bits in the device byte of ATA commands */
#define DEVICE_MAGIC 0xA0 /**< These bits must always be set for compatibility with older drives */
#define DEVICE_LBA   0x40 /**< Set this in read/write commands, unless drive only supports CHS addressing */
#define DEVICE_DEV   0x10 /**< Indicates slave device in PATA */

/* Bits in the control task file register */
#define CONTROL_SRST      (1u<<2)  /**< Software reset */

/* ATA commands */
enum
{
  ATACOMMAND_RESET_DEVICE            = 0x08,
  ATACOMMAND_READ_SECTORS            = 0x20,
  ATACOMMAND_READ_SECTORS_EXT        = 0x24,
  ATACOMMAND_READ_DMA_EXT            = 0x25,
  ATACOMMAND_WRITE_SECTORS           = 0x30,
  ATACOMMAND_WRITE_SECTORS_EXT       = 0x34,
  ATACOMMAND_WRITE_DMA_EXT           = 0x35,
  ATACOMMAND_READ_VERIFY_SECTORS     = 0x40,
  ATACOMMAND_READ_VERIFY_SECTORS_EXT = 0x42,
  ATACOMMAND_EXECUTE_DEVICE_DIAGNOSTIC = 0x90,
  ATACOMMAND_PACKET                  = 0xA0,
  ATACOMMAND_IDENTIFY_PACKET_DEVICE  = 0xA1,
  ATACOMMAND_READ_DMA                = 0xC8,
  ATACOMMAND_WRITE_DMA               = 0xCA,
  ATACOMMAND_STANDBY                 = 0xE2,
  ATACOMMAND_IDLE                    = 0xE3,
  ATACOMMAND_CHECK_POWER_MODE        = 0xE5,
  ATACOMMAND_IDENTIFY_DEVICE         = 0xEC,
};

/* Locations in identify block */
#define OFFSET_MAX_LBA              (60)
#define OFFSET_COMMAND_SET          (83)
#define OFFSET_MAX_LBA48           (100)
#define OFFSET_PHY_LOG_SSZ         (106)
#define OFFSET_SSZ_LO              (117)
#define OFFSET_SSZ_HI              (118)

#define COMMAND_SET_MBZ   (1u<<15)
#define COMMAND_SET_MBO   (1u<<14)
#define COMMAND_SET_LBA48 (1u<<10)

#define PHY_LOG_SSZ_MBZ             (1u<<15)
#define PHY_LOG_SSZ_MBO             (1u<<14)
#define PHY_LOG_SSZ_GT1_LOG_PER_PHY (1u<<13)
#define PHY_LOG_SSZ_SIZE_NOT_512    (1u<<12) /* In which case see 117-118 */
#define PHY_LOG_SSZ_COUNT_SHIFT     0
#define PHY_LOG_SSZ_COUNT_MASK      (0xF<<PHY_LOG_SSZ_COUNT_SHIFT)

/* Types */

/** Parameter blocks for device control commands */
typedef uint8_t ataop_param_device_control_t;

/** Parameter blocks for CHS and 28-bit LBA commands */
typedef struct
{
  uint8_t features;
  uint8_t sector_count;
  uint8_t lba0;
  uint8_t lba1;
  uint8_t lba2;
  uint8_t device;
  uint8_t command;
}
ataop_param_lba28_t;

/** Parameter blocks for 48-bit LBA commands */
typedef struct
{
  uint8_t features;
  uint8_t sector_count0;
  uint8_t sector_count1;
  uint8_t lba0;
  uint8_t lba1;
  uint8_t lba2;
  uint8_t lba3;
  uint8_t lba4;
  uint8_t lba5;
  uint8_t device;
  uint8_t command;
}
ataop_param_lba48_t;

/** Control blocks for packet operations */
typedef struct
{
  uint8_t operation_code;
  uint8_t service_action;
  uint8_t lba3;
  uint8_t lba2;
  uint8_t lba1;
  uint8_t lba0;
  uint8_t length3;
  uint8_t length2;
  uint8_t length1;
  uint8_t length0;
  uint8_t reserved;
  uint8_t control;
}
atapacketop_control_t;

/** Old-style disc error word */
typedef struct
{
  unsigned byte_div_256: 21;
  unsigned drive:         3;
  unsigned disc_error:    6;
} old_disc_error_word_t;

/** Old-style disc error block (RISC OS 3.6) */
typedef struct
{
  unsigned disc_error:  6;
  unsigned unused_MBZ: 26;
  unsigned sector:     29;
  unsigned drive:       3;
} old_disc_error_t;

/** New-style disc error block (RISC OS 5) */
typedef struct
{
  unsigned drive:       8;
  unsigned disc_error:  6;
  unsigned unused_MBZ: 18;
  uint64_t byte;
} new_disc_error_t;

/** Return type for low-level DiscOp/MiscOp calls */
typedef union
{
  struct
  {
    unsigned new_disc_error:  1;
    unsigned not_a_flag:     29;
    unsigned old_pointer:     1;
    unsigned old_disc_error:  1;
  }                     flag;
  uint32_t              number;
  old_disc_error_word_t old_disc_error_word;
  _kernel_oserror      *oserror;
  old_disc_error_t     *old_disc_error;
  new_disc_error_t     *new_disc_error;
} low_level_error_t;

/** FileCore disc record structure */
typedef PACKED(struct)
{
  uint8_t  log2secsize;    /* +0 */
  uint8_t  secspertrack;   /* +1 */
  uint8_t  heads;          /* +2 */
  uint8_t  density;        /* +3 */
  uint8_t  idlen;          /* +4 */
  uint8_t  log2bpmb;       /* +5 */
  uint8_t  skew;           /* +6 */
  uint8_t  bootoption;     /* +7 */
  uint8_t  lowsector;      /* +8 */
  uint8_t  nzones;         /* +9 */
  uint16_t zone_spare;     /* +10 */
  uint32_t root;           /* +12 */
  uint32_t disc_size;      /* +16 */
  uint16_t disc_id;        /* +20 */
  char     disc_name[10];  /* +22 */
  uint32_t disctype;       /* +32 */
  uint32_t disc_size_2;    /* +36 RISC OS 3.6 */
  uint8_t  share_size;     /* +40 RISC OS 3.6 */
  uint8_t  big_flag;       /* +41 RISC OS 3.6 */
  uint8_t  nzones_2;       /* +42 RISC OS 4 */
  uint8_t  reserved;
  uint32_t format_version; /* +44 RISC OS 4 */
  uint32_t root_size;      /* +48 RISC OS 4 */
  uint32_t reserved_2[2];
} disc_record_t;

/** Drive state */
typedef struct drive
{
  struct drive     *next;               /**< Linked list link */
  uint32_t          drive;              /**< ADFS drive number, or -1 if none (eg if an ATAPI device, or if > NUM_WINNIES found) */
  bool              packet_device;      /**< Device type (maybe extend to an enum to include floppies in future) */
  bool              lba48;              /**< Device supports 48-bit LBA */
  uint8_t           cpid;               /**< ATADriver controller/port ID */
  uint8_t           deviceid;           /**< ATADriver device ID */
  uint8_t           standby_timer;      /**< Automatic standby timer period - meaning defined by ATA IDLE command (0 = off, 1-240 = timeout / 5 seconds, etc) */
  uint8_t           log2_sector_size;   /**< Logical sector size, as a shift */
  new_disc_error_t  disc_error;         /**< Most recent disc error */
  uint8_t          *block_buffer;       /**< Sector-size buffer to handle misaligned reads/writes, allocated from RMA */
  size_t            sector_size;        /**< Logical sector size, in bytes */
  uint64_t          capacity;           /**< Disc size, in sectors */
  uint16_t          identify_info[256]; /**< Result of ATA IDENTIFY DEVICE or IDENTIFY PACKET DEVICE */
} drive_t;

/** Retries state */
typedef union
{
  uint32_t word;
  struct
  {
    uint8_t winnie;
    uint8_t floppy;
    uint8_t floppy_mount;
    uint8_t floppy_defect;
  } type;
} retries_t;


/* Global variables */

/** Symbol at whose address is a pointer to the module base address */
extern void base(void);

/** MessageTrans descriptor for our Messages file */
extern uint32_t g_message_fd[4];

/** Module private word pointer */
extern void *g_module_pw;

/** FileCore private word pointer */
extern void *g_filecore_pw;

/** FileCore callback routine to call once background op on drives 0-3 are completed */
extern void (*g_filecore_callback_floppy_op_completed)(void);

/** FileCore callback routine to call once background op on drives 4-7 are completed */
extern void (*g_filecore_callback_winnie_op_completed)(void);

/** FileCore callback routine to call to release FIQ after low level op */
extern void (*g_filecore_callback_release_fiq)(void);

/** Media type name to return from MiscOp 4 */
extern char g_media_type_name[MEDIA_TYPE_NAME_LEN];

/** Singly-linked list of drive info - head pointer */
extern drive_t *g_drive_list_head;

/** Singly-linked list of drive info - tail pointer */
extern drive_t *g_drive_list_tail;

/** Rapid lookup array from drive number to drive info */
extern drive_t *g_drive[NUM_FLOPPIES + NUM_WINNIES];

/** Lock for drive info list and array */
extern spinrwlock_t g_drive_lock;

/** Retries info */
extern retries_t g_retries;

/** Lock for retries info */
extern spinlock_t g_retries_lock;


#endif
