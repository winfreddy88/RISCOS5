/*
 * CDDL HEADER START
 *
 * The contents of this file are subject to the terms of the
 * Common Development and Distribution License (the "Licence").
 * You may not use this file except in compliance with the Licence.
 *
 * You can obtain a copy of the licence at
 * cddl/RiscOS/Sources/HAL/Titanium/LICENCE.
 * See the Licence for the specific language governing permissions
 * and limitations under the Licence.
 *
 * When distributing Covered Code, include this CDDL HEADER in each
 * file and include the Licence file. If applicable, add the
 * following below this CDDL HEADER, with the fields enclosed by
 * brackets "[]" replaced with your own identifying information:
 * Portions Copyright [yyyy] [name of copyright owner]
 *
 * CDDL HEADER END
 */
/*
 * Copyright 2014 Elesar Ltd.  All rights reserved.
 * Use is subject to license terms.
 */
#ifndef PCISUPPORT_H
#define PCISUPPORT_H

/* A few bits missing from NetBSD */
typedef uint16_t u_int16_t;
typedef uint32_t u_int32_t;
typedef uint8_t  u_int8_t;
#define PCI_ROMBAR_MASK  0xFFFFF800u
#define PCI_IOBAR_MASK   0xFFFFFFFCu
#define PCI_MEMBAR_MASK  0xFFFFFFF0u
#define PCI_BARROM       6

/* Handy macros */
#define FALSE            0
#define TRUE             (!FALSE)

/* Root complex detail (see master definitions in the assembler) */
#define PCI_COUNT        2
#define PCI_MEMALIGN     4096 /* An ARM page */
#define PCI_CACHEALIGN   32   /* An ARM cache line */
#define PCI_IOALIGN      128  /* From PCIe spec 7.5.2.1 */
#define PCI_CFGSPACESIZE 0x100000u
#define PCI_IOSPACESIZE  0x100000u
#define PCI_WINDOWSIZE   0x10000000u
#define PCI_MEMSPACESIZE (PCI_WINDOWSIZE - PCI_IOSPACESIZE - PCI_CFGSPACESIZE)
#define PCI_IRQNOS       { /* RC0 */ 141, 142, 143, 144, \
                           /* RC1 */ 145, 146, 147, 148  \
                         }

/* Bounds (see master definitions in the assembler) */
#if PCI_SWITCHES
#define PCI_LOG2BUSLIMIT 4
#define PCI_LOG2DEVLIMIT 5
#else
#define PCI_LOG2BUSLIMIT 0
#define PCI_LOG2DEVLIMIT 1
#endif
#define PCI_LOG2FNLIMIT  3
#define PCI_BUSLIMIT     (1<<PCI_LOG2BUSLIMIT)
#define PCI_DEVLIMIT     (1<<PCI_LOG2DEVLIMIT)
#define PCI_FNLIMIT      (1<<PCI_LOG2FNLIMIT)

#define PCIDEV_FN(d,f)   (((d) << PCI_LOG2FNLIMIT) | (f))
#define PCIDEV(df)       (((df) >> PCI_LOG2FNLIMIT) & (PCI_DEVLIMIT - 1))
#define PCIFN(df)        ((df) & (PCI_FNLIMIT - 1))
                         
/* Support functions */
uint8_t HAL_PCIReadConfigByte(uint32_t, uint32_t, uint32_t);
uint16_t HAL_PCIReadConfigHalfword(uint32_t, uint32_t, uint32_t);
uint32_t HAL_PCIReadConfigWord(uint32_t, uint32_t, uint32_t);
void HAL_PCIWriteConfigByte(uint32_t, uint32_t, uint32_t, uint8_t);
void HAL_PCIWriteConfigHalfword(uint32_t, uint32_t, uint32_t, uint16_t);
void HAL_PCIWriteConfigWord(uint32_t, uint32_t, uint32_t, uint32_t);

/* Workspace */
enum
{
	BAR_DUFF = 0,
	BAR_IO,
	BAR_MEM,
	BAR_ROM
};

typedef struct
{
	uint32_t addr;
	uint32_t log2size :8;
	uint32_t type     :3;
} pcibar_t;

typedef struct
{
	uint32_t id;
	uint32_t skip   :1;
	uint32_t type   :7;
	uint32_t multifn:1;
	uint32_t bridge :1;

	pcibar_t bar[7];
} pcifn_t;

typedef struct
{
	pcifn_t fn[PCI_FNLIMIT];
} pcidev_t;

typedef struct
{
	pcidev_t dev[PCI_DEVLIMIT];
} pci_t;

/* Debug functions */
void HAL_DebugTX(char);
void HAL_DebugTXWord(uint32_t);

/* Entry point */
void PCIProbing(pci_t *, size_t);

#endif
