;
; CDDL HEADER START
;
; The contents of this file are subject to the terms of the
; Common Development and Distribution License (the "Licence").
; You may not use this file except in compliance with the Licence.
;
; You can obtain a copy of the licence at
; cddl/RiscOS/Sources/HAL/Titanium/LICENCE.
; See the Licence for the specific language governing permissions
; and limitations under the Licence.
;
; When distributing Covered Code, include this CDDL HEADER in each
; file and include the Licence file. If applicable, add the
; following below this CDDL HEADER, with the fields enclosed by
; brackets "[]" replaced with your own identifying information:
; Portions Copyright [yyyy] [name of copyright owner]
;
; CDDL HEADER END
;
;
; Copyright 2014 Elesar Ltd.  All rights reserved.
; Use is subject to license terms.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:OSEntries

        GET     hdr.RegMap
        GET     hdr.StaticWS
                
        AREA    |Counter$$Code|, CODE, READONLY, PIC

        EXPORT  HAL_CounterDelay
        EXPORT  HAL_CounterPeriod
        EXPORT  HAL_CounterRate
        EXPORT  HAL_CounterRead
        IMPORT  HAL_TimerPeriod
        IMPORT  HAL_TimerGranularity
        IMPORT  HAL_TimerReadCountdown
        EXPORT  CounterInit

; CounterInit
CounterInit ROUT
        MOV     pc, lr                  ; TimerInit did it all

; HAL_CounterDelay
; => a1 = microseconds to block for
HAL_CounterDelay ROUT
        MOV     a1, a1, LSL #10
10
        SUBS    a1, a1, #1
        BNE     %BT10
        ! 0, "TODO! Core speed independant counter delay"
        MOV     pc, lr

; HAL_CounterPeriod
; <= a1 = programmed period
HAL_CounterPeriod ROUT
        MOV     a1, #0                  ; Timer 0's coat tails
        B       HAL_TimerPeriod

; HAL_CounterRate
; <= a1 = granularity in ticks per second
HAL_CounterRate ROUT
        MOV     a1, #0                  ; Timer 0's coat tails
        B       HAL_TimerGranularity

; HAL_CounterRead
; <= a1 = ticks left to go
HAL_CounterRead ROUT
        MOV     a1, #0                  ; Timer 0's coat tails
        B       HAL_TimerReadCountdown

        END
