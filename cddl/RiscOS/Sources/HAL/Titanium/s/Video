;
; CDDL HEADER START
;
; The contents of this file are subject to the terms of the
; Common Development and Distribution License (the "Licence").
; You may not use this file except in compliance with the Licence.
;
; You can obtain a copy of the licence at
; cddl/RiscOS/Sources/HAL/Titanium/LICENCE.
; See the Licence for the specific language governing permissions
; and limitations under the Licence.
;
; When distributing Covered Code, include this CDDL HEADER in each
; file and include the Licence file. If applicable, add the
; following below this CDDL HEADER, with the fields enclosed by
; brackets "[]" replaced with your own identifying information:
; Portions Copyright [yyyy] [name of copyright owner]
;
; CDDL HEADER END
;
;
; Copyright 2014 Elesar Ltd.  All rights reserved.
; Use is subject to license terms.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:OSEntries
        GET     Hdr:HALDevice
        GET     Hdr:VideoDevice

        GET     hdr.RegMap
        GET     hdr.StaticWS

        AREA    |Video$$Code|, CODE, READONLY, PIC

        EXPORT  VideoDeviceInit
        EXPORT  VideoInit
        IMPORT  memcpy

; Video device structure extensions
                              ^ 0
                              # HALDeviceSize
HALDevice_Address2            # 4       ; Mismatch between wiki docs & header
HALDevice_Device2             # 4
HALDevice_DeviceSpecificField # 4
VideoDeviceSize               * :INDEX:@

; VideoInit
VideoInit ROUT
        Push    "lr"

        ; Map in the clock control
        MOV     a1, #0
        LDR     a2, =CMCoreDSS_PhysBase
        MOV     a3, #CMCoreDSS_PhysSize
        CallOS  OS_MapInIO
        STR     a1, CMCoreDSS_LogBase

        ; Turn on the clocks to the DSS + 2D accelerator
        MOV     a2, #CM_DSS_CLKSTCTRL_CLKTRCTRL_SW_WKUP
        STR     a2, [a1, #CM_DSS_CLKSTCTRL]
        LDR     a2, =CM_DSS_DSS_CLKCTRL_OPTFCLKEN_DSSCLK :OR: \
                     CM_DSS_DSS_CLKCTRL_OPTFCLKEN_VIDEO1_CLK :OR: \
                     CM_DSS_DSS_CLKCTRL_OPTFCLKEN_HDMI_CLK :OR: \
                     CM_DSS_DSS_CLKCTRL_OPTFCLKEN_48MHZ_CLK :OR: \
                     CM_CLKCTRL_MODULEMODE_ENABLED
        STR     a2, [a1, #CM_DSS_DSS_CLKCTRL]
        MOV     a2, #CM_CLKCTRL_MODULEMODE_ENABLED
        STR     a2, [a1, #CM_DSS_BB2D_CLKCTRL]

        ; Map in the DSS + 2D accelerator
        MOV     a1, #0
        LDR     a2, =DSS_PhysBase
        MOV     a3, #DSS_PhysSize
        CallOS  OS_MapInIO
        STR     a1, DSS_LogBase

        MOV     a1, #0
        LDR     a2, =BB2D_PhysBase
        MOV     a3, #BB2D_PhysSize
        CallOS  OS_MapInIO
        STR     a1, BB2D_LogBase

        Pull    "pc"

; VideoDeviceInit
VideoDeviceInit ROUT
        Push    "lr"
        
        ADRL    a1, VideoDevice
        ADR     a2, VideoDeviceTemplate
        MOV     a3, #VideoDeviceSize
        BL      memcpy

        LDR     a2, DSS_LogBase
        STR     a2, [a1, #HALDevice_Address]

        LDR     a2, BB2D_LogBase
        STR     a2, [a1, #HALDevice_Address2]

        MOV     a2, a1
        MOV     a1, #0                  ; No flags
        CallOS  OS_AddDevice

        Pull    "pc"

VideoDeviceTemplate
        DCW     HALDeviceType_Video + HALDeviceVideo_VDU
        DCW     HALDeviceID_VDU_GC320
        DCD     HALDeviceBus_Sys + HALDeviceSysBus_NoC
        DCD     0                       ; API version 0
        DCD     VideoDevice_Desc
        DCD     0                       ; Address of DSS - filled later
        %       12                      ; Reserved
        DCD     VideoDevice_Activate
        DCD     VideoDevice_Deactivate
        DCD     VideoDevice_Reset
        DCD     VideoDevice_Sleep
        DCD     DevNoVideo              ; Device number of DSS
        DCD     0
        %       8
        DCD     0                       ; Address of BB2D accelerator - filled later
        ASSERT  (.-VideoDeviceTemplate) = HALDevice_VDU_Size
        DCD     DevNo2DBitBlt           ; Device number of BB2D
        DCD     DevNoHDMIPort           ; Device number of HDMI
        ASSERT  (.-VideoDeviceTemplate) = VideoDeviceSize
        ASSERT  VideoDeviceSize = ?VideoDevice

VideoDevice_Desc
        DCB     "Vivante GC320", 0
        ALIGN

; VideoDevice_Activate
; => a1 = Video device
; <= a1 = success when TRUE
VideoDevice_Activate
        MOV     a1, #1
        ; Fall through

; VideoDevice_Deactivate
; => a1 = Video device
VideoDevice_Deactivate
        ; Fall through

; VideoDevice_Reset
; => a1 = Video device
VideoDevice_Reset
        MOV     pc, lr

; VideoDevice_Sleep
; => a1 = Video device
;    a2 = state
; <= a1 = new state
VideoDevice_Sleep
        MOV     a1, #0
        MOV     pc, lr

        END
