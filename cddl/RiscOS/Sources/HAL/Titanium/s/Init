;
; CDDL HEADER START
;
; The contents of this file are subject to the terms of the
; Common Development and Distribution License (the "Licence").
; You may not use this file except in compliance with the Licence.
;
; You can obtain a copy of the licence at
; cddl/RiscOS/Sources/HAL/Titanium/LICENCE.
; See the Licence for the specific language governing permissions
; and limitations under the Licence.
;
; When distributing Covered Code, include this CDDL HEADER in each
; file and include the Licence file. If applicable, add the
; following below this CDDL HEADER, with the fields enclosed by
; brackets "[]" replaced with your own identifying information:
; Portions Copyright [yyyy] [name of copyright owner]
;
; CDDL HEADER END
;
;
; Copyright 2014 Elesar Ltd.  All rights reserved.
; Use is subject to license terms.
;

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:ImageSize.<ImageSize>
        GET     Hdr:HALSize.<HALSize>
        GET     Hdr:OSEntries
        GET     Hdr:HALEntries

        GET     hdr.RegMap
        GET     hdr.StaticWS
                
        AREA    |Init$$Code|, CODE, READONLY, PIC

        EXPORT  HAL_Init
        EXPORT  HAL_InitDevices
        EXPORT  HAL_DebugTXWord
        EXPORT  HAL_DebugTXHalfWord
        EXPORT  HAL_DebugTXByte
        EXPORT  HAL_DebugTXInlineString
        EXPORT  HAL_DebugTX
        EXPORT  HAL_DebugRX
        IMPORT  RTCDeviceInit
        IMPORT  VideoDeviceInit
        IMPORT  VideoInit
        IMPORT  SDHCIDeviceInit
        IMPORT  SDHCIInit
        IMPORT  EtherNICDeviceInit
        IMPORT  EtherNICInit
        IMPORT  TimerInit
        IMPORT  IICInit
        IMPORT  USBInit
        IMPORT  CounterInit
        IMPORT  InterruptInit
        IMPORT  PCIInit
        IMPORT  PMICInit
        IMPORT  SATADeviceInit
        IMPORT  SATAInit
        IMPORT  GPIOInit
        IMPORT  UARTInit
        IMPORT  AudioInit
        IMPORT  AudioDeviceInit
        IMPORT  CPUClkInit
        IMPORT  CPUClkDeviceInit
        IMPORT  SDMAInit
        IMPORT  SDMADeviceInit

; HAL_Init
; => a1 = pointer to OSIm
;    a2 = address of NCNB workspace (if requested)
HAL_Init ROUT
        Push    "lr"

        ; Fill in the OS entry table
        STR     a1, OSIm_LogBase
        LDR     a2, [a1, #OSHdr_NumEntries]
        CMP     a2, #HighestOSEntry + 1
        MOVHI   a2, #HighestOSEntry + 1

        LDR     a4, [a1, #OSHdr_Entries]
        ADD     a4, a4, a1              ; Src absolute
        ADRL    a3, OSEntryTable        ; Dst absolute
10
        SUBS    a2, a2, #1
        LDR     ip, [a4, a2, LSL #2]
        ADD     ip, ip, a4              ; Make absolute
        STR     ip, [a3, a2, LSL #2]
        BNE     %BT10

        ; Map in the debug UART first
        MOV     a1, #0
        LDR     a2, =UART1_PhysBase
        MOV     a3, #UART_PhysSize
        CallOS  OS_MapInIO
        STR     a1, UART1_LogBase

        DebugTX "Entered HAL_Init"

        ; Map in all of L4_CFG in one section
        MOV     a1, #0
        LDR     a2, =L4_CFG_PhysBase
        MOV     a3, #SectionSize
        CallOS  OS_MapInIO
        STR     a1, L4_CFG_LogBase
        ASSERT  (CMCoreL4PER_PhysBase - L4_CFG_PhysBase) < 1024*1024
        ADD     a2, a1, #CMCoreL4PER_PhysBase - L4_CFG_PhysBase
        STR     a2, CMCoreL4PER_LogBase
        ASSERT  (CMCoreL3INIT_PhysBase - L4_CFG_PhysBase) < 1024*1024
        ADD     a2, a1, #CMCoreL3INIT_PhysBase - L4_CFG_PhysBase
        STR     a2, CMCoreL3INIT_LogBase
        ASSERT  (CMCoreIPU_PhysBase - L4_CFG_PhysBase) < 1024*1024
        ADD     a2, a1, #CMCoreIPU_PhysBase - L4_CFG_PhysBase
        STR     a2, CMCoreIPU_LogBase
        ASSERT  (CMCoreDSS_PhysBase - L4_CFG_PhysBase) < 1024*1024
        ADD     a2, a1, #CMCoreDSS_PhysBase - L4_CFG_PhysBase
        STR     a2, CMCoreDSS_LogBase
        ASSERT  (CMCoreCkgen_PhysBase - L4_CFG_PhysBase) < 1024*1024
        ADD     a2, a1, #CMCoreCkgen_PhysBase - L4_CFG_PhysBase
        STR     a2, CMCoreCkgen_LogBase
        ASSERT  (CMCoreAONCkgen_PhysBase - L4_CFG_PhysBase) < 1024*1024
        ADD     a2, a1, #CMCoreAONCkgen_PhysBase - L4_CFG_PhysBase
        STR     a2, CMCoreAONCkgen_LogBase
        ASSERT  (CMCoreCore_PhysBase - L4_CFG_PhysBase) < 1024*1024
        ADD     a2, a1, #CMCoreCore_PhysBase - L4_CFG_PhysBase
        STR     a2, CMCoreCore_LogBase
        ASSERT  (ControlCore_PhysBase - L4_CFG_PhysBase) < 1024*1024
        ADD     a2, a1, #ControlCore_PhysAdjust + ControlCore_PhysBase - L4_CFG_PhysBase
        STR     a2, ControlCore_LogBase

        ; Map in all of L4_WKUP in one section
        MOV     a1, #0
        LDR     a2, =L4_WKUP_PhysBase
        MOV     a3, #SectionSize
        CallOS  OS_MapInIO
        STR     a1, L4_WKUP_LogBase
        ASSERT  (PRMDevice_PhysBase - L4_WKUP_PhysBase) < 1024*1024
        ADD     a2, a1, #PRMDevice_PhysBase - L4_WKUP_PhysBase
        STR     a2, PRMDevice_LogBase
        ASSERT  (PRML3INIT_PhysBase - L4_WKUP_PhysBase) < 1024*1024
        ADD     a2, a1, #PRML3INIT_PhysBase - L4_WKUP_PhysBase
        STR     a2, PRML3INIT_LogBase
        ASSERT  (ControlWakeUp_PhysBase - L4_WKUP_PhysBase) < 1024*1024
        ADD     a2, a1, #ControlWakeUp_PhysBase - L4_WKUP_PhysBase
        STR     a2, ControlWakeUp_LogBase
        ASSERT  (CMWakeUp_PhysBase - L4_WKUP_PhysBase) < 1024*1024
        ADD     a2, a1, #CMWakeUp_PhysBase - L4_WKUP_PhysBase
        STR     a2, CMWakeUp_LogBase

        ; And do the other things
        BL      TimerInit
        BL      CounterInit
        BL      GPIOInit
        BL      IICInit
        BL      PMICInit
        BL      VideoInit
      [ :LNOT:Vayu
        BL      PCIInit
      ]
        BL      SDMAInit
        BL      AudioInit
        BL      UARTInit
        BL      USBInit
        BL      SATAInit
        BL      CPUClkInit
        BL      SDHCIInit
        BL      EtherNICInit
        BL      InterruptInit

        Pull    "pc"

; HAL_InitDevices
; => a1 = flags
HAL_InitDevices ROUT
        Push    "lr"

        DebugTX "Registering devices"

        BL      VideoDeviceInit
        BL      SDMADeviceInit
        BL      AudioDeviceInit
        BL      SDHCIDeviceInit
        BL      SATADeviceInit
        BL      EtherNICDeviceInit
        BL      RTCDeviceInit
        BL      CPUClkDeviceInit

        Pull    "pc"

; HAL_DebugTX[Word | HalfWord | Byte]
; => a1 = value
HAL_DebugTXWord
        MOV     a2, #8
        B       %FT10
HAL_DebugTXHalfWord
        MOV     a2, #4
        MOV     a1, a1, LSL #16
        B       %FT10
HAL_DebugTXByte
        MOV     a2, #2
        MOV     a1, a1, LSL #24
10
        Push    "v1-v2, lr"
        MOV     v1, a1
        MOV     v2, a2
20
        UBFX    a1, v1, #28, #4
        CMP     a1, #10
        ADDCC   a1, a1, #'0'
        ADDCS   a1, a1, #'A' - 10
        BL      HAL_DebugTX
        MOV     v1, v1, LSL #4
        SUBS    v2, v2, #1
        BNE     %BT20
        Pull    "v1-v2, pc"

; HAL_DebugTXInlineString
; => lr = string to send
HAL_DebugTXInlineString ROUT
        MOV     a3, lr                  ; Assume HAL_DebugTX doesn't touch a3
10
        LDRB    a1, [a3], #1
        TEQ     a1, #0
        ADDEQ   a3, a3, #3
        BICEQ   pc, a3, #3              ; Align and return
        BL      HAL_DebugTX
        B       %BT10

; HAL_DebugTX
; => a1 = character to send
HAL_DebugTX ROUT
      [ Debug
        MRC     p15, 0, a2, c1, c0
        TST     a2, #1
        LDRNE   ip, UART1_LogBase       ; When MMU on
        LDREQ   ip, =UART1_PhysBase     ; When MMU off
10
        ; Check FIFO for space
        LDR     a2, [ip, #UART_LSR]
        TST     a2, #UART_LSR_TX_FIFO_E
        BEQ     %BT10

        STR     a1, [ip, #UART_THR]
      ]
        MOV     pc, lr

; HAL_DebugRX
; <= a1 = received character (or -1 if none)
HAL_DebugRX ROUT
      [ Debug
        MRC     p15, 0, a2, c1, c0
        TST     a2, #1
        LDRNE   ip, UART1_LogBase       ; When MMU on
        LDREQ   ip, =UART1_PhysBase     ; When MMU off
10
        ; Check incoming
        LDR     a2, [ip, #UART_LSR]
        TST     a2, #UART_LSR_RX_FIFO_E
        MOVEQ   a1, #-1
        LDRNE   a1, [ip, #UART_RHR]
        UXTBNE  a1, a1
      |
        MOV     a1, #-1
      ]
        MOV     pc, lr
        
        END
        