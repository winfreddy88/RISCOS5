;
; CDDL HEADER START
;
; The contents of this file are subject to the terms of the
; Common Development and Distribution License (the "Licence").
; You may not use this file except in compliance with the Licence.
;
; You can obtain a copy of the licence at
; cddl/RiscOS/Sources/HAL/Titanium/LICENCE.
; See the Licence for the specific language governing permissions
; and limitations under the Licence.
;
; When distributing Covered Code, include this CDDL HEADER in each
; file and include the Licence file. If applicable, add the
; following below this CDDL HEADER, with the fields enclosed by
; brackets "[]" replaced with your own identifying information:
; Portions Copyright [yyyy] [name of copyright owner]
;
; CDDL HEADER END
;
;
; Copyright 2014 Elesar Ltd.  All rights reserved.
; Use is subject to license terms.
;

;
; Page 0 (DVS registers) at IIC &24
; Page 1 (power registers) at IIC &B0/1
; Page 2 (aux registers) at IIC &B2/3
; Page 3 (trim registers) at IIC &B4/5
; Page 4 (OTP registers) at IIC &B6/7
;
                            ^ &022
; FUNC_SMPS_DVS
DVS_SMPS12_FORCE            # 1
DVS_SMPS12_VOLTAGE          # 1
                            # 6
DVS_SMPS45_FORCE            # 1
DVS_SMPS45_VOLTAGE          # 1
                            # 2
DVS_SMPS6_FORCE             # 1
DVS_SMPS6_VOLTAGE           # 1
                            # 6
DVS_SMPS8_FORCE             # 1
DVS_SMPS8_VOLTAGE           # 1
        ASSERT @=&38
                            ^ &100
; FUNC_RTC
RTC_SECONDS_REG             # 1
RTC_MINUTES_REG             # 1
RTC_HOURS_REG               # 1
RTC_DAYS_REG                # 1
RTC_MONTHS_REG              # 1
RTC_YEARS_REG               # 1
RTC_WEEKS_REG               # 1
                            # 1
RTC_ALARM_SECONDS_REG       # 1
RTC_ALARM_MINUTES_REG       # 1
RTC_ALARM_HOURS_REG         # 1
RTC_ALARM_DAYS_REG          # 1
RTC_ALARM_MONTHS_REG        # 1
RTC_ALARM_YEARS_REG         # 1
                            # 2
RTC_CTRL_REG                # 1
RTC_STATUS_REG              # 1
RTC_INTERRUPTS_REG          # 1
RTC_COMP_LSB_REG            # 1
RTC_COMP_MSB_REG            # 1
RTC_RES_PROG_REG            # 1
RTC_RESET_STATUS_REG        # 1
        ASSERT @=&117
                            ^ &118
; FUNC_VALIDITY
BACKUP0                     # 1
BACKUP1                     # 1
BACKUP2                     # 1
BACKUP3                     # 1
BACKUP4                     # 1
BACKUP5                     # 1
BACKUP6                     # 1
BACKUP7                     # 1
        ASSERT @=&120
                            ^ &120
; FUNC_SMPS
SMPS12_CTRL                 # 1
                            # 1
SMPS12_FORCE                # 1
SMPS12_VOLTAGE              # 1
SMPS3_CTRL                  # 1
                            # 2
SMPS3_VOLTAGE               # 1
SMPS45_CTRL                 # 1
                            # 1
SMPS45_FORCE                # 1
SMPS45_VOLTAGE              # 1
SMPS6_CTRL                  # 1
                            # 1
SMPS6_FORCE                 # 1
SMPS6_VOLTAGE               # 1
SMPS7_CTRL                  # 1
                            # 2
SMPS7_VOLTAGE               # 1
SMPS8_CTRL                  # 1
                            # 1
SMPS8_FORCE                 # 1
SMPS8_VOLTAGE               # 1
SMPS9_CTRL                  # 1
                            # 2
SMPS9_VOLTAGE               # 1
                            # 8
SMPS_CTRL                   # 1
SMPS_CTRL_SMPS45_SMPS457_EN         * 1:SHL:5
SMPS_CTRL_SMPS12_SMPS123_EN         * 1:SHL:4
SMPS_CTRL_SMPS45_PHASE_CTRL_SHIFT   * 2
SMPS_CTRL_SMPS45_PHASE_CTRL_MASK    * 3:SHL:SMPS_CTRL_SMPS45_PHASE_CTRL_SHIFT
SMPS_CTRL_SMPS45_PHASE_CTRL_AUTO    * 0:SHL:SMPS_CTRL_SMPS45_PHASE_CTRL_SHIFT
SMPS_CTRL_SMPS45_PHASE_CTRL_SINGLE  * 1:SHL:SMPS_CTRL_SMPS45_PHASE_CTRL_SHIFT
SMPS_CTRL_SMPS45_PHASE_CTRL_DOUBLE  * 2:SHL:SMPS_CTRL_SMPS45_PHASE_CTRL_SHIFT
SMPS_CTRL_SMPS123_PHASE_CTRL_SHIFT  * 0
SMPS_CTRL_SMPS123_PHASE_CTRL_MASK   * 3:SHL:SMPS_CTRL_SMPS123_PHASE_CTRL_SHIFT
SMPS_CTRL_SMPS123_PHASE_CTRL_AUTO   * 0:SHL:SMPS_CTRL_SMPS123_PHASE_CTRL_SHIFT
SMPS_CTRL_SMPS123_PHASE_CTRL_SINGLE * 1:SHL:SMPS_CTRL_SMPS123_PHASE_CTRL_SHIFT
SMPS_CTRL_SMPS123_PHASE_CTRL_DOUBLE * 2:SHL:SMPS_CTRL_SMPS123_PHASE_CTRL_SHIFT
SMPS_PD_CTRL                # 1
                            # 1
SMPS_THERMAL_EN             # 1
SMPS_THERMAL_STATUS         # 1
SMPS_SHORT_STATUS           # 1
SMPS_NEGATIVE_CURRENT_LIMIT_EN # 1
SMPS_POWERGOOD_MASK1        # 1
SMPS_POWERGOOD_MASK2        # 1
        ASSERT @=&14D
                            ^ &150
; FUNC_LDO
LDO1_CTRL                   # 1
LDO1_VOLTAGE                # 1
LDO2_CTRL                   # 1
LDO2_VOLTAGE                # 1
LDO3_CTRL                   # 1
LDO3_VOLTAGE                # 1
LDO4_CTRL                   # 1
LDO4_VOLTAGE                # 1
LDO5_CTRL                   # 1
LDO5_VOLTAGE                # 1
LDO6_CTRL                   # 1
LDO6_VOLTAGE                # 1
LDO7_CTRL                   # 1
LDO7_VOLTAGE                # 1
LDO8_CTRL                   # 1
LDO8_VOLTAGE                # 1
LDO9_CTRL                   # 1
LDO9_VOLTAGE                # 1
LDOLN_CTRL                  # 1
LDOLN_VOLTAGE               # 1
LDOUSB_CTRL                 # 1
LDOUSB_VOLTAGE              # 1
                            # 4
LDO_CTRL                    # 1
LDO_PD_CTRL1                # 1
LDO_PD_CTRL2                # 1
LDO_SHORT_STATUS1           # 1
LDO_SHORT_STATUS2           # 1
        ASSERT @=&16F
                            ^ &17F
; FUNC_SPI
SPI_PAGE_CTRL               # 1
        ASSERT @=&180
                            ^ &180
; FUNC_DVFS
SMPS_DVFS1_CTRL             # 1
SMPS_DVFS1_VOLTAGE_MAX      # 1
SMPS_DVFS1_STATUS           # 1
        ASSERT @=&183
                            ^ &1A0
; FUNC_PMU_CONTROL
DEV_CTRL                    # 1
DEV_CTRL_DEV_STATUS_SHIFT   * 2
DEV_CTRL_DEV_STATUS_MASK    * 3:SHL:DEV_CTRL_DEV_STATUS_SHIFT
DEV_CTRL_DEV_STATUS_OFF     * 0:SHL:DEV_CTRL_DEV_STATUS_SHIFT
DEV_CTRL_DEV_STATUS_ACTIVE  * 1:SHL:DEV_CTRL_DEV_STATUS_SHIFT
DEV_CTRL_DEV_STATUS_SLEEP   * 3:SHL:DEV_CTRL_DEV_STATUS_SHIFT
DEV_CTRL_SW_RST             * 1:SHL:1
DEV_CTRL_DEV_ON             * 1:SHL:0
POWER_CTRL                  # 1
VSYS_LO                     # 1
VSYS_MON                    # 1
                            # 1
WATCHDOG                    # 1
BOOT_STATUS                 # 1
                            # 1
VRTC_CTRL                   # 1
LONG_PRESS_KEY              # 1
OSC_THERM_CTRL              # 1
                            # 4
SWOFF_HWRST                 # 1
SWOFF_COLDRST               # 1
SWOFF_STATUS                # 1
PMU_CONFIG                  # 1
                            # 1
SPARE                       # 1
                            # 2
SW_REVISION                 # 1
        ASSERT @=&1B8
                            ^ &1D5
; FUNC_RESOURCE
CLK32KGO1V8_CTRL            # 1
REGEN1_CTRL                 # 1
PLLEN_CTRL                  # 1
SYSEN1_CTRL                 # 1
SYSEN2_CTRL                 # 1
NSLEEP_RES_ASSIGN           # 1
NSLEEP_SMPS_ASSIGN          # 1
NSLEEP_LDO_ASSIGN1          # 1
NSLEEP_LDO_ASSIGN2          # 1
ENABLE1_RES_ASSIGN          # 1
ENABLE1_SMPS_ASSIGN         # 1
ENABLE1_LDO_ASSIGN1         # 1
ENABLE1_LDO_ASSIGN2         # 1
                            # 4
REGEN2_CTRL                 # 1
        ASSERT @=&1E7
                            ^ &1F4
; FUNC_PU_PD_OD
PU_PD_INPUT_CTRL1           # 1
PU_PD_INPUT_CTRL2           # 1
PU_PD_INPUT_CTRL3           # 1
                            # 1
OD_OUTPUT_CTRL              # 1
POLARITY_CTRL               # 1
PRIMARY_SECONDARY_PAD1      # 1
PRIMARY_SECONDARY_PAD2      # 1
PRIMARY_SECONDARY_PAD2_GPIO_7    * 0:SHL:5
PRIMARY_SECONDARY_PAD2_POWERHOLD * 1:SHL:5
I2C_SPI                     # 1
PU_PD_INPUT_CTRL4           # 1
        ASSERT @=&1FE
                            ^ &210
; FUNC_INTERRUPT
INT1_STATUS                 # 1
INT1_MASK                   # 1
INT1_LINE_STATE             # 1
INT1_EDGE_DETECT1_RESERVED  # 1
INT1_EDGE_DETECT2_RESERVED  # 1
INT2_STATUS                 # 1
INT2_MASK                   # 1
INT2_LINE_STATE             # 1
INT2_EDGE_DETECT1_RESERVED  # 1
INT2_EDGE_DETECT2_RESERVED  # 1
INT3_STATUS                 # 1
INT3_MASK                   # 1
INT3_LINE_STATE             # 1
INT3_EDGE_DETECT1_RESERVED  # 1
INT3_EDGE_DETECT2_RESERVED  # 1
INT4_STATUS                 # 1
INT4_MASK                   # 1
INT4_LINE_STATE             # 1
INT4_EDGE_DETECT1_RESERVED  # 1
INT4_EDGE_DETECT2_RESERVED  # 1
INT_CTRL                    # 1
        ASSERT @=&225
                            ^ &24F
; FUNC_ID
VENDOR_ID_LSB               # 1
VENDOR_ID_MSB               # 1
PRODUCT_ID_LSB              # 1
PRODUCT_ID_MSB              # 1
        ASSERT @=&253
                            ^ &280
; FUNC_GPIO
GPIO_DATA_IN                # 1
GPIO_DATA_DIR               # 1
GPIO_DATA_OUT               # 1
GPIO_DEBOUNCE_EN            # 1
GPIO_CLEAR_DATA_OUT         # 1
GPIO_SET_DATA_OUT           # 1
PU_PD_GPIO_CTRL1            # 1
PU_PD_GPIO_CTRL2            # 1
OD_OUTPUT_GPIO_CTRL         # 1
        ASSERT @=&289
                            ^ &2C0
; FUNC_GPADC
GPADC_CTRL1                 # 1
                            # 2
GPADC_AUTO_CTRL             # 1
GPADC_STATUS                # 1
                            # 3
GPADC_AUTO_SELECT           # 1
GPADC_AUTO_CONV0_LSB        # 1
GPADC_AUTO_CONV0_MSB        # 1
GPADC_AUTO_CONV1_LSB        # 1
GPADC_AUTO_CONV1_MSB        # 1
GPADC_SW_SELECT             # 1
GPADC_SW_CONV0_LSB          # 1
GPADC_SW_CONV0_MSB          # 1
GPADC_THRES_CONV0_LSB       # 1
GPADC_THRES_CONV0_MSB       # 1
GPADC_THRES_CONV1_LSB       # 1
GPADC_THRES_CONV1_MSB       # 1
GPADC_SMPS_ILMONITOR_EN     # 1
GPADC_SMPS_VSEL_MONITORING  # 1
        ASSERT @=&2D6
                            ^ &357
; FUNC_DESIGNREV
DESIGNREV                   # 1
        ASSERT @=&358

        END
