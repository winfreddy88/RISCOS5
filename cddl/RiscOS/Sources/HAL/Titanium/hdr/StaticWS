;
; CDDL HEADER START
;
; The contents of this file are subject to the terms of the
; Common Development and Distribution License (the "Licence").
; You may not use this file except in compliance with the Licence.
;
; You can obtain a copy of the licence at
; cddl/RiscOS/Sources/HAL/Titanium/LICENCE.
; See the Licence for the specific language governing permissions
; and limitations under the Licence.
;
; When distributing Covered Code, include this CDDL HEADER in each
; file and include the Licence file. If applicable, add the
; following below this CDDL HEADER, with the fields enclosed by
; brackets "[]" replaced with your own identifying information:
; Portions Copyright [yyyy] [name of copyright owner]
;
; CDDL HEADER END
;
;
; Copyright 2014 Elesar Ltd.  All rights reserved.
; Use is subject to license terms.
;

sb      RN 9

        GBLL Debug      ; Be chatty on the serial port
Debug   SETL {FALSE}     

        GBLL PCIInts    ; Split 1 PCI interrupt into 4 to emulate INTA/B/C/D
PCIInts SETL {TRUE}     

        GBLL DoubleDMA  ; Use half the DMA channels for double buffering
DoubleDMA SETL {TRUE}

        GBLL OneSpeed   ; Stay at the nominal operating point
OneSpeed SETL {FALSE}

ClkOsc0         * 20000000
ClkOsc1         * 22579200
ClkCore         * 133000000
ClkPer4         * 48000000
ClkRTC          * 32768

IRQCount        * 160                   ; Declared interrupts
IRQGICCount     * 32                    ; Built in GIC ones
IRQPCICount     * 8                     ; INT#A/B/C/D and 2 controllers

RTCAddressDAL   * &D0
TLVCodecAddress * &30

DebugPortNum    * 0                     ; Index for serial debug

AudioTxPortNum  * 0                     ; AXR0
AudioRxPortNum  * 1                     ; AXR1

SectionSize     * 1:SHL:20
PageSize        * 1:SHL:12

DevNoVideo      * 25                    ; DISPC_IRQ
DevNoTimer0     * 38                    ; TIMER2
DevNoTimer1     * 39                    ; TIMER3
DevNoTimer2     * 40                    ; TIMER4
DevNoTimer3     * 45                    ; TIMER9
DevNoTimer4     * 46                    ; TIMER10
DevNoTimer5     * 47                    ; TIMER11
DevNoIIC0       * 56                    ; IIC1
DevNoIIC1       * 62                    ; IIC4
DevNoIIC2       * 60                    ; IIC5
DevNoSDHCI      * 83                    ; MMC1_IRQ
DevNoGMAC       * 114                   ; Remapped from 334-337
DevNoGMACRxThresh  * DevNoGMAC + 0
DevNoGMACRxPulse   * DevNoGMAC + 1
DevNoGMACTxPulse   * DevNoGMAC + 2
DevNoGMACMiscPulse * DevNoGMAC + 3
DevNoUSB0       * 76                    ; USB1
DevNoUSB1       * 78                    ; USB2
DevNoHDMIPort   * 101                   ; HDMI_IRQ
DevNoPCIe0Main  * 68                    ; Remapped from 232
DevNoPCIe0MSI   * 69                    ; Remapped from 233
DevNoPCIe1Main  * 84                    ; Remapped from 355
DevNoPCIe1MSI   * 85                    ; Remapped from 356
DevNoPCIInts    * 141                   ; Any spare group of 8
DevNo2DBitBlt   * 125                   ; BB2D_IRQ
DevNoSATA       * 54                    ; SATA_IRQ
DevNoUART1      * 72
DevNoUART8      * 27                    ; Remapped from 219
DevNoSDMA       * 12
DevNoMCASP3Tx   * 50                    ; Remapped from 151

DMANoMCASP3Tx0  * 20                    ; Remapped from 133
DMANoMCASP3Rx0  * 21                    ; Remapped from 132
DMANoMMC1Tx     * 60                    ; MMC1
DMANoMMC1Rx     * 61
DMANoUART1Tx    * 48                    ; UART1
DMANoUART1Rx    * 49

        MACRO
        Stage   $s
      [ Debug
        MOV     a1, #$s
        BL      EarlyStageReport
      ]
        MEND
        
        MACRO
        DebugTX $str
      [ Debug
        BL      HAL_DebugTXInlineString
        DCB     "$str", 13, 10, 0
        ALIGN
      ]
        MEND

        MACRO
        DebugTXWord $reg
      [ Debug
        MOV     a1, $reg
        BL      HAL_DebugTXWord
      ]
        MEND

        MACRO
        DebugTXHalfWord $reg
      [ Debug
        MOV     a1, $reg
        BL      HAL_DebugTXHalfWord
      ]
        MEND

        MACRO
        DebugTXByte $reg
      [ Debug
        MOV     a1, $reg
        BL      HAL_DebugTXByte
      ]
        MEND

        MACRO
        CallOSPreMMU $entry, $reg
        LDR     ip, [v8, #$entry*4]
        MOV     lr, pc
        ADD     pc, v8, ip
        MEND

        MACRO
        CallOS  $entry, $tailcall
        ASSERT  $entry <= HighestOSEntry
    [ "$tailcall"=""
        MOV     lr, pc
    |
      [ "$tailcall"<>"tailcall"
        ! 0, "Unrecognised parameter to CallOS"
      ]
    ]
        LDR     pc, OSEntryTable + (4 * $entry)
        MEND

                    ^ 0, sb
UART1_LogBase       # 4
OSIm_LogBase        # 4
Timers_LogBase      # 4 * 6             ; 6 timers
IIC_LogBase         # 4 * 3             ; 3 buses
IICTxfrStates       # 16 * 3            ; 3 buses
GIC_LogBase         # 4
SDHCI_LogBase       # 4
USB_LogBase         # 4 * 2             ; 2 controllers
NIC_LogBase         # 4
DSS_LogBase         # 4
BB2D_LogBase        # 4
PCIePHY_LogBase     # 4
PCIe_SS_LogBase     # 4 * 2             ; 2 controllers
PCICfg_LogBase      # 4 * 2             ; 2 windows, one per controller
PCIIO_LogBase       # 4 * 2             ; 2 windows but arranged adjacent
GPIO_LogBase        # 4 * 9             ; 8 naturally numbered banks
UART_LogBase        # 4 * 2             ; 2 ports
SATA_LogBase        # 4
SATAPHY_LogBase     # 4
SATAMAC_WRAPPER_LogBase # 4
USB3PHY_LogBase     # 4
SDMA_LogBase        # 4
MCASP3_LogBase      # 4

L4_CFG_LogBase      # 4                 ; Base
CMCoreL4PER_LogBase # 4                 ; Derived L4_CFG
CMCoreL3INIT_LogBase # 4                ; Derived L4_CFG
CMCoreIPU_LogBase   # 4                 ; Derived L4_CFG
CMCoreDSS_LogBase   # 4                 ; Derived L4_CFG
CMCoreCkgen_LogBase # 4                 ; Derived L4_CFG
CMCoreCore_LogBase  # 4                 ; Derived L4_CFG
CMCoreAONCkgen_LogBase # 4              ; Derived L4_CFG
ControlCore_LogBase # 4                 ; Derived L4_CFG

L4_WKUP_LogBase     # 4                 ; Base
PRMDevice_LogBase   # 4                 ; Derived L4_WKUP
PRML3INIT_LogBase   # 4                 ; Derived L4_WKUP
ControlWakeUp_LogBase # 4               ; Derived L4_WKUP
CMWakeUp_LogBase    # 4                 ; Derived L4_WKUP

UARTSoftFCR         # 2                 ; 2 ports
UARTLastMSR         # 2
UniquePROM          # 64                ; Whole dump
UniquePROMRead      # 1
                    # 3
EtherNICDevice      # 64
VideoDevice         # 76
SDHCIDevice         # 140
RTCDevice           # 80
AudioDevice         # 128
MixerDevice         # 88
MixerSoftCopy       # 6 * 8             ; Last set mix arguments
                    # 8
SATADevice          # 64
CPUClkDevice        # 96
                    # 8
OSEntryTable        # 4 * (HighestOSEntry + 1)
SDMADMACDevice      # 92 + (32 * 4)     ; 1 controller + 32 pointers
SDMADMABDevice      # 32 * 132          ; 32 channels
SDMADMABNames       # 32 * 28           ; 32 channels 

PCIProbingWS        # 1024

StaticWSSize        * :INDEX:@

        END
