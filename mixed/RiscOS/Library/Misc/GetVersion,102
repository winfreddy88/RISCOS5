#!/usr/bin/env perl
#
# Copyright 2008 Castle Technology Ltd
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# $Id: GetVersion,102,v 1.3 2011/03/17 16:34:28 srevill Exp $
#
#
#############################################################################

# This script extracts version numbers from the VersionNum file and
# assigns them to variables.

$script = $0;
$script  =~ s/^.*[\/:]//;
$version_file     = "VersionNum";
$usage = "Usage: $script ".
  "<major> [<full> [<date> [<minor> [<appdate2> [<appdate4]]]]]\n\n" .
  "Specify system variables to receive the settings from the $version_file file.\n".
  "Specify an empty string as a parameter if not interested in the earlier variables\n";

#############################################################################

($varmajor,$varfull,$vardate,$varminor,$varapptwo,$varappfour) = @ARGV;
die($usage) unless $varmajor;
($major,$full,$date,$minor,$apptwo,$appfour)=&read_file($version_file);

system("set $varmajor \"$major\"") if $varmajor && $major;
system("set $varfull \"$full\"") if $varfull && $full;
system("set $vardate \"$date\"") if $vardate && $date;
system("set $varminor \"$minor\"") if $varminor && $minor;
system("set $varapptwo \"$apptwo\"") if $varapptwo && $apptwo;
system("set $varappfour \"$appfour\"") if $varappfour && $appfour;

exit 0;

#############################################################################
# Read the version number file to retrieve the current major version number.
#
sub read_file {
  my $file = $_[0];
  my ($line,$major,$date,$full,$minor,$apptwo,$appfour);
  
  # first line contains the interesting stuff
  open(FILE,"<$file") || &failed("cannot open $file");
  $line = <FILE>;
  
  chomp($line);
  $line =~ m|^.*\((.*)\).*$|;			# extract the bits
  $major = $1;
  
  if ($major eq "") {
    die("$script: cannot find major version number, has the file been messed with ?\n");
  }
  
  while (<FILE>) {
    chomp;
    if (/\S*\s+Module\_Date\s+\"(.*)\"\s*\Z/) {
      $date=$1;
    }
    elsif (/Module\_FullVersion\s+\"(\S+)\"\s*\Z/) {
      $full=$1;
    }
    elsif (/Module\_MinorVersion\s+\"(\S+)\"\s*\Z/) {
      $minor=$1;
    }
    elsif (/Module\_ApplicationDate2\s+\"(\S+)\"\s*\Z/) {
      $apptwo=$1;
    }
    elsif (/Module\_ApplicationDate4\s+\"(\S+)\"\s*\Z/) {
      $appfour=$1;
    }
  }
  
  return ($major,$full,$date,$minor,$apptwo,$appfour);
}

#############################################################################
# Wrap things up neatly.
#
sub failed {
  printf(STDERR "$script: $_[0] failed: $!\n");
  exit 1;
};

