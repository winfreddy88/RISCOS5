/* general card functions */
status_t nv_general_powerup(hRPTR);
status_t nv_set_cas_latency(hRPTR);
//#ifndef __riscos
void setup_virtualized_heads(bool);
//#endif
void set_crtc_owner(bool hRPTR1);
status_t nv_general_output_select(bool hRPTR1);
status_t nv_general_head_select(bool hRPTR1);
status_t nv_general_wait_retrace(hRPTR);
status_t nv_general_validate_pic_size (display_mode *target, uint32 *bytes_per_row, bool *acc_mode hRPTR1);

/* AGP functions */
status_t nv_agp_setup(void);

/* apsed: logging macros */
#ifndef CDEBUG
#define MSG(args)
#define LOG(level_bit, args)
#else
#define MSG(args) do { /* if needed or si->settings with si NULL */ \
	nv_log args; \
} while (0)
#define LOG(level_bit, args) do { \
	uint32 mod = (si->settings.logmask &  0xfffffff0) & MODULE_BIT; \
	uint32 lev = (si->settings.logmask & ~0xfffffff0) & level_bit; \
	if (mod && lev) nv_log args; \
} while (0)

#endif
#ifndef __riscos
/* support functions */
void delay(bigtime_t i);
#endif
void nv_log(char *format, ...);

/* i2c functions */
int i2c_maven_read(unsigned char address);
void i2c_maven_write(unsigned char address, unsigned char data);
status_t i2c_init(void);
status_t i2c_maven_probe(void);

/* card info functions */
status_t parse_pins(hRPTR);
void get_panel_modes(display_mode *p1, display_mode *p2, bool *pan1, bool *pan2 hRPTR1);
void fake_panel_start(hRPTR);
void set_specs(hRPTR);
void dump_pins(hRPTR);

/* DAC functions */
bool nv_dac_crt_connected(hRPTR);
status_t nv_dac_mode(int,Float hRPTR1);
status_t nv_dac_palette(uint8*,uint8*,uint8* hRPTR1);
status_t nv_dac_pix_pll_find(display_mode target,Float *result,uint8 *,uint8 *,uint8 *, uint8 hRPTR1);
status_t nv_dac_set_pix_pll(display_mode target hRPTR1);
status_t nv_dac_sys_pll_find(Float, Float*, uint8*, uint8*, uint8*, uint8 hRPTR1);
void nv_find_MNP( uint32 clkwanted,                        /* required frequency                  */
                  uint32 vco_min, uint32 vco_max,          /* VCO min/max frequency               */
                  uint32 discr_low, uint32 discr_high,     /* PLL discriminator min/max frequency */
                  uint8 m_max, uint8 m_min,                /* Max and min M */
                  uint8 p_max, uint8 p_min,                /* Max and min P */
                  uint8 second_scaler,                     /* 2nd scaler value if not 0           */
                  uint32 *clockgot, uint8 *m_ans,
                  uint8 *n_ans, uint8 *p_ans hRPTR1);      /* answers          */



extern void nv_find_MNP2( uint32 clkwanted,                /* required frequency                  */
                  uint32 vco_min, uint32 vco_max,          /* VCO min/max frequency               */
                  uint32 discr_low, uint32 discr_high,     /* PLL discriminator min/max frequency */
                  uint8 m_max, uint8 m_min,                /* Max and min M */
                  uint8 p_max, uint8 p_min,                /* Max and min P */
                  uint8 second_scaler, uint32 fref,        /* 2nd scaler value if not 0           */
                  uint32 *clockgot, uint8 *m_ans,
                  uint8 *n_ans, uint8 *p_ans hRPTR1);      /* answers          */


//#define nv_find_MNP(a,b,c,d,e,f,g,h,i,j,k,l,m,n) nv_find_MNP2(a,b,c,d,e,f,g,h,i,j,si,k,l,m,n)
//
/* DAC2 functions */
bool nv_dac2_crt_connected(hRPTR);
status_t nv_dac2_mode(int,Float hRPTR1);
status_t nv_dac2_palette(uint8*,uint8*,uint8* hRPTR1);
status_t nv_dac2_pix_pll_find(display_mode target,Float *result,uint8 *,uint8 *,uint8 *, uint8 hRPTR1);
status_t nv_dac2_set_pix_pll(display_mode target hRPTR1);

/*MAVENTV functions*/
status_t g100_g400max_maventv_vid_pll_find(
	display_mode target, unsigned int * ht_new, unsigned int * ht_last_line,
	uint8 * m_result, uint8 * n_result, uint8 * p_result hRPTR1);
int maventv_init(display_mode target hRPTR1);

/* CRTC1 functions */
status_t nv_crtc_update_fifo( hRPTR);
status_t nv_crtc_validate_timing(
	uint16 *hd_e,uint16 *hs_s,uint16 *hs_e,uint16 *ht,
	uint16 *vd_e,uint16 *vs_s,uint16 *vs_e,uint16 *vt  hRPTR1
);
status_t nv_crtc_set_timing(display_mode target hRPTR1);
status_t nv_crtc_depth(int mode hRPTR1);
status_t nv_crtc_set_display_start(uint32 startadd,uint8 bpp hRPTR1); 
status_t nv_crtc_set_display_pitch( hRPTR);

status_t nv_crtc_dpms(bool, bool, bool hRPTR1);
status_t nv_crtc_dpms_fetch(bool*, bool*, bool* hRPTR1);
status_t nv_crtc_mem_priority(uint8 hRPTR1);

status_t nv_crtc_cursor_init( hRPTR); /*Yes, cursor follows CRTC1 - not the DAC!*/
status_t nv_crtc_cursor_define(uint8*,uint8* hRPTR1);
status_t nv_crtc_cursor_position(uint16 x ,uint16 y hRPTR1);
status_t nv_crtc_cursor_show( hRPTR);
status_t nv_crtc_cursor_hide( hRPTR);

/* CRTC2 functions */
status_t nv_crtc2_validate_timing(
	uint16 *hd_e,uint16 *hs_s,uint16 *hs_e,uint16 *ht,
	uint16 *vd_e,uint16 *vs_s,uint16 *vs_e,uint16 *vt  hRPTR1
);
status_t nv_crtc2_set_timing(display_mode target hRPTR1);
status_t nv_crtc2_depth(int mode hRPTR1);
status_t nv_crtc2_set_display_start(uint32 startadd,uint8 bpp hRPTR1); 
status_t nv_crtc2_set_display_pitch( hRPTR);

status_t nv_crtc2_dpms(bool, bool, bool hRPTR1);
status_t nv_crtc2_dpms_fetch(bool*, bool*, bool* hRPTR1);
status_t nv_crtc2_mem_priority(uint8 hRPTR1);

status_t nv_crtc2_cursor_init( hRPTR);
status_t nv_crtc2_cursor_define(uint8*,uint8* hRPTR1);
status_t nv_crtc2_cursor_position(uint16 x ,uint16 y hRPTR1);
status_t nv_crtc2_cursor_show( hRPTR);
status_t nv_crtc2_cursor_hide( hRPTR);

/* acceleration functions */
status_t check_acc_capability(uint32 feature hRPTR1);
status_t nv_acc_init( hRPTR);
void nv_acc_assert_fifo( hRPTR);
status_t nv_acc_setup_blit( hRPTR);
status_t nv_acc_blit(uint16,uint16,uint16, uint16,uint16,uint16  hRPTR1);
status_t nv_acc_setup_rectangle(uint32 color hRPTR1);
status_t nv_acc_rectangle(uint32 xs,uint32 xe,uint32 ys,uint32 yl hRPTR1);
status_t nv_acc_setup_rect_invert( hRPTR);
status_t nv_acc_rectangle_invert(uint32 xs,uint32 xe,uint32 ys,uint32 yl hRPTR1);
status_t nv_acc_transparent_blit(uint16,uint16,uint16, uint16,uint16,uint16, uint32 hRPTR1);
status_t nv_acc_video_blit(uint16 xs,uint16 ys,uint16 ws, uint16 hs,
	uint16 xd,uint16 yd,uint16 wd,uint16 hd hRPTR1);
status_t nv_acc_wait_idle( hRPTR);
/* DMA versions */
status_t nv_acc_wait_idle_dma( hRPTR);
status_t nv_acc_init_dma( hRPTR);
void nv_acc_assert_fifo_dma( hRPTR);
void SCREEN_TO_SCREEN_BLIT_DMA(engine_token *et, blit_params *list, uint32 count hRPTR1);
void SCREEN_TO_SCREEN_TRANSPARENT_BLIT_DMA(engine_token *et, uint32 transparent_colour, blit_params *list, uint32 count hRPTR1);
void SCREEN_TO_SCREEN_SCALED_FILTERED_BLIT_DMA(engine_token *et, scaled_blit_params *list, uint32 count hRPTR1);
void FILL_RECTANGLE_DMA(engine_token *et, uint32 color, fill_rect_params *list, uint32 count hRPTR1);
void INVERT_RECTANGLE_DMA(engine_token *et, fill_rect_params *list, uint32 count hRPTR1);
void FILL_SPAN_DMA(engine_token *et, uint32 color, uint16 *list, uint32 count hRPTR1);

/* backend scaler functions */
status_t check_overlay_capability(uint32 feature hRPTR1);
void nv_bes_move_overlay( hRPTR);
status_t nv_bes_to_crtc(bool crtc hRPTR1);
status_t nv_bes_init( hRPTR);
status_t nv_configure_bes
	(const overlay_buffer *ob, const overlay_window *ow,const overlay_view *ov, int offset hRPTR1);
status_t nv_release_bes( hRPTR);

/* I2C functions */
status_t i2c_sec_tv_adapter( hRPTR);

/* driver structures and enums */
enum{BPP8 = 0, BPP15 = 1, BPP16 = 2, BPP24 = 3, BPP32 = 4};
enum{DS_CRTC1DAC_CRTC2MAVEN, DS_CRTC1MAVEN_CRTC2DAC, DS_CRTC1CON1_CRTC2CON2, DS_CRTC1CON2_CRTC2CON1};
