/* Copyright 2008 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef _RISCOS_HDR_
#define _RISCOS_HDR_

// RiscOS specific h things
#include "swis.h"
#include <stdbool.h>
#include <stdlib.h>
// a few types
#define uint8  unsigned char
#define uint16 unsigned short
#define uint   unsigned int
#define uint32 unsigned int
#define uint64 unsigned long long

#define vuint8  volatile unsigned char
#define vuint16 volatile unsigned short
#define vuint32 volatile unsigned int
#define vuint64 volatile unsigned long long

#define int8   char
#define int16  short
#define int32  int
#define int64  long long

// not sure about length needed.. but need something
#define B_FILE_NAME_LENGTH 32

typedef int32  status_t;
typedef int32  ssize_t;

//#define LOG(n,x)
//#define LOG(n,x)    printf x
//#define LOG(n,x) if(n<4)printf x

enum{
	B_ERROR = -1,
	B_OK = 0,
	B_NO_ERROR = 0
};

// general purpose method of passing in si
#ifdef __riscos
#define hRPTR shared_info* si
#define hRPTR1 , shared_info* si
#define RPTR si
#define RPTR1 ,si
#define RPTRp si->
#define Float uint32
#else
#define hRPTR  void
#define hRPTR1
#define RPTR
#define RPTR1
#define RPTRp
#define Float float
#endif

/* Macros for convenient accesses to the NV chips */
#define NV_REG8(r_)    ((vuint8  *)si->MMIO)[(r_)]
#define NV_REG16(r_)   ((vuint16 *)si->MMIO)[(r_) >> 1]
#define NV_REG32(r_)   ((vuint32 *)si->MMIO)[(r_) >> 2]

/* read and write to PCI config space */
extern uint32 RdCfg(int add, uint32 PCIHandle);
extern uint32 WrCfg(int add, uint32 PCIHandle, uint32 value);
#define CFGR(A)    RdCfg(A,si->PCIHandle)
#define CFGW(A,B)  WrCfg(A,si->PCIHandle,B)

/* dual head access routines */
extern void CWriteATTR(int addr, uint32 value, uint32 value1);
extern void CWriteCRTC(int addr, uint32 value, uint32 value1);
extern uint32 CReadCRTC(int addr, uint32 value);
extern void CWriteATTR2(int addr, uint32 value, uint32 value1);
extern void CWriteCRTC2(int addr, uint32 value, uint32 value1);
extern uint32 CReadCRTC2(int addr, uint32 value);
/* read and write from CRTC indexed registers */
#define CRTCW(A,B) CWriteCRTC(NVCRTCX_##A,B,(uint32)si)
#define CRTCR(A)   CReadCRTC(NVCRTCX_##A,(uint32)si)

/* read and write from second CRTC indexed registers */
#define CRTC2W(A,B) CWriteCRTC2(NVCRTCX_##A,B,(uint32)si)
#define CRTC2R(A)   CReadCRTC2(NVCRTCX_##A,(uint32)si)


static inline uint16 MemRead16(uint8 *c)
{
  return ((uint16)c[0]) | ((uint16)(c[1]<<8));
}

static inline uint32 MemRead32(uint8 *c)
{
  return ((uint32)c[0]) | ((uint32)(c[1]<<8)) | ((uint32)(c[2]<<16)) | ((uint32)(c[3]<<24));
}
#define ROMREAD16(n) MemRead16(rom+n)
#define ROMREAD32(n) MemRead32(rom+n)

extern void Delay(int ms);
extern void MicroDelay(int us);
#define delay(n) MicroDelay((n)*10)
#define snooze delay

#define ROMSHADOW  NVCFG_ROMBASE

#define DEVID 0

#ifdef CDEBUG
#define XDebugIt_WriteC  0x6ba82
extern void PReg(unsigned int );
extern void PStr(char* );
extern void PChar(char);
#define PrReg(a) PReg(a)
#define PrStr(a) PStr(a)
#define PrChar(a) PChar(a)
#else
#define PrReg(a)
#define PrStr(a)
#define PrChar(a)
#endif

#include "DriverInterface.h"

#include "nv_globals.h"

#endif

