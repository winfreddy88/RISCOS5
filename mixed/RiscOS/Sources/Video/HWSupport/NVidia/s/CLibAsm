; Copyright 2008 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
        AREA    |Asm$$Code|, CODE, READONLY, PIC

        ; Divide a uint64_t by 10, returning both quotient and remainder
        ; In:  (a1,a2)
        ; Out: quotient (a1,a2), remainder (a3,a4)
        EXPORT  _ll_udiv10
_ll_udiv10
        STR     a1, [sp, #-4]!
        ; Multiply by 0.6 (= &0.999 recurring)
        ; and subtract multiplication by 0.5 (LSR #1).
        ; Ignore fractional parts for now.
        LDR     ip, =&99999999
        UMULL   a4, a3, a1, ip
        UMULL   a4, ip, a2, ip
        MOVS    a2, a2, LSR #1
        MOVS    a1, a1, RRX
        ADCS    a1, a1, #0
        ADC     a2, a2, #0
        SUBS    a1, a4, a1
        SBC     a2, ip, a2
        ADDS    a1, a1, ip
        ADC     a2, a2, #0
        ADDS    a1, a1, a3
        ADC     a2, a2, #0
        ; It can be shown mathematically that this is an underestimate
        ; of the true quotient by up to 2.5. Compensate by detecting
        ; over-large remainders.
40      MOV     ip, #10
        MUL     a3, a1, ip ; quotient * 10 (MSW is unimportant)
        LDR     a4, [sp], #4
        SUB     a3, a4, a3 ; remainder between 0 and 25
        ; Bring the remainder back within range.
        ; For a number x <= 68, x / 10 == (x * 13) >> 7
        MOV     a4, #13
        MUL     a4, a3, a4
        MOV     a4, a4, LSR #7
        ADDS    a1, a1, a4
        ADC     a2, a2, #0
        MUL     a4, ip, a4
        SUB     a3, a3, a4
        MOV     a4, #0
        MOV     pc, lr

        ; Compare two uint64_t numbers, or test two int64_t numbers for equality
        ; In:  (a1,a2),(a3,a4)
        ; Out: Z set if equal, Z clear if different
        ;      C set if unsigned higher or same, C clear if unsigned lower
        ;      all registers preserved
        EXPORT  _ll_cmpu
_ll_cmpu
        CMP     a2, a4
        CMPEQ   a1, a3
        MOV     pc, lr

        END
