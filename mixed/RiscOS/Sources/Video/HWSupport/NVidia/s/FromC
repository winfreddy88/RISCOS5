; Copyright 2008 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

nv10CalcArbitration
        MOV      ip,sp
        STMDB    sp!,{v1-v6,fp,ip,lr,pc}
        SUB      fp,ip,#4
        MOV      v1,a1
        SUB      sp,sp,#&7c
        MOV      a3,#1
        STR      a3,[a1,#&10]
        LDR      a1,[a2,#0]
        STR      a1,[sp,#&28]
        LDMIB    a2,{v3,v5}
        LDRB     a1,[a2,#&14]
        STR      a1,[sp,#&44]
        LDR      a1,[a2,#&10]
        MOVS     a4,a1
        ADDMI    a1,a1,#&3f
        MOV      a1,a1,ASR #6
        STR      a1,[sp,#&40]
        LDRB     a1,[a2,#&16]
        STR      a1,[sp,#&3c]
        LDRB     a1,[a2,#&18]
        STR      a1,[sp,#&38]
        LDRB     a1,[a2,#&1a]
        MOV      v4,#&200
        MOV      v6,#4
        STR      a1,[sp,#&24]
        LDR      a1,[a2,#&c]!
        CMP      a1,#0
        BNE      |L00008c.J6.nv10CalcArbitration|
        CMP      a4,#&40
        MOVEQ    a1,#&16
        BEQ      |L0000a0.J11.nv10CalcArbitration|
        B        |L000094.J13.nv10CalcArbitration|
|L00008c.J6.nv10CalcArbitration|
        CMP      a4,#&40
        BNE      |L00009c.J12.nv10CalcArbitration|
|L000094.J13.nv10CalcArbitration|
        MOV      a1,#&14
        B        |L0000a0.J11.nv10CalcArbitration|
|L00009c.J12.nv10CalcArbitration|
        MOV      a1,#&13
|L0000a0.J11.nv10CalcArbitration|
        LDR      a2,[sp,#&3c]
        CMP      a2,#0
        CMPEQ    a4,#&80
        LDR      a2,[sp,#&38]
        BNE      |L0000c8.J15.nv10CalcArbitration|
        CMP      a2,#&20
        MOVNE    a2,#&2a
        MOVEQ    a2,#&1f
        MOV      v2,#&11
        B        |L0000d8.J21.nv10CalcArbitration|
|L0000c8.J15.nv10CalcArbitration|
        CMP      a2,#&20
        MOVNE    a2,#4
        MOVEQ    a2,#8
        MOV      v2,#&12
|L0000d8.J21.nv10CalcArbitration|
        MOV      a4,#9
        STR      a4,[sp,#&34]
        LDR      a4,[sp,#&24]
        CMP      a4,#0
        ADDNE    a1,a1,#4
        ADD      a2,a1,a2
        MOV      ip,#&240
        ADD      ip,ip,#&f4000
        MUL      a2,ip,a2
        STR      a2,[sp,#&78]
        MOV      a2,#&240
        ADD      a2,a2,#&f4000
        MUL      a2,a1,a2
        MOV      a1,v3
        STR      a1,[sp,#&48]
        BL       __rt_sdiv
        STR      a1,[sp,#&74]
        LDR      a1,[sp,#&34]
        MOV      a2,#&240
        ADD      a2,a2,#&f4000
        MUL      a2,a1,a2
        MOV      a1,v5
        BL       __rt_sdiv
        MOV      a2,#&240
        ADD      a2,a2,#&f4000
        MUL      a2,v6,a2
        STR      a1,[sp,#&70]
        LDR      a1,[sp,#&28]
        MOV      v6,a1
        BL       __rt_sdiv
        STR      a1,[sp,#&6c]
        LDR      a1,[sp,#&48]
        LDR      a2,[sp,#&78]
        BL       __rt_sdiv
        STR      a1,[sp,#&4c]
        LDR      a1,[sp,#&74]
        LDR      a2,[sp,#&70]
        ADD      a1,a1,a2
        LDR      a2,[sp,#&6c]
        ADD      a1,a1,a2
        STR      a1,[sp,#&68]
        MOV      a1,v5
        BL       __rt_divtest
        MOV      a1,v6
        BL       __rt_divtest
        LDR      a1,[sp,#&44]
        MOV      a1,a1,LSL #1
        MOV      ip,#&240
        ADD      ip,ip,#&f4000
        MUL      a1,ip,a1
        STR      a1,[sp,#&64]
        LDR      a1,[sp,#&38]
        MUL      a2,a1,v6
        STR      a2,[sp,#&60]
        ADD      a1,a2,#7
        STR      a1,[sp,#&5c]
        MOV      a1,v5,LSL #3
        ADD      a2,a1,a1,LSL #4
        ADD      a2,a2,a2,LSL #1
        ADD      ip,a1,a1,LSL #4
        ADD      a1,ip,a1,LSL #5
        STR      a1,[sp,#&54]
        STR      a2,[sp,#&58]
        LDR      a1,[sp,#&40]
        MOV      a1,a1,LSL #3
        STR      a1,[sp,#&50]
|L0001e0.J27.nv10CalcArbitration|
        MOV      a1,#1
        MOV      v5,#1
        STR      a1,[v1,#&10]
        LDR      a1,[sp,#&4c]
        MOV      a2,#&240
        ADD      a2,a2,#&f4000
        MUL      a2,v2,a2
        STR      a1,[sp,#&20]
        MOV      a1,v3
        BL       __rt_sdiv
        STR      a1,[sp,#0]
        LDR      a1,[sp,#&70]
        STR      a1,[sp,#&1c]
        LDR      a1,[sp,#&6c]
        STR      a1,[sp,#&18]
        LDR      a1,[sp,#&68]
        STR      a1,[sp,#4]
        LDR      a1,[sp,#&4c]
        STR      a1,[sp,#&10]
        LDR      a1,[sp,#&3c]
        CMP      a1,#0
        LDR      a1,[sp,#&60]
        BEQ      |L0002d8.J30.nv10CalcArbitration|
        CMP      a1,#0
        LDRLT    a1,[sp,#&5c]
        MOV      a1,a1,ASR #3
        STR      a1,[sp,#&14]
        MOV      a1,#2
        STR      a1,[sp,#&30]
        LDR      a1,[sp,#&24]
        CMP      a1,#0
        MOVNE    a1,#3
        STRNE    a1,[sp,#&30]
        MOV      a1,v3
        LDR      a2,[sp,#&64]
        BL       __rt_sdiv
        LDR      a2,[sp,#&10]
        ADD      a1,a1,a2
        STR      a1,[sp,#&c]
        LDR      a1,[sp,#&30]
        LDR      a2,[sp,#&44]
        MUL      a1,a2,a1
        MOV      a2,#&240
        ADD      a2,a2,#&f4000
        MUL      a2,a1,a2
        MOV      a1,v3
        BL       __rt_sdiv
        LDR      a2,[sp,#&c]
        ADD      a1,a2,a1
        LDR      a2,[sp,#&20]
        ADD      a1,a1,a2
        LDR      a2,[sp,#&1c]
        ADD      a1,a1,a2
        LDR      a2,[sp,#&18]
        ADD      a2,a1,a2
        LDR      a1,[sp,#&14]
        MUL      a2,a1,a2
        MOV      a1,#&240
        ADD      a1,a1,#&f4000
        BL       __rt_sdiv
        ADD      v6,a1,#1
        B        |L000390.J36.nv10CalcArbitration|
|L0002d8.J30.nv10CalcArbitration|
        CMP      a1,#0
        LDRLT    a1,[sp,#&5c]
        MOV      a1,a1,ASR #3
        STR      a1,[sp,#&14]
        MOV      a1,#2
        LDR      a2,[sp,#&24]
        CMP      a2,#0
        MOVNE    a1,#3
        LDR      a2,[sp,#&44]
        MUL      a1,a2,a1
        MOV      a2,#&240
        ADD      a2,a2,#&f4000
        MUL      a2,a1,a2
        MOV      a1,v3
        BL       __rt_sdiv
        LDR      a2,[sp,#&20]
        ADD      a1,a1,a2
        LDR      a2,[sp,#&1c]
        ADD      a1,a1,a2
        LDR      a2,[sp,#&18]
        ADD      a2,a1,a2
        LDR      a1,[sp,#&14]
        MUL      a2,a1,a2
        MOV      a1,#&240
        ADD      a1,a1,#&f4000
        BL       __rt_sdiv
        ADD      v6,a1,#1
        LDR      a1,[sp,#&40]
        CMP      a1,#1
        BNE      |L000390.J36.nv10CalcArbitration|
        LDR      a1,[sp,#&14]
        ADD      ip,a1,a1,LSL #3
        ADD      a1,ip,a1,LSL #4
        MOV      a1,a1,LSL #2
        LDR      a2,[sp,#&58]
        CMP      a1,a2,LSL #1
        MOVGE    v6,#&1000
        SUBGE    v6,v6,#1
        BGE      |L000390.J36.nv10CalcArbitration|
        LDR      a2,[sp,#&54]
        CMP      a1,a2,LSL #1
        BLT      |L000390.J36.nv10CalcArbitration|
        MOV      v6,#&400
        MOV      v4,#&200
        MOV      a1,v3
        BL       __rt_divtest
|L000390.J36.nv10CalcArbitration|
        MOVS     a1,v6
        ADDMI    a1,a1,#7
        MOV      a1,a1,ASR #3
        MOV      a1,a1,LSL #3
        CMP      a1,v6
        ADDLT    v6,v6,#8
        ADD      a1,v6,v4
        SUB      a1,a1,#&400
        STR      a1,[sp,#&2c]
        LDR      a1,[sp,#4]
        LDR      a2,[sp,#0]
        ADD      a1,a1,a2
        STR      a1,[sp,#8]
        LDR      a1,[sp,#&50]
        BL       __rt_divtest
        LDR      a1,[sp,#&28]
        LDR      a2,[sp,#8]
        MUL      a2,a1,a2
        MOV      a1,#&240
        ADD      a1,a1,#&f4000
        BL       __rt_sdiv
        LDR      a2,[sp,#&38]
        MULS     a1,a2,a1
        ADDMI    a1,a1,#7
        MOV      a1,a1,ASR #3
        LDR      a2,[sp,#&2c]
        CMP      a1,a2
        BGE      |L000434.J54.nv10CalcArbitration|
        LDR      a1,[sp,#&2c]
        CMP      a1,#0
        BLE      |L000434.J54.nv10CalcArbitration|
        MOV      a1,#0
        MOV      v5,#0
        CMP      v2,#0
        STR      a1,[v1,#&10]
        BNE      |L00045c.J66.nv10CalcArbitration|
        CMP      v4,#&20
        ADDGT    v4,v4,v4,LSR #31
        MOVGT    v4,v4,ASR #1
        BGT      |L000460.J63.nv10CalcArbitration|
        B        |L000454.J67.nv10CalcArbitration|
|L000434.J54.nv10CalcArbitration|
        SUBS     ip,v6,#&3fc
        CMPGE    ip,#3
        BLE      |L000460.J63.nv10CalcArbitration|
        MOV      a1,#0
        MOV      v5,#0
        CMP      v2,#0
        STR      a1,[v1,#&10]
        BNE      |L00045c.J66.nv10CalcArbitration|
|L000454.J67.nv10CalcArbitration|
        MOV      v5,#1
        B        |L000460.J63.nv10CalcArbitration|
|L00045c.J66.nv10CalcArbitration|
        SUB      v2,v2,#1
|L000460.J63.nv10CalcArbitration|
        MOV      a2,#&400
        SUB      a1,a2,v4
        ADD      a1,a1,#8
        CMP      a1,v6
        MOVGT    v6,a1
        MOV      a1,#&200
        CMP      v5,#1
        STR      a1,[v1,#&c]
        STMIB    v1,{a2,v4}
        STR      v6,[v1,#0]
        BNE      |L0001e0.J27.nv10CalcArbitration|
        LDMDB    fp,{v1-v6,fp,sp,pc}

__rt_divtest
        TEQ     a1, #0
        MOVNE   pc, lr
        EXPORT  |dividebyzero|
dividebyzero
        MOV     a1, #&80000000
        SUB     a1, a1, #1
        MOV     pc, lr

        EXPORT  |__rt_sdiv|
__rt_sdiv
        ANDS    a3, a1, #&80000000
        RSBMI   a1, a1, #0
        EORS    a4, a3, a2, ASR #32
        RSBCS   a2, a2, #0
        RSBS    ip, a1, a2, LSR #3
        BCC     s_sh2
        RSBS    ip, a1, a2, LSR #8
        BCC     s_sh7
        MOV     a1, a1, LSL #8
        ORR     a3, a3, #&FF000000
        RSBS    ip, a1, a2, LSR #4
        BCC     s_sh3
        RSBS    ip, a1, a2, LSR #8
        BCC     s_sh7
        MOV     a1, a1, LSL #8
        ORR     a3, a3, #&00FF0000
        RSBS    ip, a1, a2, LSR #8
        MOVCS   a1, a1, LSL #8
        ORRCS   a3, a3, #&0000FF00
        RSBS    ip, a1, a2, LSR #4
        BCC     s_sh3
        RSBS    ip, a1, #0
        BCS     dividebyzero
s_loop  MOVCS   a1, a1, LSR #8
s_sh7   RSBS    ip, a1, a2, LSR #7
        SUBCS   a2, a2, a1, LSL #7
        ADC     a3, a3, a3
s_sh6   RSBS    ip, a1, a2, LSR #6
        SUBCS   a2, a2, a1, LSL #6
        ADC     a3, a3, a3
s_sh5   RSBS    ip, a1, a2, LSR #5
        SUBCS   a2, a2, a1, LSL #5
        ADC     a3, a3, a3
s_sh4   RSBS    ip, a1, a2, LSR #4
        SUBCS   a2, a2, a1, LSL #4
        ADC     a3, a3, a3
s_sh3   RSBS    ip, a1, a2, LSR #3
        SUBCS   a2, a2, a1, LSL #3
        ADC     a3, a3, a3
s_sh2   RSBS    ip, a1, a2, LSR #2
        SUBCS   a2, a2, a1, LSL #2
        ADC     a3, a3, a3
s_sh1   RSBS    ip, a1, a2, LSR #1
        SUBCS   a2, a2, a1, LSL #1
        ADC     a3, a3, a3
s_sh0   RSBS    ip, a1, a2
        SUBCS   a2, a2, a1
        ADCS    a3, a3, a3
        BCS     s_loop
        EORS    a1, a3, a4, ASR #31
        ADD     a1, a1, a4, LSR #31
        RSBCS   a2, a2, #0
        MOV     pc, lr

        EXPORT  |__rt_udiv|
|__rt_udiv|
; Unsigned divide of a2 by a1: returns quotient in a1, remainder in a2
; Destroys a3 and ip

        MOV     a3, #0
        RSBS    ip, a1, a2, LSR #3
        BCC     u_sh2
        RSBS    ip, a1, a2, LSR #8
        BCC     u_sh7
        MOV     a1, a1, LSL #8
        ORR     a3, a3, #&FF000000
        RSBS    ip, a1, a2, LSR #4
        BCC     u_sh3
        RSBS    ip, a1, a2, LSR #8
        BCC     u_sh7
        MOV     a1, a1, LSL #8
        ORR     a3, a3, #&00FF0000
        RSBS    ip, a1, a2, LSR #8
        MOVCS   a1, a1, LSL #8
        ORRCS   a3, a3, #&0000FF00
        RSBS    ip, a1, a2, LSR #4
        BCC     u_sh3
        RSBS    ip, a1, #0
        BCS     dividebyzero
u_loop  MOVCS   a1, a1, LSR #8
u_sh7   RSBS    ip, a1, a2, LSR #7
        SUBCS   a2, a2, a1, LSL #7
        ADC     a3, a3, a3
u_sh6   RSBS    ip, a1, a2, LSR #6
        SUBCS   a2, a2, a1, LSL #6
        ADC     a3, a3, a3
u_sh5   RSBS    ip, a1, a2, LSR #5
        SUBCS   a2, a2, a1, LSL #5
        ADC     a3, a3, a3
u_sh4   RSBS    ip, a1, a2, LSR #4
        SUBCS   a2, a2, a1, LSL #4
        ADC     a3, a3, a3
u_sh3   RSBS    ip, a1, a2, LSR #3
        SUBCS   a2, a2, a1, LSL #3
        ADC     a3, a3, a3
u_sh2   RSBS    ip, a1, a2, LSR #2
        SUBCS   a2, a2, a1, LSL #2
        ADC     a3, a3, a3
u_sh1   RSBS    ip, a1, a2, LSR #1
        SUBCS   a2, a2, a1, LSL #1
        ADC     a3, a3, a3
u_sh0   RSBS    ip, a1, a2
        SUBCS   a2, a2, a1
        ADCS    a3, a3, a3
        BCS     u_loop
        MOV     a1, a3
        MOV     pc, lr

; Fast unsigned divide by 10: dividend in a1
; Returns quotient in a1, remainder in a2

|__rt_udiv10|
        SUB     a2, a1, #10
        SUB     a1, a1, a1, LSR #2
        ADD     a1, a1, a1, LSR #4
        ADD     a1, a1, a1, LSR #8
        ADD     a1, a1, a1, LSR #16
        MOV     a1, a1, LSR #3
        ADD     a3, a1, a1, LSL #2
        SUBS    a2, a2, a3, LSL #1
        ADDPL   a1, a1, #1
        ADDMI   a2, a2, #10
        MOV     pc, lr

        END
