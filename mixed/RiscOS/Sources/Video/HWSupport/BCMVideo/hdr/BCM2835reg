;
; Copyright (c) 2012, RISC OS Open Ltd
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met: 
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
;
IO_Base_BCM2835 *       &20000000
IO_Base_BCM2836 *       &3F000000
IO_Size         *       &01000000
SCALER          *       &00400000
SMICS           *       &00600000
ARM_Timer_Base  *       &0000b400
iDev_GPU_SMI        *     48
iDev_ARM_Timer      *     64

                                      
; mem barrier operation; ensures all explicit mem operations completed before
; instruction exits.
; (value 4 is all instructions, value 5 is just mem instructions)
; zeroes $r
        MACRO
$label  DataSyncBarrier $r, $cond
$label  MOV$cond $r, #0
      [ {UAL}
        MCR$cond p15, #0, $r, c7, c10, #4
      |
        MCR$cond p15, 0, $r, c7, c10,4
      ]
        MEND
        MACRO
$label  DoMemBarrier $r, $cond
$label  MOV$cond $r, #0
      [ {UAL}
        MCR$cond p15, #0, $r, c7, c10, #5
      |
        MCR$cond p15, 0, $r, c7, c10,5
      ]
        MEND

; ARM timer registers
                     ^ 0
ARMTimer_Load        # 4
ARMTimer_Value       # 4
ARMTimer_Control     # 4
ARMTimer_IRQClear    # 4
ARMTimer_IRQRAW      # 4
ARMTimer_IRQMasked   # 4
ARMTimer_Reload      # 4
ARMTimer_Predivider  # 4
ARMTimer_Counter     # 4

ARMTimer_Control_32bit         * 1<<1
ARMTimer_Control_PrescaleMask  * 3<<2
ARMTimer_Control_IRQEnable     * 1<<5
ARMTimer_Control_Enable        * 1<<7
ARMTimer_Control_CounterEnable * 1<<9
ARMTimer_Control_PredividerMask * 255<<16
ARMTimer_Control_PredividerShift * 16

; Scaler registers
SCALER_DISPCTRL0   * &40
SCALER_DISPBKGND0  * &44
SCALER_DISPCTRL1   * &50
SCALER_DISPBKGND1  * &54
SCALER_DISPCTRL2   * &60
SCALER_DISPBKGND2  * &64
SCALER_DISPGAMADR  * &78
SCALER_DISPGAMDAT  * &e0

        END
