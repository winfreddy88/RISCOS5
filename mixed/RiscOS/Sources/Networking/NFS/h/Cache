/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*	H.CACHE

Purpose : RISC OS NFS rpc wrappers to support cacheing of information.

History :
Date	Who    Comments
-----------------------------------------------------------------------------
07/09/92 ??    Initial version
13/1/95  CP    Added prototype for cancel_all_caches_by_fhandle
****************************************************************************/

#ifndef __NFSCACHE_H
#define __NFSCACHE_H
#ifndef __NFSTYPES_H
#include "NFSTypes.h"
#endif

extern int get_cache_size(void);
extern void free_cache(void);
extern void show_histogram(void);
extern _kernel_oserror *set_cache_size( int size);

extern void cancel_all_caches_by_mount_point( MountPoint * );
extern void cancel_all_caches_by_fhandle( RO_nfs_fh3 *fhandle );

extern _kernel_oserror *nfs_getattr( fattr3 **, MountPoint *, RO_nfs_fh3 * );
extern _kernel_oserror *nfs_setattr( fattr3 **, MountPoint *, RO_nfs_fh3 *, sattr3 * );
extern _kernel_oserror *nfs_lookup( RO_nfs_fh3 *, fattr3 **, MountPoint *, RO_nfs_fh3 *, char **, bool_t );

extern void nfs_internal_dirplus_update
(
        MountPoint *mount_point,
        RO_nfs_fh3 *dir,
        RO_nfs_fh3 *file,
        char *filename,
	fattr3 *nattr
);


/*
        Read up to NFS_MAXDATA (=8K) from a file
 */
extern _kernel_oserror *nfs_read(
        int *readres_len,
        char *readres_data,
        MountPoint *mount_point,
        RO_nfs_fh3 *fhandle,
        unsigned long offset,
        int count);


/*
        Read many bytes (no limit on number) from a file. This sends multiple requests
        to allow interleaving of packets for better throughput.
*/
extern _kernel_oserror *nfs_readmany(
        int *readres_len,
        char *readres_data,
        MountPoint *mount_point,
        RO_nfs_fh3 *fhandle,
        unsigned long offset,
        int count);

/*
        Write up to NFS_MAXDATA (=8K) to a file
 */
extern _kernel_oserror *nfs_write(
        fattr3 **nattr,
        MountPoint *mount_point,
        RO_nfs_fh3 *fhandle,
        unsigned long offset,
        char *data,
        int count);

/*
        Write many bytes (no limit on number) to a file. This sends multiple requests
        to allow interleaving of packets for better throughput.
*/
extern _kernel_oserror *nfs_writemany(
        fattr3 **nattr,
        MountPoint *mount_point,
        RO_nfs_fh3 *fhandle,
        unsigned long offset,
        char *data,
        int count);

extern _kernel_oserror *nfs_write_with_appendum( fattr3 **, MountPoint *, RO_nfs_fh3 *, unsigned long, bytes_with_appendum *, unsigned );
extern _kernel_oserror *nfs_create( RO_nfs_fh3 *, fattr3 **, MountPoint *, RO_nfs_fh3 *, char *, sattr3 * );
extern _kernel_oserror *nfs_remove( MountPoint *, RO_nfs_fh3 *, char * );
extern _kernel_oserror *nfs_rename( MountPoint *, RO_nfs_fh3 *, char *, RO_nfs_fh3 *, char * );
extern _kernel_oserror *nfs_mkdir( RO_nfs_fh3 *, fattr3 **, MountPoint *, RO_nfs_fh3 *, char *, sattr3 * );
extern _kernel_oserror *nfs_rmdir( MountPoint *, RO_nfs_fh3 *, char * );
extern _kernel_oserror *nfs_readdir( MountPoint *, RO_nfs_fh3 *, cookie3, int, dirlist ** );

#endif
