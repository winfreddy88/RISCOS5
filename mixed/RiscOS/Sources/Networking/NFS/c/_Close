/* Copyright 1996 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef __NFSNFS_H
#include "nfsheaders.h"
#endif

_kernel_oserror *fsentry_close( FSEntry_Close_Parameter *parm )
{
        _kernel_oserror *err = NULL;
        OpenFile *of = (OpenFile *)parm->handle;
        unused_client *pcnfsd_client;
        char machname[ MAX_MACHINE_NAME+1 ];
        pr_start_args ps_args;
        pr_start_results *ps_res;
        int spooling_access;

        hourglass_on();

#ifdef SHOWCALLS
        printf(
                "_Close( %s, %#010x, %#010x )\n",
                of->nfs_fd.desc.name,
                (int)parm->info.load_exec.load_address,
                (int)parm->info.load_exec.execute_address );
#endif

        /*
                Stamp the file if necessary
        */
        if ( !of->read_only
          && (parm->info.load_exec.execute_address || parm->info.load_exec.load_address) )
        {
                err = change_info_given_file(
                        &of->nfs_fd,
                        (unsigned long *)&parm->info.load_exec.load_address,
                        (unsigned long *)&parm->info.load_exec.execute_address,
                        NULL );
        }

        if ( !err && of->spool_details )
        {
                if ( gethostname( machname, MAX_MACHINE_NAME ) == -1 )
                {
                        err = mb_machname_too_big;
                }

                /*
                        Change access to R/r for the spooler
                */
                if ( !err )
                {
                        spooling_access = FileAccess_OwnerRead | FileAccess_PublicRead;
                        err = change_info_given_file(
                                &of->nfs_fd,
                                NULL,
                                NULL,
                                &spooling_access );
                }

                if ( !err )
                        err = get_pcnfsd_client_for_host( &pcnfsd_client, of->nfs_fd.mp->host, PCNFSDVERS );

                ps_args.system = machname;
                ps_args.pn = of->spool_details->printername;
                ps_args.user = of->spool_details->username;
                ps_args.file = of->nfs_fd.desc.name;
                ps_args.opts = of->spool_details->options;

                if ( !err )
                {
                        ps_res = pcnfsd_pr_start_1( &ps_args, pcnfsd_client->client );
                        err = rpcpcnfsd_ps_to_riscos_err( ps_res, pcnfsd_client->client, of->nfs_fd.mp->mount_point_name );
                        release_client( pcnfsd_client );
                }
        }

        remove_link( &of->link );

        if ( of->spool_details )
        {
                /*
                        Dismount unused spool mount
                */
                if ( of->nfs_fd.mp->open_files.forwards->forwards == NULL )
                {
                        if ( !err )
                        {
                                err = nfs_dismount( of->nfs_fd.mp );
                        }
                        else
                        {
                                (void)nfs_dismount( of->nfs_fd.mp );
                        }
                }

                free( of->spool_details->printername );
                free( of->spool_details->username );
                free( of->spool_details->options );
                free( of->spool_details );
        }

        free( of->nfs_fd.desc.name );
        free( of );

        hourglass_off();

        return err;
}
