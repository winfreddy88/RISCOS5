/* Copyright 2002 Tematic Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**************************************************************/
/* File:    mbuf.c                                            */
/*                                                            */
/* Purpose: Interface to MbufManager.                         */
/**************************************************************/

#include <swis.h>

#include <sys/param.h>
#include <sys/mbuf.h>
#include <net/ethernet.h>

#include "mbuf.h"

/* Static variables */

struct mbctl MBCTL =
{
    0,                    /* opaque */
    sizeof(struct mbctl), /* mbcsize */
    MBUF_MANAGER_VERSION, /* mbcvers */
    0ul,                  /* flags */
    MINCONTIG,            /* advminubs */
    ETHERMTU,             /* advmaxubs */
    MINCONTIG,            /* mincontig */
    0ul,                  /* spare1 */
    /* Rest of the structure gets initialised to */
    /* zeroes due to the trailing comma.         */
};

/**************************************************************/
/* mbuf_present()                                             */
/*                                                            */
/* This returns whether or not the mbuf manager is present.   */
/*                                                            */
/* Returns: True if the mbuf manager is present.              */
/**************************************************************/

bool mbuf_present(void)
{
    /* The control SWI with reason code 0 should *always* */
    /* succeed if the mbuf manager is loaded.             */

    return (_swix(Mbuf_Control, _IN(0), 0) == NULL);
}

/**************************************************************/
/* mbuf_open_session()                                        */
/*                                                            */
/* This is called to establish a session with the mbuf        */
/* manager.                                                   */
/*                                                            */
/* Returns: Error pointer.                                    */
/**************************************************************/

_kernel_oserror * mbuf_open_session(void)
{
    return _swix(Mbuf_OpenSession, _IN(0), &MBCTL);
}

/**************************************************************/
/* mbuf_close_session()                                       */
/*                                                            */
/* This is called to close a session with the mbuf manager.   */
/*                                                            */
/* Returns: Error pointer.                                    */
/**************************************************************/

_kernel_oserror * mbuf_close_session(void)
{
    return _swix(Mbuf_CloseSession, _IN(0), &MBCTL);
}
