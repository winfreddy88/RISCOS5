/* Copyright 2002 Tematic Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#ifndef EtherK_em_device_h
#define EtherK_em_device_h

/*
 * The device structure is the main device driver control block, one
 * per unit. It contains all the information needed to access the
 * ethernet card hardware.
 */

struct device
{
    void          * module_wsp;             /* Must be first word of structure - used by em_irq_trampoline */
    device_t        next;                   /* Pointer to next structure in list */
                    
    struct adapter  adapter;                /* Device driver control block for Intel driver code */
    Dib             dib;                    /* DCI4 Device Information Block */
    struct stats    stats;                  /* DCI4 Statistics structure */

    uint32_t        function_handle;        /* PCI function handle */                    
    uint32_t        pci_id;                 /* PCI vendor and device ID as returned from PCI_ReadID in R0 */
    uint32_t        pci_sub_id;             /* PCI subsystem vendor and ID as returned from PCI_ReadID in R1 */
    uint32_t        device_vector;          /* Device Vector number for OS_ClaimDeviceVector */                    

    FilterSingleRef ieeefilter;             /* IEEE frame class filtering information */
    FilterSingleRef e2monitor;              /* Ethernet 2.0 Monitor frame level filtering information */
    FilterSingleRef e2sink;                 /* Ethernet 2.0 Sink frame level filtering information */
    FilterChainRef  e2specific;             /* Ethernet 2.0 Specific frame level filtering information */

    AddressFilter   address_filter;         /* Pointer to address filtering function for current hardware address level */

    MessageLog      log;                    /* Message log */

    uint32_t        nvram_addr;             /* Address of NVRAM for device */
    uint32_t        nvram_size;             /* Size of NVRAM for device */
    ConfigLink      link_setting;           /* Speed setting of '*Configure EKLink' */
    uint8_t         link_mdix;              /* MDI setting of '*Configure EKLink' */
    uint8_t         advertise;              /* Setting of '*Configure EKAdvertise' */
    em_fc_type      flow_control;           /* Setting of '*Configure EKFlowControl' */

    bool            initialised;            /* Set if device correctly initialised */
    bool            no_eeprom;              /* Set if device has no EEPROM */
    bool            dupclaimexpected;       /* Set if duplicate filter claims allowed */
    bool            localtimerset;          /* Set if em_local_timer is to be called */
    bool            dev_vector_claimed;     /* Set if Device Vector has been claimed */
    bool            irq_handler_entered;    /* Set if processing an interrupt */
    bool            tx_handler_entered;     /* Set when in transmit routine */
    bool            ignore_irqs;            /* Set if interrupts are to be ignored */
};

/* Macros faking FreeBSD functions using the device structure */

#define pci_get_vendor(dev) ((dev->pci_id) & 0xffff)
#define pci_get_device(dev) ((dev->pci_id) >> 16)
#define pci_get_subvendor(dev) ((dev->pci_sub_id) & 0xffff)
#define pci_get_subdevice(dev) ((dev->pci_sub_id) >> 16)

#define device_get_softc(dev) (&dev->adapter)
#define device_get_unit(dev) (dev->dib.dib_unit)

#endif
