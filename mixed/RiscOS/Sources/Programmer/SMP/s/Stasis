; 
; Copyright (c) 2017, RISC OS Open Ltd
; All rights reserved.
; 
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met: 
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
; 
        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:Proc
        GET     Hdr.Defs

        AREA    Stasis, CODE, READONLY, PIC

        EXPORT  StasisStart
        EXPORT  StasisEnd
        EXPORT  StasisFunc

StasisStart

; Cores will enter here when we want to put them into a safe sleep state.
; While it's in this state, the only memory the core is allowed to touch is
; its core workspace struct, and the memory bounded by StasisStart -> StasisEnd
StasisFunc ROUT
        SEIF    ,ip,a3                  ; IRQs+FIQs off, ready for sleep
        GetCoreWS a2
        MOV     a1, #CWS_State_Stasis
        DMB                             ; Make sure all previous memory accesses are complete before we signal we're in stasis
        STR     a1, [a2, #CWS_State]
        DSB
        SEV                             ; Signal that we're in stasis
        ; Now wait for the wakeup call
10
        WFE
        DSB
        LDR     a1, [a2, #CWS_State]
        CMP     a1, #CWS_State_Stasis
        BEQ     %BT10
        ; Memory map might have changed significantly, ISB before we go any further
        ISB
        ; Assume the wake reason was a request to change to Running state
        MOV     a1, #CWS_State_Running
        STR     a1, [a2, #CWS_State]
        DSB
        SEV
        PLP     a3                      ; Restore IRQs+FIQs
        MOV     pc, lr

StasisEnd

        END
