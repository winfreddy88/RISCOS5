/*
 * Copyright (c) 2017, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include <stdlib.h>

#include "SyncLib/synclib.h"

#include "mempool.h"

typedef struct freeitem_s
{
	struct freeitem_s *next;
} freeitem_t;

struct mempool_s
{
	spinlock_t lock;
	freeitem_t *freelist;
};

mempool_t *mempool_new(int itemsize, int itemcount)
{
	if (itemsize < sizeof(freeitem_t))
	{
		itemsize = sizeof(freeitem_t);
	}
	itemsize = (itemsize+3)&~3;
	mempool_t *pool = (mempool_t *) malloc(itemsize*itemcount + sizeof(mempool_t));
	pool->lock = (spinlock_t) SPIN_INITIALISER;
	/* Construct the free list */
	freeitem_t *freelist = NULL;
	char *pos = (char *) (pool+1);
	while (itemcount--)
	{
		freeitem_t *freeitem = (freeitem_t *) pos;
		freeitem->next = freelist;
		freelist = freeitem;
		pos += itemsize;
	}
	pool->freelist = freelist;
	return pool;
}

void *mempool_alloc(mempool_t *pool)
{
	spin_lock(&pool->lock);
	freeitem_t *item = pool->freelist;
	if (item)
	{
		pool->freelist = item->next;
	}
	spin_unlock(&pool->lock);
	return item;
}

void mempool_free(mempool_t *pool, void *object)
{
	freeitem_t *item = (freeitem_t *) object;
	spin_lock(&pool->lock);
	item->next = pool->freelist;
	pool->freelist = item;
	spin_unlock(&pool->lock);
}
