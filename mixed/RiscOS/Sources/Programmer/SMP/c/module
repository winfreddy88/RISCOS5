/*
 * Copyright (c) 2017, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include <stdlib.h>
#include "kernel.h"
#include "swis.h"

#include "Global/RISCOS.h"
#include "Global/Services.h"
#include "SyncLib/synclib.h"
#include "DebugLib/DebugLib.h"
#include "AsmUtils/rminfo.h"

#include "modhdr.h"
#include "halcalls.h"
#include "armops.h"
#include "init.h"
#include "defs.h"
#include "thread.h"
#include "swidespatch.h"
#include "stasis.h"
#include "errors.h"

globalws_t glob;

_kernel_oserror *module_initialise(const char *cmd_tail, int podule_base, void *pw)
{
	synclib_init();

	/* set up debugging */
	debug_initialise(Module_Title, "", "");
	debug_set_device(PRINTF_OUTPUT);
	debug_set_unbuffered_files(TRUE);

	dprintf(("","Image_RO_Base = %08x\n", Image_RO_Base));

	_kernel_oserror *e = halcalls_init();
	if (e)
	{
		return e;
	}
	e = armops_init();
	if (e)
	{
		return e;
	}
	/* Get core count */
	e = _swix(OS_Hardware,_IN(0)|_INR(8,9)|_OUT(0),-1,OSHW_CallHAL,EntryNo_HAL_CPUCount,&glob.numcores);
	if (e)
	{
		return e;
	}
	dprintf(("", "%d cores available\n", glob.numcores));
	if (glob.numcores < 2)
	{
		return ERROR(BadCoreCount);
	}
	/* Locate the doorbell device */
	int idx;
	e = _swix(OS_Hardware,_INR(0,1)|_IN(8)|_OUTR(1,2),HALDeviceType_Comms+HALDeviceComms_ARMDBell,0,OSHW_DeviceEnumerate,&idx,&glob.dbell);
	if (e)
	{
		return e;
	}
	if (idx == -1)
	{
		return ERROR(NoDoorbell);
	}
	dprintf(("", "doorbell device @ %08x\n", glob.dbell));
#ifdef DEBUGLIB
	for (uint32_t i=0;i<glob.numcores;i++)
	{
		dprintf(("", "core %d IRQ %d\n", i, glob.dbell->GetIRQ(glob.dbell, i)));
	}
#endif

	/* Init thread table */
	threads_init();

	/* Init SWI despatch */
	swidespatch_init(*((void **) pw)); /* 'pw' is the private word pointer, we want its value */

	/* Initialise the cores */
	e = init_cores();
	if (e)
	{
		return e;
	}

	/* Get on TickerV */
	_swix(OS_Claim, _INR(0,2), TickerV, tickerv_entry, pw);

	return NULL;
}

_kernel_oserror *module_finalise(int fatal, int podule, void *pw)
{
	return ERROR(NoKill);
}

_kernel_oserror *module_command(const char *arg_string, int argc, int cmd_no, void *pw)
{
	switch (cmd_no)
	{
	case CMD_SMPThreads:
		thread_dump();
		return NULL;
	    
	case CMD_SMPMetrics:
		metrics_dump();
#ifdef IRQ_LOGGING /* Just tack it onto the metrics output */
		for(int i=0;i<128;i++)
		{
			for(int j=1;j<4;j++)
			{
				printf("%08x%c",irqlog[j][i],(j==3?'\n':' '));
			}
		}
#endif
		return NULL;
	    
	case CMD_SMPSWIs:
		swidespatch_dump();
		return NULL;
	}

	return NULL;
}

_kernel_oserror *module_swi(int swi_offset, _kernel_swi_regs *r, void *pw)
{
	switch (swi_offset)
	{
	case SMP_RegisterSWIChunk-SMP_00:
		return swidespatch_register_chunk(r->r[0], *((uint64_t *) &r->r[1]));
	case SMP_DeregisterSWIChunk-SMP_00:
		return swidespatch_deregister_chunk(r->r[0], *((uint64_t *) &r->r[1]));
	case SMP_CreateThread-SMP_00:
		return thread_create((const char *) r->r[0], r->r[1], (uint32_t *) r->r[2], (const threadinitregs_t *) &r->r[3], &r->r[0]);

	case SMP_DestroyThread-SMP_00:
		return thread_destroy(r->r[0]);

	case SMP_Sleep-SMP_00:
		return (thread_sleep((uint32_t *) r->r[0]) ? NULL : ERROR(CantSleep));

	case SMP_Yield-SMP_00:
		return (thread_yield() ? NULL : ERROR(CantYield));

	case SMP_ExamineThread-SMP_00:
		return thread_examine(r->r[0], (char *) r->r[1], &r->r[2], (uint32_t *) &r->r[3], (threadstatus *) &r->r[4], (_kernel_oserror **) &r->r[5], (uint32_t *) &r->r[6]);

	case SMP_CurrentThread-SMP_00:
		r->r[0] = thread_getcurrent();
		return NULL;

	case SMP_DefaultAffinity-SMP_00:
		r->r[0] = thread_defaultaffinity();
		return NULL;

	case SMP_TerminateThread-SMP_00:
		return thread_terminate((_kernel_oserror *) r->r[0], r->r[1]);

	default:
		return error_BAD_SWI;
	}
}

int tickerv_handler(_kernel_swi_regs *r, void *pw)
{
	/* Ring the doorbell on the other cores to make sure the thread
	   scheduler regularly runs */
	/* TODO: Don't do this if there aren't any runnable threads */
	glob.dbell->Ring(glob.dbell, thread_defaultaffinity());
	return 1;
}

void module_service(int service_number, _kernel_swi_regs *r, void *pw)
{
	/* Put the cores into/out of stasis if pages are being reclaimed */
	switch (service_number)
	{
	case Service_PagesUnsafe:
		stasis_enter(~0);
		break;
	case Service_PagesSafe:
		stasis_exit(~0);
		break;
	}
}
