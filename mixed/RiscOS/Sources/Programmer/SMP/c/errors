/*
 * Copyright (c) 2017, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include <stdlib.h>
#include "kernel.h"

#include "Global/NewErrors.h"

#include "errors.h"

/* TODO: Move these to a messages file, cache the translations on startup
   Error numbers are also temporary
   (See also hardcoded error blocks in s.Kernel) */

#define DEFERROR(X,Y) { ErrorBase_SMP + Error_ ## X, Y } 

static _kernel_oserror errors[Error_MAX] =
{
	DEFERROR(BadCoreCount, "Bad core count"),
	DEFERROR(NoDoorbell, "No doorbell device found"),
	DEFERROR(NoKill, "SMP module can't be killed"),
	DEFERROR(CantSleep, "Can't sleep in this context"),
	DEFERROR(CantYield, "Can't yield in this context"),
	DEFERROR(TooManySWIs, "Too many SWIs registered"),
	DEFERROR(NoSWIHandler, "SWI handler not found"),
	DEFERROR(UnsafeSWI, "SWI not MP-safe"),
	DEFERROR(BadThreadID, "Bad thread ID"),
	DEFERROR(BadAffinity, "Bad affinity mask"),
	DEFERROR(BadProcMode, "Bad processor mode"),
	DEFERROR(TooManyThreads, "Too many threads"),
	DEFERROR(ThreadNotComplete, "Thread not complete"),
	DEFERROR(BadContext, "Bad context"),
	DEFERROR(TerminateFailed, "Failed to terminate"),
	DEFERROR(Timeout, "Timeout"),
};

_kernel_oserror *geterror(Error e)
{
	return &errors[e];
}
