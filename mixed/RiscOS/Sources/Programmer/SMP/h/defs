/*
 * Copyright (c) 2017, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef DEFS_H
#define DEFS_H

#include <stdint.h>
#include <stdbool.h>

#include "dbelldevice.h"
#include "irqdespatch.h"
#include "metrics.h"

#ifdef DEBUGLIB
/* Log the PC at the time of each IRQ, for the last N IRQs */
//#define IRQ_LOGGING
#endif

#ifdef IRQ_LOGGING
extern uint32_t irqlog[4][128];
#endif

typedef struct thread_s thread_t;

/* KEEP IN SYNC WITH HDR.DEFS! */
typedef struct
{
	uint32_t psr; /* SPSR from entry to exception vector */
	uint32_t r[16]; /* ARM registers
	                   R0-R14 recovered from the original mode
	                   R15 is R14 value from entry to exception vector */
} armcontext_t;

/* KEEP IN SYNC WITH HDR.DEFS! */
typedef struct
{
	/* Context related to the foreground thread
	   Most of the context will have already been saved in the armcontext_t
	   when the kernel was entered, so only a couple of extra bits need
	   saving here */
	uint32_t usr_regs[2]; /* R13_usr, R14_usr */
	uint32_t TPIDRURO; /* Application-use thread ID registers */
	uint32_t TPIDRURW;
	/* Kernel context, to allow us to longjmp from one reschedule() invocation to another */
	uint32_t svc_regs[7]; /* v1-v6, fp. No need to store SP since the threadregs_t is stored on the target stack. */
	uint32_t pc; 
} threadregs_t;

/* KEEP IN SYNC WITH HDR.DEFS! */
typedef struct
{
	uint32_t relocoffsets[2]; /* Relocation offsets required by our kernel */
	uint32_t id; /* Core number */
	thread_t *thread; /* Currently running thread (or thread that we're about to switch to) */
	uint32_t state;
	int irqsema; /* nested abort/IRQ/etc. counter */

	void *undstack; /* Stack top pointers for each privileged mode */
	void *abtstack;
	void *irqstack;
	void *svcstack;
	void *procvecs; /* Log addr of processor vectors */

	METRICS_BLOCK /* Located at end of struct, so assembler doesn't need to know about it */
} corews_t;

#define CORESTATE_INACTIVE 0 /* Core hasn't been booted / isn't running our scheduler */
#define CORESTATE_RUNNING 1 /* Core is up and running */
#define CORESTATE_STASIS 2 /* Core is in stasis (memory-safe sleep state) */
#define CORESTATE_TRANSITION 0x80000000 /* Core is transitioning to the new state (primary core will set this flag, aux core must then clear it to acknowledge new state) */

typedef struct
{
	int numcores; /* Number of CPU cores */
	corews_t **corews; /* Ptrs to core workspace for each core */
	struct dbelldevice *dbell; /* Doorbell HAL device */
	int numirq; /* Number of IRQ devices */
	irqdespatch_t *irqdespatch; /* IRQ despatcher */
} globalws_t;

extern globalws_t glob;

#define UNDSTACK_SIZE (8*1024)
#define ABTSTACK_SIZE (8*1024)
#define IRQSTACK_SIZE (8*1024)
#define SVCSTACK_SIZE (32*1024)
#define PROCVEC_SIZE (256) /* 256 bytes for each core's processor vectors (to allow FIQ usage equivalent with primary core) */

/* Get core workspace for current core
   (held in TPIDRPRW) */
static inline corews_t *get_corews(void)
{
	corews_t *ret;
	__asm
	{
		mrc p15, 0, r0, c13, c0, 4
		mov ret, r0
	}
	return ret;
}

#endif
