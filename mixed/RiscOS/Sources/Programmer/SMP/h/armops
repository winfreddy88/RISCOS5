/*
 * Copyright (c) 2017, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef ARMOPS_C

#ifndef ARMOPS_H

#include <stdint.h>
#include "Global/OSMisc.h"

#ifndef ARMOPS_C_EXTERN
#define ARMOPS_C_EXTERN extern
#endif

extern _kernel_oserror *armops_init(void);

#define ARMop0(CALL,RET) \
ARMOPS_C_EXTERN RET (*CALL)(void);

#define ARMop1(CALL,ARG0,RET) \
ARMOPS_C_EXTERN RET (*CALL)(ARG0 arg0);

#define ARMop2(CALL,ARG0,ARG1,RET) \
ARMOPS_C_EXTERN RET (*CALL)(ARG0 arg0, ARG1 arg1);

#define ARMop3(CALL,ARG0,ARG1,ARG2,RET) \
ARMOPS_C_EXTERN RET (*CALL)(ARG0 arg0, ARG1 arg1, ARG2 arg2);

#endif /* #ifndef ARMOPS_H */

#else /* #ifndef ARMOPS_C */

#define ARMop0(CALL,RET) ARMOPS_C(CALL)
#define ARMop1(CALL,ARG0,RET) ARMOPS_C(CALL)
#define ARMop2(CALL,ARG0,ARG1,RET) ARMOPS_C(CALL)
#define ARMop3(CALL,ARG0,ARG1,ARG2,RET) ARMOPS_C(CALL)

#endif

#if defined(ARMOPS_C) || !defined(ARMOPS_H)
#undef ARMOPS_H
#define ARMOPS_H

ARMop2(Cache_CleanInvalidateRange,void *,void *,void)

#undef ARMop0
#undef ARMop1
#undef ARMop2
#undef ARMop3
#undef ARMOPS_C
#undef ARMOPS_C_EXTERN

#endif
