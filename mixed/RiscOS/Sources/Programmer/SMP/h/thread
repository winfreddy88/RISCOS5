/*
 * Copyright (c) 2017, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef THREAD_H
#define THREAD_H

#include <stdint.h>
#include "kernel.h"

#define NUM_THREADS 64

typedef enum
{
	Status_Invalid, /* Thread structure is invalid/free */
	Status_Running, /* Thread is currently running, 'core' gives core number (n.b. does not reflect whether core is in IRQ or not) */
	Status_Runnable, /* Thread is runnable but not currently running */
	Status_PollSleep, /* Thread is sleeping on a pollword (pollword must signal with SEV) */
	Status_Complete, /* Thread has finished and is awaiting cleanup by owner */
} threadstatus;

typedef struct
{
	uint32_t r0;
	uint32_t r12;
	uint32_t pc;
	uint32_t psr;
} threadinitregs_t;

extern void threads_init(void);

extern void thread_set_svcstack(int id, void *stack);

extern void thread_init_idle_thread(void);

extern void thread_init_thread(void);

/* Returns true on success, false on failure */
extern bool thread_sleep(uint32_t *pollword);

extern bool thread_yield(void);

extern void thread_dump(void);

extern _kernel_oserror *thread_examine(int id, char *name, int *namelen, uint32_t *affinity, threadstatus *status, _kernel_oserror **err, uint32_t *exitcode);

extern int thread_getcurrent(void);

extern uint32_t thread_defaultaffinity(void);

extern _kernel_oserror *thread_create(const char *name, uint32_t affinity, uint32_t *pollword, const threadinitregs_t *initregs, int *id);

extern _kernel_oserror *thread_destroy(int id);

extern _kernel_oserror *thread_terminate(_kernel_oserror *err, uint32_t exitcode);

extern void *thread_get_svcstack(void);

#endif
