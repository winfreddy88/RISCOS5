/*
 * Copyright (c) 2017, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef ASM_H
#define ASM_H

#include <stdint.h>

#include "defs.h"
#include "swidespatch.h"

/* Fill in temp page tables used for bootstrap */
extern void init_l1pt(void *myL1PT_log, uint32_t myL1PT_phys, void *bootstrap_log, uint32_t bootstrap_phys);

/* PMP DA handler */
extern void pmphandler(void);

/* DSB + ISB combo */
extern void asm_dsb_isb(void);

extern void Kernel_ASM_Entry(void);
extern void Kernel_ASM_ResetVec(void);
extern void Kernel_ASM_UndVec(void);
extern void Kernel_ASM_SWIVec(void);
extern void Kernel_ASM_PrefetchAbortVec(void);
extern void Kernel_ASM_DataAbortVec(void);
extern void Kernel_ASM_AddrExVec(void);
extern void Kernel_ASM_IRQVec(void);
extern void Kernel_ASM_FIQVec(void);

extern void Kernel_ASM_RequestReschedule(armcontext_t *ctx);
extern void Kernel_ASM_Reschedule(void);
extern void Kernel_ASM_InitThread(void);
extern void Kernel_ASM_TerminateThread(void);
extern void Kernel_ASM_Fatal(_kernel_oserror *err, armcontext_t *ctx, void *svcstack);

/* Push current context to stack, set 'from' to the pointer
   Restore context from 'to' (popping from its stack)
   New context will be entered with the provided r0 value */
extern void *Kernel_ASM_SwitchThread(void *r0, threadregs_t *to, threadregs_t **from);

/* IRQ handling */
extern void asm_no_irq(void);
extern void asm_irq_handle(int irq, void *node);
extern void asm_irq_c_veneer(void);

extern void riscos_irq1v(void);
extern void riscos_claimdevicevector(void);
extern void riscos_releasedevicevector(void);

extern uint32_t BranchToSWIExit;

/* SWI handling */
extern void asm_invoke_swi(armcontext_t *ctx, int r11, swihandler_t *handler); 
extern void Kernel_ASM_MOSSWI0(void);
extern void Kernel_ASM_MOSSWI1(void);

#endif
