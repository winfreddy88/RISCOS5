/*
 * Copyright (c) 2017, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef HALCALLS_C

#ifndef HALCALLS_H

#include "kernel.h"

#include "Global/HALEntries.h"

extern _kernel_oserror *halcalls_init(void);

extern void *hal_sb;

#define HALCall0V(CALL) \
extern void *CALL##_p; \
static inline void CALL(void) \
{ \
  __asm \
  { \
    mov r9,hal_sb; \
    blx CALL##_p,{r9},{},{r0-r3,r9,r12,LR,PSR}; \
  } \
}

#define HALCall0(CALL,RET) \
extern void *CALL##_p; \
static inline RET CALL(void) \
{ \
  RET ret; \
  __asm \
  { \
    mov r9,hal_sb; \
    blx CALL##_p,{r9},{r0},{r1-r3,r9,r12,LR,PSR}; \
    mov ret,r0; \
  } \
  return ret; \
}

#define HALCall1V(CALL,ARG0) \
extern void *CALL##_p; \
static inline void CALL(ARG0 arg0) \
{ \
  __asm \
  { \
    mov r0,arg0; \
    mov r9,hal_sb; \
    blx CALL##_p,{r0,r9},{},{r0-r3,r9,r12,LR,PSR}; \
  } \
}

#define HALCall1(CALL,ARG0,RET) \
extern void *CALL##_p; \
static inline RET CALL(ARG0 arg0) \
{ \
  RET ret; \
  __asm \
  { \
    mov r0,arg0; \
    mov r9,hal_sb; \
    blx CALL##_p,{r0,r9},{r0},{r1-r3,r9,r12,LR,PSR}; \
    mov ret,r0; \
  } \
  return ret; \
}

#define HALCall2V(CALL,ARG0,ARG1) \
extern void *CALL##_p; \
static inline void CALL(ARG0 arg0, ARG1 arg1) \
{ \
  __asm \
  { \
    mov r0,arg0; \
    mov r1,arg1; \
    mov r9,hal_sb; \
    blx CALL##_p,{r0-r1,r9},{},{r0-r3,r9,r12,LR,PSR}; \
  } \
}

#define HALCall2(CALL,ARG0,ARG1,RET) \
extern void *CALL##_p; \
static inline RET CALL(ARG0 arg0, ARG1 arg1) \
{ \
  RET ret; \
  __asm \
  { \
    mov r0,arg0; \
    mov r1,arg1; \
    mov r9,hal_sb; \
    blx CALL##_p,{r0-r1,r9},{r0},{r1-r3,r9,r12,LR,PSR}; \
    mov ret,r0; \
  } \
  return ret; \
}

#define HALCall3V(CALL,ARG0,ARG1,ARG2) \
extern void *CALL##_p; \
static inline void CALL(ARG0 arg0, ARG1 arg1, ARG2 arg2) \
{ \
  __asm \
  { \
    mov r0,arg0; \
    mov r1,arg1; \
    mov r2,arg2; \
    mov r9,hal_sb; \
    blx CALL##_p,{r0-r2,r9},{},{r0-r3,r9,r12,LR,PSR}; \
  } \
}

#define HALCall3(CALL,ARG0,ARG1,ARG2,RET) \
extern void *CALL##_p; \
static inline RET CALL(ARG0 arg0, ARG1 arg1, ARG2 arg2) \
{ \
  RET ret; \
  __asm \
  { \
    mov r0,arg0; \
    mov r1,arg1; \
    mov r2,arg2; \
    mov r9,hal_sb; \
    blx CALL##_p,{r0-r2,r9},{r0},{r1-r3,r9,r12,LR,PSR}; \
    mov ret,r0; \
  } \
  return ret; \
}

#endif /* #ifndef HALCALLS_H */

#else /* #ifndef HALCALLS_C */

#define HALCall0V(CALL) HALCALLS_C(CALL)
#define HALCall0(CALL,RET) HALCALLS_C(CALL)
#define HALCall1V(CALL,ARG0) HALCALLS_C(CALL)
#define HALCall1(CALL,ARG0,RET) HALCALLS_C(CALL)
#define HALCall2V(CALL,ARG0,ARG1) HALCALLS_C(CALL)
#define HALCall2(CALL,ARG0,ARG1,RET) HALCALLS_C(CALL)
#define HALCall3V(CALL,ARG0,ARG1,ARG2) HALCALLS_C(CALL)
#define HALCall3(CALL,ARG0,ARG1,ARG2,RET) HALCALLS_C(CALL)

#endif

#if defined(HALCALLS_C) || !defined(HALCALLS_H)
#undef HALCALLS_H
#define HALCALLS_H

HALCall0(HAL_CPUNumber,int)
HALCall0(HAL_IRQSource,int)
HALCall0(HAL_IRQMax,int)
HALCall1(HAL_IRQEnable,int,int)
HALCall1(HAL_IRQDisable,int,int)
HALCall1V(HAL_IRQClear,int)
HALCall1V(HAL_DebugTX,int)

#undef HALCall0V
#undef HALCall0
#undef HALCall1V
#undef HALCall1
#undef HALCall2V
#undef HALCall2
#undef HALCall3V
#undef HALCall3
#undef HALCALLS_C

#endif
