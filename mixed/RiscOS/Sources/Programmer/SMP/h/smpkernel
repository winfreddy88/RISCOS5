/*
 * Copyright (c) 2017, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef SMPKERNEL_H
#define SMPKERNEL_H

#include "defs.h"

#ifdef BOOTSTRAP_DEBUG
extern void CPUInfo_OutFunc(uint32_t reg, const char *name);
extern void CPUInfo(void (*outfunc)(uint32_t, const char *));
#endif

/* Called during core bootstrap
   Provided context will be for the idle thread */
extern void Kernel_C_Entry(armcontext_t *ctx);

/* Called for undefined instructions
   Provided context will have PC set to the aborting instruction */
extern void Kernel_C_UndVec(armcontext_t *ctx, corews_t *core);

/* Called for SWIs
   Provided context will have PC set to the address of the next instruction */
extern void Kernel_C_SWIVec(armcontext_t *ctx);

/* Called for prefetch aborts
   Provided context will have PC set to the aborting address/instruction */
extern void Kernel_C_PrefetchAbortVec(armcontext_t *ctx, corews_t *core);

/* Called for data aborts
   Provided context will have PC set to the aborting instruction */
extern void Kernel_C_DataAbortVec(armcontext_t *ctx, corews_t *core, uint32_t dfar, uint32_t dfsr);

/* Called for IRQs
   Provided context will have PC set to the correct return address */
extern void Kernel_C_IRQVec(armcontext_t *ctx, corews_t *core);

/* Thread scheduler callback, called from SVC when IRQ/ABT/UND return to foreground */
extern void Kernel_C_Reschedule(void);

#endif
