; 
; Copyright (c) 2017, RISC OS Open Ltd
; All rights reserved.
; 
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met: 
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
; 

; Get the per-core kernel workspace ptr for this core
        MACRO
        GetCoreWS $reg
        MRC     p15, 0, $reg, c13, c0, 4 ; Read TPIDRPRW
        MEND

; Set the per-core kernel workspace ptr for this core
        MACRO
        SetCoreWS $reg
        MCR     p15, 0, $reg, c13, c0, 4 ; Write TPIDRPRW
        MEND

; Bootstrap workspace block
; KEEP IN SYNC WITH BOOTSTRAP.H
                    ^ 0
BWS_BootstrapLog    # 4 ; Log addr of bootstrap code
BWS_BootstrapMyL1PT # 4 ; Bootstrap L1PT phys addr
BWS_BootstrapOSL1PT # 4 ; OS L1PT phys addr (actually, entire TTBR value)
; The below are only valid once OSL1PT is in use
BWS_CoreWS          # 4 ; Ptr to workspace for core
BWS_Kernel          # 4 ; Kernel entry point
 [ BootstrapDebug
BWS_DebugTX         # 4 ; HAL_DebugTX
BWS_HALWS           # 4 ; HAL workspace
 ]
BWS_Size            # 0

; Per-core workspace block
; KEEP IN SYNC WITH DEFS.H
                    ^ 0
CWS_RelocOffsets    # 8 ; Relocation offsets required by C code (global, but stored in per-core struct since we can't find global workspace without installing the reloc offsets first!)
CWS_ID              # 4
CWS_Thread          # 4
CWS_State           # 4 ; Status flags for core (only updated by core)
CWS_IRQsema         # 4

CWS_UNDStack        # 4 ; Stack top pointers for each privileged mode
CWS_ABTStack        # 4
CWS_IRQStack        # 4
CWS_SVCStack        # 4
;CWS_MsgQueue        # 4 ; Pointer to our incoming message queue
CWS_ProcVecs        # 4 ; Log addr of processor vectors
CWS_Size            # 0

CWS_State_Incative * 0 ; Core hasn't been booted / isn't running our scheduler
CWS_State_Running * 1 ; Core is up and running
CWS_State_Stasis  * 2 ; Core is in stasis (memory-safe sleep state)
CWS_State_Transition * &80000000 ; Core is transitioning to the new state (primary core will set this flag, aux core must then clear it to acknowledge new state)

; ARM register context/dump
; KEEP IN SYNC WITH DEFS.H
                    ^ 0
ARMCtx_PSR          # 4
ARMCtx_Regs         # 16*4
ARMCtx_Size         # 0

; Thread register context/dump
; KEEP IN SYNC WITH DEFS.H
                    ^ 0
THDCtx_USRRegs      # 2*4 ; R13_usr, R14_usr
THDCtx_TPIDRURO     # 4
THDCtx_TPIDRURW     # 4
THDCtx_SVCRegs      # 7*4 ; v1-v6, fp
THDCtx_PC           # 4
THDCtx_Size         # 0

; KEEP IN SYNC WITH CMHG.MODHDR!
SWIClass        SETS    "SMP"

        ^       SMPSWI_Base

        AddSWI  RegisterSWIChunk
        AddSWI  DeregisterSWIChunk
        AddSWI  CreateThread
        AddSWI  DestroyThread
        AddSWI  Sleep
        AddSWI  Yield
        AddSWI  ExamineThread
        AddSWI  CurrentThread
        AddSWI  DefaultAffinity
        AddSWI  TerminateThread

        END

