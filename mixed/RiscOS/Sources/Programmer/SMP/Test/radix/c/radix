#include <string.h>
#include <stdio.h>
#include <stdlib.h>

#include "radix.h"
#include "alloc.h"

#define _0(v) ((v) & 0x7ff)
#define _1(v) (((v) >> 11) & 0x7ff)
#define _2(v) ((v) >> 22)

void radix(const radix_args a)
{
  int pos,n,sum0=0,sum1=0,sum2=0,tsum;
  const uint32_t *reader;
  uint32_t *writer;
  memset(a.hist,0,sizeof(radix_hist));

  for (n=0; n<a.sz; n++)
  {
    a.hist->b0[_0(a.in[n])]++;
    a.hist->b1[_1(a.in[n])]++;
    a.hist->b2[_2(a.in[n])]++;
  }

  for (n=0; n<HIST_SIZE; n++)
  {
    tsum = a.hist->b0[n] + sum0;
    a.hist->b0[n] = sum0 - 1;
    sum0 = tsum;

    tsum = a.hist->b1[n] + sum1;
    a.hist->b1[n] = sum1 - 1;
    sum1 = tsum;

    tsum = a.hist->b2[n] + sum2;
    a.hist->b2[n] = sum2 - 1;
    sum2 = tsum;
  }

  writer = a.out;
  reader = a.in;
  for (n=0; n<a.sz; n++)
  {
    pos = _0(reader[n]);
    writer[++a.hist->b0[pos]] = reader[n];
  }

  writer = a.temp;
  reader = a.out;
  for (n=0; n<a.sz; n++)
  {
    pos = _1(reader[n]);
    writer[++a.hist->b1[pos]] = reader[n];
  }

  writer = a.out;
  reader = a.temp;
  for (n=0; n<a.sz; n++)
  {
    pos = _2(reader[n]);
    writer[++a.hist->b2[pos]] = reader[n];
  }
}

/* Approx 192MB memory usage with 4 instances */
#define RADIX_SIZE (4<<20)

radix_args radix_gen(void)
{
  radix_args a;
  a.in = (uint32_t *) rma_alloc(RADIX_SIZE<<2);
  a.out = (uint32_t *) rma_alloc(RADIX_SIZE<<2);
  a.temp = (uint32_t *) rma_alloc(RADIX_SIZE<<2);
  a.hist = (radix_hist *) rma_alloc(sizeof(radix_hist));
  a.sz = RADIX_SIZE;
  for (int i=0;i<RADIX_SIZE;i++)
  {
    a.in[i] = rand() ^ (rand() << 16);
  }
  return a;
}

void radix_free(radix_args a)
{
  rma_free(a.in);
  rma_free(a.out);
  rma_free(a.temp);
  rma_free(a.hist);
}

bool radix_check(const radix_args a)
{
  int sum0 = a.in[0];
  int sum1 = a.out[0];
  for (int i=1; i<a.sz; i++)
  {
    sum0 += a.in[i];
    sum1 += a.out[i];
    if (a.out[i-1] > a.out[i])
    {
      printf("radix_check: Items not ordered\n");
      return false;
    }
  }
  if (sum0 != sum1)
  {
    printf("radix_check: Checksum fail\n");
    return false;
  }
  return true;
}
