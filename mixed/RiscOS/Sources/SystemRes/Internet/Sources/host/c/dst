/* Copyright 2003 Tematic Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* DST functions */

#include "sys/types.h"

#define NOTUSED(k) k=k;

typedef struct dst_key {
        char    *dk_key_name;   /* name of the key */
        int     dk_key_size;    /* this is the size of the key in bits */
        int     dk_proto;       /* what protocols this key can be used for */
        int     dk_alg;         /* algorithm number from key record */
        u_int32_t dk_flags;     /* and the flags of the public key */
        u_int16_t dk_id;        /* identifier of the key */
} DST_KEY;

extern DST_KEY *dst_dnskey_to_key(const char *in_name, /* KEY record name */
                                  const u_char *key,   /* KEY RDATA */
                                  const int len);      /* size of input buffer*/
extern void dst_init(void);
extern int dst_verify_data(const int mode,       /* specifies INIT/UPDATE/FINAL/ALL */
                    DST_KEY *in_key,     /* the key to use */
                    void **context,      /* pointer to state structure */
                    const u_char *data,  /* data to be verified */
                    const int len,       /* length of input data */
                    const u_char *signature,/* buffer containing signature */
                    const int sig_len);  /* length of signature */
extern DST_KEY *dst_free_key(DST_KEY *f_key);
extern int getaddrinfo(char *,int *,void *,void *);
extern void freeaddrinfo(void *);
extern int __dn_skipname (const u_char *a, const u_char *b);
extern int __dn_expand (const u_char *a, const u_char *b, const u_char *c,
                               char *d, int e);

DST_KEY *dst_dnskey_to_key(const char *in_name, /* KEY record name */
                           const u_char *key,   /* KEY RDATA */
                           const int len)       /* size of input buffer*/
{
(void)len;
(void)in_name;
(void)key;

return 0;
}

void dst_init()
{
}

int dst_verify_data(const int mode,       /* specifies INIT/UPDATE/FINAL/ALL */
                    DST_KEY *in_key,     /* the key to use */
                    void **context,      /* pointer to state structure */
                    const u_char *data,  /* data to be verified */
                    const int len,       /* length of input data */
                    const u_char *signature,/* buffer containing signature */
                    const int sig_len)
{
return 0;
}

DST_KEY *dst_free_key(DST_KEY *f_key)
{
return 0;
}

int getaddrinfo(char *a,int *b,void *c,void *d)
{
return 0;
}

void freeaddrinfo(void *a)
{
}

int __dn_skipname (const u_char *a, const u_char *b)
{
return 0;
}

int __dn_expand (const u_char *a, const u_char *b, const u_char *c,
                               char *d, int e)
{
return 0;
}
