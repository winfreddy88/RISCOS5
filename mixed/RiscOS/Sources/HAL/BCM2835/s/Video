;
; Copyright (c) 2012, RISC OS Open Ltd
; Copyright (c) 2012, Adrian Lees
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met: 
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
;
; With many thanks to Broadcom Europe Ltd for releasing the source code to
; its Linux drivers, thus making this port possible.
;

        AREA    |ARM$$code|, CODE, READONLY, PIC

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:Proc
        GET     hdr.BCM2835
        GET     hdr.StaticWS
        GET     hdr.DMA

        EXPORT   Video_InitDevices

        IMPORT  memcpy

        MACRO
$class  HALDeviceField $field, $value
        LCLS    myvalue
      [ "$value" = ""
myvalue SETS    "$field"
      |
myvalue SETS    "$value"
      ]
        ASSERT  . - %A0 = HALDevice_$class$field
     [ ?HALDevice_$class$field = 2
        DCW     $myvalue
   ELIF ?HALDevice_$class$field = 4
        DCD     $myvalue
      |
        %       ?HALDevice_$class$field
      ]
        MEND

; Template for video device

VDU_Dev
0
        HALDeviceField Type,               HALDeviceType_Video + HALDeviceVideo_VDU
        HALDeviceField ID,                 HALDeviceID_VDU_BCM2835
        HALDeviceField Location,           HALDeviceBus_Sys + HALDeviceSysBus_AHB ; Guess
        HALDeviceField Version,            0
        HALDeviceField Description,        VDU_Description
        HALDeviceField Address,            0
        HALDeviceField Reserved1,          0
        HALDeviceField Activate,           VDU_Activate
        HALDeviceField Deactivate,         VDU_Deactivate
        HALDeviceField Reset,              VDU_Reset
        HALDeviceField Sleep,              VDU_Sleep
        HALDeviceField Device,             -1
        HALDeviceField TestIRQ,            0
        HALDeviceField ClearIRQ,           0
        HALDeviceField Reserved2,          0
VDU     HALDeviceField DeviceSpecificField,0 ; Filled in at runtime
        ASSERT  . - %A0 = HALDevice_VDU_Size

VDU_Description
        = "BCM2835 VDU device", 0
        ALIGN

Video_InitDevices
        Entry
        ADRL    a1, VDUDevice
        ADR     a2, VDU_Dev
        MOV     a3, #HALDevice_VDU_Size
        BL      memcpy
        ; Select a DMA channel to use for GraphicsV_Render
        ; We prefer channel 0, but will use any non-lite channel if channel 0 unavailable
        LDR     a3, PeriBase
        ADD     a3, a3, #DMA_Base
        LDR     a1, ARM_DMAChannels
        MOV     a4, #8 ; Burst length of 8 possible for DMA channel 0. 9 also possible but seemed to be slower!
        MOV     a2, #1
        AND     a1, a1, #(:NOT: DMA_CH_is_lite) :AND: ((1<<DMA_CH_Count)-1) ; Mask with available non-lite channels
10
        TST     a1, a2
        BNE     %FT20
        MOV     a4, #4 ; Use 4 for other channels (7 will cause a lockup, haven't tried anything else inbetween)
        ADD     a3, a3, #DMA_CH_STRIDE
        MOVS    a2, a2, LSL #1
        BCC     %BT10
        MOV     a3, #0
        MOV     a4, #0
20
        ; Claim the channel (if any)
        LDR     a1, ARM_DMAChannels
        BIC     a1, a1, a2
        STR     a1, ARM_DMAChannels
        ; Fill in the device specific field
        ADRL    a1, VDUDevSpec
        STR     a3, [a1, #VDUDevSpec_DMAChan]
        STR     a4, [a1, #VDUDevSpec_BurstLen]
        MOV     a3, #VDUDevSpec_Size
        STR     a3, [a1, #VDUDevSpec_SizeField]
        ; Register the device
        ADRL    a2, VDUDevice
        STR     a1, [a2, #HALDevice_VDUDeviceSpecificField]
        MOV     a1, #0
        MOV     lr, pc
        LDR     pc, OSentries+4*OS_AddDevice
        EXIT        

VDU_Activate
        MOV     a1, #1
VDU_Deactivate
VDU_Reset
        MOV     pc, lr

VDU_Sleep
        MOV     a1, #0
        MOV     pc, lr

        END
