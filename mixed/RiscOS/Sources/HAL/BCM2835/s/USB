;
; Copyright (c) 2012, RISC OS Open Ltd
; Copyright (c) 2012, Adrian Lees
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met: 
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
;
; With many thanks to Broadcom Europe Ltd for releasing the source code to
; its Linux drivers, thus making this port possible.
;

                AREA    |ARM$$code|, CODE, READONLY, PIC

                GET     Hdr:ListOpts
                GET     Hdr:HALEntries
                GET     hdr.BCM2835
                GET     hdr.StaticWS

                EXPORT   HAL_USBControllerInfo

                ; a1 = interface #
                ; a2 = usbinfo ptr
                ; a3 = sizeof(usbinfo)
                ; Return sizeof(usbinfo) or 0 for no more devices
                ; If supplied size isn't large enough, only the controller type will be filled in
HAL_USBControllerInfo
                CMP     a1, #0
                MOVHI   a1, #0
                MOVHI   pc, lr
                ; Fill in the usbinfo struct
                MOV     a1, #HALUSBControllerType_SynopsysDWC
                STR     a1, [a2, #HALUSBControllerInfo_Type]
                CMP     a3, #HALUSBControllerInfo_SizeOfType3
                MOV     a1, #HALUSBControllerInfo_SizeOfType3
                MOVLO   pc, lr
                MOV     a4, #0 ; flags
                STR     a4, [a2, #HALUSBControllerInfo_Flags]
                LDR     ip, PeriBase
                ADD     a4, ip, #USB_Base
                STR     a4, [a2, #HALUSBControllerInfo_HW]
                MOV     a4, #iDev_GPU_VCUSB
                STR     a4, [a2, #HALUSBControllerInfo_DevNo]
                LDR     a4, FB_CacheMode
                STR     a4, [a2, #HALUSBControllerInfo_DMAOffset]
                ADD     a4, ip, #MPHI_Base
                STR     a4, [a2, #HALUSBControllerInfo_HW_MPHI]
                MOV     a4, #iDev_GPU_HostPort
                STR     a4, [a2, #HALUSBControllerInfo_DevNo_MPHI]
                MOV     pc, lr

                END
