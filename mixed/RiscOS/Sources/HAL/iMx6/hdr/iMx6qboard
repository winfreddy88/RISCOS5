; Copyright 2017 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; Board specific addresses and definitions

        [       :LNOT: :DEF: __HAL_IMX6Q_BOARD_HDR__
        GBLL    __HAL_IMX6Q_BOARD_HDR__



        ; Enable code relating to the A9 private & global timers
        ; These timers have their clock derived from the ARM core clock, so
        ; will have their frequency affected by changes to the ARM clock speed.
        ; RISC OS can't cope with this, and there's no easy way for us to deal
        ; with this in the HAL, so for now just leave the code disabled.
        ; N.B. support for these timers is incomplete anyway.
                GBLL A9Timers
A9Timers        SETL {FALSE}

 [ CuBox
I2C_BusCount    *       2
 |
I2C_BusCount    *       3
 ]
I2C1_IRQ        *       IMX_INT_I2C1
I2C2_IRQ        *       IMX_INT_I2C2
I2C3_IRQ        *       IMX_INT_I2C3
 [ CuBox
; CuBox I2C mapping
; RTC is on I2C3       bus 1
; HDMI DDC is on I2C2  bus 0
VideoI2C_num    *       0               ; RISC OS logical IIC bus to use for video (I2C2, mapped to logical bus 2)
AudioI2C_numD   *       3               ; unused .. RISC OS logical IIC bus to use for SGTL audio
AudioI2C_numBC  *       3               ; unused .. RISC OS logical IIC bus to use for SGTL audio
CMOSI2C_num     *       1               ; RISC OS logical IIC bus to use for CMOS RAM if there
RTC_I2CNum      *       1               ; RISC OS logical IIC bus to use for RTC
 |
; I2C bus mapping:
; Rev B and C: I2C1 and I2C2 mapped as logical devices 1 and 0 respectively
;   HDMI edid on I2C1
;   CMOS RAM and RTC on I2C2
;   Audio on I2C1
; Rev D: HDMI edid now on I2C2, so
;              I2C1 and I2C2 mapped as logical devices 0 and 1 respectively
; We change the CMOS RAM and RTC busses on the external card to I2C1
; Audio is still wired to I2C2, so changed logical bus number needed below
VideoI2C_num    *       1               ; RISC OS logical IIC bus to use for video (I2C1, mapped to logical bus 1)
AudioI2C_numBC  *       0               ; RISC OS logical IIC bus to use for SGTL audio (I2C2, mapped to logical bus 0 in Rev B and C)
AudioI2C_numD   *       1               ; RISC OS logical IIC bus to use for SGTL audio (I2C2, mapped to logical bus 1 in Rev D)
CMOSI2C_num     *       0               ; RISC OS logical IIC bus to use for CMOS RAM and RTC (I2C2, mapped to logical bus 0)
RTC_I2CNum      *       CMOSI2C_num     ; RISC OS logical IIC bus to use for RTC
 ]
 [ A9Timers
TIMER_MAX       *       5               ; Private timer, Global timer, and general Purpose timer, and EPIT1 and 2.
 |
TIMER_MAX       *       3               ; General purpose timer, EPIT1 and 2
 ]

; Timer0 is used for the ticker
Timer0_Base             *       GPT_BASE_ADDR
Timer1_Base             *       EPIT1_BASE_ADDR
Timer2_Base             *       EPIT2_BASE_ADDR
 [ A9Timers
Timer3_Base             *       PRIVATE_TIMERS_WD_BASE_ADDR
Timer4_Base             *       GLOBAL_TIMER_BASE_ADDR
 ]

Timer0_IRQ              *       IMX_INT_GPT
Timer1_IRQ              *       IMX_INT_EPIT1
Timer2_IRQ              *       IMX_INT_EPIT2
 [ A9Timers
Timer3_IRQ              *       RSVD_INTERRUPT_29 ; core irq ID29
Timer4_IRQ              *       RSVD_INTERRUPT_27 ; core irq ID27
 ]
WatchDog_IRQ            *       RSVD_INTERRUPT_30 ; core irq ID30

; Uarts
UART_Count              *       5
 [ Debug
UART_CountReported      *       1               ; only bottom port accessible
 |
UART_CountReported      *       3               ; only bottom 3 ports accessible
 ]
UART1_BaseAddr          *       UART1_BASE_ADDR
UART2_BaseAddr          *       UART2_BASE_ADDR
UART3_BaseAddr          *       UART3_BASE_ADDR
UART4_BaseAddr          *       UART4_BASE_ADDR
UART5_BaseAddr          *       UART5_BASE_ADDR

UART1_IRQ               *       IMX_INT_UART1
UART2_IRQ               *       IMX_INT_UART2
UART3_IRQ               *       IMX_INT_UART3
UART4_IRQ               *       IMX_INT_UART4
UART5_IRQ               *       IMX_INT_UART5

UART_DebugNum           *       0               ; debug UART, starts at 0
Default_UART            *       0               ; default for RISCOS to use
                                                ; starts at 0 (!!!!)
I2C_ClkDiv400           *       0x2f            ;  1/128 * 49.5MHz = <400k
I2C_ClkDiv100           *       0x37            ;  1/512 * 49.5MHz = <100k

SPI_Max_CSCount         *       2               ; SPI interface has 2 CS lines


        ] ; __HAL_IMX6Q_BOARD_HDR__

        END
