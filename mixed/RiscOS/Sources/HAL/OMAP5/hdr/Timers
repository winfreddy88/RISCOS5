; Copyright 2015 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        [       :LNOT: :DEF: __HAL_TIMERS_HDR__
        GBLL    __HAL_TIMERS_HDR__

        GET     hdr.irqids543x

TIMER_MAX               *       4 ; GPTIMER5-8.
; Other timers could be supported, but these 4 are in consecutive memory locations, making
; addressing easier. These timers are located inside L3_ABE; Cortex-A15 MPUs can access them
; through L3_ABE (private access) or through L3_Interconnect (L4_ABE).
TIMER_BASE              *       L4_GPTIMER5
TIMER_STRIDE_POW2       *       13
TIMER_STRIDE            *       (1 << TIMER_STRIDE_POW2)
TIMER_SIZE              *       (TIMER_MAX * TIMER_STRIDE)

; Make sure stuff really is where we expect it to be
        ASSERT L4_GPTIMER6 = L4_GPTIMER5 + TIMER_STRIDE
        ASSERT L4_GPTIMER7 = L4_GPTIMER6 + TIMER_STRIDE
        ASSERT L4_GPTIMER8 = L4_GPTIMER7 + TIMER_STRIDE

TIMER_IRQ_BASE          *       OMAP54XX_IRQ_TIMER5


; Remark:
; T1,T2 and T10 are special on OMAP5 (1ms functionality)
; T3 - T9, T11 have a slightly different register layout

; Timer registers (offset from base)
; for GPTIMER1, GPTIMER2 and GPTIMER10
GPT1MS_TIDR             *       &0000   ; Timer IDentification Register
GPT1MS_TIOCP_CFG        *       &0010   ; Timer Interface OCP Configuration register
GPT1MS_IRQSTATUS_RAW    *       &0024   ; Timer Raw (unmasked) Interrupt Status
GPT1MS_IRQSTATUS        *       &0028   ; Timer (masked) Interrupt Status
GPT1MS_IRQENABLE_SET    *       &002C   ; Timer Interrupt Enable Set Register
GPT1MS_IRQENABLE_CLR    *       &0030   ; Timer Interrupt Enable Clear Register
GPT1MS_IRQWAKEEN        *       &0034   ; Timer Wakeup Enable Register
GPT1MS_TCLR             *       &0038   ; Timer Control register
GPT1MS_TCRR             *       &003C   ; Timer Counter value register
GPT1MS_TLDR             *       &0040   ; Timer Reload register
GPT1MS_TTGR             *       &0044   ; Timer Trigger (reload) register
GPT1MS_TWPS             *       &0048   ; Timer Write Pending Status
GPT1MS_TMAR             *       &004C   ; Timer MAtch Register
GPT1MS_TCAR1            *       &0050   ; Timer CApture Register 1
GPT1MS_TSICR            *       &0054   ; Timer Synchronous Interface Control Register
GPT1MS_TCAR2            *       &0058   ; Timer CApture Register 2
GPT1MS_TPIR             *       &005C   ; Timer Positive Increment Register
GPT1MS_TNIR             *       &0060   ; Timer Negative Increment Register
GPT1MS_TCVR             *       &0064   ; Timer Counter Value register (1 ms generation)
GPT1MS_TOCR             *       &0068   ; Timer Overflow Counter Register
GPT1MS_TOWR             *       &006C   ; Timer Overflow Wrapper Register

; bits in GPT1MS_TIOCP_CFG
GPT1MS_TIOCP_CFG_SOFTRESET      *       (1 << 0) ; Software reset
GPT1MS_TIOCP_CFG_EMUFREE        *       (1 << 1) ; Emulation mode
GPT1MS_TIOCP_CFG_IDLEMODE       *       (3 << 2) ; Power management
GPT1MS_TIOCP_CFG_IDLEMODE_FORCE *       (0 << 2) ; Force Idle mode
GPT1MS_TIOCP_CFG_IDLEMODE_NONE  *       (1 << 2) ; No Idle mode
GPT1MS_TIOCP_CFG_IDLEMODE_SMART *       (2 << 2) ; Smart Idle mode
GPT1MS_TIOCP_CFG_IDLEMODE_SMWUP *       (3 << 2) ; Smart-idle wake-up

; bits in GPT1MS_TISTAT
GPT1MS_TISTAT_RESETDONE         *       (1 << 0)

; bits in interrupt registers: GPT1MS_IRQ*
GPT1MS_IRQ_MAT                  *       (1 << 0) ; match event
GPT1MS_IRQ_OVF                  *       (1 << 1) ; overflow event
GPT1MS_IRQ_TCAR                 *       (1 << 2) ; compare event


; Timer registers (for GPTIMER3 - GPTIMER9, GPTIMER11)
GPT_TIDR                *       &0000   ; Timer IDentification Register
GPT_TIOCP_CFG           *       &0010   ; Timer Interface OCP Configuration register
GPT_IRQSTATUS_RAW       *       &0024   ; Timer Raw (unmasked) Interrupt Status
GPT_IRQSTATUS           *       &0028   ; Timer (masked) Interrupt Status
GPT_IRQENABLE_SET       *       &002C   ; Timer Interrupt Enable Set Register
GPT_IRQENABLE_CLR       *       &0030   ; Timer Interrupt Enable Clear Register
GPT_IRQWAKEEN           *       &0034   ; Timer Wakeup Enable Register
GPT_TCLR                *       &0038   ; Timer Control register
GPT_TCRR                *       &003C   ; Timer Counter value register
GPT_TLDR                *       &0040   ; Timer Reload register
GPT_TTGR                *       &0044   ; Timer Trigger (reload) register
GPT_TWPS                *       &0048   ; Timer Write Pending Status
GPT_TMAR                *       &004C   ; Timer MAtch Register
GPT_TCAR1               *       &0050   ; Timer CApture Register 1
GPT_TSICR               *       &0054   ; Timer Synchronous Interface Control Register
GPT_TCAR2               *       &0058   ; Timer CApture Register 2

; bits in GPT_TIOCP_CFG
GPT_TIOCP_CFG_SOFTRESET         *       (1 << 0) ; Software reset
GPT_TIOCP_CFG_EMUFREE           *       (1 << 1) ; Emulation mode
GPT_TIOCP_CFG_IDLEMODE          *       (3 << 2) ; Power management
GPT_TIOCP_CFG_IDLEMODE_FORCE    *       (0 << 2) ; Force Idle mode
GPT_TIOCP_CFG_IDLEMODE_NONE     *       (1 << 2) ; No Idle mode
GPT_TIOCP_CFG_IDLEMODE_SMART    *       (2 << 2) ; Smart Idle mode
GPT_TIOCP_CFG_IDLEMODE_SMWUP    *       (3 << 2) ; Smart-idle wake-up

; bits in GPT_IRQ* registers
GPT_IRQ_MAT                     *       (1 << 0) ; match event
GPT_IRQ_OVF                     *       (1 << 1) ; overflow event
GPT_IRQ_TCAR                    *       (1 << 2) ; compare event

; bits in GPT_TCLR (timer control)
GPT_TCLR_ST                     *       (1 << 0)  ; Start/Stop timer (1=Start,0=Stop)
GPT_TCLR_AR                     *       (1 << 1)  ; AutoReload mode
GPT_TCLR_PTV                    *       (7 << 2)  ; Prescale clock Timer Value
GPT_TCLR_PRE                    *       (1 << 5)  ; Prescaler Enable
GPT_TCLR_CE                     *       (1 << 6)  ; Compare Enable
GPT_TCLR_SCPWM                  *       (1 << 7)  ; PWM output default level (1=Set,0=Clr)
GPT_TCLR_TCM                    *       (3 << 8)  ; Transition Capture Mode
GPT_TCLR_TRG                    *       (3 << 10) ; Trigger output mode
GPT_TCLR_PT                     *       (1 << 12) ; Pulse or Toggle mode (PWM)
GPT_TCLR_CAPT_MODE              *       (1 << 13) ; Capture Mode
GPT_TCLR_GPO_CFG                *       (1 << 14) ; General-Purpose Output Configuration


; COUNTER_32K registers - relative to L4_COUNTER_32K
COUNTER_32K_REVISION            *       &0000
COUNTER_32K_SYSCONFIG           *       &0010
COUNTER_32K_CR                  *       &0030 ; Counter value Register

        ] ; __HAL_TIMERS_HDR__

        END
