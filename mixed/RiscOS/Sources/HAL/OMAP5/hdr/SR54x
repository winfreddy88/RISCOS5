; Copyright 2015 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        [       :LNOT: :DEF: __HAL_SR54X_HDR__
        GBLL    __HAL_SR54X_HDR__

        GET     Hdr:CPUClkDevice
        GET     hdr.irqids543x

; SmartReflex registers - relative to L4_SR_MPU,L4_SR_MM,L4_SR_CORE

SR54x_SRCONFIG                  *       &00
SR54x_SRSTATUS                  *       &04
SR54x_SENVAL                    *       &08
SR54x_SENMIN                    *       &0C
SR54x_SENMAX                    *       &10
SR54x_SENAVG                    *       &14
SR54x_AVGWEIGHT                 *       &18
SR54x_NVALUERECIPROCAL          *       &1C
SR54x_IRQSTATUS_RAW             *       &24
SR54x_IRQSTATUS                 *       &28
SR54x_IRQENABLE_SET             *       &2C
SR54x_IRQENABLE_CLR             *       &30
SR54x_SENERROR                  *       &34
SR54x_ERRCONFIG                 *       &38
SR54x_LVTSENVAL                 *       &3C
SR54x_LVTSENMIN                 *       &40
SR54x_LVTSENMAX                 *       &44
SR54x_LVTSENAVG                 *       &48
SR54x_LVTNVALUERECIPROCAL       *       &4C


; bits in SRCONFIG register
SRCONFIG_SENPENABLE             *       (1 << 0)
SRCONFIG_SENNENABLE             *       (1 << 1)
SRCONFIG_LVTSENPENABLE          *       (1 << 2)
SRCONFIG_LVTSENNENABLE          *       (1 << 3)
SRCONFIG_LVTSENENABLE           *       (1 << 4)
SRCONFIG_MINMAXAVGENABLE        *       (1 << 8)
SRCONFIG_ERRORGENERATORENABLE   *       (1 << 9)
SRCONFIG_SENENABLE              *       (1 << 10)
SRCONFIG_SRENABLE               *       (1 << 11)
SRCONFIG_SRCLKLENGTH_MSK        *       (0x3FF << 12)
SRCONFIG_SRCLKLENGTH_SHIFT      *       12
SRCONFIG_SRCLKLENGTH_WIDTH      *       10
SRCONFIG_ACCUMDATA_MSK          *       (0x3FF << 22)
SRCONFIG_ACCUMDATA_SHIFT        *       22
SRCONFIG_ACCUMDATA_WIDTH        *       10

; bits in SRSTATUS register
SRSTATUS_MINMAXAVGACCUMVALID    *       (1 << 0)
SRSTATUS_ERRORGENERATORVALID    *       (1 << 1)
SRSTATUS_MINMAXAVGVALID         *       (1 << 2)
SRSTATUS_AVGERRVALID            *       (1 << 3)

; bits in AVGWEIGHT register
AVGWEIGHT_SENNAVGWEIGHT         *       (3 << 0)
AVGWEIGHT_SENPAVGWEIGHT         *       (3 << 2)

; bits in NVALUERECIPROCAL and LVTNVALUERECIPROCAL register
NVALUERECIPROCAL_SENNRN         *       (255 << 0)
NVALUERECIPROCAL_SENPRN         *       (255 << 8)
NVALUERECIPROCAL_SENNGAIN       *       ( 15 << 16)
NVALUERECIPROCAL_SENPGAIN       *       ( 15 << 20)

; bits in IRQ registers (IRQSTATUS_RAW, IRQSTATUS, IRQENABLE_SET, IRQENABLE_CLR)
SRIRQ_MCUDISABLEACK             *       (1 << 0)
SRIRQ_MCUBOUNDS                 *       (1 << 1)
SRIRQ_MCUVALID                  *       (1 << 2)
SRIRQ_MCUACCUM                  *       (1 << 3)

; bits in SENERROR register
SENERROR_SENERROR               *       (255 << 0)
SENERROR_AVGERROR               *       (255 << 8)

; bits in ERRCONFIG register
ERRCONFIG_ERRMINLIMIT           *       (255 << 0)
ERRCONFIG_ERRMAXLIMIT           *       (255 << 8)
ERRCONFIG_ERRWEIGHT             *       (7 << 16)
ERRCONFIG_VPBOUNDSINTENABLE     *       (1 << 22)
ERRCONFIG_VPBOUNDSINTSTATENA    *       (1 << 23)
ERRCONFIG_IDLEMODE              *       (3 << 24)
ERRCONFIG_IDLEMODE_FORCE        *       (0 << 24)
ERRCONFIG_IDLEMODE_NONE         *       (1 << 24)
ERRCONFIG_IDLEMODE_SMART        *       (2 << 24)
ERRCONFIG_IDLEMODE_SMART_WKUP   *       (3 << 24)
ERRCONFIG_IDLEMODE_SHIFT        *       24
ERRCONFIG_IDLEMODE_WIDTH        *       2
ERRCONFIG_WAKEUPENABLE          *       (1 << 26)


; eFuse registers containing SmartReflex parameters - relative to L4_CTRL_MODULE_CORE

CONTROL_STATUS                  *       &0134   ; contains DEVICE_TYPE [8:6]
CONTROL_STD_FUSE_OPP_VDD_MM_0   *       &0194
CONTROL_STD_FUSE_OPP_VDD_MM_1   *       &0198
CONTROL_STD_FUSE_OPP_VDD_MM_2   *       &019C
CONTROL_STD_FUSE_OPP_VDD_MM_3   *       &01A0
CONTROL_STD_FUSE_OPP_VDD_MM_4   *       &01A4
CONTROL_STD_FUSE_OPP_VDD_MM_5   *       &01A8
CONTROL_STD_FUSE_OPP_VDD_MPU_0  *       &01AC
CONTROL_STD_FUSE_OPP_VDD_MPU_1  *       &01B0
CONTROL_STD_FUSE_OPP_VDD_MPU_2  *       &01B4
CONTROL_STD_FUSE_OPP_VDD_MPU_3  *       &01B8
CONTROL_STD_FUSE_OPP_VDD_MPU_4  *       &01BC
CONTROL_STD_FUSE_OPP_VDD_MPU_5  *       &01C0
CONTROL_STD_FUSE_OPP_VDD_MPU_6  *       &01C4
CONTROL_STD_FUSE_OPP_VDD_MPU_7  *       &01C8
CONTROL_STD_FUSE_OPP_VDD_CORE_0 *       &01CC
CONTROL_STD_FUSE_OPP_VDD_CORE_1 *       &01D0
CONTROL_STD_FUSE_OPP_VDD_CORE_2 *       &01D4
CONTROL_STD_FUSE_OPP_VDD_CORE_3 *       &01D8
CONTROL_STD_FUSE_OPP_VDD_CORE_4 *       &01DC
CONTROL_STD_FUSE_OPP_BGAP_MM    *       &01E0
CONTROL_STD_FUSE_OPP_BGAP_MPU   *       &01E4
CONTROL_STD_FUSE_OPP_BGAP_CORE  *       &01E8
CONTROL_STD_FUSE_OPP_BGAP_MPU23 *       &01EC

CONTROL_STD_FUSE_DIE_ID_0       *       &0200
CONTROL_ID_CODE                 *       &0204
CONTROL_STD_FUSE_DIE_ID_1       *       &0208
CONTROL_STD_FUSE_DIE_ID_2       *       &020C
CONTROL_STD_FUSE_DIE_ID_3       *       &0210
CONTROL_STD_FUSE_PROD_ID        *       &0214
CONTROL_STD_FUSE_CONF_ID_0      *       &0218
CONTROL_STD_FUSE_CONF_ID_1      *       &021C
CONTROL_STD_FUSE_MPK_0          *       &0220
CONTROL_STD_FUSE_MPK_1          *       &0224
CONTROL_STD_FUSE_MPK_2          *       &0228
CONTROL_STD_FUSE_MPK_3          *       &022C
CONTROL_STD_FUSE_MPK_4          *       &0230
CONTROL_STD_FUSE_MPK_5          *       &0234
CONTROL_STD_FUSE_MPK_6          *       &0238
CONTROL_STD_FUSE_MPK_7          *       &023C

CONTROL_STD_FUSE_OPP_VDD_MM_LVT_0       *       &0240
CONTROL_STD_FUSE_OPP_VDD_MM_LVT_1       *       &0244
CONTROL_STD_FUSE_OPP_VDD_MM_LVT_2       *       &0248
CONTROL_STD_FUSE_OPP_VDD_MM_LVT_3       *       &024C
CONTROL_STD_FUSE_OPP_VDD_MM_LVT_4       *       &0250
CONTROL_STD_FUSE_OPP_VDD_MM_LVT_5       *       &0254

CONTROL_STD_FUSE_OPP_VDD_MPU_LVT_0      *       &0258
CONTROL_STD_FUSE_OPP_VDD_MPU_LVT_1      *       &025C
CONTROL_STD_FUSE_OPP_VDD_MPU_LVT_2      *       &0260
CONTROL_STD_FUSE_OPP_VDD_MPU_LVT_3      *       &0264
CONTROL_STD_FUSE_OPP_VDD_MPU_LVT_4      *       &0268
CONTROL_STD_FUSE_OPP_VDD_MPU_LVT_5      *       &026C
CONTROL_STD_FUSE_OPP_VDD_MPU_LVT_6      *       &0270
CONTROL_STD_FUSE_OPP_VDD_MPU_LVT_7      *       &0274

; OMAP54xx OPP names (and correlated fuse names)
OMAP54XX_CONTROL_FUSE_MM_OPPLOW         *       CONTROL_STD_FUSE_OPP_VDD_MM_1
OMAP54XX_CONTROL_FUSE_MM_OPPNOM         *       CONTROL_STD_FUSE_OPP_VDD_MM_2
OMAP54XX_CONTROL_FUSE_MM_OPPOD          *       CONTROL_STD_FUSE_OPP_VDD_MM_3
OMAP54XX_CONTROL_FUSE_MM_LVT_OPPLOW     *       CONTROL_STD_FUSE_OPP_VDD_MM_LVT_1
OMAP54XX_CONTROL_FUSE_MM_LVT_OPPNOM     *       CONTROL_STD_FUSE_OPP_VDD_MM_LVT_2
OMAP54XX_CONTROL_FUSE_MM_LVT_OPPOD      *       CONTROL_STD_FUSE_OPP_VDD_MM_LVT_3

OMAP54XX_CONTROL_FUSE_MPU_OPPLOW        *       CONTROL_STD_FUSE_OPP_VDD_MPU_1
OMAP54XX_CONTROL_FUSE_MPU_OPPNOM        *       CONTROL_STD_FUSE_OPP_VDD_MPU_2
OMAP54XX_CONTROL_FUSE_MPU_OPPHIGH       *       CONTROL_STD_FUSE_OPP_VDD_MPU_4
OMAP54XX_CONTROL_FUSE_MPU_OPPSB         *       CONTROL_STD_FUSE_OPP_VDD_MPU_5
OMAP54XX_CONTROL_FUSE_MPU_LVT_OPPLOW    *       CONTROL_STD_FUSE_OPP_VDD_MPU_LVT_1
OMAP54XX_CONTROL_FUSE_MPU_LVT_OPPNOM    *       CONTROL_STD_FUSE_OPP_VDD_MPU_LVT_2
OMAP54XX_CONTROL_FUSE_MPU_LVT_OPPHIGH   *       CONTROL_STD_FUSE_OPP_VDD_MPU_LVT_4
OMAP54XX_CONTROL_FUSE_MPU_LVT_OPPSB     *       CONTROL_STD_FUSE_OPP_VDD_MPU_LVT_5

OMAP54XX_CONTROL_FUSE_CORE_OPPLOW       *       CONTROL_STD_FUSE_OPP_VDD_CORE_0
OMAP54XX_CONTROL_FUSE_CORE_OPPNOM       *       CONTROL_STD_FUSE_OPP_VDD_CORE_2

; CPU die temperature related register - relative to L4_CTRL_MODULE_CORE
CONTROL_TEMP_SENSOR_MPU                 *       &032C
CONTROL_BANDGAP_MASK                    *       &0380


; IRQs
SR1_IRQ                         *       OMAP54XX_IRQ_SMARTREFLEX_MPU
SR2_IRQ                         *       OMAP54XX_IRQ_SMARTREFLEX_CORE
SR3_IRQ                         *       OMAP54XX_IRQ_SMARTREFLEX_MM


; Fixed values from Linux sources (see also OMAP543x TRM ch. 3.8.3.2.6)
SR54x_ACCUMDATA                 * &1F4 ; 5ms accumulator time window
SR54x_SENNAVGWEIGHT             * 1
SR54x_SENPAVGWEIGHT             * 1
SR54x_ERRWEIGHT                 * 4    ; 1280 us
SR54x_ERRMAXLIMIT               * 2    ; 1.6 %


; OPP table format for the SmartReflex driver
                                ^ 0
SR54x_OPPTbl_MHz                # 2 ; Max MHz value for this voltage
SR54x_OPPTbl_VDD                # 1 ; Required VDD value, in VDD1_VSEL format
SR54x_OPPTbl_CLKOUT_M2          # 1 ; Required CLKOUT_M2 value
SR54x_OPPTbl_NVALUERECIPROCAL   # 4 ; Required NVALUERECIPROCAL value
SR54x_OPPTbl_NVALUERECIPROCAL2  # 4 ; Required LVTNVALUERECIPROCAL value
SR54x_OPPTbl_ERRCONFIG          # 3 ; Required SR ERRCONFIG value (bits 0-18)
SR54x_OPPTbl_ERRGAIN            # 1 ; Required VP ERRGAIN value
SR54x_OPPTbl_DPLL_VAL           # 4 ; CM_CLKSEL_DPLL_MPU value
SR54x_OPPTbl_Size               # 0 ; Size of each entry

SR54x_OPPTbl_Format     *       2 ; Format number as returned by SR54x_Override

SR54x_OPPTbl_Max        *       5 ; Max number of entries we support

; Workspace
                        ^ 0, a1
; Public bits
SR54xDevice             # HALDevice_CPUClk_Size_0_2 ; support API 0.2
; Private bits
SR54xWorkspace          # 4 ; HAL workspace pointer
SR54xNewSpeed           # 4 ; Re-entrancy flag. -1 if idle, desired table idx if in process of
                            ; changing CPU speed. Allows SR54x_Get to finish changing the speed
                            ; if it gets called in the middle of a change. (Note somewhat
                            ; redundant since SR54x code currently avoids re-entrancy)
SR54xCurSpeed           # 4 ; Current table idx
SR54xOPPTblSize         # 4 ; Number of entries in table
SR54xOPPTbl             # SR54x_OPPTbl_Size * SR54x_OPPTbl_Max ; OPP table
SR54x_DeviceSize        * :INDEX: @

SR54x_WorkspaceSize     * SR54x_DeviceSize


        ] ; __HAL_SR54X_HDR__

        END
