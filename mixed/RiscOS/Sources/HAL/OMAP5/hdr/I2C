; Copyright 2015 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

        [       :LNOT: :DEF: __HAL_I2C_HDR__
        GBLL    __HAL_I2C_HDR__

        GET     hdr.irqids543x

; I2C registers - relative to L4_I2C1, L4_I2C2, etc.
I2C_REVNB_LO            *       &00
I2C_REVNB_HI            *       &04
I2C_SYSC                *       &10
I2C_IRQSTATUS_RAW       *       &24
I2C_IRQSTATUS           *       &28
I2C_IRQENABLE_SET       *       &2C
I2C_IRQENABLE_CLR       *       &30
I2C_WE                  *       &34
I2C_DMARXENABLE_SET     *       &38
I2C_DMATXENABLE_SET     *       &3C
I2C_DMARXENABLE_CLR     *       &40
I2C_DMATXENABLE_CLR     *       &44
I2C_DMARXWAKE_EN        *       &48
I2C_DMATXWAKE_EN        *       &4C
I2C_SYSS                *       &90
I2C_BUF                 *       &94
I2C_CNT                 *       &98
I2C_DATA                *       &9C
I2C_CON                 *       &A4
I2C_OA                  *       &A8
I2C_SA                  *       &AC
I2C_PSC                 *       &B0
I2C_SCLL                *       &B4
I2C_SCLH                *       &B8
I2C_SYSTEST             *       &BC
I2C_BUFSTAT             *       &C0
I2C_OA1                 *       &C4
I2C_OA2                 *       &C8
I2C_OA3                 *       &CC
I2C_ACTOA               *       &D0
I2C_SBLOCK              *       &D4

; bits in I2C_SYSC (system configuration register)
I2C_SYSC_AUTOIDLE       *       (1 << 0)
I2C_SYSC_SRST           *       (1 << 1) ; soft reset
I2C_SYSC_ENAWAKEUP      *       (1 << 2)
I2C_SYSC_IDLEMODE_FORCE *       (0 << 3) ; Force Idle mode
I2C_SYSC_IDLEMODE_NONE  *       (1 << 3) ; No Idle mode
I2C_SYSC_IDLEMODE_SMART *       (2 << 3) ; Smart Idle mode
I2C_SYSC_IDLEMODE_SMWUP *       (3 << 3) ; smartidle_wakeup
I2C_SYSC_CLKACTIVITY_0  *       (0 << 8) ; both clocks can be cut off
I2C_SYSC_CLKACTIVITY_1  *       (1 << 8) ; only OCP clock must be kept active
I2C_SYSC_CLKACTIVITY_2  *       (2 << 8) ; only system clock must be kept active
I2C_SYSC_CLKACTIVITY_3  *       (3 << 8) ; both clocks must be kept active

; interrupt bits (IRQSTATUS, IRQSTATUS_RAW, IRQENABLE_SET, IRQENABLE_CLR, WE)
I2C_INT_AL              *       (1 << 0)  ; Arbitration Lost
I2C_INT_NACK            *       (1 << 1)  ; No ACKnowledge
I2C_INT_ARDY            *       (1 << 2)  ; Access ready
I2C_INT_RRDY            *       (1 << 3)  ; Receive data ready
I2C_INT_XRDY            *       (1 << 4)  ; Transmit data ready
I2C_INT_GC              *       (1 << 5)  ; General Call address detected
I2C_INT_STC             *       (1 << 6)  ; Start condition
I2C_INT_AERR            *       (1 << 7)  ; Access Error
I2C_INT_BF              *       (1 << 8)  ; Bus Free
I2C_INT_AAS             *       (1 << 9)  ; Address as slave recognized
I2C_INT_XUDF            *       (1 << 10) ; Transmit underflow
I2C_INT_ROVR            *       (1 << 11) ; Receive overrun
I2C_INT_BB              *       (1 << 12) ; Bus Busy (only IRQSTATUS*)
I2C_INT_RDR             *       (1 << 13) ; Receive draining
I2C_INT_XDR             *       (1 << 14) ; Transmit draining

; bits in I2C_SYSS (system status register)
I2C_SYSS_RDONE          *       (1 << 0)  ; Reset done bit

; bits in I2C_CON (configuration register)
I2C_CON_STT             *       (1 << 0)  ; Start condition (master only)
I2C_CON_STP             *       (1 << 1)  ; Stop condition (master only)
I2C_CON_XOA3            *       (1 << 4)  ; eXpand Own Address 3
I2C_CON_XOA2            *       (1 << 5)  ; eXpand Own Address 2
I2C_CON_XOA1            *       (1 << 6)  ; eXpand Own Address 1
I2C_CON_XOA0            *       (1 << 7)  ; eXpand Own Address 0
I2C_CON_XSA             *       (1 << 8)  ; eXpand Slave Address
I2C_CON_TRX             *       (1 << 9)  ; Transmitter/Receiver mode (master only)
I2C_CON_MST             *       (1 << 10) ; Master mode
I2C_CON_STB             *       (1 << 11) ; Start byte mode (master only)
I2C_CON_OPMODE_FS       *       (0 << 12) ; Fast/Standard mode
I2C_CON_OPMODE_HS       *       (1 << 12) ; High Speed mode
I2C_CON_OPMODE_SCCB     *       (2 << 12) ; SCCB mode
I2C_CON_EN              *       (1 << 15) ; I2C module ENable

; bits in I2C_BUF (buffer configuration register)
I2C_BUF_TXTRSH          *       (0x3F << 0)     ; threshold value for TX FIFO
I2C_BUF_TXTRSH_SHIFT    *       0
I2C_BUF_TXFIFO_CLR      *       (1 << 6)        ; TX FIFO clear
I2C_BUF_XDMA_EN         *       (1 << 7)        ; TX DMA channel enable
I2C_BUF_RXTRSH          *       (0x3F << 8)     ; threshold value for RX FIFO
I2C_BUF_RXTRSH_SHIFT    *       8
I2C_BUF_RXFIFO_CLR      *       (1 << 14)       ; RX FIFO clear
I2C_BUF_RDMA_EN         *       (1 << 15)       ; RX DMA channel enable

; bits in I2C_BUFSTAT (buffer status register)
I2C_BUFSTAT_TXSTAT      *       (0x3F << 0)     ; TX buffer status
I2C_BUFSTAT_TXSTAT_SHIFT *      0
I2C_BUFSTAT_RXSTAT      *       (0x3F << 8)     ; RX buffer status
I2C_BUFSTAT_RXSTAT_SHIFT *      8
I2C_BUFSTAT_FIFODEPTH   *       (3 << 14)       ; Internal FIFO buffers depth
I2C_BUFSTAT_FIFODEPTH8  *       (0 << 14)       ; 8 bytes
I2C_BUFSTAT_FIFODEPTH16 *       (1 << 14)       ; 16 bytes
I2C_BUFSTAT_FIFODEPTH32 *       (2 << 14)       ; 32 bytes
I2C_BUFSTAT_FIFODEPTH64 *       (3 << 14)       ; 64 bytes


; Interrupt numbers
I2C1_IRQ        *       OMAP54XX_IRQ_I2C1
I2C2_IRQ        *       OMAP54XX_IRQ_I2C2
I2C3_IRQ        *       OMAP54XX_IRQ_I2C3
I2C4_IRQ        *       OMAP54XX_IRQ_I2C4
I2C5_IRQ        *       OMAP54XX_IRQ_I2C5

; I2C transfer block/hardware info

                ^       0
I2C_HW          #       4 ; Address of I2C hardware regs
I2C_XStart      #       4 ; iic_transfer array ptr (null for idle channel)
I2C_XEnd        #       4 ; array end ptr (inclusive)
I2C_XCurrent    #       4 ; Current iic_transfer ptr
I2C_XBytes      #       4 ; Bytes transferred in stage so far
I2CBlockSize    #       0

        ] ; __HAL_I2C_HDR__

        END
