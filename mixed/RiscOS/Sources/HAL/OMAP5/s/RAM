; Copyright 2015 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;
; Using the DMA controller to clear RAM is much faster than doing it with the CPU
; (with the cache/write buffer off, at least)

                GBLL    Use_DMA_Clear
Use_DMA_Clear   SETL    {TRUE}

init_ram
        ; nothing to do here: MLO (x-loader) has already done it

        ; Done!
        MOV     pc, lr



; a1 <= Highest physical address in RAM +1
get_end_of_ram
        ; ToDo: address range extension (we can have upto 4 GiB SDRAM!)
        LDR     v1, =DMM_Base
        ; Check all DMM_LISA_MAP_i registers (starting with highest priority)
        LDR     a1, =DMM_LISA_MAP_3
        LDR     a4, =DMM_LISA_MAP_i_SDRC_ADDRSPC
05
        LDR     a2, =DMM_LISA_MAP_i_SDRC_MAP
        LDR     a3, [v1, a1]
        ANDS    a2, a3, a2      ; MAP_x used ?
        BEQ     %FT10
        AND     a2, a3, a4      ; check ADDRSPC
        CMP     a2, #DMM_LISA_MAP_i_SDRC_ADDRSPC_SDRAM
        BEQ     %FT15
10
        ; Next DMM_LISA_MAP_x
        CMP     a1, #DMM_LISA_MAP_0
        SUBHI   a1, a1, #4
        BHI     %BT05

        ; This should not happen: no RAM found
12
        B       %BT12

15
        ; Check DMM_LISA_MAP_x
        LDR     a2, =DMM_LISA_MAP_i_SYS_SIZE
        AND     a2, a3, a2
        MOV     a2, a2, LSR #DMM_LISA_MAP_i_SYS_SIZE_SHIFT
        LDR     a4, =(16 * 1024 * 1024) ; 16 MiB smallest size
        MOV     a4, a4, LSL a2          ; final size
        AND     a2, a3, #DMM_LISA_MAP_i_SYS_ADDR
        ; Check for overflow of address range
        ADDS    a1, a4, a2
        LDRCS   a1, =((4096 - 16) << 20)        ; round down to next 16 MiB boundary
        MOV     pc, lr


clear_ram
        ; Clear everything up to a1
        ; Can clobber all regs except v8 & sb
        ; If DMA clear is disabled, the clear areas must be multiples of 128 bytes in length.
        ; Else they must be multiples of 4 bytes.
 [ Use_DMA_Clear
        ; Reset the DMA controller
        LDR     v5, =L4_DMA_SYSTEM
   [ :LNOT: Use_DMA_Copy ; Already done if using DMA copy
;       MOV     v1, #2          ; this bit is reserved on OMAP543x (!?)
;       STR     v1, [v5, #DMA4_OCP_SYSCONFIG]
5
        LDR     v1, [v5, #DMA4_SYSSTATUS]
        TST     v1, #DMA4_SYSSTATUS_RESETDONE
        BEQ     %BT5
        ; Set a sensible FIFO budget (as per SDMACReset)
        LDR     a2, =((1 << DMA4_GCR_ARBITRAION_RATE_SHIFT) + 128)
        STR     a2, [v5, #DMA4_GCR]
        ; Configure channel 0 for the right settings
        ADD     v5, v5, #DMA4_i
        MOV     v1, #0          ; Disable channel linking
        STR     v1, [v5, #DMA4_CLNK_CTRLi]
        MOV     v1, #DMA4_CICR_LAST_IE
        STR     v1, [v5, #DMA4_CICRi] ; frame end interrupt enabled
        MOV     v1, #1
        STR     v1, [v5, #DMA4_CFNi] ; 1 frame
   |
        ADD     v5, v5, #DMA4_i
   ] ; :LNOT: Use_DMA_Copy
        LDR     v1, =(DMA4_CSDP_DATA_TYPE_32BIT + DMA4_CSDP_DST_BURST_EN_64B + DMA4_CSDP_WRITE_MODE_LAST_WRNP) ; 32bit elements, 64 byte bursts, last write non-posted
        STR     v1, [v5, #DMA4_CSDPi]
        ; Clear colour of 0. Although the clear colour register only holds a 24 bit value,
        ; the MSB (for 4-byte DMA) is always written as 0.
        MOV     v1, #0
        STR     v1, [v5, #DMA4_COLORi]
 ]
        MOV     v2, a1
        LDR     v1, =DMM_Base

        ; Check all DMM_LISA_MAP_i registers (starting with highest priority)
        LDR     a1, =DMM_LISA_MAP_3
        LDR     a4, =DMM_LISA_MAP_i_SDRC_ADDRSPC
05
        LDR     a2, =DMM_LISA_MAP_i_SDRC_MAP
        LDR     a3, [v1, a1]
        ANDS    a2, a3, a2      ; MAP_x used ?
        BEQ     %FT10
        AND     a2, a3, a4      ; check ADDRSPC
        CMP     a2, #DMM_LISA_MAP_i_SDRC_ADDRSPC_SDRAM
        BEQ     %FT15
10
        ; Next DMM_LISA_MAP_x
        CMP     a1, #DMM_LISA_MAP_0
        SUBHI   a1, a1, #4
        BHI     %BT05

        ; This should not happen: no RAM found
12
        B       %BT12

15
        ; Check DMM_LISA_MAP_x
        LDR     a2, =DMM_LISA_MAP_i_SYS_SIZE
        AND     a2, a3, a2
        MOV     a2, a2, LSR #DMM_LISA_MAP_i_SYS_SIZE_SHIFT
        LDR     a4, =(16 * 1024 * 1024) ; 16 MiB smallest size
        MOV     a4, a4, LSL a2          ; final size
        AND     a2, a3, #DMM_LISA_MAP_i_SYS_ADDR
        SUB     a1, v2, a2
        CMP     a1, a4
        MOVHI   a1, a4  ; Work out how much we're meant to be clearing
        CMP     a1, #0
        BEQ     %FT30

 [ Use_DMA_Clear
        ; To keep things simple we split the transfer into chunks small enough to fit inside
        ; one frame (64MB) and wait for each one to complete
        ; This means we don't have to worry about the code breaking if the clear area isn't
        ; MB aligned (or 128 byte aligned, as the original code assumed)
        MOV     a1, a1, LSR #2 ; Number of elements remaining
        MOV     a3, #&1000000 ; Max elements per transfer+1 (not quite 64MB!)
40
        LDR     v1, [v5, #DMA4_CSRi]
        STR     v1, [v5, #DMA4_CSRi] ; Clear status register
        CMP     a1, a3
        MOVLT   v1, a1
        SUBGE   v1, a3, #1
        STR     v1, [v5, #DMA4_CENi]
        SUB     a1, a1, v1
        STR     a2, [v5, #DMA4_CDSAi]
        ADD     a2, a2, v1, LSL #2
        LDR     a4, =(DMA4_CCR_SEL_SRC_DST_SYNC + DMA4_CCR_CONST_FILL_ENABLE + DMA4_CCR_DST_AMODE_POST_INC + DMA4_CCR_ENABLE)
        STR     a4, [v5, #DMA4_CCRi] ; Enable channel
        ; Use the transfer size as a rough timer for how long we should wait before
        ; we start hammering the status register
50
        SUBS    v1, v1, #256
        BGT     %BT50
50
        LDR     v1, [v5, #DMA4_CSRi]
        TST     v1, #DMA4_CSR_LAST
        BEQ     %BT50
        ; Make doubly sure that it's finished by checking WR_ACTIVE/RD_ACTIVE
50
        LDR     v1, [v5, #DMA4_CCRi]
        TST     v1, #(DMA4_CCR_RD_ACTIVE + DMA4_CCR_WR_ACTIVE)
        BNE     %BT50
        CMP     a1, #0
        BNE     %BT40
 |
        MOV     a3, #0
        MOV     a4, #0
        MOV     v1, #0
        MOV     v3, #0
        MOV     v4, #0
        MOV     v5, #0
        MOV     sp, #0
        MOV     ip, #0
20
        STMIA   a2!,{a3,a4,v1,v3,v4,v5,sp,ip} ; 32 bytes
        STMIA   a2!,{a3,a4,v1,v3,v4,v5,sp,ip} ; 64 bytes
        STMIA   a2!,{a3,a4,v1,v3,v4,v5,sp,ip} ; 96 bytes
        STMIA   a2!,{a3,a4,v1,v3,v4,v5,sp,ip} ; 128 bytes
        SUBS    a1, a1, #128
        BGT     %BT20
 ]

30
 [ Use_DMA_Clear
        ; Invalidate the I-cache & BTC, just in case
        ; (D cache & L2 cache should be turned off, so no need to worry about them)
        MOV     a1, #0
        MCR     p15, 0, a1, c7, c5, 0
        MCR     p15, 0, a1, c7, c5, 6
        DSB     SY
        ISB     SY
 ]
        MOV     pc, lr

        END
