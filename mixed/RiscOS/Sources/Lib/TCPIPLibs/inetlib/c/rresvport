/* Copyright 1997 Acorn Computers Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* -*-C-*-
 *
 * $Header: /home/rool/cvsroot/mixed/RiscOS/Sources/Lib/TCPIPLibs/inetlib/c/rresvport,v 4.1 1997/03/06 14:27:48 rbuckley Exp $
 * $Source: /home/rool/cvsroot/mixed/RiscOS/Sources/Lib/TCPIPLibs/inetlib/c/rresvport,v $
 *
 * Copyright (c) 1995 Acorn Computers Ltd., Cambridge, England
 *
 * :RCS Log discontinued:
 * Revision 1.1  95/06/01  15:38:00  kwelton
 * Initial revision
 *
 */
#include "sys/errno.h"
#include "sys/types.h"
#include "sys/socket.h"

#include "netinet/in.h"

#include "inetlib.h"

extern int socketclose(int);

int rresvport(int *alport)
{
    struct sockaddr_in sin;
    int s;

    sin.sin_family = AF_INET;
    sin.sin_addr.s_addr = INADDR_ANY;
    s = socket(AF_INET, SOCK_STREAM, 0);
    if (s < 0)
	return (-1);

    for (;;)
    {
	sin.sin_port = htons((u_short)*alport);
	if( bind(s, (struct sockaddr *)&sin, sizeof(sin)) >= 0 )
	    return (s);

	if( errno != EADDRINUSE )
	{
	    (void)socketclose(s);
	    return (-1);
	}

	(*alport)--;
	if( *alport == IPPORT_RESERVED/2 )
	{
	    (void)socketclose(s);
	    errno = EAGAIN;
	    return (-1);
	}
    }
}

/* EOF rresvport.c */
