/*
 * Copyright (c) 2012, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "kernel.h"
#include "swis.h"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>

#include "zlib.h"

/* Convert SWI errors (which should only happen if the module is missing?) into
   a suitable zlib error */

#define HANDLE_ERROR_PTR(ERR,RET) \
    if(ERR) \
        RET = NULL;

#define HANDLE_ERROR_ZLIB(ERR,RET) \
    if(ERR) \
        RET = Z_VERSION_ERROR;

#define HANDLE_ERROR(ERR,RET,ERRORVAL) \
    if(ERR) \
        RET = ERRORVAL;

const char *zlibVersion(void)
{
    const char *ver;
    _kernel_oserror *e = _swix(ZLib_Version,_OUT(0),&ver);
    HANDLE_ERROR_PTR(e,ver)
    return ver;
}

int deflateInit_(z_streamp strm, int level, const char *version, int stream_size)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_DeflateInit,_INR(0,3)|_OUT(0),strm,level,version,stream_size,&ret);
    HANDLE_ERROR_ZLIB(e,ret)
    return ret;
}

int deflate(z_streamp strm, int flush)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_Deflate,_INR(0,1)|_OUT(0),strm,flush,&ret);
    HANDLE_ERROR_ZLIB(e,ret)
    return ret;
}

int deflateEnd(z_streamp strm)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_DeflateEnd,_IN(0)|_OUT(0),strm,&ret);
    HANDLE_ERROR_ZLIB(e,ret)
    return ret;
}

int inflateInit_(z_streamp strm, const char *version, int stream_size)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_InflateInit,_INR(0,2)|_OUT(0),strm,version,stream_size,&ret);
    HANDLE_ERROR_ZLIB(e,ret)
    return ret;
}

int inflate(z_streamp strm, int flush)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_Inflate,_INR(0,1)|_OUT(0),strm,flush,&ret);
    HANDLE_ERROR_ZLIB(e,ret)
    return ret;
}

int inflateEnd(z_streamp strm)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_InflateEnd,_IN(0)|_OUT(0),strm,&ret);
    HANDLE_ERROR_ZLIB(e,ret)
    return ret;
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_DeflateInit2,_INR(0,7)|_OUT(0),strm,level,method,windowBits,memLevel,strategy,version,stream_size,&ret);
    HANDLE_ERROR_ZLIB(e,ret)
    return ret;
}

int deflateSetDictionary(z_streamp strm, const Bytef *dictionary, uInt dictLength)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_DeflateSetDictionary,_INR(0,2)|_OUT(0),strm,dictionary,dictLength,&ret);
    HANDLE_ERROR_ZLIB(e,ret);
    return ret;
}

int deflateCopy(z_streamp dest, z_streamp source)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_DeflateCopy,_INR(0,1)|_OUT(0),dest,source,&ret);
    HANDLE_ERROR_ZLIB(e,ret);
    return ret;
}

int deflateReset(z_streamp strm)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_DeflateReset,_IN(0)|_OUT(0),strm,&ret);
    HANDLE_ERROR_ZLIB(e,ret);
    return ret;
}

int deflateParams(z_streamp strm, int level, int strategy)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_DeflateParams,_INR(0,2)|_OUT(0),strm,level,strategy,&ret);
    HANDLE_ERROR_ZLIB(e,ret);
    return ret;
}

/* deflateTune: No SWI version */

/* deflateBound: No SWI version */

/* deflatePrime: No SWI version */

/* deflateSetHeader: No SWI version */

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_InflateInit2,_INR(0,3)|_OUT(0),strm,windowBits,version,stream_size,&ret);
    HANDLE_ERROR_ZLIB(e,ret)
    return ret;
}

int inflateSetDictionary(z_streamp strm, const Bytef *dictionary, uInt dictLength)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_InflateSetDictionary,_INR(0,2)|_OUT(0),strm,dictionary,dictLength,&ret);
    HANDLE_ERROR_ZLIB(e,ret)
    return ret;
}

int inflateSync(z_streamp strm)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_InflateSync,_IN(0)|_OUT(0),strm,&ret);
    HANDLE_ERROR_ZLIB(e,ret)
    return ret;
}

/* inflateCopy: No SWI version */

int inflateReset(z_streamp strm)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_InflateReset,_IN(0)|_OUT(0),strm,&ret);
    HANDLE_ERROR_ZLIB(e,ret)
    return ret;
}

/* inflateReset2: No SWI version */

/* inflatePrime: No SWI version */

/* inflateMark: No SWI version */

/* inflateGetHeader: No SWI version */

/* inflateBackInit: No SWI version */

/* inflateBack: No SWI version */

/* inflateBackEnd: No SWI version */

/* zlibCompileFlags: No SWI version */

/* compress, compress2, compressBound all implemented in compress.c */

/* uncompress implemented in uncompr.c */

gzFile gzopen(const char *path, const char *mode)
{
    /* Don't allow RLE to be used; the ZLib module will mistake it for a request to read/write RISC OS metadata
       We could escape or translate the R to something else, but simply banning it altogether is the safest option. */
    if(strchr(mode,'R'))
        return NULL;
    gzFile ret;
    _kernel_oserror *e = _swix(ZLib_GZOpen,_INR(0,1)|_OUT(0),path,mode,&ret);
    HANDLE_ERROR_PTR(e,ret)
    return ret;
}

/* gzdopen: No SWI version */

int gzbuffer(gzFile file, unsigned size)
{
    /* There's no SWI for this, but we can just return a failure code and code shouldn't get too upset */
    return -1;
}

/* gzsetparams: No SWI version */

int gzread(gzFile file, voidp buf, unsigned len)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_GZRead,_INR(0,2)|_OUT(0),file,buf,len,&ret);
    HANDLE_ERROR(e,ret,-1)
    return ret;
}

int gzwrite(gzFile file, voidpc buf, unsigned len)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_GZWrite,_INR(0,2)|_OUT(0),file,buf,len,&ret);
    HANDLE_ERROR(e,ret,0)
    return ret;
}

int gzprintf(gzFile file, const char *format, ...)
{
    /* There's no SWI for this, but it's easy enough to implement using the default 8K buffer size */
    int len;
    char buf[8192];
    va_list args;
    va_start(args,format);
    len = vsnprintf(buf,sizeof(buf),format,args);
    va_end(args);
    if((len <= 0) || (len >= sizeof(buf)))
        return 0;
    return gzwrite(file,buf,len);
}

int gzputs(gzFile file, const char *s)
{
    /* There's no SWI for this, but it's just a simple gzwrite() wrapper */
    return gzwrite(file,s,strlen(s));
}

char *gzgets(gzFile file, char *buf, int len)
{
    /* There's no SWI for this, but it's just a simple gzread() wrapper */
    char *c = buf;
    if((len < 1) || !file)
        return NULL;
    while(len > 1)
    {
        if(gzread(file,c,1) != 1)
        {
            /* EOF or error? */
            if(gzeof(file) == 1)
                break;
            return NULL;
        }
        if(*c++ == '\n')
            break;
        len--;
    }
    *c = 0;
    return buf;
}

int gzputc(gzFile file, int c)
{
    /* There's no SWI for this, but it's just a simple gzwrite() wrapper */
    if(gzwrite(file,&c,1) != 1)
        return -1;
    return c;
}

int gzgetc(gzFile file)
{
    /* There's no SWI for this, but it's just a simple gzread() wrapper */
    char c;
    if(gzread(file,&c,1) != 1)
        return -1;
    return c;
}

/* gzungetc: No SWI version, and not easy for us to emulate it */

int gzflush(gzFile file, int flush)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_GZFlush,_INR(0,1)|_OUT(0),file,flush,&ret);
    HANDLE_ERROR_ZLIB(e,ret)
    return ret;
}

z_off_t gzseek(gzFile file,z_off_t offset,int whence)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_GZSeek,_INR(0,2)|_OUT(0),file,offset,whence,&ret);
    HANDLE_ERROR(e,ret,-1)
    return ret;
}

int gzrewind(gzFile file)
{
    /* There's no SWI for this, but it's just a simple gzseek() wrapper */
    return gzseek(file,0,SEEK_SET);
}

z_off_t gztell(gzFile file)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_GZTell,_IN(0)|_OUT(0),file,&ret);
    HANDLE_ERROR(e,ret,-1)
    return ret;
}

int gzeof(gzFile file)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_GZEOF,_IN(0)|_OUT(0),file,&ret);
    HANDLE_ERROR(e,ret,0)
    return ret;
}

/* gzdirect: No SWI version */

int gzclose(gzFile file)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_GZClose,_IN(0)|_OUT(0),file,&ret);
    HANDLE_ERROR_ZLIB(e,ret)
    return ret;
}

int gzclose_r(gzFile file)
{
    return gzclose(file);
}

int gzclose_w(gzFile file)
{
    return gzclose(file);
}

/* gzgetheader: No SWI version */

/* gzputheader: No SWI version */

const char *gzerror(gzFile file, int *errnum)
{
    const char *ret;
    _kernel_oserror *e = _swix(ZLib_GZError,_IN(0)|_OUTR(0,1),file,&ret,errnum);
    if(e)
    {
        /* I guess we can just do this if the SWI returns an error */
        ret = e->errmess;
        *errnum = Z_VERSION_ERROR;
    }
    return ret;
}

/* gzclearerr: No SWI version */

uLong adler32(uLong adler, const Bytef *buf, uInt len)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_Adler32,_INR(0,2)|_OUT(0),adler,buf,buf+len,&ret);
    /* Not much we can do here if there's an error */
    HANDLE_ERROR(e,ret,0) 
    return (uLong) ret;
}

/* adler32_combine: No SWI version */

uLong crc32(uLong crc, const Bytef *buf, uInt len)
{
    int ret;
    _kernel_oserror *e = _swix(ZLib_CRC32,_INR(0,2)|_OUT(0),crc,buf,buf+len,&ret);
    /* Not much we can do here if there's an error */
    HANDLE_ERROR(e,ret,0) 
    return (uLong) ret;
}

/* crc32_combine: No SWI version */
