; Copyright 2011 Castle Technology Ltd
;
; Licensed under the Apache License, Version 2.0 (the "License");
; you may not use this file except in compliance with the License.
; You may obtain a copy of the License at
;
;     http://www.apache.org/licenses/LICENSE-2.0
;
; Unless required by applicable law or agreed to in writing, software
; distributed under the License is distributed on an "AS IS" BASIS,
; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
; See the License for the specific language governing permissions and
; limitations under the License.
;

; Assembler version of port.c, for use with HAL version of the USB drivers
; See also usbhal.c for some bits which were easier done in C.

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr.usbhal

sb              RN      9

        AREA    |C$$code|, CODE, READONLY

        ; External interfaces to HAL code
        IMPORT  USBHAL_WorkspaceOffset
        IMPORT  HAL_CounterDelay
        IMPORT  snprintf
        IMPORT  printf

        ; Internal interfaces to rest of HAL USB code
        EXPORT  spltty
        EXPORT  splx
        EXPORT  splbio
        EXPORT  delay
        EXPORT  selrecord
        EXPORT  selwakeup
        EXPORT  config_deactivate
        EXPORT  uiomove
        EXPORT  psignal
        EXPORT  kthread_create
        EXPORT  kthread_create1
        EXPORT  kthread_exit
        EXPORT  device_probe_and_attach
        EXPORT  ratecheck
        EXPORT  malloc_contig
        EXPORT  free_contig
        EXPORT  min
        EXPORT  logprintf
        EXPORT  cold
        EXPORT  hz
        EXPORT  _snprintf
        EXPORT  malloc
        EXPORT  free

        IMPORT  HALHeap_GetArea
        IMPORT  HALHeap_GetAreaAligned
        IMPORT  HALHeap_FreeArea

cold
        DCD     0
hz
        DCD     1000

spltty
        MRS     a1, CPSR
        AND     a1, a1, #I32_bit
        MOV     pc, lr

splx
        TST     a1, #I32_bit
        MRSEQ   a2, CPSR
        BICEQ   a2, a2, #I32_bit
        MSREQ   CPSR_c, a2
        MOV     pc, lr

splbio
        MRS     a1, CPSR
        ORR     a2, a1, #I32_bit
        AND     a1, a1, #I32_bit
        MSR     CPSR_c, a2
        MOV     pc, lr

delay
        B       HAL_CounterDelay

logprintf
        B       printf

kthread_create1
config_deactivate
uiomove
kthread_create
ratecheck
        MOV     a1, #0
selrecord
selwakeup
psignal
kthread_exit
device_probe_and_attach
        MOV     pc, lr

min
        CMP     a1, a2
        MOVGT   a1, a2
        MOV     pc, lr

_snprintf
        B       snprintf

malloc
        ; Note that this is a vanilla implementation, i.e. no M_ZERO support
        ; (but the usbdriver sources already deal with that)
        MOV     r1, r0
        LDR     r2, =USBHAL_WorkspaceOffset+USBHAL_WS_Heap_Normal
        LDR     r0, [sb, r2]
        B       HALHeap_GetArea

free
        MOV     r1, r0
        LDR     r2, =USBHAL_WorkspaceOffset+USBHAL_WS_Heap_Normal
        LDR     r0, [sb, r2]
        B       HALHeap_FreeArea

malloc_contig
        ; R0 = length
        ; R1 = alignment
        ADD     r0, r0, #3 ; Make size multiple of 4 for easy memset
        BIC     r0, r0, #3
        Push    "r0,lr"
        LDR     r3, =USBHAL_WorkspaceOffset+USBHAL_WS_Heap_NCNB
        MOV     r2, r1
        MOV     r1, r0
        LDR     r0, [sb, r3]
        BL      HALHeap_GetAreaAligned
        Pull    "r1,lr"
        CMP     r0, #0
        MOVEQ   pc, lr
        ; Zero the memory
        MOV     ip, #0
10
        SUBS    r1, r1, #4
        STR     ip, [r0, r1]
        BGT     %BT10
        MOV     pc, lr

free_contig
        ; R0 = pointer to pointer
        LDR     r2, =USBHAL_WorkspaceOffset+USBHAL_WS_Heap_NCNB
        LDR     r1, [r0]
        LDR     r0, [sb, r2]
        B       HALHeap_FreeArea

        END
