/* Copyright 2011 Castle Technology Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/* Extra bits needed to allow us to compile the USB drivers as a static lib for
   linking with the HAL */
#ifdef USBHAL
__global_reg(6) void *hal_sb;

#include <sys/types.h>
#include <sys/device.h>

typedef struct {
	void (*cbfunc)(void *);
	void *param;
} usbhal_callback;

/* USBHAL workspace structure - must match Hdr.usbhal */
typedef struct {
	void *heap_normal; /* Heap structure for malloc & free */
	void *heap_ncnb; /* Heap structure for malloc_contig & free_contig */
	struct devicelist allbuses; /* List of registered buses */
	int usbbus_no; /* Next number to use */
	uint32_t monotonictime; /* Centisecond counter equivalent to OS_ReadMonotonicTime */
	struct callout *callouts; /* Head of callout list; i.e. the callout to execute next */
	uint32_t irqsema; /* nonzero whenever we're processing interrupts */
	struct callout *rediscover; /* re_discover callout */
	/* tsleep/wakeup stuff */
	void **t_handles;
	int *t_locks;
	int nhandles;
	/* Keyboard scan */
	uint32_t kbdflags; /* Sticky keyboard scan bits */
	/* Callbacks */
	usbhal_callback *callbacks; /* Array of callbacks, handled as circular buffer */
	int nextcb; /* Index of next callback to run */
	int numcb; /* Number of callbacks */
	int cbs_needed; /* True if callbacks need processing */
} usbhal_ws;

extern int USBHAL_WorkspaceOffset;
extern int USBHAL_OSentriesOffset;

#define USBHALWS ((usbhal_ws *)(((int)hal_sb)+((int)&USBHAL_WorkspaceOffset)))
#define OSentries ((int *)(((int)hal_sb)+((int)&USBHAL_OSentriesOffset)))

extern void HAL_IRQClear(int device);
#define riscos_irqclear HAL_IRQClear

/* Initialise workspace, heaps & core USB code */
extern void USBHAL_Init(void *heapbase,uint32_t heapsize,void *ncnbbase,uint32_t ncnbsize);

/* Process keyboard scan */
extern uint32_t USBHAL_KbdScan(void);

/* Process keyboard scan interrupt. Returns -1 if IRQ handled, or 'irq' if not. */
extern int USBHAL_KbdScanInterrupt(int irq);

/* Finish keyboard scan and shut everything down */
extern void USBHAL_Shutdown(void);

/* Callback interface */
extern void USBHAL_AddCallback(void (*cbfunc)(void *),void *param);
extern void USBHAL_RemoveCallback(void (*cbfunc)(void *),void *param);

#endif
