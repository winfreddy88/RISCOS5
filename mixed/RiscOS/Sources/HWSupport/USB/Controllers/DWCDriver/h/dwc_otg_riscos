/*
 * Copyright (c) 2012, RISC OS Open Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef DWC_OTG_HCD_RISCOS_H
#define DWC_OTG_HCD_RISCOS_H

#include <stdbool.h>

#include "dwc/driver/dwc_otg_driver.h"

struct dwc_otg_core_if;
struct dwc_otg_hcd;
struct dwc_otg_hcd_urb;

struct dwc_softc_xfer {
	struct usbd_xfer xfer; /* Base USBDriver struct */
};

struct dwc_softc_pipe {
	struct usbd_pipe pipe; /* Base USBDriver struct */

	void *dwc_priv; /* DWC endpoint handle */

	struct dwc_otg_hcd_urb *urb; /* DWC urb; one per pipe instead of one per xfer, since the BSD layer likes to manage urb/xfer scheduling itself */

	struct dwc_softc_xfer *xfer; /* Active xfer (i.e. the one that filled in the urb details) */

	usb_device_request_t *request; /* DMA buffer for control endpoint requests */
	dwc_dma_t dma_req; /* DMA addr of request */
};

/* Bus struct we register with USBDriver */
typedef struct dwc_softc {
	struct usbd_bus sc_bus; /* Base USBDriver struct */

	int device_number; /* Current IRQ device number (USB or MPHI) */
	int usb_device_number;
	int mphi_device_number;

	/* USBDriver bits */

	usbd_xfer_handle sc_intrxfer; /* Interrupt xfer for root hub; used to notify of port status changes */

	SIMPLEQ_HEAD(, usbd_xfer) sc_free_xfers; /* free xfers */

	u_int8_t sc_addr; /* Address assigned to us */
	u_int8_t sc_conf; /* Device configuration */
	char sc_vendor[16];		/* vendor string for root hub (doesn't get set anywhere?) */
	int sc_id_vendor;		/* vendor ID for root hub (doesn't get set anywhere?) */

	/* DWC bits */
	dwc_otg_device_t dwc_dev; /* DWC driver device struct */

	bool hcd_on; /* Is HCD initialised yet? */

	u_int32_t port; /* HCD port number */
} dwc_softc_t;

#define DWC_SOFTC_INTR_ENDPT 1

extern bool reclaim_fiq_vector;
extern bool own_fiq_vector;

extern _kernel_oserror *dwc_otg_riscos_init(const uint32_t *hw_base,const uint8_t *mphi_base,int usb_device_number,int mphi_device_number,dwc_softc_t *softc);
extern void dwc_otg_riscos_shutdown(dwc_softc_t *softc);

extern int dwc_otg_riscos_irq(dwc_softc_t *softc);

extern void dwc_otg_riscos_try_use_fiqs(dwc_softc_t *softc, bool need_to_claim);
extern void dwc_otg_riscos_release_fiq(dwc_softc_t *softc);

/* softc_root.c */

extern usbd_status softc_root_ctrl_transfer(usbd_xfer_handle);
extern usbd_status softc_root_ctrl_start(usbd_xfer_handle);
extern void softc_root_ctrl_abort(usbd_xfer_handle);
extern void softc_root_ctrl_close(usbd_pipe_handle);
extern void softc_root_ctrl_done(usbd_xfer_handle);

extern usbd_status softc_root_intr_transfer(usbd_xfer_handle);
extern usbd_status softc_root_intr_start(usbd_xfer_handle);
extern void softc_root_intr_abort(usbd_xfer_handle);
extern void softc_root_intr_close(usbd_pipe_handle);
extern void softc_root_intr_done(usbd_xfer_handle);

/* softc_device.c */

extern usbd_status softc_device_transfer(usbd_xfer_handle);
extern usbd_status softc_device_start(usbd_xfer_handle);
extern void softc_device_abort(usbd_xfer_handle);
extern void softc_device_close(usbd_pipe_handle);
extern void softc_device_clear_toggle(usbd_pipe_handle);
extern void softc_device_done(usbd_xfer_handle);

extern void softc_abort_xfer(usbd_xfer_handle xfer,usbd_status status);

#define MS_TO_TICKS(ms) (ms)

#ifdef DWCDRIVER_DEBUG
extern int dwcdebug;
#define DPRINTF(X) if(dwcdebug) logprintf X
#define DPRINTFN(A,X) if(dwcdebug>(A)) logprintf X
#else
#define DPRINTF(X)
#define DPRINTFN(A,X)
#endif

#endif
