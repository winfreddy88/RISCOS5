/*
 * Copyright (c) 2014, Elesar Ltd
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Elesar Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#ifndef GLUE_H
#define GLUE_H

/* Porting types */
typedef int pmf_qual_t;             /* No power management functions */

/* Porting definitions */
#define KASSERT(k)                  /* Nothing */
#define KASSERTMSG(k,m)             /* Nothing */
#define UNUSED(k)                   (k)=(k)
#define USBHIST_FUNC()              /* Nothing */
#define USBHIST_CALLED(a)           /* Nothing */
#define USBHIST_LOGN(a,b,c,d,e,f,g) /* Nothing */
#define device_private(k)           (struct xhci_softc *)(k)
#define __diagused                  /* Nothing */
#define __printflike(a,b)           /* Nothing */
#define PRIx64                      "llx"
#define PRIx32                      "lx"
#define xhcidebug                   0   /* Needed as USB_DEBUG also undefined */
#define IPL_BIO                     0   /* Unused pool cache argument */
#define htole64(a)                  (a) /* ARM little endian */
#define le64toh(a)                  (a) /* ARM little endian */
#define roundup2(v,r)               (((v)+((r)-1)) & ~((r)-1))
#define mstohz(a)                   (a) /* Just give us the ms directly */

/* Bus space */
uint32_t bus_read_4(bus_space_handle_t, bus_size_t);
void bus_write_4(bus_space_handle_t, bus_size_t, uint32_t);
int bus_space_subregion(bus_space_tag_t, bus_space_handle_t,
                        bus_size_t, bus_size_t, bus_space_handle_t *);
#define bus_space_read_4(a,b,c)     bus_read_4(b,c)
#define bus_space_write_4(a,b,c,d)  bus_write_4(b,c,d)
#define BUS_SPACE_XHCI_OFFSET       0x10000
#define BUS_SPACE_WRAPPER_OFFSET    0

/* Semaphores */
#define mutex_spin_enter(a)         /* Chance it */
#define mutex_spin_exit(a)          /* Chance it */
#define mutex_enter(a)
#define mutex_exit(a)
#define mutex_init(a,b,c)
#define mutex_destroy(a)
typedef volatile int kmutex_t;
typedef volatile int kcondvar_t;
void cv_destroy(kcondvar_t *);
void cv_init(kcondvar_t *, const char *);
void cv_signal(kcondvar_t *);
int cv_timedwait(kcondvar_t *, kmutex_t *, int);

/* Abort pipe and clear stall tasks */
void glue_abort_pipe(struct usb_task *, void (*fn)(void *), void *xfer);
void glue_clear_endpoint_stall(struct usb_task *, void (*fn)(void *), void *xfer);
int glue_rt_entry(void *);
int glue_rt_handler(void *);

/* Little helpers */
int ffs(int);
const char *intl_lookup(const char *);

/* Logging */
void aprint_normal(void *, ...);
#define aprint_error_dev        aprint_normal
#define aprint_normal_dev       aprint_normal
#define aprint_verbose_dev      aprint_normal
#define aprint_debug_dev        aprint_normal

#endif
