/*
 * Copyright (c) 2004, 2009 The NetBSD Foundation, Inc.
 * All rights reserved.
 *
 * This code is derived from software contributed to The NetBSD Foundation
 * by Lennart Augustsson (lennart@augustsson.net), Charles M. Hannum, and
 * Jeffrey Lee (me@phlamethrower.co.uk)
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *        This product includes software developed by the NetBSD
 *        Foundation, Inc. and its contributors.
 * 4. Neither the name of The NetBSD Foundation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
 * ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
 * TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "modhead.h"
#include "swis.h"
#include "callx/callx.h"
#include <limits.h>
#include <machine/bus.h>

#include <sys/malloc.h>
#include <sys/queue.h>
#include <sys/types.h>
#include <sys/systm.h>

#include <dev/usb/usb.h>
#include <dev/usb/usbdi.h>
#include <dev/usb/usbdivar.h>

#include "Global/RISCOS.h"
#include "Global/HALEntries.h"
#include "cmodule.h"
#include "tboxlibint/messages.h"

/* Have to avoid including stdio as there's a clash with the BSD stuff */
#define __stdio_h

#include "musb.h"
#include "musb_util.h"

extern void musb_ep0_peri(musb_softc_t *sc);

/*

			Peripheral mode functions

*/
static const usb_device_descriptor_t musb_peri_devd = {
	USB_DEVICE_DESCRIPTOR_SIZE,
	UDESC_DEVICE,		/* type */
	{0x00, 0x02},		/* USB version */
	UDCLASS_VENDOR,		/* class */
	0xFF,		/* subclass */
	0,	/* protocol */
	64,			/* max packet */
	{0},{0},{0x00,0x01},	/* device id */
	1,2,0,			/* string indicies */
	1			/* # of configurations */
};

static const usb_device_qualifier_t musb_peri_odevd = {
	USB_DEVICE_DESCRIPTOR_SIZE,
	UDESC_DEVICE_QUALIFIER,	/* type */
	{0x00, 0x02},		/* USB version */
	UDCLASS_VENDOR,		/* class */
	0xFF,		/* subclass */
	0,		/* protocol */
	64,			/* max packet */
	1,			/* # of configurations */
	0
};

static const usb_config_descriptor_t musb_peri_confd = {
	USB_CONFIG_DESCRIPTOR_SIZE,
	UDESC_CONFIG,
	{USB_CONFIG_DESCRIPTOR_SIZE +
	 USB_INTERFACE_DESCRIPTOR_SIZE},
	1, /* num interfaces */
	1, /* config value */
	0, /* string index */
	UC_SELF_POWERED+UC_BUS_POWERED, /* Bus powered bit is 'reserved' and should always be set according to spec? */
	0			/* max power */
};

static const usb_interface_descriptor_t musb_peri_ifcd = {
	USB_INTERFACE_DESCRIPTOR_SIZE,
	UDESC_INTERFACE,
	0, /* interface # */
	0,
	0, /* num endpoints */
	UICLASS_VENDOR, /* interface class */
	0, /* subclass */
	0, /* protocol */
	0 /* string index */
};

static int musb_ep0_peri_handle(musb_softc_t *sc)
{
	/* Handle a request on EP0, 0 on success, 1 on failure */
	usb_device_request_t *req = &sc->peri_ep0_req;
	int len = UGETW(req->wLength);
	int value = UGETW(req->wValue);
//	int index = UGETW(req->wIndex);
	char name[USB_MAX_STRING_LEN];
	void *buf = sc->peri_ep0_rxbuf;
	int l;

#define C(x,y) ((x) | ((y) << 8))
	switch(C(req->bRequest, req->bmRequestType)) {
	case C(UR_CLEAR_FEATURE, UT_WRITE_DEVICE):
	case C(UR_CLEAR_FEATURE, UT_WRITE_INTERFACE):
	case C(UR_CLEAR_FEATURE, UT_WRITE_ENDPOINT):
		/*
		 * DEVICE_REMOTE_WAKEUP and ENDPOINT_HALT are no-ops
		 * for the integrated root hub.
		 */
		return 0;
	case C(UR_GET_CONFIG, UT_READ_DEVICE):
		if (len > 0) {
			sc->peri_ep0_txbuf = (void *) &sc->peri_conf;
			sc->peri_ep0_txremain = 1;
			return 0;
		}
		return 1;
	case C(UR_GET_DESCRIPTOR, UT_READ_DEVICE):
                DPRINTFN(8,("musb_ep0_peri_handle: UR_GET_DESCRIPTOR: wValue=0x%04x\n", value));
		switch(value >> 8) {
		case UDESC_DEVICE:
			if ((value & 0xff) != 0) {
				return 1;
			}
			sc->peri_ep0_txremain = min(len, USB_DEVICE_DESCRIPTOR_SIZE);
			sc->peri_ep0_txbuf = (void *) &musb_peri_devd;
			return 0;
		case UDESC_DEVICE_QUALIFIER:
			if ((value & 0xff) != 0) {
				return 1;
			}
			sc->peri_ep0_txremain = min(len, USB_DEVICE_DESCRIPTOR_SIZE);
			sc->peri_ep0_txbuf = (void *) &musb_peri_odevd;
			return 0;
		case UDESC_OTHER_SPEED_CONFIGURATION:
		case UDESC_CONFIG:
			if ((value & 0xff) != 0) {
				return 1;
			}
			/* todo - overflow checks */
			l = sc->peri_ep0_txremain = min(len, USB_CONFIG_DESCRIPTOR_SIZE);
			sc->peri_ep0_txbuf = buf;
#if defined(__CC_NORCROFT) && !defined(DISABLE_PACKED)
			memcpy(buf, (void*) &musb_peri_confd, l);
#else
			memcpy(buf, &musb_peri_confd, l);
#endif
			((usb_config_descriptor_t *)buf)->bDescriptorType =
				value >> 8;
			buf = (char *)buf + l;
			len -= l;
			l = min(len, USB_INTERFACE_DESCRIPTOR_SIZE);
			sc->peri_ep0_txremain += l;
#if defined(__CC_NORCROFT) && !defined(DISABLE_PACKED)
			memcpy(buf, (void*) &musb_peri_ifcd, l);
#else
			memcpy(buf, &musb_peri_ifcd, l);
#endif

			return 0;
		case UDESC_STRING:
			if (len == 0)
				break;
			*(u_int8_t *)buf = 0;
			sc->peri_ep0_txbuf = buf;
			sc->peri_ep0_txremain = 1;
			switch (value & 0xff) {
                        case 0: /* Language table */
                                sc->peri_ep0_txremain = musb_str(buf, len, "\001");
                                break;
			case 1: /* Vendor */
				sc->peri_ep0_txremain = musb_str(buf, len, sc->peri_vendor);
				break;
			case 2: /* Product */
				value = sizeof(name);
				messages_file_lookup("DevN", name, &value, 0);
				sc->peri_ep0_txremain = musb_str(buf, len, name);
				break;
			}
			return 0;
		default:
			return 1;
		}
		break;
	case C(UR_GET_INTERFACE, UT_READ_INTERFACE):
		if (len > 0) {
			*(u_int8_t *)buf = 0;
			sc->peri_ep0_txbuf = buf;
			sc->peri_ep0_txremain = 1;
			return 0;
		}
		return 1;
	case C(UR_GET_STATUS, UT_READ_DEVICE):
		if (len > 1) {
			USETW(((usb_status_t *)buf)->wStatus,UDS_SELF_POWERED); /* todo - fix this, surely? */
			sc->peri_ep0_txbuf = buf;
			sc->peri_ep0_txremain = 2;
			return 0;
		}
		return 1;
	case C(UR_GET_STATUS, UT_READ_INTERFACE):
	case C(UR_GET_STATUS, UT_READ_ENDPOINT):
		if (len > 1) {
			USETW(((usb_status_t *)buf)->wStatus, 0);
			sc->peri_ep0_txbuf = buf;
			sc->peri_ep0_txremain = 2;
			return 0;
		}
		return 1;
	case C(UR_SET_ADDRESS, UT_WRITE_DEVICE):
		if (value >= USB_MAX_DEVICES) {
			return 1;
		}
		DPRINTFN(8,("musb_ep0_peri_handle: Logging pending address %02x\n",value));
		sc->peri_addr = value;
		sc->peri_addr_pending = 1;
		return 0;
	case C(UR_SET_CONFIG, UT_WRITE_DEVICE):
		if (value != 0 && value != 1) {
			return 1;
		}
		sc->peri_conf = value;
		return 0;
	case C(UR_SET_DESCRIPTOR, UT_WRITE_DEVICE):
		return 0; /* ignored? */
	case C(UR_SET_FEATURE, UT_WRITE_DEVICE):
	case C(UR_SET_FEATURE, UT_WRITE_INTERFACE):
	case C(UR_SET_FEATURE, UT_WRITE_ENDPOINT):
		return 1;
	case C(UR_SET_INTERFACE, UT_WRITE_INTERFACE):
		return 0;
	case C(UR_SYNCH_FRAME, UT_WRITE_ENDPOINT):
		return 0;
	default:
		DPRINTFN(4,("musb_ep0_peri_handle: Unknown request %04x\n",C(req->bRequest, req->bmRequestType)));
		return 1;
	}
	return 1;
}

static int musb_ep0_peri_validrx(musb_softc_t *sc)
{
	/* Return nonzero if sc->peri_ep0_req is a valid rx request */
	int len = UGETW(sc->peri_ep0_req.wLength);
	if(len > sizeof(sc->peri_ep0_rxbuf))
		return 0;
	switch(C(sc->peri_ep0_req.bRequest, sc->peri_ep0_req.bmRequestType))
	{
	case C(UR_SET_DESCRIPTOR,UT_WRITE_DEVICE):
		return 1;
	case C(UR_SYNCH_FRAME, UT_WRITE_ENDPOINT):
		if(len != 2)
			return 0;
		return 1;
	default:
		return 0;
	}
}

#define CSR_SET(X) csro = csro | (X)
#define CSR_CLEAR(X) csro = csro & ~(X)

void musb_ep0_peri(musb_softc_t *sc)
{
	/* Process ep0 related interrupt when acting as a peripheral */
	/* Flow based around section 23.1.3.1.1.5 of spruf98b */
	/* Making sense of all the nonsense:
	 - When in idle state, ep0 interrupt with RXPKTRDY implies a setup packet has been received
	   -> ep0 fifo should contain (at least?) 8 bytes of data
	 - For zero data requests
	   - read 8 byte packet from fifo
	   - set SERV_RXPKTRDY & DATAEND
	     - before the second interrupt?
	   - wait for second interrupt indicating host has moved to status stage
	     - this is the right time to apply SET_ADDRESS commands
	   - if the packet cannot be executed, need to set SERV_RXPKTRDY & SENDSTALL before host moves onto status stage
	 - For write requests ((bmRequestType & UT_READ) == 0)
	   - read 8 byte packet from fifo
	   - set SERV_RXPKTRDY
	   - on receipt of second interrupt
	     - RXPKTRDY should be set, indicating more data is available
	     - in which case read the data from the FIFO
	       - set SERV_RXPKTRDY after reading (and DATAEND if no more data expected)
	   - a final interrupt should then occur as the host moves to the status stage
	   - if the packet cannot be executed, need to set SERV_RXPKTRDY & SENDSTALL (before host moves onto data stage?)
	 - For read requests ((bmRequestType & UT_READ) != 0)
	   - read 8 byte packet from fifo
	   - set SERV_RXPKTRDY
	   - write response data to fifo
	   - set TXPKTRDY (and DATAEND if last packet has been loaded)
	   - subsequent interrupts will allow more data to be sent
	   - a final interrupt should then occur as the host moves to the status stage
	   - if the packet cannot be executed, need to set SERV_RXPKTRDY & SENDSTALL (before starting to transmit data?)
	 - Thus, the interrupt routine needs to handle several states:
	   - Idle
	     - Goes to Status if Zero Data request received
	     - Fall-through to TX if read request received
	     - Goes to RX if write request received
	     - Goes to Error if any packet cannot be processed
	     - Acknowledges SENTSTALL & SETUPEND but no state transition
	   - TX
	     - Fills transmit buffer & goes to Status if end of data
	   - RX
	     - Reads receive buffer
	     - At end of data, processes request & goes to Status/Error as appropriate?
	   - Status
	     - Goes to idle
	     - Applies FADDR if appropriate
	     - If an error condition is received, abort?
	   - Error
	     - Expects SENTSTALL to be set
	     - Goes to idle
	 - Is it possible to transition from Status/Error to somewhere new immediately? Or from Idle to RX immediately?
	*/
	/* todo - tidy all this stuff */
	volatile musb_regs *musb_base = sc->musb_base;
	int csr = musb_base->csr.peri_ep0.peri_csr0;
	int handled=0;
	int updated=0;
	int csro=0; /* TODO - Surely this is bad for CSR_CLEAR? */
	DPRINTFN(15,("musb_ep0_peri: csr %04x count0 %2x state %d\n",csr,musb_base->csr.peri_ep0.count0,sc->peri_ep0_state));
	/* No matter what we're doing, an error condition sends us to idle state */
	if(csr & (PERI_CSR0_SENTSTALL | PERI_CSR0_SETUPEND))
	{
		if(sc->peri_ep0_state == PERI_EP0_STATE_ERROR)
		{
			DPRINTFN(15,("musb_ep0_peri: Error state received as expected\n"));
		}
		else
		{
			DPRINTFN(15,("musb_ep0_peri: Unexpected error state!\n"));
		}
		CSR_CLEAR(PERI_CSR0_SENTSTALL | PERI_CSR0_SETUPEND);
		sc->peri_ep0_state = PERI_EP0_STATE_IDLE;
		sc->peri_addr_pending = 0; /* Cancel pending address change */
		//return; - flowchart suggests we should do multiple things?
		handled++;
		updated=1;
	}
	/* If we're in the status state, handle it appropriately */
	if(sc->peri_ep0_state == PERI_EP0_STATE_STATUS)
	{
		if(sc->peri_addr_pending)
		{
			/* This should be the status interrupt marking the end of the transfer; update our address */
			DPRINTFN(15,("musb_ep0_peri: Applying address %02x\n",sc->peri_addr));
			musb_base->common.faddr = sc->peri_addr & FADDR_FUNCADDR;
			sc->peri_addr_pending = 0;
		}
		sc->peri_ep0_state = PERI_EP0_STATE_IDLE;
		handled++;
	}
	/* If we are idle, look for a packet */
	if(sc->peri_ep0_state == PERI_EP0_STATE_IDLE)
	{
		if(!(csr & PERI_CSR0_RXPKTRDY))
		{
			if(!handled)
			{
				DPRINTFN(15,("musb_ep0_peri: IDLE: RXPKTRDY not set. csr=%04x\n",csr)); // only complain if we haven't done anything yet
			}
			goto end;
		}
		/* Read the 8 byte packet from the FIFO */
		if((musb_base->csr.peri_ep0.count0 & COUNT0_EP0RXCOUNT) < 8)
		{
			DPRINTFN(15,("musb_ep0_peri: IDLE: FIFO only contains %d bytes\n",musb_base->csr.peri_ep0.count0 & COUNT0_EP0RXCOUNT));
			CSR_SET(PERI_CSR0_SENDSTALL);
			sc->peri_ep0_state = PERI_EP0_STATE_ERROR;
			updated=1;
			goto end;
		}
		musb_fiforead(musb_base,0,&sc->peri_ep0_req,8);
		handled++;
		/* If we expect data, we must wait for it to be received */
		if(UGETW(sc->peri_ep0_req.wLength))
		{
			if(sc->peri_ep0_req.bmRequestType & UT_READ)
			{
				sc->peri_ep0_txremain = 0;
				if(!musb_ep0_peri_handle(sc)) /* Load the requested data into the transmit buffer */
				{
					sc->peri_ep0_state = PERI_EP0_STATE_TX;
					CSR_SET(PERI_CSR0_SERV_RXPKTRDY);
					updated=1;
					/* Wait for controller to enter TX mode */
					musb_base->csr.peri_ep0.peri_csr0 = csro;
					WAITON(musb_base->csr.peri_ep0.peri_csr0 & PERI_CSR0_RXPKTRDY);
					csro = 0;
					updated=0;
				}
				else
				{
					sc->peri_ep0_state = PERI_EP0_STATE_ERROR;
					CSR_SET(PERI_CSR0_SERV_RXPKTRDY | PERI_CSR0_SENDSTALL);
					updated=1;
				}
			}
			else
			{
				/* Wait for receive before we can handle the request */
				if(musb_ep0_peri_validrx(sc))
				{
					sc->peri_ep0_state = PERI_EP0_STATE_RX;
					sc->peri_ep0_rxbufpos = 0;
					CSR_SET(PERI_CSR0_SERV_RXPKTRDY);
					updated=1;
					goto end; /* RXPKTRDY will still be set in csr soft-copy; skip attempting to read from the empty FIFO */
				}
				else
				{
					sc->peri_ep0_state = PERI_EP0_STATE_ERROR;
					CSR_SET(PERI_CSR0_SERV_RXPKTRDY | PERI_CSR0_SENDSTALL);
					updated=1;
				}
			}
		}
		else
		{
			if(!musb_ep0_peri_handle(sc))
			{
				sc->peri_ep0_state = PERI_EP0_STATE_STATUS;
				CSR_SET(PERI_CSR0_SERV_RXPKTRDY | PERI_CSR0_DATAEND);
				updated=1;
			}
			else
			{
				sc->peri_ep0_state = PERI_EP0_STATE_ERROR;
				CSR_SET(PERI_CSR0_SERV_RXPKTRDY | PERI_CSR0_SENDSTALL);
				updated=1;
			}
		}
	}
	if(sc->peri_ep0_state == PERI_EP0_STATE_TX)
	{
		int count=min(sc->peri_ep0_txremain,PERI_EP0_MAXP);
		if(!count)
		{
			DPRINTFN(15,("musb_ep0_peri: TX: No data left!\n"));
			CSR_SET(PERI_CSR0_SENDSTALL);
			sc->peri_ep0_state = PERI_EP0_STATE_ERROR;
			updated=1;
			goto end;
		}
		sc->peri_ep0_txbuf = musb_fifowrite(musb_base,0,sc->peri_ep0_txbuf,count);
		sc->peri_ep0_txremain -= count;
		if(!sc->peri_ep0_txremain)
		{
			CSR_SET(PERI_CSR0_DATAEND);
			sc->peri_ep0_state = PERI_EP0_STATE_STATUS;
		}
		CSR_SET(PERI_CSR0_TXPKTRDY);
		handled++;
		updated=1;
	}
	if(sc->peri_ep0_state == PERI_EP0_STATE_RX)
	{
		int count = musb_base->csr.peri_ep0.count0 & COUNT0_EP0RXCOUNT;
		if(!(csr & PERI_CSR0_RXPKTRDY))
		{
			if(!handled)
				DPRINTFN(15,("musb_ep0_peri: RX: RXKPKTRDY not set. csr=%04x\n",csr));
			goto end;
		}
		if(count+sc->peri_ep0_rxbufpos > sizeof(sc->peri_ep0_rxbuf))
		{
			DPRINTFN(15,("musb_ep0_peri: RX: Buffer overflow!\n"));
			CSR_SET(PERI_CSR0_SENDSTALL);
			sc->peri_ep0_state = PERI_EP0_STATE_ERROR;
			updated=1;
			goto end;
		}
		musb_fiforead(musb_base,0,&sc->peri_ep0_rxbuf[sc->peri_ep0_rxbufpos],count);
		sc->peri_ep0_rxbufpos += count;
		if(count < PERI_EP0_MAXP)
		{
			/* All data received */
			if(sc->peri_ep0_rxbufpos != UGETW(sc->peri_ep0_req.wLength))
			{
				DPRINTFN(15,("Only read %d bytes; expected %d\n",sc->peri_ep0_rxbufpos,UGETW(sc->peri_ep0_req.wLength)));
				CSR_SET(PERI_CSR0_SENDSTALL);
				sc->peri_ep0_state = PERI_EP0_STATE_ERROR;
				updated=1;
				goto end;
			}
			CSR_SET(PERI_CSR0_DATAEND);
			sc->peri_ep0_state = PERI_EP0_STATE_IDLE;
			if(musb_ep0_peri_handle(sc))
			{
				CSR_SET(PERI_CSR0_SENDSTALL);
				sc->peri_ep0_state = PERI_EP0_STATE_ERROR;
			}
		}
		CSR_SET(PERI_CSR0_SERV_RXPKTRDY);
		updated=1;
		handled++;
	}
end:
	DPRINTFN(15,("musb_ep0_peri: handled %d new csr %04x(%d) new state %d\n",handled,csro,updated,sc->peri_ep0_state));
	if(updated)
		musb_base->csr.peri_ep0.peri_csr0 = csro;
}
