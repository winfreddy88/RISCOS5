; 
; Copyright (c) 2012, RISC OS Open Ltd
; All rights reserved.
; 
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met: 
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
; 
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
; 

        GET     Hdr:ListOpts
        GET     Hdr:CPU.Arch
        GET     Hdr:CPU.Generic32
        GET     Hdr:Proc
        GET     Hdr:Macros

        AREA    |C$$code|, CODE, READONLY

        EXPORT  dsb
        EXPORT  wmb
        EXPORT  rmb
        EXPORT  smp_mb
        EXPORT  smp_wmb
        EXPORT  smp_rmb
        EXPORT  asm_call_callback
        EXPORT  atomic_read
        EXPORT  atomic_set
        EXPORT  atomic_inc_return
        EXPORT  atomic_dec_return
        EXPORT  atomic_xchg
        EXPORT  atomic_cmpxchg
        EXPORT  spin_lock
        EXPORT  spin_unlock

        MACRO
        myDSB
        ; pre-ARMv7, use legacy MCR op
        MCR     p15,0,a1,c7,c10,4
        MEND
        
; void dsb(void)
; void wmb(void)
; void rmb(void)
dsb
wmb
rmb
        myDSB
        MOV     pc, lr

smp_mb
smp_wmb
smp_rmb
; void smp_mb(void)
; void smp_wmb(void)
; void smp_rmb(void)
        myDSB
        MOV     pc, lr

; int32_t atomic_read(atomic_t *a)
atomic_read
        LDR     a1, [a1]
        MOV     pc, lr

; void atomic_set(atomic_t *a, int32_t i)
atomic_set
        STR     a2, [a1]
        MOV     pc, lr

; int32_t atomic_inc_return(atomic_t *a)
atomic_inc_return
        MRS     a4, CPSR
        ORR     ip, a4, #I32_bit
        MSR     CPSR_c, ip
        LDR     a2, [a1]
        ADD     a2, a2, #1
        STR     a2, [a1]
        MSR     CPSR_c, a4
        MOV     a1, a2
        MOV     pc, lr

; int32_t atomic_dec_return(atomic_t *a)
atomic_dec_return
        MRS     a4, CPSR
        ORR     ip, a4, #I32_bit
        MSR     CPSR_c, ip
        LDR     a2, [a1]
        SUB     a2, a2, #1
        STR     a2, [a1]
        MSR     CPSR_c, a4
        MOV     a1, a2
        MOV     pc, lr
        
; int32_t atomic_xchg(atomic_t *a, int32_t i)
atomic_xchg
        MRS     a4, CPSR
        ORR     ip, a4, #I32_bit
        MSR     CPSR_c, ip
        LDR     a3, [a1]
        STR     a2, [a1]
        MSR     CPSR_c, a4
        MOV     a1, a3
        MOV     pc, lr

; int32_t atomic_cmpxchg(atomic_t *a, int32_t old, int32_t new)
atomic_cmpxchg
        MRS     a4, CPSR
        ORR     ip, a4, #I32_bit
        MSR     CPSR_c, ip
        LDR     ip, [a1]
        CMP     ip, a2
        STREQ   a3, [a1]
        MSR     CPSR_c, a4
        MOV     a1, ip
        MOV     pc, lr

; void asm_call_callback(void *callback_param,VCHI_CALLBACK_REASON_T reason,void *handle,void *private_word,VCHI_CALLBACK_T func)
asm_call_callback
        ; Drop from SYS into SVC mode so any CMHG veneers don't get confused
        Entry   "v1-v2"
        LDR     v1, [sp, #12]
        MRS     v2, CPSR
        BIC     lr, v2, #M32_bits
        ORR     lr, lr, #SVC32_mode
        MSR     CPSR_c, lr
        Push    "lr"
        MOV     r12, r3
        MOV     lr, pc
        MOV     pc, v1
        Pull    "lr"
        MSR     CPSR_c, v2
        EXIT

; void spin_lock(spinlock_t *s)
spin_lock
        MRS     a4, CPSR
        ORR     ip, a4, #I32_bit
        MSR     CPSR_c, ip
        STR     a4, [a1]
        MOV     pc, lr

; void spin_unlock(spinlock_t *s)
spin_unlock
        LDR     a1, [a1]
        MSR     CPSR_c, a1
        MOV     pc, lr

        END
