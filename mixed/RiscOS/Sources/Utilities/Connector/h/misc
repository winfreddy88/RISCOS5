/*
 * Copyright (c) 1995, Andreas Zieringer
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
extern void get_serial_output_buffer_size(void);
extern void set_baud_menu(int nr);
extern void set_cept_zoom(void);
extern void create_toolbar(int spool,int sinfo);
extern void init_text_buffer(int mem);
extern void show_time(Desk_window_handle,Desk_icon_handle,int,int,Desk_bool);
extern void show_online_time(int, int *);
extern void reset_online_time(void);
//extern void set_iconbar_text(char *text);
extern void set_iconbar_portnumber(int show);
extern void clear_iconbar_lines(void);
extern void set_iconbar_lines(int nr,int on);
extern void set_iconbar_rx(int on);
extern void set_iconbar_tx(int on);
extern void show_modem_status(void);
extern Desk_bool modechange(Desk_event_pollblock *poll_block, void *reference);
extern int show_ok(char *str1,char *str2);
extern void show_message(char *str);
extern void setmodemspeed(int terminalnr,int baudnr,int datanr,int transfernr,Desk_bool draw);
extern void pause(int t);
extern void send_string(char *str);
extern void send_stringt(int t,char *str);
extern void hangup(void);
extern void answer(void);
extern void send_modeminitstring(void);
extern void dial(char *number);
extern void init_zmodem_receive_string(void);
extern void delete_status_icons(int anzahl);
extern void icon_change_sprite(int Desk_window_handle,int Desk_icon_handle,char *sprite);
extern void create_cept_sprite(void);
extern void delete_cept_sprite(void);
extern int read1(int);
extern void claim_serial_port(void);
extern void release_serial_port(void);
extern Desk_bool claim_device_handler(Desk_event_pollblock *poll_block, void *reference);
extern void Icon_printf_Update(Desk_window_handle window,Desk_icon_handle icon,char *s,...);
extern void Icon_SetText_Update(Desk_window_handle window,Desk_icon_handle icon,char *text);
extern void Icon_SetInteger_Update(Desk_window_handle window,Desk_icon_handle icon,int value);
extern void write_logfile(int status);
extern int get_title_bar_height(void);
extern char *online_time_str;
extern void create_send_list(void);
extern void disable_sent_record(int nr);
extern void create_filetypes_from_dosmap(void);


