/*
 * Copyright (c) 1995, Andreas Zieringer
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

extern unsigned int saveX, saveY, saveAttr;

extern void consoleSetup(void);
extern void logPut(char);
extern void locate(unsigned int,unsigned int);
extern void setCursor(unsigned int,unsigned int);
/*extern void updateCursor(void);*/
extern void nextPosition(void);
extern void writeChar(unsigned int);
extern void conWrite(unsigned int);
extern void clearLine(int,int);
extern void clearColumn(int,int);
extern void cursorOn(void);
extern void cursorOff(void);
extern void moveCursor(int,int);
extern void bell(void);
extern void deleteLine(int,int);
extern void insertLine(int,int);
extern void deleteChar(int);
extern void insertChar(int);
extern void smoothMode(int);
extern void savePage(int,unsigned int);
extern void restorePage(int,unsigned int);
extern void setScrRegion(int,int);
extern void outESC(char *);
extern void out_ESC(char *, ...);
extern int keyin(void);
extern void scrlUp(void);
extern void awMode(int);
extern void saveCursor(void);
extern void restCursor(void);
extern void putcharattr(int,int,char,unsigned int);
extern void insert_char(int,int,char,unsigned int);
extern void putattr(int,int,unsigned int);
extern unsigned int getattr(int,int);
extern void scrollup(int);
extern void scrolldown(int);
extern void scrollleft(int n);
extern void scrollright(int n);
extern unsigned int invertattr(unsigned int);
extern void scrolldown_area(int top,int bottom);
extern void scrollup_area(int top,int bottom);
extern void InitTabs(int n);
extern void DoTab(void);
extern void SetTabStop(void);
extern void ClearTabStop(void);
extern void ClearAllTabs(void);
