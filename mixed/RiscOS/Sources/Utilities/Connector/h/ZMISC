/*
 * Copyright (c) 1995, Andreas Zieringer
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#define BUFFER_SIZE 1024

#define READLINE_PF(t) --Lleft>=0 ? (*cdq++ & 0377) : readline(t)
//extern char *cdq;

//#define readline(t) --Lleft>=0 ? (*cdq++ & 0377) : readline_buffer(t)

/*
extern unsigned char buffer[];
extern int buffer_pos,buffer_left;
extern int readline_buffer(int timeout);

#define readline(t) buffer_left-- ? buffer[buffer_pos++] : readline_buffer(t)
*/

extern int Zmodem;
extern unsigned Baudrate;
extern int errors;

extern int Zctlesc;	/* Encode control characters */
extern int Nozmodem;	/* If invoked as "sb" */
extern char *Progname;
extern int Zrwindow;	/* RX window size (controls garbage count) */
extern int no_timeout;
extern char ztrans;		/* ZMODEM file transport request */
extern char zconv;		/* ZMODEM file conversion request */
extern char Lzmanag;	/* Local ZMODEM file management request */
extern int Eofseen;		/* EOF seen on input set by zfilbuf */
extern int Quiet;		/* overrides logic that would otherwise set verbose */
extern int Restricted;	/* restricted; no /.. or ../ in filenames */
extern char Crcflg;
extern char Lastrx;
extern char zmanag;		/* ZMODEM file management request */
extern int bad_crc_counter;


extern int timeleft;
extern long rxbytes;
extern long last_bps;
extern long Bytesleft;
extern long filesize;
extern int resume_filesize;

extern char filetransfer_type[];
//extern char disc_buffer[];
extern char *disc_buffer;
extern char send_disc_buffer[];

extern int Lleft;
extern int Readnum;

extern int mode(int n);
extern void sendbrk(void);
extern void flushmo(void);
extern void vfile(char *s,...);
extern void zperr(char *s,...);
extern int readline(int timeout);
extern void purgeline(void);
extern void canit(void);
extern void  waitforsentbytes(void);
extern void  waitforreadbytes(void);
extern int serialbufferempty(void);

/* End of zmisc.h */
