/*
 * Copyright (c) 1995, Andreas Zieringer
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include "Desk/Core.h"
#include "Desk/File.h"
#include "Desk/Filing.h"
#include "Desk/DeskMem.h"
#include "Desk/Icon.h"
#include "Desk/Kbd.h"
#include "iconnames.h"
#include "global.h"
#include "misc.h"
#include "event.h"
#include "flex.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define BUFFERLENGTH 1024

extern void delay(int t);

static int ram_save_ready=FALSE;
static int ram_load=FALSE;
static char ram_transfer_buffer[BUFFERLENGTH];
static int oldref;
static Desk_task_handle oldsender;
static Desk_window_handle oldwindow;
static Desk_icon_handle oldicon;
static int scrap_load=0;
static char scrap_name[MAX_PATHLENGTH];

//static Desk_message_block g_reply;
//static Desk_message_destinee g_sender;
/***************************************** Import *****************************/


static void import_text_file(char *name)
{
  Desk_file_handle f;
  int c,i;
  char *p;

  f=Desk_File_Open(name,Desk_file_READ);
  if(f==NULL)
    return;
  
  p=strrchr(name,'.');
  if(p==NULL)
    p=name;
  else
    p++;
    
  Desk_Icon_printf(unten_window,UNTEN_LSTATUS,"Importing file '%s'",p);  

    esc_break=FALSE;
    i=0;

    (*driver)(DRIVER_FLUSHTX,portnumber,0,0);
    //(*driver)(DRIVER_FLUSHRX,portnumber,0,0);

    while(!Desk_File_EOF(f) && !esc_break)
    {
      if ((*driver)(DRIVER_CHECKRX,portnumber,0,0)==0 ) //&& i<80)
      {
        import_ascii=1;
        c=Desk_File_ReadChar(f);

        if(c==0x0a)
        {
          switch(ascii_trans)
          {
            case 0:
            break;
            case 1:
              c=-1;
            break;
            case 2:
              c=0x0d;
            break;
            case 3:
              while((*driver)(DRIVER_PUTBYTE,portnumber,0x0d,0)==-1 && !esc_break)
                Desk_Event_Poll();
             delay(ascii_char_delay);
            break;
          }
          delay(ascii_line_delay);
        }
        if(c!=-1)
        {
          while((*driver)(DRIVER_PUTBYTE,portnumber,c,0)==-1 && !esc_break)
            Desk_Event_Poll();
          delay(ascii_char_delay);
        }

          while((*driver)(DRIVER_CHECKTX,portnumber,0,0)<serial_output_buffer_size && !esc_break)
            Desk_Event_Poll();

      }
      else
      {
          import_ascii=0;
	  Desk_Event_Poll();
      }
      import_ascii=0;
    }
    Desk_Event_Poll();
    Desk_File_Close(f);
    Desk_Icon_SetText(unten_window,UNTEN_LSTATUS," ");  
    if(esc_break)
      (*driver)(DRIVER_FLUSHTX,portnumber,0,0);
}

static void import_text_ram(char *buffer,int length)
{
  int c,i;

  Desk_Icon_SetText(unten_window,UNTEN_LSTATUS,"Importing from RAM"); 

  esc_break=FALSE;
  i=0;
  
  (*driver)(DRIVER_FLUSHTX,portnumber,0,0);
  //(*driver)(DRIVER_FLUSHRX,portnumber,0,0);


    while(i<length && !esc_break)
    {
      if ((*driver)(DRIVER_CHECKRX,portnumber,0,0)==0)
      {
        import_ascii=1;
        c=buffer[i++];

        if(c==0x0a)
        {
          switch(ascii_trans)
          {
            case 0:
            break;
            case 1:
              c=-1;
            break;
            case 2:
              c=0x0d;
            break;
            case 3:
              while((*driver)(DRIVER_PUTBYTE,portnumber,0x0d,0)==-1 && !esc_break)
                Desk_Event_Poll();
             delay(ascii_char_delay);
            break;
          }
          delay(ascii_line_delay);
        }
        if(c!=-1)
        {
          while((*driver)(DRIVER_PUTBYTE,portnumber,c,0)==-1 && !esc_break)
            Desk_Event_Poll();
          delay(ascii_char_delay);
        }
          while((*driver)(DRIVER_CHECKTX,portnumber,0,0)<serial_output_buffer_size && !esc_break)
          {
            Desk_Event_Poll();
            //Desk_Wimp_SendMessage(Desk_event_SENDWANTACK, &g_reply, g_sender, 0);
          }
      }
      else
      {
          import_ascii=0;
          Desk_Event_Poll();
      }
      import_ascii=0;
    }
    Desk_Event_Poll();
    Desk_Icon_SetText(unten_window,UNTEN_LSTATUS," ");  
    if(esc_break)
      (*driver)(DRIVER_FLUSHTX,portnumber,0,0);
}

static Desk_bool get_filenames(Desk_message_dataload *data)
{
  file_des *current_file;

  //file_droped=TRUE;

  //Desk_Error_Report(0,"load %s",data->filename);
  //Desk_Error_Report(0,"%x",data->filetype);
  //if(!Desk_File_IsDirectory(data->filename))
  if(data->filetype!=0x1000) // no directory
  {
    current_file = (file_des *)Desk_DeskMem_Malloc(sizeof (file_des));
    current_file->filetype=data->filetype;
    current_file->size=Desk_File_GetLength(data->filename);//data->size;
    //Desk_Error_Report(0,"%d,%d",current_file->filetype,current_file->size);
    if(scrap_load)
      strcpy(current_file->name,scrap_name);
    else
      Desk_Filing_GetLeafname(data->filename,current_file->name);
    Desk_LinkList_Init(&(current_file->header));
    Desk_LinkList_AddToTail(&Files,&(current_file->header));
    file_nr++;
    if(scrap_load)
    {
      strcpy(file_path,"<Wimp$Scrap>");
      strcpy(current_file->path,"<Wimp$Scrap>");
    }
    else
    {
      Desk_Filing_GetPathname(data->filename,file_path);
      Desk_Filing_GetPathname(data->filename,current_file->path);
    }
    current_file->sent=0;
    current_file->selected=0;
    //strcpy(files[file_nr++].name,data->filename);
  }
  return(Desk_TRUE);
}

static void get_downloads_directory(Desk_message_dataload *data)
{
  if( data->icon == CFILETR_DOWNLOADS )
  {
    //if( data->filetype == 4096 )
      Desk_Icon_SetText(cfiletr_window,CFILETR_DOWNLOADS,data->filename);
  }
  if( data->icon == EDIT_DIR )
  {
    //if( data->filetype == 4096 )
      Desk_Icon_SetText(edit_window,EDIT_DIR,data->filename);
  }
}



Desk_bool load_handler(Desk_event_pollblock *poll_block,void *reference)
{
  //Desk_message_block  *msg = &poll_block->data.message;
  Desk_message_block reply = poll_block->data.message;
  Desk_message_block  msg = poll_block->data.message;
  file_des *current_file;

  //Desk_Error_Report(0,"load");
  
  if(msg.header.sender==Desk_Event_taskhandle)
    return Desk_FALSE;

  if(msg.header.action==Desk_message_DATALOAD)
  {
    //Desk_Error_Report(0,"dataload");
    if(scrap_load)
    {
      msg.data.dataload.window=oldwindow;
      msg.data.dataload.icon=oldicon;
    }

    if(msg.data.dataload.window==haupt_window)
    {
      if(msg.data.dataload.filetype == 0xfff && !Desk_Kbd_KeyDown(Desk_inkey_SHIFT) && 
         !import_ascii)
        import_text_file(msg.data.dataload.filename);
      if(msg.data.dataload.filetype == 0xffd || Desk_Kbd_KeyDown(Desk_inkey_SHIFT))
      {
        strcpy(spool_filename,msg.data.dataload.filename);
        spool_position=0;
        Open_spool_window();
      }
    }
    dropped_in_tools_window=0;
    if(msg.data.dataload.window==send_window ||
       (msg.data.dataload.window==tools_window && msg.data.dataload.icon== TOOLS_FILETRANS) 
       && !transfer_active)
    {
      if(msg.data.dataload.window==tools_window)
      {
        dropped_in_tools_window=1;
         // alle alten Filenamen loeschen, falls vorhanden
        if(!file_droped) // nur beim ersten mal
        {
          while((current_file=Desk_LinkList_FirstItem(&Files))!=NULL)
          {
            Desk_LinkList_Unlink(&Files,&(current_file->header));
            Desk_DeskMem_Free(current_file);
          }
        }
      }
      file_droped=TRUE;
      get_filenames(&msg.data.dataload);
    }
    if(msg.data.dataload.window == cfiletr_window && msg.data.dataload.icon == CFILETR_DOWNLOADS )
      get_downloads_directory(&msg.data.dataload);
    if(msg.data.dataload.window == edit_window && msg.data.dataload.icon == EDIT_DIR )
      get_downloads_directory(&msg.data.dataload);

/*
    if (!strcmp(msg.data.dataload.filename, "<Wimp$Scrap>"))
      Desk_File_Delete( "<Wimp$Scrap>");
*/
    reply.header.action = Desk_message_DATALOADACK;
    reply.header.yourref = msg.header.myref;
    Desk_Wimp_SendMessage(Desk_event_SEND, &reply, msg.header.sender, 0);
    scrap_load=0;
  }

  if(msg.header.action == Desk_message_RAMTRANSMIT)
  {
    ram_load=FALSE;
    //Desk_Error_Report(0,"%d",msg.header.sender);
    import_text_ram(msg.data.ramtransmit.buffer,msg.data.ramtransmit.byteswritten);

    if(msg.data.ramtransmit.byteswritten==BUFFERLENGTH)
    {
      reply.header.action = Desk_message_RAMFETCH;
      reply.header.yourref = msg.header.myref;
      reply.data.ramfetch.buffer=ram_transfer_buffer;
      reply.data.ramfetch.buffsize=BUFFERLENGTH;
      reply.header.size = sizeof( Desk_message_block);
      //Desk_Error_Report(0,"%d",msg.header.sender);
      //g_reply=reply;
      //g_reply.data.ramfetch.buffsize=1024;
      //g_sender=msg.header.sender;
      Desk_Wimp_SendMessage(Desk_event_SENDWANTACK, &reply, msg.header.sender, 0);
    }

  }
  else
  {
    if(ram_load)
    {
      ram_load=FALSE;
      reply.header.action = Desk_message_DATASAVEACK;
      reply.header.yourref = msg.header.myref;
      reply.data.datasaveack.estsize = -1;
      strcpy( reply.data.datasaveack.filename, "<Wimp$Scrap>");
      reply.header.size = sizeof( Desk_message_block);
      Desk_Wimp_SendMessage(Desk_event_SEND, &reply, msg.header.sender, 0);
    }
  }

  if(msg.header.action == Desk_message_DATASAVE)
  {
    //Desk_Error_Report(0,"%s",msg.data.dataload.filename);
    strcpy(scrap_name,msg.data.dataload.filename);
    scrap_load=0;
    reply.header.action = Desk_message_RAMFETCH;
    reply.header.yourref = msg.header.myref;
    oldref=reply.header.yourref;
    oldsender=reply.header.sender;
    oldwindow=msg.data.datasave.window;
    oldicon=msg.data.datasave.icon;
    reply.data.ramfetch.buffer=ram_transfer_buffer;
    reply.data.ramfetch.buffsize=BUFFERLENGTH;
    reply.header.size = sizeof( Desk_message_block);
    Desk_Wimp_SendMessage(Desk_event_SENDWANTACK, &reply, msg.header.sender, 0);
    ram_load=TRUE;
  }

  return(Desk_TRUE);
}


Desk_bool ack_handler(Desk_event_pollblock *poll_block,void *reference)
{
  Desk_message_block  *msg = &poll_block->data.message;
  Desk_message_block reply = poll_block->data.message;

  if(msg->header.action == Desk_message_RAMFETCH)
  {
    if(msg->header.sender==Desk_Event_taskhandle && ram_load==TRUE)
    {
      scrap_load=1;
      //Desk_Error_Report(0,"ramfetch");
      ram_load=FALSE;
      reply.header.action = Desk_message_DATASAVEACK;
      reply.header.yourref = oldref; //msg->header.myref;
      reply.header.sender=oldsender;
      reply.data.datasaveack.estsize = -1;
      strcpy( reply.data.datasaveack.filename, "<Wimp$Scrap>");
      reply.header.size = sizeof( Desk_message_block);

      Desk_Wimp_SendMessage(Desk_event_SENDWANTACK, &reply, oldsender/*msg->header.sender*/, 0);
    }
  }

  return(Desk_TRUE);
}

/******************************** Export **********************************/

static void save_text_in_file(const char *name)
{
  Desk_file_handle f;
  int i;

  f=Desk_File_Open(name,Desk_file_WRITE);
  if(f==NULL)
  {
    show_message(msg[5].text);
    return;
  }
  /*
  for(i=0;i<tb_all;i++)
  {
    if(text_buffer[i]&SELECTED)
      Desk_File_WriteChar(f,(char)text_buffer[i]);
  }
  */
  i=0;
  while(mousebuffer[i]!=0)
    Desk_File_WriteChar(f,mousebuffer[i++]);
  Desk_File_Close(f);
  Desk_File_SetType(name,Desk_filetype_TEXT);
}

static int save_text_in_ram(Desk_task_handle sender,char *destbuffer,int length)
{
  static int text_buffer_pos=0;
  char *buffer;
  int i,j;

  buffer = (char *) Desk_DeskMem_Malloc(length);
  //Desk_Error_Report(0,"length: %d",length);
  j=0;
  i=text_buffer_pos;
  while(mousebuffer[i]!=0)
  {
    buffer[j++]=mousebuffer[i++];
    if(j==length)
    {
      text_buffer_pos=i;
      break;
    }
  }
  //Desk_Error_Report(0,"mousebuffer: %d",i);
  if(mousebuffer[i]==0)
  {
    //Desk_Error_Report(0,"hier");
    ram_save_ready=TRUE;
    text_buffer_pos=0;
  }
  else
    ram_save_ready=FALSE;
    
  if(j<length)
    length=j;
  Desk_Wimp_TransferBlock(Desk_Event_taskhandle,buffer,sender,destbuffer,length);
  Desk_DeskMem_Free(buffer);
  return(length);
}

static void savedata(char *name)
{
  Desk_file_handle f;
  Desk_event_pollblock event;

  strcpy(spool_filename,name);
  f=Desk_File_Open(name,Desk_file_WRITE);
  if(f==NULL)
  {
    show_message(msg[5].text);
    return;
  }
  Desk_File_Close(f);
  if(export_data_text)
    Desk_File_SetType(name,Desk_filetype_TEXT);
  else
    Desk_File_SetType(name,Desk_filetype_DATA);
  spool_position=0;
  event.data.mouse.icon=SPOOL_REC;
  Click_spool_window(&event, NULL);
  Open_spool_window();
}

Desk_bool save_handler(Desk_event_pollblock *poll_block,void *reference)
{
  Desk_message_block  *msg = &poll_block->data.message;
  Desk_message_block reply;
  int byteswritten = 0;
  static int multiple_of_buffer=0;

  if(msg->header.action == Desk_message_DATASAVE)
  {
    return(Desk_FALSE);
  }

  if(msg->header.action == Desk_message_DATASAVEACK)
  {
    switch(save_handler_type)
    {
      case EXPORT_TEXT:
        save_text_in_file(msg->data.datasaveack.filename);
      break;
      case EXPORT_DATA:
        savedata(msg->data.datasaveack.filename);
      break;
    }
    memcpy(&reply, msg, sizeof(Desk_message_block));
    reply.header.action = Desk_message_DATALOAD;
    reply.data.dataload.size = 49;
    reply.header.yourref = reply.header.myref;
    Desk_Wimp_SendMessage(Desk_event_SENDWANTACK, &reply, reply.header.sender, 0);
  }

  if(msg->header.action == Desk_message_RAMFETCH)
  {

    if(save_handler_type==EXPORT_TEXT && !multiple_of_buffer)
      byteswritten=save_text_in_ram(msg->header.sender,msg->data.ramfetch.buffer,
                                    msg->data.ramfetch.buffsize);


    memcpy(&reply, msg, sizeof(Desk_message_block));
    reply.header.yourref = reply.header.myref;
    reply.header.action  = Desk_message_RAMTRANSMIT;
    reply.data.ramtransmit.byteswritten = byteswritten;
   
    if(multiple_of_buffer)
    {
      multiple_of_buffer=0;
      reply.data.ramtransmit.byteswritten = 0;
      Desk_Wimp_SendMessage(Desk_event_SEND,&reply, reply.header.sender, 0);
    }
    else
      Desk_Wimp_SendMessage((ram_save_ready) ? Desk_event_SEND : Desk_event_SENDWANTACK,
                          &reply, reply.header.sender, 0);
                          
    if(ram_save_ready && msg->data.ramfetch.buffsize == byteswritten)
      multiple_of_buffer=1;
  }

  if(msg->header.action == Desk_message_DATALOADACK)
  {
    Desk_Wimp_CreateMenu((Desk_menu_block *)-1, 0, 0);  /* close menu */
    //Error_Report(0,"OK");
  }
  return(Desk_TRUE);
}
