/*
 * Copyright (c) 1995, Andreas Zieringer
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include "Desk/Icon.h"
#include "Desk/Slider.h"
#include "Desk/File.h"
#include "Desk/Time.h"

#include "global.h"
#include "text.h"
#include "vt100.h"
#include "ansi.h"
#include "spool.h"
#include "iconnames.h"
#include "event.h"
#include "console.h"

#include <stdio.h>
#include <stdlib.h>

extern int bottomLine;
extern int ymin,ymax;

extern void clearscreen(void);
extern void eraseScreen(void);
extern void set_cursor(int,int);
extern void setdefault(void);
extern int process_BTX_data(void);

void pause_spool(void)
{
  Desk_event_pollblock event;

  event.data.mouse.icon=SPOOL_PAUSE;
  Click_spool_window(&event, NULL);
}

void spool_stop(void)
{
  if(spool_action!=STOP || spool_pause)
  {
    Desk_Icon_AlterValidation(spool_window,SPOOL_PLAY,"R5;Splayu,playd;NPLAY");
    Desk_Icon_AlterValidation(spool_window,SPOOL_REC,"R5;Srecu,recd;NREC");
    if(spool_file!=-1)
    {
      Desk_File_Close(spool_file);
      spool_file=-1;
    }
    spool_action=STOP;
  }
}


void spool_play(void)
{
  static int z,i;

  static int time=0;
  int eof;


  eof=0;

  if(spool_file==-1)
  {
    //Error_Report(0,"spool file handle == NULL");
    return;
  }

  spool_speed=Desk_Icon_GetInteger(spool_window,SPOOL_SPEED);

  if(spool_once)
    spool_speed=1;

  ymin=terminal_height;
  ymax=-1;

  switch(dial_terminal_nr)
  {
    case 0: /* vt100 */
      for(i=0;i<spool_speed;i++)
      {
        if(Desk_File_EOF(spool_file))
        {
          eof=1;
          break;
        }

        get_update_rectangle();

        if(clear_screen)
        {
          clear_screen=0;
          clearLine(0, bottomLine);
          set_cursor(0,0);
        }

        ConOut(Desk_File_ReadChar(spool_file));
        spool_position=Desk_File_ReturnPos(spool_file);
        if(++z>=100)
        {
          Desk_Icon_SetInteger(spool_window,SPOOL_POS,spool_position/100);
          Desk_Slider_SetValue(&spool_slider, spool_position, NULL, NULL);
          z=0;
        }
        if(clear_screen)
        {
          pause_spool();
          break;
        }
      }
      if(eof || spool_once)
      {
        Desk_Icon_SetInteger(spool_window,SPOOL_POS,spool_position/100);
        Desk_Slider_SetValue(&spool_slider, spool_position, NULL, NULL);
        if(spool_file!=-1)
        {
          Desk_File_Close(spool_file);
          spool_file=-1;
        }
        spool_stop();
      }
      get_update_rectangle();
      update_text(0,ymin,80,ymax+1);
      //update_text(0,0,80,terminal_height);
    break;
    case 1: /* Ansi */
      for(i=0;i<spool_speed;i++)
      {
        if(Desk_File_EOF(spool_file))
        {
          eof=1;
          break;
        }
        get_update_rectangle();
        if(clear_screen)
        {
          if(clear_screen!=2)
          {
            clear_screen=0;
            eraseScreen();
          }
          else
          {
            clear_screen=0;
            attrib= (attrib&0xff0000ff)|0x00070700;
            clearLine(0, bottomLine);
            locate(0,0);
          }
        }
        decodeAnsi(Desk_File_ReadChar(spool_file));

        spool_position=Desk_File_ReturnPos(spool_file);
        if(++z>=100)
        {
          Desk_Icon_SetInteger(spool_window,SPOOL_POS,spool_position/100);
          Desk_Slider_SetValue(&spool_slider, spool_position, NULL, NULL);
          z=0;
        }
        if(clear_screen)
        {
          pause_spool();
          break;
        }
      }
      if(eof || spool_once)
      {
        Desk_Icon_SetInteger(spool_window,SPOOL_POS,spool_position/100);
        Desk_Slider_SetValue(&spool_slider, spool_position, NULL, NULL);
        if(spool_file!=-1)
        {
          Desk_File_Close(spool_file);
          spool_file=-1;
        }
        spool_stop();
      }
      get_update_rectangle();
      update_text(0,ymin,80,ymax+1);
      //update_text(0,0,80,terminal_height);
    break;
    case 3:
      //cept_ymin=25;
      //cept_ymax=-1;

      for(i=0;i<spool_speed;i++)
      {
        if(Desk_File_EOF(spool_file))
        {
          eof=1;
          break;
        }
        if(clear_screen)
        {
          if(clear_screen==1)
          {
            clear_screen=0;
            clearscreen();
          }
          else
          {
            clear_screen=0;
            setdefault();
          }
        }
        process_BTX_data();
        if(Desk_Time_Monotonic()-time>10)
        {
          //Desk_Window_ForceWholeRedraw(haupt_window);
          //Desk_Window_ForceRedraw(haupt_window,0,-(cept_ymax)*20,960,-(cept_ymin-1)*20);
          Desk_Window_ForceRedraw(haupt_window,0,-(cept_ymax)*((10*factors.ymul)/100)<<1,(960*factors.xmul)/100,-(cept_ymin-1)*((10*factors.ymul)/100)<<1);
          cept_ymin=25;
          cept_ymax=-1;
          //Desk_Icon_printf(unten_window,UNTEN_LSTATUS,"%d,%d",cept_ymin,cept_ymax);

          time=Desk_Time_Monotonic();
        }
        spool_position=Desk_File_ReturnPos(spool_file);
        if(++z>=100)
        {
          Desk_Icon_SetInteger(spool_window,SPOOL_POS,spool_position/100);
          Desk_Slider_SetValue(&spool_slider, spool_position, NULL, NULL);
          z=0;
        }
        if(clear_screen)
        {
          pause_spool();
          Desk_Window_ForceWholeRedraw(haupt_window);
          break;
        }
      }
      if(eof || spool_once)
      {
        Desk_Icon_SetInteger(spool_window,SPOOL_POS,spool_position/100);
        Desk_Slider_SetValue(&spool_slider, spool_position, NULL, NULL);
        if(spool_file!=-1)
        {
          Desk_File_Close(spool_file);
          spool_file=-1;
        }
        spool_file=-1;
        spool_stop();
        Desk_Window_ForceWholeRedraw(haupt_window);
      }
    break;

  }
}

void spool_rec(int c)
{
  static int z;


  Desk_File_WriteChar(spool_file, c);
  spool_position=Desk_File_ReturnPos(spool_file);

  if(++z>=100)
  {
    Desk_Icon_SetInteger(spool_window,SPOOL_POS,(int)spool_position/100);
    z=0;
  }
}



