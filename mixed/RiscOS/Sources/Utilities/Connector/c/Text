/*
 * Copyright (c) 1995, Andreas Zieringer
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include "Desk/WimpSWIs.h"
#include "Desk/Wimp.h"
#include "Desk/Screen.h"
#include "Desk/GFX.h"
#include "Desk/ColourTran.h"
#include "stdlib.h"
#include "global.h"
#include "console.h"
#include "display.h"
#include "iconnames.h"

#define XPOS 552
#define YPOS 44

static unsigned int color[6][16]={ {0xff,0xff,0xff,0x00,0xff,0xff,0xff,0x00,
                                 0xff,0xff,0x00,0x00,0xff,0xff,0x00,0x00},
                                {0xffff,0xaaaa,0xaaaa,0x5555,0xffff,0xaaaa,0xaaaa,0x5555,
                                 0xaaaa,0xaaaa,0x5555,0x5555,0xffff,0xaaaa,0x5555,0x0000},
                                {0x77777777,0xbbbbbbbb,0xaaaaaaaa,0xeeeeeeee,0x88888888,
                                 0xbbbbbbbb,0xffffffff,0x22222222,
                                 0x55555555,0xbbbbbbbb,0xaaaaaaaa,0x99999999,0x88888888,
                                 0xbbbbbbbb,0xffffffff,0x00000000},
                                {0x00000000,0x11111111,0x41414141,0x52525252,0x88888888,
                                 0x91919191,0xc1c1c1c1,0xd2d2d2d2,0x2d2d2d2d,0x15151515,
                                 0x62626262,0x77777777,0x8b8b8b8b,0x9d9d9d9d,0xeaeaeaea,
                                 0xffffffff},
                                {0x00000000,0x00150015,0x02a002a0,0x02b502b5,0x54005400,
                                 0x54155415,0x56a056a0,0x56b556b5,0x294a294a,0x001f001f,
                                 0x03e003e0,0x03ff03ff,0x7c007c00,0x7c1b7c1b,0x7fe07fe0,
                                 0x7fff7fff},
                                {0x00000000,0x000000ab,0x0000ab00,0x0000abab,0x00ab0000,
                                 0x00ab00ab,0x00abab00,0x00ababab,0x00555555,0x000000ff,
                                 0x0000ff00,0x0000ffff,0x00ff0000,0x00ff00dd,0x00ffff00,
                                 0x00ffffff} };


static unsigned int cursor_color[6][16]={ {0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,
                                         0x00,0xff,0xff,0x00,0xff,0x00,0x00},
                                        {0x0000,0x0000,0x5555,0x5555,0xaaaa,
                                         0xaaaa,0xaaaa,0xffff,0xaaaa,0x5555,
                                         0xaaaa,0xaaaa,0x0000,0xaaaa,0x5555,
                                         0x5555},
                                        {0x00000000,0x11111111,0x22222222,0x33333333,
                                         0x44444444,0x55555555,0x66666666,0x77777777,
                                         0x88888888,0x99999999,0xaaaaaaaa,0xbbbbbbbb,
                                         0xcccccccc,0xdddddddd,0xeeeeeeee,0xffffffff},
                                        {0xffffffff,0xfdfdfdfd,0xd3d3d3d3,0xd1d1d1d1,
                                         0x2f2f2f2f,0x2d2d2d2d,0x03030303,0x00000000,
                                         0xa0a0a0a0,0x76767676,0x60606060,0x14141414,
                                         0xf6f6f6f6,0x44444444,0x57575757,0xcacacaca},
                                        {0x7fff7fff,0x6f7b6f7b,0x5ef75ef7,0x4e734e73,
                                         0x39ce39ce,0x294a294a,0x18c618c6,0x00000000,
                                         0x4d004d00,0x03bd03bd,0x03200320,0x001b001b,
                                         0x5fbd5fbd,0x022a022a,0x02ff02ff,0x7ee07ee0},
                                        {0x00ffffff,0x00dddddd,0x00bbbbbb,0x00999999,
                                         0x00777777,0x00555555,0x00333333,0x00000000,
                                         0x00994400,0x0000eeee,0x0000cc00,0x000000dd,
                                         0x00bbeeee,0x00008855,0x0000bbff,0x00ffbb00} };

static int charheight;

static void set_colours(unsigned int c,unsigned char **zeichenp,
                        unsigned int *bc,unsigned int *fc)
{
  int fcol,bcol;

  if( (c&VT100) && (c&BOLD) )
    *zeichenp=zeichen+(256<<log2bpp);
  else
    *zeichenp=zeichen;

  fcol=(c&0x00000f00)>>8;
  bcol=(c&0x0000f000)>>12;

/*
  if(c&EOL)
  {
    if( c&SELECTED || c&INVERT)
      bcol=fcol;
    else
      fcol=bcol;
  }
*/

  if( !(c&CURSOR) )
  {
    if( !(c&VT100) )
    {
      if(c&HIGH)
        fcol+=8;
      if(c&BLINK && text_flash)
        fcol=bcol;

      if( c&SELECTED )
      {
        *bc=color[log2bpp][fcol];
        *fc=color[log2bpp][bcol];
      }
      else
      {
        *fc=color[log2bpp][fcol];
        *bc=color[log2bpp][bcol];
      }
    }
    else
    {
      if(c&BLINK && text_flash)
        fcol=bcol;
      if( c&INVERT || c&SELECTED )
      {
        *bc=cursor_color[log2bpp][fcol];
        *fc=cursor_color[log2bpp][bcol];
      }
      else
      {
        *fc=cursor_color[log2bpp][fcol];
        *bc=cursor_color[log2bpp][bcol];
      }
    }
  }
  else
  {
    *fc=cursor_color[log2bpp][7];
    *bc=cursor_color[log2bpp][cursorcolor];
  }

  /* Special check for true colour modes */
  switch(log2bpp)
  {
    case 4:
      if(modeflags&0x4000) /* RGB ordering */
      {  
        *fc=(*fc&0x03E003E0)|((*fc&0x7C007C00)>>10)|((*fc&0x001F001F)<<10);
        *bc=(*bc&0x03E003E0)|((*bc&0x7C007C00)>>10)|((*bc&0x001F001F)<<10);
      }
      /* Tables are held 5:5:5, compute 5:6:5 and 4:4:4 */
      if(ncolour==4095)
      {
        fcol = (*fc&0x001F)>>1;
        fcol|=((*fc&0x03E0)>>2)&0x0F0;
        fcol|=((*fc&0x7C00)>>3)&0xF00; *fc=fcol|(fcol<<16);
        bcol = (*bc&0x001F)>>1;
        bcol|=((*bc&0x03E0)>>2)&0x0F0;
        bcol|=((*bc&0x7C00)>>3)&0xF00; *bc=bcol|(bcol<<16);
      }
      else
      {
        if((ncolour==65535)&&(modeflags&0x80)) /* Full palette */
        {
          fcol = (*fc&0x001F);
          fcol|=((*fc&0x7FE0)<<1); *fc=fcol|(fcol<<16);
          bcol = (*bc&0x001F);
          bcol|=((*bc&0x7FE0)<<1); *bc=bcol|(bcol<<16);
        }
      }
      break;

    case 5:
      if(modeflags&0x4000) /* RGB ordering */
      {  
        *fc=(*fc&0x0000FF00)|((*fc&0x00FF0000)>>16)|((*fc&0x000000FF)<<16);
        *bc=(*bc&0x0000FF00)|((*bc&0x00FF0000)>>16)|((*bc&0x000000FF)<<16);
      }
      break;
  }
}


static void plotline1(unsigned char *spr,unsigned char bc,unsigned char fc)
{
  unsigned char hilf;

  hilf=0xff;
  *spr=((hilf^0xff)&bc)|(hilf&fc);
}

static void plotchar1(unsigned char *zeichenp,unsigned char *bitf,
                      unsigned char *spr,unsigned short bc,unsigned short fc)
{
  int i;
  unsigned char *zw;

  for(i=0;i<charheight;i++)
  {
    zw=(unsigned char *)zeichenp+(*bitf++);
    *spr=((*zw^0xff)&bc)|(*zw&fc);
    spr+=80;
  }

}

static void write1(int x0,int y0,int x1,int y1)
{
    int x,y,yy;
    unsigned char *spr;
    unsigned int c;
    unsigned char *zeichenp;
    unsigned int oldc=0x12345678;
    unsigned int bc,fc;
    unsigned char *bitf;


    for(y=y0;y<=y1;y++)
    {
      spr=(unsigned char *)spritearea+60+x0;
      for(x=x0;x<=x1;x++)
      {
        c=text_buffer[tb_above+x+y*80];
        if (oldc!=(c&0xffffff00))
        {
          set_colours(c,&zeichenp,&bc,&fc);
          oldc=(c&0xffffff00);
        }

        if((c&0x000000ff)!=32)
        {
          bitf=(unsigned char*)bit_font+charheight*((char)c);
          plotchar1(zeichenp,bitf,spr,(unsigned char)bc,(unsigned char)fc);
        }
        else
          plotspace1(spr,bc,charheight);

        if(c&UNDERLINED)
          plotline1(spr+80*(charheight-1),(unsigned char)bc,(unsigned char)fc);
        spr++;
      }

      yy=yorigin-(y*ZA)-screen_above;  /*   y*ZA  */
      Desk_Sprite_Plot((Desk_sprite_area)spritearea,"z",xorigin,yy-ZA,0);
    }
}


static void plotline2(unsigned short *spr,unsigned short bc,unsigned short fc)
{
  unsigned short hilf;

  hilf=0xffff;
  *spr=((hilf^0xffff)&bc)|(hilf&fc);
}

static void plotchar2(unsigned char *zeichenp,unsigned char *bitf,
                      unsigned short *spr,unsigned short bc,unsigned short fc)
{
  int i;
  unsigned short *zw;

  for(i=0;i<charheight;i++)
  {
    zw=(unsigned short *)zeichenp+(*bitf++);
    *spr=((*zw^0xffff)&bc)|(*zw&fc);
    spr+=80;
  }

/*
  switch(charheight)
  {
    case 16: zw=(unsigned short *)zeichenp+(*bitf++);
             *spr=((*zw^0xffff)&bc)|(*zw&fc); spr+=80;
    case 15: zw=(unsigned short *)zeichenp+(*bitf++);
             *spr=((*zw^0xffff)&bc)|(*zw&fc); spr+=80;
    case 14: zw=(unsigned short *)zeichenp+(*bitf++);
             *spr=((*zw^0xffff)&bc)|(*zw&fc); spr+=80;
    case 13: zw=(unsigned short *)zeichenp+(*bitf++);
             *spr=((*zw^0xffff)&bc)|(*zw&fc); spr+=80;
    case 12: zw=(unsigned short *)zeichenp+(*bitf++);
             *spr=((*zw^0xffff)&bc)|(*zw&fc); spr+=80;
    case 11: zw=(unsigned short *)zeichenp+(*bitf++);
             *spr=((*zw^0xffff)&bc)|(*zw&fc); spr+=80;
    case 10: zw=(unsigned short *)zeichenp+(*bitf++);
             *spr=((*zw^0xffff)&bc)|(*zw&fc); spr+=80;
    case  9: zw=(unsigned short *)zeichenp+(*bitf++);
             *spr=((*zw^0xffff)&bc)|(*zw&fc); spr+=80;
    case  8: zw=(unsigned short *)zeichenp+(*bitf++);
             *spr=((*zw^0xffff)&bc)|(*zw&fc); spr+=80;
    case  7: zw=(unsigned short *)zeichenp+(*bitf++);
             *spr=((*zw^0xffff)&bc)|(*zw&fc); spr+=80;
    case  6: zw=(unsigned short *)zeichenp+(*bitf++);
             *spr=((*zw^0xffff)&bc)|(*zw&fc); spr+=80;
    case  5: zw=(unsigned short *)zeichenp+(*bitf++);
             *spr=((*zw^0xffff)&bc)|(*zw&fc); spr+=80;
    case  4: zw=(unsigned short *)zeichenp+(*bitf++);
             *spr=((*zw^0xffff)&bc)|(*zw&fc); spr+=80;
    case  3: zw=(unsigned short *)zeichenp+(*bitf++);
             *spr=((*zw^0xffff)&bc)|(*zw&fc); spr+=80;
    case  2: zw=(unsigned short *)zeichenp+(*bitf++);
             *spr=((*zw^0xffff)&bc)|(*zw&fc); spr+=80;
    case  1: zw=(unsigned short *)zeichenp+(*bitf++);
             *spr=((*zw^0xffff)&bc)|(*zw&fc); spr+=80;
    case  0: break;
  }
*/
}

static void write2(int x0,int y0,int x1,int y1)
{
    int x,y,yy;
    unsigned short *spr;
    unsigned int c;
    unsigned char *zeichenp;
    unsigned int oldc=0x12345678;
    unsigned int bc,fc;
    unsigned char *bitf;


    for(y=y0;y<=y1;y++)
    {
      spr=(unsigned short *)spritearea+30+x0;
      for(x=x0;x<=x1;x++)
      {
        c=text_buffer[tb_above+x+y*80];
        if (oldc!=(c&0xffffff00))
        {
          set_colours(c,&zeichenp,&bc,&fc);
          oldc=(c&0xffffff00);
        }

        if((c&0x000000ff)!=32)
        {
          bitf=(unsigned char*)bit_font+charheight*((char)c);
          plotchar2(zeichenp,bitf,spr,(unsigned short)bc,(unsigned short)fc);
        }
        else
          plotspace2(spr,bc,charheight);

        if(c&UNDERLINED)
          plotline2(spr+80*(charheight-1),(unsigned short)bc,(unsigned short)fc);
        spr++;
      }

      yy=yorigin-(y*ZA)-screen_above;  /*   y*ZA  */
      Desk_Sprite_Plot((Desk_sprite_area)spritearea,"z",xorigin,yy-ZA,0);
    }
}

static void plotline4(unsigned int *spr,unsigned int bc,unsigned int fc)
{
  unsigned int hilf;

  hilf=0xffffffff;
  *spr=((hilf^0xffffffff)&bc)|(hilf&fc);
}

static void plotchar4(unsigned char *zeichenp,unsigned char *bitf,
                      unsigned int *spr,unsigned int bc,unsigned int fc)
{
  unsigned int *zw;

  switch(charheight)
  {
    case 18: zw=(unsigned int *)zeichenp+(*bitf++);
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=80;
    case 17: zw=(unsigned int *)zeichenp+(*bitf++);
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=80;
    case 16: zw=(unsigned int *)zeichenp+(*bitf++);
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=80;
    case 15: zw=(unsigned int *)zeichenp+(*bitf++);
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=80;
    case 14: zw=(unsigned int *)zeichenp+(*bitf++);
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=80;
    case 13: zw=(unsigned int *)zeichenp+(*bitf++);
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=80;
    case 12: zw=(unsigned int *)zeichenp+(*bitf++);
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=80;
    case 11: zw=(unsigned int *)zeichenp+(*bitf++);
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=80;
    case 10: zw=(unsigned int *)zeichenp+(*bitf++);
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=80;
    case  9: zw=(unsigned int *)zeichenp+(*bitf++);
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=80;
    case  8: zw=(unsigned int *)zeichenp+(*bitf++);
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=80;
    case  7: zw=(unsigned int *)zeichenp+(*bitf++);
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=80;
    case  6: zw=(unsigned int *)zeichenp+(*bitf++);
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=80;
    case  5: zw=(unsigned int *)zeichenp+(*bitf++);
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=80;
    case  4: zw=(unsigned int *)zeichenp+(*bitf++);
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=80;
    case  3: zw=(unsigned int *)zeichenp+(*bitf++);
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=80;
    case  2: zw=(unsigned int *)zeichenp+(*bitf++);
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=80;
    case  1: zw=(unsigned int *)zeichenp+(*bitf++);
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=80;
    case  0: break;
  }
}

static void write4(int x0,int y0,int x1,int y1)
{
    int x,y,yy;
    unsigned int *spr;
    unsigned int c;
    unsigned char *zeichenp;
    unsigned int oldc=0x12345678;
    unsigned int bc,fc;
    unsigned char *bitf;

    for(y=y0;y<=y1;y++)
    {
      
      spr=(unsigned int *)spritearea+15+x0;
      for(x=x0;x<=x1;x++)
      {
        c=text_buffer[tb_above+x+y*80];
        if (oldc!=(c&0xffffff00))
        {
          set_colours(c,&zeichenp,&bc,&fc);
          oldc=(c&0xffffff00);
        }

        if((c&0x000000ff)!=32)
        {
          bitf=(unsigned char*)bit_font+charheight*((char)c);
          plotchar4(zeichenp,bitf,spr,bc,fc);
        }
        else
          plotspace4(spr,bc,charheight);

        if(c&UNDERLINED)
          plotline4(spr+80*(charheight-1),bc,fc);
        spr++;
      }
      
        yy=yorigin-(y*ZA)-screen_above;
        Desk_Sprite_Plot((Desk_sprite_area)spritearea,"z",xorigin,yy-ZA,0);
        /*
        Desk_GFX_GCOL(0,8);
        Desk_GFX_RectangleFill(xorigin,yy-ZA,1280,36);
        Desk_GFX_GCOL(0,0);
        Desk_GFX_Move(xorigin,yy);
        Desk_GFX_Write0("Dies ist ein Test");
        */
    }
}

static void plotline8(unsigned int *spr,unsigned int bc,unsigned int fc)
{
  unsigned int hilf;

  hilf=0xffffffff;
  *spr=((hilf^0xffffffff)&bc)|(hilf&fc);
  *(spr+1)=*spr;
}

static void plotchar8(unsigned char *zeichenp,unsigned char *bitf,
                      unsigned int *spr,unsigned int bc,unsigned int fc)
{
  int i;
  unsigned int *zw;

  for(i=0;i<charheight;i++)
  {
    zw=(unsigned int *)zeichenp+(*bitf++)*2;
    *spr=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
    *(spr+1)=((*zw^0xffffffff)&bc)|(*zw&fc);
    spr+=160;
  }

/*
  switch(charheight)
  {
    case 16: zw=(unsigned int *)zeichenp+(*bitf++)*2;
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
             *(spr+1)=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=160;
    case 15: zw=(unsigned int *)zeichenp+(*bitf++)*2;
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
             *(spr+1)=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=160;
    case 14: zw=(unsigned int *)zeichenp+(*bitf++)*2;
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
             *(spr+1)=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=160;
    case 13: zw=(unsigned int *)zeichenp+(*bitf++)*2;
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
             *(spr+1)=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=160;
    case 12: zw=(unsigned int *)zeichenp+(*bitf++)*2;
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
             *(spr+1)=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=160;
    case 11: zw=(unsigned int *)zeichenp+(*bitf++)*2;
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
             *(spr+1)=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=160;
    case 10: zw=(unsigned int *)zeichenp+(*bitf++)*2;
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
             *(spr+1)=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=160;
    case  9: zw=(unsigned int *)zeichenp+(*bitf++)*2;
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
             *(spr+1)=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=160;
    case  8: zw=(unsigned int *)zeichenp+(*bitf++)*2;
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
             *(spr+1)=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=160;
    case  7: zw=(unsigned int *)zeichenp+(*bitf++)*2;
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
             *(spr+1)=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=160;
    case  6: zw=(unsigned int *)zeichenp+(*bitf++)*2;
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
             *(spr+1)=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=160;
    case  5: zw=(unsigned int *)zeichenp+(*bitf++)*2;
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
             *(spr+1)=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=160;
    case  4: zw=(unsigned int *)zeichenp+(*bitf++)*2;
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
             *(spr+1)=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=160;
    case  3: zw=(unsigned int *)zeichenp+(*bitf++)*2;
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
             *(spr+1)=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=160;
    case  2: zw=(unsigned int *)zeichenp+(*bitf++)*2;
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
             *(spr+1)=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=160;
    case  1: zw=(unsigned int *)zeichenp+(*bitf++)*2;
             *spr=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
             *(spr+1)=((*zw^0xffffffff)&bc)|(*zw&fc); spr+=160;
    case  0: break;
  }
*/
}

static void write8(int x0,int y0,int x1,int y1)
{
    int x,y,yy;
    unsigned int *spr;
    unsigned int c;
    unsigned char *zeichenp;
    unsigned int oldc=0x12345678;
    unsigned int bc,fc;
    unsigned char *bitf;


    for(y=y0;y<=y1;y++)
    {
      spr=(unsigned int *)spritearea+15+x0*2;
      for(x=x0;x<=x1;x++)
      {
        c=text_buffer[tb_above+x+y*80];
        if (oldc!=(c&0xffffff00))
        {
          set_colours(c,&zeichenp,&bc,&fc);
          oldc=(c&0xffffff00);
        }

        if((c&0x000000ff)!=32)
        {
          bitf=(unsigned char*)bit_font+charheight*((char)c);
          plotchar8(zeichenp,bitf,spr,bc,fc);
        }
        else
          plotspace8(spr,bc,charheight);

        if(c&UNDERLINED)
          plotline8(spr+160*(charheight-1),bc,fc);
        spr+=2;
      }

      yy=yorigin-(y*ZA)-screen_above;  /*   y*ZA  */
      Desk_Sprite_Plot((Desk_sprite_area)spritearea,"z",xorigin,yy-ZA,0);
    }
}


static void plotline16(unsigned int *spr,unsigned int bc,unsigned int fc)
{
  unsigned int hilf;

  hilf=0xffffffff;
  *spr=((hilf^0xffffffff)&bc)|(hilf&fc);
  *(spr+1)=*spr;
  *(spr+2)=*spr;
  *(spr+3)=*spr;
}

static void plotchar16(unsigned char *zeichenp,unsigned char *bitf,
                      unsigned int *spr,unsigned int bc,unsigned int fc)
{
  int i;
  unsigned int *zw;

  for(i=0;i<charheight;i++)
  {
    zw=(unsigned int *)zeichenp+(*bitf++)*4;
    *spr=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
    *(spr+1)=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
    *(spr+2)=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
    *(spr+3)=((*zw^0xffffffff)&bc)|(*zw&fc);
    spr+=320;
  }
}

static void write16(int x0,int y0,int x1,int y1)
{
    int x,y,yy;
    unsigned int *spr;
    unsigned int c;
    unsigned char *zeichenp;
    unsigned int oldc=0x12345678;
    unsigned int bc,fc;
    unsigned char *bitf;


    for(y=y0;y<=y1;y++)
    {
      spr=(unsigned int *)spritearea+15+x0*4;
      for(x=x0;x<=x1;x++)
      {
        c=text_buffer[tb_above+x+y*80];
        if (oldc!=(c&0xffffff00))
        {
          set_colours(c,&zeichenp,&bc,&fc);
          oldc=(c&0xffffff00);
        }
        /*
        if((c&0x000000ff)!=32)
        {
        */
          bitf=(unsigned char*)bit_font+charheight*((char)c);
          plotchar16(zeichenp,bitf,spr,bc,fc);
        /*
        }
        else
          plotspace16(spr,bc,charheight);
        */
        if(c&UNDERLINED)
          plotline16(spr+320*(charheight-1),bc,fc);
        spr+=4;
      }

      yy=yorigin-(y*ZA)-screen_above;  /*   y*ZA  */
      Desk_Sprite_Plot((Desk_sprite_area)spritearea,"z",xorigin,yy-ZA,0);
/*
      yy=(((screen_size.y<<1)-(yorigin-(y*ZA)-screen_above))>>3)*screen_size.x;
      plotsprite16(screen_address+(xorigin>>2)+yy,(unsigned int *)spritearea+15,screen_size.x);
*/
    }
}



static void plotline32(unsigned int *spr,unsigned int bc,unsigned int fc)
{
  unsigned int hilf;

  hilf=0xffffffff;
  *spr=((hilf^0xffffffff)&bc)|(hilf&fc);
  *(spr+1)=*spr;
  *(spr+2)=*spr;
  *(spr+3)=*spr;
  *(spr+4)=*spr;
  *(spr+5)=*spr;
  *(spr+6)=*spr;
  *(spr+7)=*spr;
}

static void plotchar32(unsigned char *zeichenp,unsigned char *bitf,
                      unsigned int *spr,unsigned int bc,unsigned int fc)
{
  int i;
  unsigned int *zw;

  for(i=0;i<charheight;i++)
  {
    zw=(unsigned int *)zeichenp+(*bitf++)*8;
    *spr=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
    *(spr+1)=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
    *(spr+2)=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
    *(spr+3)=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
    *(spr+4)=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
    *(spr+5)=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
    *(spr+6)=((*zw^0xffffffff)&bc)|(*zw&fc); zw++;
    *(spr+7)=((*zw^0xffffffff)&bc)|(*zw&fc);
    spr+=640;
  }

}

static void write32(int x0,int y0,int x1,int y1)
{
    int x,y,yy;
    unsigned int *spr;
    unsigned int c;
    unsigned char *zeichenp;
    unsigned int oldc=0x12345678;
    unsigned int bc,fc;
    unsigned char *bitf;


    for(y=y0;y<=y1;y++)
    {
      spr=(unsigned int *)spritearea+15+x0*8;
      for(x=x0;x<=x1;x++)
      {
        c=text_buffer[tb_above+x+y*80];
        if (oldc!=(c&0xffffff00))
        {
          set_colours(c,&zeichenp,&bc,&fc);
          oldc=(c&0xffffff00);
        }
        bitf=(unsigned char*)bit_font+charheight*((char)c);
        plotchar32(zeichenp,bitf,spr,bc,fc);
        if(c&UNDERLINED)
          plotline32(spr+640*(charheight-1),bc,fc);
        spr+=8;
      }

      yy=yorigin-(y*ZA)-screen_above;  /*   y*ZA  */
      Desk_Sprite_Plot((Desk_sprite_area)spritearea,"z",xorigin,yy-ZA,0);
    }
}


void redraw_text(void)
{

  Desk_bool more;
  int xan,yan,xen,yen;
  Desk_window_redrawblock r;
  unsigned int old;
  int cx;
  /*
  //Desk_window_state state;

  //sprite_id=(osspriteop_id) (osspriteop_header *) ((char *)spritearea+spritearea->first);
  //Desk_Wimp_GetWindowState(haupt_window,&state);
  //top=state.flags.data.top;
  */

  if(highres)
  {
    if(dial_terminal_nr==0 || dial_terminal_nr==2)
      charheight=vt_charheight;
    else
      charheight=ansi_charheight;
    ZA=charheight<<1;
  }
  else
  {
    if(dial_terminal_nr==0 || dial_terminal_nr==2)
      charheight=vt_charheight>>1;
    else
      charheight=ansi_charheight>>1;
    ZA=charheight<<2;
  }

  r.window = haupt_window;
  Desk_Wimp_RedrawWindow(&r,&more);

  if(cursor_on && input_focus==haupt_window && flash)
  {
    cx=cursorX;
    if(cx>79)
      cx=79;
    old=text_buffer[tb_above+cx+cursorY*80];
    text_buffer[tb_above+cx+cursorY*80]=old|CURSOR;
  }

  while(more)
  {
        xorigin=r.rect.min.x-r.scroll.x;
        yorigin=r.rect.max.y-r.scroll.y;

        xan=(r.cliprect.min.x-xorigin)>>4;
        xen=(r.cliprect.max.x-xorigin)>>4;
        yan=(yorigin-r.cliprect.max.y-screen_above);
        if(yan<0)
          yan=yan/ZA-1;
        else
          yan=yan/ZA;
        yen=(yorigin-r.cliprect.min.y-screen_above)/ZA;

        if (yen>terminal_height-1)
          yen=terminal_height-1;

        if (xen>79)
          xen=79;

        switch(log2bpp)
        {
           case 0: write1(xan,yan,xen,yen);  break;
           case 1: write2(xan,yan,xen,yen);  break;
           case 2: write4(xan,yan,xen,yen);  break;
           case 3: write8(xan,yan,xen,yen);  break;
           case 4: write16(xan,yan,xen,yen); break;
           case 5: write32(xan,yan,xen,yen); break;
        }

    Desk_Wimp_GetRectangle(&r,&more);
  }
  if(cursor_on && input_focus==haupt_window && flash)
    text_buffer[tb_above+cx+cursorY*80]=old;
}

void update_text(int xx0,int yy0,int xx1,int yy1)
{
  Desk_window_redrawblock r;
  Desk_bool more;
  int xan,yan,xen,yen;

  /*
  //Desk_window_state state;

  //sprite_id=(osspriteop_id) (osspriteop_header *) ((char *)spritearea+spritearea->first);
  //Desk_Wimp_GetWindowState(haupt_window,&state);
  //top=state.flags.data.top;
  */

  if(highres)
  {
    if(dial_terminal_nr==0 || dial_terminal_nr==2)
      charheight=vt_charheight;
    else
     charheight=ansi_charheight;
    ZA=charheight<<1;
  }
  else
  {
    if(dial_terminal_nr==0 || dial_terminal_nr==2)
      charheight=vt_charheight>>1;
    else
     charheight=ansi_charheight>>1;
    ZA=charheight<<2;
  }

  r.window = haupt_window;
  r.rect.min.x=(xx0<<4);
  r.rect.min.y=-(yy1*ZA)-screen_above;
  r.rect.max.y=-(yy0*ZA)-screen_above;
  r.rect.max.x=(xx1<<4);
  Desk_Wimp_UpdateWindow(&r,&more);


  while(more)
  {

        xorigin=r.rect.min.x-r.scroll.x;
        yorigin=r.rect.max.y-r.scroll.y;

        xan=(r.cliprect.min.x-xorigin)>>4;
        xen=(r.cliprect.max.x-xorigin)>>4;
        yan=(yorigin-r.cliprect.max.y-screen_above)/ZA-1;
        yen=(yorigin-r.cliprect.min.y-screen_above)/ZA;
        if (yen>terminal_height-1)
          yen=terminal_height-1;
        /*
        if ((xen==80) && (xan==0))
          xen=79;
        */

        if (xen>79)
          xen=79;


        switch(log2bpp)
        {
           case 0: write1(xan,yan,xen,yen);  break;
           case 1: write2(xan,yan,xen,yen);  break;
           case 2: write4(xan,yan,xen,yen);  break;
           case 3: write8(xan,yan,xen,yen);  break;
           case 4: write16(xan,yan,xen,yen); break;
           case 5: write32(xan,yan,xen,yen); break;
        }
    Desk_Wimp_GetRectangle(&r,&more);
  }
}

void updateCursor(void)
{
  int old;
  int cx;

  if(cursor_on && input_focus==haupt_window)
  {
    cx=cursorX;
    if(cx>79)
      cx=79;

    if(flash)
    {
      old=text_buffer[tb_above+cx+cursorY*80];
      text_buffer[tb_above+cx+cursorY*80]=old|CURSOR;
      update_text(cx,cursorY,cx+1,cursorY+1);
      text_buffer[tb_above+cx+cursorY*80]=old;
    }
    else
      update_text(cx,cursorY,cx+1,cursorY+1);
  }
}

void blink_text(void)
{
  int x,y;

  if(input_focus==haupt_window)
  {
    for(y=0;y<terminal_height;y++)
    {
      for(x=0;x<80;x++)
      {
        if(text_buffer[tb_above+x+y*80]&BLINK)
        {
          update_text(0,y,80,y+1);
          break;
        }
      }
    }
  }
}
/* online-time */

