/*
 * Copyright (c) 1995, Andreas Zieringer
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include "Desk/WimpSWIs.h"

#include "global.h"
#include "text.h"
#include "Hterm.h"
#include "vt100.h"
#include "misc.h"

#include <stdlib.h>
#include <stdarg.h>
#include <string.h>



extern int ymin;
extern void remove_oldattr(void);
extern int ymin,ymax;

/*
static os_colour col_con[]={0xffffff00,0xdddddd00,0xbbbbbb00,0x99999900,0x77777700,0x55555500,0x33333300,0x00000000,0x99440000,0x00eeee00,0x00cc0000,0x0000dd00,0xbbeeee00,0x00885500,0x00bbff00,0xffbb0000};
*/

unsigned int saveX, saveY, saveAttr;

static char tabs[80];            /* active tab stops */


void invert_attribute(unsigned int *attribute)
{
  unsigned int hilf,hilf1;

  hilf=(*attribute&0x00f0f000)>>4;
  hilf1=(*attribute&0x000f0f00)<<4;
  *attribute=((*attribute&0xff0000ff)|(hilf|hilf1));
}


void setchar(int x,int y,unsigned int attribute)
{
  //if ( (attribute&0xff000000) == _REVER )
  //  invert_attribute(&attribute);
  text_buffer[tb_above+x+y*80]=attribute;
}



void clearColumn(int from, int to)
{
  int i;

  for (i = from; i < to; i++)
  {
    setchar(i,cursorY,attrib+32);
  }
  update_text(0,cursorY,MAX_COLUMN,cursorY+1);
}

void clearLine(int from,int to)
{
        int y,x;

        for (y = from; y <= to; y++)
          for(x = 0; x < 80; x++)
            setchar(x,y,attrib+32);
        update_text(0,from,MAX_COLUMN,to+1);
}

void outESC(char *string)
{
  (*driver)(DRIVER_PUTBYTE,portnumber,ESC,0);
  while(*string != '\0')         /* Do until end of id string */
     (*driver)(DRIVER_PUTBYTE,portnumber,*string++,0);

}

void out_ESC(char *text, ...)
{
  va_list va;
  char string[255];
  int i;


  va_start(va, text);
  vsprintf(string, text, va);
  va_end(va);

  while((*driver)(DRIVER_PUTBYTE,portnumber,ESC,0)==-1);
  for(i=0;i<strlen(string);i++)
    while((*driver)(DRIVER_PUTBYTE,portnumber,string[i],0)==-1);

}


int keyin(void)
{
  return(0);
}

void awMode(int m)
{

}

void bell(void)
{

}



static void scrollup_buffer(int top,int bottom)
{
  int start,end,i;
  unsigned int *t;


  start=(top-1)*80;
  end=(bottom-1)*80;

  memmove(&text_buffer[start],&text_buffer[start+80],(end-start)<<2);
  t=&text_buffer[end];
  for(i=0;i<80;i++)
    *t++=(normal_attr+32);
}

static void scrolldown_buffer(int top,int bottom)
{
  int start,end,i;
  unsigned int *t;

  start=(top-1)*80;
  end=(bottom-1)*80;

  memmove(&text_buffer[start+80],&text_buffer[start],(end-start)<<2);
  t=&text_buffer[start];
  for(i=0;i<80;i++)
    *t++=(normal_attr+32);

}

void scrollup_area(int top,int bottom)
{
  //Desk_wimp_box source;
  int oldbottom;

  oldbottom=bottom;

  if (top!=1)    /* sonst werden die anderen screens mitgescrollt */
  {
    top+=(text_buffer_size-terminal_height);
  }
  else
  {
    scroll_above=1;
  }
  bottom+=(text_buffer_size-terminal_height);

  /*
  get_update_rectangle();
  update_text(0,ymin,MAX_COLUMN,ymax+1);

  ymin=terminal_height;
  ymax=-1;

  source.min.x=0;
  source.min.y=-(bottom*ZA);
  source.max.x=1280;
  source.max.y=-(top*ZA);
  Desk_Wimp_BlockCopy(haupt_window,&source,0,-(bottom*ZA)+ZA);
  */

  scrollup_buffer(top,bottom);
  ymin=0;
  ymax=terminal_height;
  //update_text(0,oldbottom-1,80,oldbottom);
}

void scrolldown_area(int top,int bottom)
{
  int oldtop;
  //Desk_wimp_box source;

  oldtop=top;

  top+=(text_buffer_size-terminal_height);
  bottom+=(text_buffer_size-terminal_height);

  /*
  get_update_rectangle();
  update_text(0,ymin,MAX_COLUMN,ymax+1);
  ymin=terminal_height;
  ymax=-1;

  source.min.x=0;
  source.min.y=-((bottom-1)*ZA);
  source.max.x=1280;
  source.max.y=-((top-1)*ZA);
  Desk_Wimp_BlockCopy(haupt_window,&source,0,-((bottom-1)*ZA)-ZA);
  */

  scrolldown_buffer(top,bottom);
  ymin=0;
  ymax=terminal_height;
  //update_text(0,oldtop-1,80,oldtop);
}

void scrolldown(int n)
{
  int i;

  for(i=0;i<n;i++)
    scrolldown_area(screentop,screenbottom);
}


void scrollup(int n)
{
  int i;

  for(i=0;i<n;i++)
    scrollup_area(screentop,screenbottom);
}

static void scrollleft_buffer(int top,int bottom)
{
  int start,i;

  start=(top-1)*80;

  for(i=0;i<=(bottom-top);i++)
  {
    memmove(&text_buffer[start],&text_buffer[start+1],79<<2);
    text_buffer[start+79]=(normal_attr+32);
    start+=80;
  }
}

static void scrollright_buffer(int top,int bottom)
{
  int start,i;

  start=(top-1)*80;

  for(i=0;i<=(bottom-top);i++)
  {
    memmove(&text_buffer[start+1],&text_buffer[start],79<<2);
    text_buffer[start]=(normal_attr+32);
    start+=80;
  }
}

static void scrollleft_area(int top,int bottom)
{
  int oldtop;
  Desk_wimp_box source;

  oldtop=top;

  top+=(text_buffer_size-terminal_height);
  bottom+=(text_buffer_size-terminal_height);

  get_update_rectangle();
  update_text(0,ymin,MAX_COLUMN,ymax+1);
  ymin=terminal_height;
  ymax=-1;

  source.min.x=16;
  source.min.y=-((bottom)*ZA);
  source.max.x=1280;
  source.max.y=-((top-1)*ZA);
  Desk_Wimp_BlockCopy(haupt_window,&source,0,-((bottom)*ZA));
  scrollleft_buffer(top,bottom);
  update_text(79,0,80,terminal_height);
}

static void scrollright_area(int top,int bottom)
{
  int oldtop;
  Desk_wimp_box source;

  oldtop=top;

  top+=(text_buffer_size-terminal_height);
  bottom+=(text_buffer_size-terminal_height);

  get_update_rectangle();
  update_text(0,ymin,MAX_COLUMN,ymax+1);
  ymin=terminal_height;
  ymax=-1;

  source.min.x=0;
  source.min.y=-((bottom)*ZA);
  source.max.x=1280-16;
  source.max.y=-((top-1)*ZA);
  Desk_Wimp_BlockCopy(haupt_window,&source,16,-((bottom)*ZA));
  scrollright_buffer(top,bottom);
  update_text(0,0,1,terminal_height);
}

void scrollleft(int n)
{
  int i;
  for(i=0;i<n;i++)
    scrollleft_area(screentop,screenbottom);
}

void scrollright(int n)
{
  int i;
  for(i=0;i<n;i++)
    scrollright_area(screentop,screenbottom);
}

unsigned int invertattr(unsigned int attribute)
{
  unsigned int hilf,hilf1;

  hilf=((attribute&0xff000000)>>24);

  if (hilf==1) /* ==> invert */
  {
    hilf=((attribute&0x00f0f000)>>4);
    hilf1=((attribute&0x000f0f00)<<4);
    attribute=((attribute&0xff0000ff)|(hilf|hilf1));
  }
  return (attribute);
}

void putcharattr(int ppx,int ppy,char c,unsigned int attribute)
{
  //attribute=invertattr(attribute);
  text_buffer[tb_above+ppx+ppy*80]=(attribute | c);
}

void insert_char(int ppx,int ppy,char c,unsigned int attribute)
{
  int i;
  int offset;

  offset=tb_above+ppy*80;
  for(i=LAST_COLUMN;i>ppx;i--)
    text_buffer[offset+i]=text_buffer[offset+i-1];
  text_buffer[offset+ppx]=(attrib&0xffffff00)|c;

}

void putattr(int ppx,int ppy,unsigned int attribute)
{
  unsigned int *buffer;

  attribute=invertattr(attribute);
  buffer=&text_buffer[tb_above+ppx+ppy*80];
  *(buffer)=((*(buffer) & 0x00ff00ff ) | (attribute & 0xff00ff00));
}

unsigned int getattr(int ppx,int ppy)
{
  return(text_buffer[tb_above+ppx+ppy*80] & 0xff00ff00);
}

char get_char(int ppx,int ppy)
{
  return( (char) text_buffer[tb_above+ppx+ppy*80] );
}


void deleteLine(int n,int bottom)
{
  int i;

  for(i=0;i<n;i++)
    scrollup_area(cursorY+1,bottom);
}

void insertLine(int n,int bottom)
{
  int i;

  for(i=0;i<n;i++)
    scrolldown_area(cursorY+1,bottom);
}

void deleteChar(int n)
{
  int i,j;
  int offset;

  for(j=0;j<n;j++)
  {
    offset=tb_above+cursorY*80;
    for(i=cursorX;i<LAST_COLUMN;i++)
      text_buffer[offset+i]=text_buffer[offset+i+1];
    text_buffer[offset+LAST_COLUMN]=(attrib&0xffffff00)|32;
  }
  update_text(0,cursorY,MAX_COLUMN,cursorY+1);
}

void insertChar(int n)
{
  int i,j;
  int offset;

  for(j=0;j<n;j++)
  {
    offset=tb_above+cursorY*80;
    for(i=LAST_COLUMN;i>cursorX;i--)
      text_buffer[offset+i]=text_buffer[offset+i-1];
    text_buffer[offset+cursorX]=(attrib&0xffffff00)|32;
  }
  update_text(0,cursorY,MAX_COLUMN,cursorY+1);
}

void smoothMode(int m)
{

}

void savePage(int a,unsigned int b)
{

}

void restorePage(int a,unsigned int b)
{

}


void cursorOn(void)
{
  cursor_on=1;
  //flash=1;
  updateCursor();
}

void cursorOff(void)
{
  flash=0;
  updateCursor();
  cursor_on=0;
}


void logPut(char c)
{

}

void locate(unsigned int x,unsigned int y)
{
  cursorX = x; cursorY = y;
}

void moveCursor(int action,int num)
/*
 * move cursor relatively
 */
{
        /*unsetCursor();*/
        if (num == 0)
                num++;

        if (cursorX > LAST_COLUMN /*&& vtTypeWrap == YES && autowrap == YES*/ )
        {
          if(autowrap)
          {
            cursorX = 0;
            cursorY++;
          }
          else
            cursorX=LAST_COLUMN;
        }
        switch (action) {
        case    UP:
                if (cursorY > bottomLine)
                        cursorY = bottomLine;
                else if (cursorY >= upScrRegion && cursorY-num < upScrRegion)
                        cursorY = upScrRegion;
                else if (cursorY - num < 0)
                        cursorY = 0;
                else
                        cursorY -= num;
                break;
        case    DOWN:
                if (cursorY >= bottomLine)
                        cursorY = bottomLine;
                else if (cursorY <= lowScrRegion && cursorY+num > lowScrRegion)
                        cursorY = lowScrRegion;
                else if (cursorY + num > bottomLine)
                        cursorY = bottomLine;
                else
                        cursorY += num;
                break;
        case    RIGHT:
                if (cursorX + num > LAST_COLUMN)
                        cursorX = LAST_COLUMN;
                else
                        cursorX += num;
                break;
        case    LEFT:
                if (cursorX - num < 0)
                        cursorX = 0;
                else
                        cursorX -= num;
                break;
        }
        locate(cursorX, cursorY);
        /*setCursor(cursorX, cursorY);*/
        /*update_text(cursorX,cursorY,cursorX+1,cursorY+1);*/
}



void putChar(unsigned int c)
{
  setchar(cursorX,cursorY,attrib+(char)c);
}

void writeChar(unsigned int c)
/* write a character c at cursor position */
{
        if(cursorY > lowScrRegion)
        {
          cursorY=lowScrRegion;
          scrollup_area(upScrRegion+1,lowScrRegion+1);
        }

        if (cursorX > LAST_COLUMN /*&& vtTypeWrap == YES && autowrap == YES*/ )
        {
                if (cursorY == lowScrRegion)
                {
                        if(autowrap)
                        {
                          cursorX = 0;
                          scrollup_area(upScrRegion+1,lowScrRegion+1);
                        }
                        else
                        {
                          cursorX=LAST_COLUMN;
                        }
                }
                else if (cursorY < bottomLine)
                {
                        if(autowrap)
                        {
                          cursorX = 0;
                          cursorY++;
                        }
                        else
                        {
                          cursorX=LAST_COLUMN;
                        }
                }
                else
                  cursorX = LAST_COLUMN;
                locate(cursorX, cursorY);
        }
        putChar(c);
        cursorX++;

        //if (cursorX > LAST_COLUMN /*&& vtTypeWrap == YES && autowrap == YES*/ )
        //{
        //  if(autowrap)
        //  {
        //    cursorX = 0;
        //    cursorY++;
        //  }
        //  else
        //    cursorX=LAST_COLUMN;
        //}
}


void conWrite(unsigned int c)
/*
 * write a char on console
 */
{
        writeChar(c);
        //cursorX++;
}


void setCRTMode(int n)
{

}


void setLineMode(int mode,int init)
/*
 * set line mode to 'mode'
 */
{

        if (init)
        {

                /*attrib = _NORMAL;*/
                /*clearCurrentPage();*/
                /*attrib = attrSave;*/
                //locate(0, 0);
        }
        switch (mode) {
        case LINE_MODE_19:
                maxLine = MAX_LINE_19_MODE;
                realMaxLine = MAX_LINE_20_MODE;
                bottomLine = BOTTOM_LINE_19_MODE;
                realBottomLine = BOTTOM_LINE_20_MODE;
                setCRTMode(0);
                break;
        case LINE_MODE_20:
                realMaxLine = maxLine = MAX_LINE_20_MODE;
                realBottomLine = bottomLine = BOTTOM_LINE_20_MODE;
                setCRTMode(0);
                break;
        case LINE_MODE_24:
                maxLine = MAX_LINE_24_MODE;
                bottomLine = BOTTOM_LINE_24_MODE;
                realBottomLine = BOTTOM_LINE_25_MODE;
                realMaxLine = MAX_LINE_25_MODE;
                setCRTMode(1);
                break;
        case LINE_MODE_25:
                realMaxLine = maxLine = MAX_LINE_25_MODE;
                realBottomLine = bottomLine = BOTTOM_LINE_25_MODE;
                setCRTMode(1);
                break;
        }
        /*
        if (init)
                setScrRegion(0, bottomLine);
        */
}




void consoleInit(void)
/*
 * initialize console
 */
{
        page = 0;                       /* use page 0                   */
        //cursorX = cursorY = 0;          /* home position                */
        /*attrib = _NORMAL;*/           /* normal attribute             */

        /* set defaults */
        lineMode = DEFAULT_LINE_MODE;
        formfeed = DEFAULT_FORMFEED;
        cursor = DEFAULT_CURSOR;
        blinkCursor = DEFAULT_BLINK_CURSOR;
        blockCursor = DEFAULT_BLOCK_CURSOR;
        //autowrap = DEFAULT_AUTO_WRAP;
        echoMode = DEFAULT_ECHO_MODE;
        kanjiCode = DEFAULT_KANJI_CODE;         /* kanji code           */
        visibleBell = DEFAULT_VISIBLE_BELL;     /* visible bell         */
}

void consoleSetup(void)
{
        setLineMode(lineMode, YES);
        if(cursorY>bottomLine)
          cursorY=bottomLine;
        upScrRegion = 0;                /* upper scroll region          */
        lowScrRegion = bottomLine;      /* lower scroll region          */
        /*
        if (cursor)
                cursorOn();
        else
                cursorOff();
        */
        //locate(0, 0);
}

void consoleEnd(void)
{
  /*
        cursorOn();
        screenEnd();
  */
}

void saveCursor(void)
/* save Cursor position */
{
        saveX = cursorX;
        saveY = cursorY;
        saveAttr = attrib;
}

void restCursor(void)
 /* restore cursor pos. */
{
        cursorX = saveX;
        cursorY = saveY;
        attrib = saveAttr;
        locate(cursorX, cursorY);
}




/* D O T A B -- Perform a tab */

void DoTab(void)
{
   register int i;
                                  /* Look for next tab stop */
   for (i = cursorX + 1; i < 80; i++)
   {
      if ( tabs[i] == 1 )
      {                             /* If a tab stop is found */
         move_cursor(i-cursorX,0,FALSE);
         return;                    /* and finished */
      }
   }
}

/* S E T T A B S T O P  -- set a tab stop at the current cursor position */

void SetTabStop(void)
{
    tabs[cursorX] = 1;              /* Mark current cursor position as tab stop*/
}

/* C L E A R T A B S T O P  -- clear a tab stop at the current curs position */

void ClearTabStop(void)
{
    tabs[cursorX] = 0;              /* Clear current cursor position tab stop */
}

/* C L E A R A L L T A B S  -- clear all tab stops */

void ClearAllTabs(void)
{
    memset(tabs,'\0',sizeof(tabs));
}

/* I N I T T A B S -- Initialize Tab stops to default settings */

void InitTabs(int n)
{
   int i;

   ClearAllTabs();
   for (i = n; i < 80; i += n)
     tabs[i] = 1;
}
