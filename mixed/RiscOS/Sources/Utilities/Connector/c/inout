/*
 * Copyright (c) 1995, Andreas Zieringer
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include "Desk/LinkList.h"
#include "Desk/DeskMem.h"
#include "Desk/File.h"

#include "global.h"

#include <stdarg.h>
#include <stdio.h>


/* liest String von einem File und ersetzt /n durch 0 */

static int reads(char * string,Desk_file_handle fp)
{
  int zeichen;

  while( ( (zeichen=Desk_File_ReadChar(fp))>=32 ) && !Desk_File_EOF(fp) )
    *(string++)=(char) zeichen;
  *string=0;

  if(Desk_File_EOF(fp))
    return(EOF);
  else
    return(zeichen);
}


void saveconfiguration(void)
{
    Desk_file_handle out;

    Desk_File_CreateDirectory("<Choices$Write>.Connector");
    Desk_File_CreateDirectory("<Choices$Write>.Connector.Config");
    out=Desk_File_Open(config_filename,Desk_file_WRITE);
    if (out==NULL)
    {
      Desk_Error_Report(0,"Couldn't create config file");
      return;
    }

    Desk_File_printf(out,"97\n");  // anzahl der Zeilen ==> 0-96

    Desk_File_printf(out,"0\n%s\n",modem.init);
    Desk_File_printf(out,"1\n%s\n",modem.dialprefix);
    Desk_File_printf(out,"2\n%s\n",modem.dialsuffix);
    Desk_File_printf(out,"3\n%s\n",modem.hangup);
    Desk_File_printf(out,"4\n%s\n",modem.answer);

    Desk_File_printf(out,"5\n%d\n",backcolor);
    Desk_File_printf(out,"6\n%d\n",forecolor);
    Desk_File_printf(out,"7\n%d\n",cursorcolor);

    if(save_modem_status)
    {
      Desk_File_printf(out,"8\n%d\n",dial_terminal_nr);
      Desk_File_printf(out,"9\n%d\n",dial_baud_nr);
      Desk_File_printf(out,"10\n%d\n",dial_data_nr);
      Desk_File_printf(out,"11\n%s\n",dial_number);
      Desk_File_printf(out,"24\n%d\n",spool_speed);
      Desk_File_printf(out,"14\n%d\n",transfer_type_nr);
      Desk_File_printf(out,"31\n%d\n",autowrap);
      Desk_File_printf(out,"32\n%d\n",crtocrlf);
      Desk_File_printf(out,"33\n%d\n",lftocrlf);
      Desk_File_printf(out,"41\n%d\n",export_data_text);
      Desk_File_printf(out,"42\n%d\n",ansi_terminal_height);
      Desk_File_printf(out,"59\n%d\n",spool_frame);

      Desk_File_printf(out,"45\n%d\n",send_crashrecovery);
      Desk_File_printf(out,"48\n%d\n",receive_file_action);
      Desk_File_printf(out,"49\n%d\n",ascii_char_delay);
      Desk_File_printf(out,"50\n%d\n",ascii_line_delay);
      Desk_File_printf(out,"51\n%d\n",ascii_trans);
      //Desk_File_printf(out,"53\n%d\n",tx_window);
      Desk_File_printf(out,"57\n%d\n",tx_window_size);
      Desk_File_printf(out,"62\n%d\n",ackint);
      //Desk_File_printf(out,"63\n%d\n",discbuffer);
      Desk_File_printf(out,"64\n%d\n",xmodem_crc);
      Desk_File_printf(out,"65\n%d\n",xmodem_k);
      Desk_File_printf(out,"66\n%d\n",ymodem_crc);
      Desk_File_printf(out,"67\n%d\n",ymodem_k);

      Desk_File_printf(out,"70\n%s\n",fkeys[0]);
      Desk_File_printf(out,"71\n%s\n",fkeys[1]);
      Desk_File_printf(out,"72\n%s\n",fkeys[2]);
      Desk_File_printf(out,"73\n%s\n",fkeys[3]);
      Desk_File_printf(out,"74\n%s\n",fkeys[4]);
      Desk_File_printf(out,"75\n%s\n",fkeys[5]);
      Desk_File_printf(out,"76\n%s\n",fkeys[6]);
      Desk_File_printf(out,"77\n%s\n",fkeys[7]);
      Desk_File_printf(out,"78\n%s\n",fkeys[8]);
      Desk_File_printf(out,"79\n%s\n",fkeys[9]);
      Desk_File_printf(out,"80\n%s\n",fkeys[10]);
      Desk_File_printf(out,"81\n%s\n",fkeys[11]);

      Desk_File_printf(out,"82\n%s\n%s\n",sb_label[0],sb_data[0]);
      Desk_File_printf(out,"83\n%s\n%s\n",sb_label[1],sb_data[1]);
      Desk_File_printf(out,"84\n%s\n%s\n",sb_label[2],sb_data[2]);
      Desk_File_printf(out,"85\n%s\n%s\n",sb_label[3],sb_data[3]);
      Desk_File_printf(out,"86\n%s\n%s\n",sb_label[4],sb_data[4]);
      Desk_File_printf(out,"87\n%s\n%s\n",sb_label[5],sb_data[5]);
      Desk_File_printf(out,"88\n%s\n%s\n",sb_label[6],sb_data[6]);
      Desk_File_printf(out,"89\n%s\n%s\n",sb_label[7],sb_data[7]);
      Desk_File_printf(out,"90\n%d\n",show_sb);
      Desk_File_printf(out,"92\n%d\n",avatar);
      Desk_File_printf(out,"93\n%d\n",sinfo_open);
      Desk_File_printf(out,"94\n%d\n",local_echo);
    }
    else
    {
      Desk_File_printf(out,"8\n%d\n",dial_terminal_nr_0);
      Desk_File_printf(out,"9\n%d\n",dial_baud_nr_0);
      Desk_File_printf(out,"10\n%d\n",dial_data_nr_0);
      Desk_File_printf(out,"11\n%s\n",old_dial_number);
      Desk_File_printf(out,"24\n%d\n",old_spool_speed);
      Desk_File_printf(out,"14\n%d\n",transfer_type_nr_0);
      Desk_File_printf(out,"31\n%d\n",wrap_0);
      Desk_File_printf(out,"32\n%d\n",crtocrlf_0);
      Desk_File_printf(out,"33\n%d\n",lftocrlf_0);
      Desk_File_printf(out,"41\n%d\n",export_data_text_0);
      Desk_File_printf(out,"42\n%d\n",ansi_terminal_height_0);
      Desk_File_printf(out,"59\n%d\n",spool_frame_0);

      Desk_File_printf(out,"45\n%d\n",send_crashrecovery_0);
      Desk_File_printf(out,"48\n%d\n",receive_file_action_0);
      Desk_File_printf(out,"49\n%d\n",ascii_char_delay_0);
      Desk_File_printf(out,"50\n%d\n",ascii_line_delay_0);
      Desk_File_printf(out,"51\n%d\n",ascii_trans_0);
      //Desk_File_printf(out,"53\n%d\n",tx_window_0);
      Desk_File_printf(out,"57\n%d\n",tx_window_size_0);
      Desk_File_printf(out,"62\n%d\n",ackint_0);
      //Desk_File_printf(out,"63\n%d\n",discbuffer_0);
      Desk_File_printf(out,"64\n%d\n",xmodem_crc_0);
      Desk_File_printf(out,"65\n%d\n",xmodem_k_0);
      Desk_File_printf(out,"66\n%d\n",ymodem_crc_0);
      Desk_File_printf(out,"67\n%d\n",ymodem_k_0);

      Desk_File_printf(out,"70\n%s\n",fkeys_0[0]);
      Desk_File_printf(out,"71\n%s\n",fkeys_0[1]);
      Desk_File_printf(out,"72\n%s\n",fkeys_0[2]);
      Desk_File_printf(out,"73\n%s\n",fkeys_0[3]);
      Desk_File_printf(out,"74\n%s\n",fkeys_0[4]);
      Desk_File_printf(out,"75\n%s\n",fkeys_0[5]);
      Desk_File_printf(out,"76\n%s\n",fkeys_0[6]);
      Desk_File_printf(out,"77\n%s\n",fkeys_0[7]);
      Desk_File_printf(out,"78\n%s\n",fkeys_0[8]);
      Desk_File_printf(out,"79\n%s\n",fkeys_0[9]);
      Desk_File_printf(out,"80\n%s\n",fkeys_0[10]);
      Desk_File_printf(out,"81\n%s\n",fkeys_0[11]);

      Desk_File_printf(out,"82\n%s\n%s\n",sb_label_0[0],sb_data_0[0]);
      Desk_File_printf(out,"83\n%s\n%s\n",sb_label_0[1],sb_data_0[1]);
      Desk_File_printf(out,"84\n%s\n%s\n",sb_label_0[2],sb_data_0[2]);
      Desk_File_printf(out,"85\n%s\n%s\n",sb_label_0[3],sb_data_0[3]);
      Desk_File_printf(out,"86\n%s\n%s\n",sb_label_0[4],sb_data_0[4]);
      Desk_File_printf(out,"87\n%s\n%s\n",sb_label_0[5],sb_data_0[5]);
      Desk_File_printf(out,"88\n%s\n%s\n",sb_label_0[6],sb_data_0[6]);
      Desk_File_printf(out,"89\n%s\n%s\n",sb_label_0[7],sb_data_0[7]);
      Desk_File_printf(out,"90\n%d\n",show_sb_0);
      Desk_File_printf(out,"92\n%d\n",avatar_0);
      Desk_File_printf(out,"93\n%d\n",sinfo_open_0);
      Desk_File_printf(out,"94\n%d\n",local_echo_0);
    }
    Desk_File_printf(out,"63\n%d\n",discbuffer);
    Desk_File_printf(out,"12\n%s\n",drivers[driver_nr].file);
    Desk_File_printf(out,"13\n%d\n",portnumber_0);

    Desk_File_printf(out,"15\n%d\n",flow_type_nr_0);

    Desk_File_printf(out,"16\n%d\n",autodial);
    Desk_File_printf(out,"17\n%d\n",beep_online);
    Desk_File_printf(out,"18\n%d\n",beep_transfer);
    Desk_File_printf(out,"19\n%d\n",toolbar);
    Desk_File_printf(out,"20\n%s\n",old_downloads_directory);
    Desk_File_printf(out,"21\n%d\n",cursor_flashing);
    Desk_File_printf(out,"22\n%d\n",init_modem);
    Desk_File_printf(out,"23\n%d\n",german_keyb);
    Desk_File_printf(out,"25\n%d\n",serial_input_buffer_size);
    Desk_File_printf(out,"26\n%d\n",serial_output_buffer_size);
    Desk_File_printf(out,"27\n%d\n",serial_input_buffer);
    Desk_File_printf(out,"28\n%d\n",serial_output_buffer);
    Desk_File_printf(out,"29\n%d\n",text_buffer_size);
    Desk_File_printf(out,"30\n%d\n",dial_delay);

    Desk_File_printf(out,"34\n%d\n",drop_dtr);
    //Desk_File_printf(out,"35\n%s\n",filetypes); // filetypes ist zu lang fuer printf :-(
    Desk_File_printf(out,"35\n");
    Desk_File_WriteBytes(out,filetypes,strlen(filetypes));
    Desk_File_printf(out,"\n");

    Desk_File_printf(out,"36\n%d\n",0);  //isofont);

    Desk_File_printf(out,"37\n%d\n",local_lines);
    Desk_File_printf(out,"38\n%d\n",remote_lines);
    Desk_File_printf(out,"39\n%d\n",chat_special);
    Desk_File_printf(out,"40\n%d\n",close_filetrans);
    Desk_File_printf(out,"43\n%d\n",riscosfiletype);
    Desk_File_printf(out,"44\n%d\n",buffersize);

    Desk_File_printf(out,"46\n%d\n",xmodem_protocol);
    Desk_File_printf(out,"47\n%d\n",ymodem_protocol);


    Desk_File_printf(out,"52\n%d\n",autologon);

    //Desk_File_printf(out,"54\n%d\n",iconbar_modem);
    //Desk_File_printf(out,"55\n%d\n",iconbar_rxtx);
    //Desk_File_printf(out,"56\n%d\n",iconbar_portnumber);

    Desk_File_printf(out,"58\n%d\n",f_keys);
    Desk_File_printf(out,"60\n%d\n",toolbar_type);
    Desk_File_printf(out,"61\n%d\n",cept_zoom);

    Desk_File_printf(out,"68\n%d\n",vt_font);
    Desk_File_printf(out,"69\n%d\n",ansi_font);
    Desk_File_printf(out,"91\n%d\n",truncate_filename);
    Desk_File_printf(out,"95\n%d\n",clear_terminal);
    Desk_File_printf(out,"96\n%d\n",use_dosmap);

    Desk_File_Close(out);
}




void loadconfiguration(void)
{
    Desk_file_handle in;
    char hilf[80];
    int i,n,p;

    in=Desk_File_Open(config_ro_filename,Desk_file_READ);

    if (in!=NULL)
    {
        reads(hilf,in); // anzahl
        n=atoi(hilf);
        for(i=0;i<n;i++)
        {
          if(reads(hilf,in)==EOF) // pointer
            break;
          p=atoi(hilf);  // pointer
          switch(p)
          {
            case 0:
              reads(modem.init,in);
            break;
            case 1:
              reads(modem.dialprefix,in);
            break;
            case 2:
              reads(modem.dialsuffix,in);
            break;
            case 3:
              reads(modem.hangup,in);
            break;
            case 4:
              reads(modem.answer,in);
            break;
            case 5:
              reads(hilf,in);
              backcolor=atoi(hilf);
            break;
            case 6:
              reads(hilf,in);
              forecolor=atoi(hilf);
            break;
            case 7:
              reads(hilf,in);
              cursorcolor=atoi(hilf);
            break;
            case 8:
              reads(hilf,in);
              dial_terminal_nr=atoi(hilf);
              dial_terminal_nr_0=dial_terminal_nr;
            break;
            case 9:
              reads(hilf,in);
              dial_baud_nr=atoi(hilf);
              dial_baud_nr_0=dial_baud_nr;
            break;
            case 10:
              reads(hilf,in);
              dial_data_nr=atoi(hilf);
              dial_data_nr_0=dial_data_nr;
            break;
            case 11:
              reads(dial_number,in);
              strcpy(old_dial_number,dial_number);
            break;
            case 12:
              reads(block_driver_name,in);
            break;
            case 13:
              reads(hilf,in);
              portnumber=atoi(hilf);
              portnumber_0=portnumber;
            break;
            case 14:
              reads(hilf,in);
              transfer_type_nr=atoi(hilf);
              transfer_type_nr_0=transfer_type_nr;
            break;
            case 15:
              reads(hilf,in);
              flow_type_nr=atoi(hilf);
              flow_type_nr_0=flow_type_nr;
            break;
            case 16:
              reads(hilf,in);
              autodial=atoi(hilf);
            break;
            case 17:
              reads(hilf,in);
              beep_online=atoi(hilf);
            break;
            case 18:
              reads(hilf,in);
              beep_transfer=atoi(hilf);
            break;
            case 19:
              reads(hilf,in);
              toolbar=atoi(hilf);
            break;
            case 20:
              reads(downloads_directory,in);
              strcpy(old_downloads_directory,downloads_directory);
            break;
            case 21:
              reads(hilf,in);
              cursor_flashing=atoi(hilf);
            break;
            case 22:
              reads(hilf,in);
              init_modem=atoi(hilf);
            break;
            case 23:
              reads(hilf,in);
              german_keyb=atoi(hilf);
            break;
            case 24:
              reads(hilf,in);
              spool_speed=atoi(hilf);
              old_spool_speed=spool_speed;
            break;
            case 25:
              reads(hilf,in);
              serial_input_buffer_size=atoi(hilf);
            break;
            case 26:
              reads(hilf,in);
              serial_output_buffer_size=atoi(hilf);
            break;
            case 27:
              reads(hilf,in);
              serial_input_buffer=atoi(hilf);
            break;
            case 28:
              reads(hilf,in);
              serial_output_buffer=atoi(hilf);
            break;
            case 29:
              reads(hilf,in);
              text_buffer_size=atoi(hilf);
            break;
            case 30:
              reads(hilf,in);
              dial_delay=atoi(hilf);
            break;
            case 31:
              reads(hilf,in);
              autowrap=atoi(hilf);
              wrap_0=autowrap;
            break;
            case 32:
              reads(hilf,in);
              crtocrlf=atoi(hilf);
              crtocrlf_0=crtocrlf;
            break;
            case 33:
              reads(hilf,in);
              lftocrlf=atoi(hilf);
              lftocrlf_0=lftocrlf;
            break;
            case 34:
              reads(hilf,in);
              drop_dtr=atoi(hilf);
            break;
            case 35:
              reads(filetypes,in);
              strcpy(old_filetypes,filetypes);
            break;
            case 36:
              reads(hilf,in);
              //isofont=atoi(hilf);
            break;
            case 37:
              reads(hilf,in);
              local_lines=atoi(hilf);
            break;
            case 38:
              reads(hilf,in);
              remote_lines=atoi(hilf);
            break;
            case 39:
              reads(hilf,in);
              chat_special=atoi(hilf);
            break;
            case 40:
              reads(hilf,in);
              close_filetrans=atoi(hilf);
            break;
            case 41:
              reads(hilf,in);
              export_data_text=atoi(hilf);
              export_data_text_0=export_data_text;
            break;
            case 42:
              reads(hilf,in);
              ansi_terminal_height=atoi(hilf);
              ansi_terminal_height_0=ansi_terminal_height;
            break;
            case 43:
              reads(hilf,in);
              riscosfiletype=atoi(hilf);
            break;
            case 44:
              reads(hilf,in);
              buffersize=atoi(hilf);
            break;
            case 45:
              reads(hilf,in);
              send_crashrecovery=atoi(hilf);
              send_crashrecovery_0=send_crashrecovery;
            break;
            case 46:
              reads(hilf,in);
              xmodem_protocol=atoi(hilf);
            break;
            case 47:
              reads(hilf,in);
              ymodem_protocol=atoi(hilf);
            break;
            case 48:
              reads(hilf,in);
              receive_file_action=atoi(hilf);
              receive_file_action_0=receive_file_action;
            break;
            case 49:
              reads(hilf,in);
              ascii_char_delay=atoi(hilf);
              ascii_char_delay_0=ascii_char_delay;
            break;
            case 50:
              reads(hilf,in);
              ascii_line_delay=atoi(hilf);
              ascii_line_delay_0=ascii_line_delay;
            break;
            case 51:
              reads(hilf,in);
              ascii_trans=atoi(hilf);
              ascii_trans_0=ascii_trans;
            break;
            case 52:
              reads(hilf,in);
              autologon=atoi(hilf);
            break;
            case 53:
              reads(hilf,in);
              tx_window=atoi(hilf);
              tx_window_0=tx_window;
            break;
            case 54:
              reads(hilf,in);
              //iconbar_modem=atoi(hilf);
            break;
            case 55:
              reads(hilf,in);
              //iconbar_rxtx=atoi(hilf);
            break;
            case 56:
              reads(hilf,in);
              //iconbar_portnumber=atoi(hilf);
            break;
            case 57:
              reads(hilf,in);
              tx_window_size=atoi(hilf);
              tx_window_size_0=tx_window_size;
            break;
            case 58:
              reads(hilf,in);
              //f_keys=atoi(hilf);
            break;
            case 59:
              reads(hilf,in);
              spool_frame=atoi(hilf);
              spool_frame_0=spool_frame;
            break;
            case 60:
              reads(hilf,in);
              toolbar_type=atoi(hilf);
            break;
            case 61:
              reads(hilf,in);
              cept_zoom=atoi(hilf);
            break;
            case 62:
              reads(hilf,in);
              ackint=atoi(hilf);
              ackint_0=ackint;
            break;
            case 63:
              reads(hilf,in);
              discbuffer=atoi(hilf);
              //discbuffer_0=discbuffer;
            break;
            case 64:
              reads(hilf,in);
              xmodem_crc=atoi(hilf);
              xmodem_crc_0=xmodem_crc;
            break;
            case 65:
              reads(hilf,in);
              xmodem_k=atoi(hilf);
              xmodem_k_0=xmodem_k;
            break;
            case 66:
              reads(hilf,in);
              ymodem_crc=atoi(hilf);
              ymodem_crc_0=ymodem_crc;
            break;
            case 67:
              reads(hilf,in);
              ymodem_k=atoi(hilf);
              ymodem_k_0=ymodem_k;
            break;
            case 68:
              reads(hilf,in);
              vt_font=atoi(hilf);
            break;
            case 69:
              reads(hilf,in);
              ansi_font=atoi(hilf);
            break;
            case 70:
              reads(hilf,in);
              strcpy(fkeys[0],hilf);
              strcpy(fkeys_0[0],hilf);
            break;
            case 71:
              reads(hilf,in);
              strcpy(fkeys[1],hilf);
              strcpy(fkeys_0[1],hilf);
            break;
            case 72:
              reads(hilf,in);
              strcpy(fkeys[2],hilf);
              strcpy(fkeys_0[2],hilf);
            break;
            case 73:
              reads(hilf,in);
              strcpy(fkeys[3],hilf);
              strcpy(fkeys_0[3],hilf);
            break;
            case 74:
              reads(hilf,in);
              strcpy(fkeys[4],hilf);
              strcpy(fkeys_0[4],hilf);
            break;
            case 75:
              reads(hilf,in);
              strcpy(fkeys[5],hilf);
              strcpy(fkeys_0[5],hilf);
            break;
            case 76:
              reads(hilf,in);
              strcpy(fkeys[6],hilf);
              strcpy(fkeys_0[6],hilf);
            break;
            case 77:
              reads(hilf,in);
              strcpy(fkeys[7],hilf);
              strcpy(fkeys_0[7],hilf);
            break;
            case 78:
              reads(hilf,in);
              strcpy(fkeys[8],hilf);
              strcpy(fkeys_0[8],hilf);
            break;
            case 79:
              reads(hilf,in);
              strcpy(fkeys[9],hilf);
              strcpy(fkeys_0[9],hilf);
            break;
            case 80:
              reads(hilf,in);
              strcpy(fkeys[10],hilf);
              strcpy(fkeys_0[10],hilf);
            break;
            case 81:
              reads(hilf,in);
              strcpy(fkeys[11],hilf);
              strcpy(fkeys_0[11],hilf);
            break;
            case 82:
              reads(hilf,in);
              strcpy(sb_label[0],hilf);
              strcpy(sb_label_0[0],hilf);
              reads(hilf,in);
              strcpy(sb_data[0],hilf);
              strcpy(sb_data_0[0],hilf);
            break;
            case 83:
              reads(hilf,in);
              strcpy(sb_label[1],hilf);
              strcpy(sb_label_0[1],hilf);
              reads(hilf,in);
              strcpy(sb_data[1],hilf);
              strcpy(sb_data_0[1],hilf);
            break;
            case 84:
              reads(hilf,in);
              strcpy(sb_label[2],hilf);
              strcpy(sb_label_0[2],hilf);
              reads(hilf,in);
              strcpy(sb_data[2],hilf);
              strcpy(sb_data_0[2],hilf);
            break;
            case 85:
              reads(hilf,in);
              strcpy(sb_label[3],hilf);
              strcpy(sb_label_0[3],hilf);
              reads(hilf,in);
              strcpy(sb_data[3],hilf);
              strcpy(sb_data_0[3],hilf);
            break;
            case 86:
              reads(hilf,in);
              strcpy(sb_label[4],hilf);
              strcpy(sb_label_0[4],hilf);
              reads(hilf,in);
              strcpy(sb_data[4],hilf);
              strcpy(sb_data_0[4],hilf);
            break;
            case 87:
              reads(hilf,in);
              strcpy(sb_label[5],hilf);
              strcpy(sb_label_0[5],hilf);
              reads(hilf,in);
              strcpy(sb_data[5],hilf);
              strcpy(sb_data_0[5],hilf);
            break;
            case 88:
              reads(hilf,in);
              strcpy(sb_label[6],hilf);
              strcpy(sb_label_0[6],hilf);
              reads(hilf,in);
              strcpy(sb_data[6],hilf);
              strcpy(sb_data_0[6],hilf);
            break;
            case 89:
              reads(hilf,in);
              strcpy(sb_label[7],hilf);
              strcpy(sb_label_0[7],hilf);
              reads(hilf,in);
              strcpy(sb_data[7],hilf);
              strcpy(sb_data_0[7],hilf);
            break;
            case 90:
              reads(hilf,in);
              show_sb=atoi(hilf);
              show_sb_0=show_sb;
            break;
            case 91:
              reads(hilf,in);
              truncate_filename=atoi(hilf);
            break;
            case 92:
              reads(hilf,in);
              avatar=atoi(hilf);
              avatar_0=avatar;
            break;
            case 93:
              reads(hilf,in);
              sinfo_open=atoi(hilf);
              sinfo_open_0=sinfo_open;
            break;
            case 94:
              reads(hilf,in);
              local_echo=atoi(hilf);
              local_echo_0=local_echo;
            break;
            case 95:
              reads(hilf,in);
              clear_terminal=atoi(hilf);
            break;
            case 96:
              reads(hilf,in);
              use_dosmap=atoi(hilf);
            break;
          }
        }
    }
    else
    {
      Desk_Error_Report(0,"Couldn't open config file");
      return;
    }
    Desk_File_Close(in);
}
