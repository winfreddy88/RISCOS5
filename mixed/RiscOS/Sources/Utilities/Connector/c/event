/*
 * Copyright (c) 1995, Andreas Zieringer
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include "Desk/WimpSWIs.h"          /* Low-level WIMP commands         */
#include "Desk/Window.h"            /* Window handling automation      */
#include "Desk/Core.h"              /* usefull core functions          */
#include "Desk/Dialog.h"            /* High-level dialogue windows     */
#include "Desk/Error.h"             /* Error despatcher                */
#include "Desk/Event.h"             /* Event despatcher                */
#include "Desk/EventMsg.h"          /* Wimp Message event dispatcher   */
#include "Desk/File.h"              /* Low level file handling         */
#include "Desk/GFX.h"               /* Graphics routines (GFX_Wait)    */
#include "Desk/Handler.h"           /* Default/example event handlers  */
#include "Desk/Hourglass.h"         /* Hourglass module interfaces     */
#include "Desk/Icon.h"              /* Icon handling automation        */
#include "Desk/Menu.h"              /* Menu create & show support      */
#include "Desk/Msgs.h"              /* Message translation code        */
#include "Desk/Resource.h"          /* Handles finding resource files  */
#include "Desk/Screen.h"            /* Getting screen size info, etc   */
#include "Desk/Sound.h"             /* Sound System control            */
#include "Desk/Template.h"          /* Template loading and caching    */
#include "Desk/Slider.h"            /* "Easy" slider handling          */
#include "Desk/Kbd.h"               /* Read hotkeys                    */
#include "Desk/Time.h"              /* "TIME"                          */
#include "Desk/KernelSWIs.h"        /* OS_Byte                         */
#include "Desk/Time.h"
#include "Desk/KeyCodes.h"
#include "Desk/Pane2.h"
#include "Desk/Str.h"
#include "Desk/Drag.h"
#include "Desk/Dialog.h"
#include "Desk/DeskMem.h"
#include "Desk/Sound.h"
#include "Desk/filing.h"
#include "Desk/File.h"
#include "Desk/save.h"
#include "Desk/ColourTran.h"

#include "osfile.h"

#include "global.h"
#include "iconnames.h"
#include "inout.h"
#include "text.h"
#include "misc.h"
#include "vt100.h"
#include "ansi.h"
#include "console.h"
#include "hterm.h"
#include "spool.h"
#include "serialbuff.h"
#include "chat.h"
#include "ascii.h"
#include "script.h"
#include "flex.h"
#include "zmisc.h"
#include "preempt.h"

#include "event.h"

#include "kernel.h"
#include <stddef.h>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define APH 0x1e         /* active position home     (level 6) */
#define APB 0x08         /* active position back     (level 6) */
#define APF 0x09         /* active position forward  (level 6) */
#define APD 0x0a         /* active position down     (level 6) */
#define APU 0x0b         /* active position up       (level 6) */
#define INI 0x13         /* initiator '*'            (level 7) */
#define TER 0x1c         /* terminator '#'           (level 7) */

#define set_pointer() Desk_SWI(8,0,0x2e|Desk_SWI_XOS_Bit,256+36,usericonsprites,"ptr_hand",1,4,0,0,0)

//#define reset_pointer() Desk_SWI(2,0,0x06|Desk_SWI_XOS_Bit,106,1)
#define reset_pointer() Desk_SWI(8,0,0x400e9|Desk_SWI_XOS_Bit,36,0,"ptr_default",1,0,0,0,0)


extern int (*driver_load(char*))(int,...);
extern int driver_check(char *name);
extern int process_BTX_data(void);
//extern void redraw_screen_rect(int x1,int y1,int x2,int y2,int flag);
extern void receive(int type);
extern void send(/*int npats,char **patts,*/int type);
extern void canit(void);
extern int load_fonts(int, int);
extern void set_default_sb(void);
extern void set_default_keys(void);
extern int fontheight,rows;

int ymin,ymax;

Desk_bool Click_tools_window(Desk_event_pollblock *event, void *reference);
static void input(int taste,int special);
static void decode(void);
static void check_data(char c);
void set_driver_info_window(char *di,int dv,char *dc,int mpn,int s);

static int local_cursorcolor;
static int local_backcolor;
static int local_forecolor;

static int flashing;
static int flashing_time;
static int text_flashing_time;
static int click_time;
static Desk_wimp_point mouse_start,mouse_end;
static int modemlines;
static Desk_drag_block drag;
static int busy_seen=FALSE;
static int dragged_icon_nr;

static int old_online_time=0;

static Desk_window_handle old_input_focus;
static int popup_window=0;

static int no_decode=0;

static char key_table[256]=
{ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  'Q','3','4','5',0,'8',0,'-','6',0,0,0,0,0,0,0,
  0,'W','E','T','7','I','9','0',0,0,0,0,0,0,0,0,
  '1','2','D','R','6','U','O','P','[',0,0,0,0,0,0,0,
  0,'A','X','F','Y','J','K',0,':',0,0,0,0,0,0,0,
  0,'S','C','G','H','N','L',';',']',0,0,0,0,'=',92,0,
  0,'Z',' ','V','B','M',',','.','/',0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,92,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};
  
static char base64[64] = { ' ', '!', '#', '$', '%', '&', 39/*'''*/ , '(', 
                           ')', '*', ',', '-', '.', '/', '0', '1', 
                           '2', '3', '4', '5', '6', '7', '8', '9', 
                           ':', ';', '<', '=', '>', '?', '@', 'A', 
                           'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 
                           'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 
                           'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 
                           'Z', '[', 92/*'\'*/, ']', '^', '_', '`', '{'
                         };

/* misc */

void start_send(void)
{
  //char **filelist;
  file_des *current;
  int i;
  int n;

  if(Desk_LinkList_ListLength(&Files)==0)
  {
	//filetr_abort=TRUE;
    canit();
    //Desk_Icon_Shade(filetrans_window,FILETRANS_ABORT);
  	return;
  }


  (*driver)(DRIVER_FLUSHRX,portnumber);
  (*driver)(DRIVER_FLUSHTX,portnumber);
  //Desk_Menu_SetFlags(send_menu,0,0,1);
  //Desk_Menu_SetFlags(send_menu,1,0,1);
  //Desk_Menu_SetFlags(send_menu,2,0,1);
  //Desk_Menu_SetFlags(send_menu,3,0,1);   

  filetr_abort=FALSE;
  //Desk_Window_Hide(send_window);

  if(!Desk_Window_IsOpen(filetrans_window))
    Desk_Window_Show(filetrans_window,Desk_open_CENTERED);
  else
    Desk_Window_BringToFront(filetrans_window);

  //delete_status_icons(number_of_icons);
  number_of_icons=0;
  Desk_Icon_SetText(filetrans_window,FILETRANS_FILENAME,"");
  Desk_Icon_SetText(filetrans_window,FILETRANS_SIZE,"");
//  Desk_Icon_SetText(filetrans_window,FILETRANS_BYTES,"");
//  Desk_Icon_SetText(filetrans_window,FILETRANS_ELAPSED,"");
  Desk_Icon_SetText(filetrans_window,FILETRANS_EXPECTED,"");
  //Desk_Icon_SetText(filetrans_window,FILETRANS_STATUS,"Negotiating...");
  Desk_Icon_SetText(filetrans_window,FILETRANS_CPS,"");
  Desk_Slider_SetValue(&filetrans_slider, 0, NULL, NULL);
//  Desk_Icon_SetInteger(filetrans_window,FILETRANS_PRO,0);
  Desk_Icon_Unshade(filetrans_window,FILETRANS_ABORT);
  Desk_Icon_SetText(filetrans_window,FILETRANS_ABORT,msg[9].text);
//  Desk_Icon_SetText(filetrans_window,FILETRANS_BYTESCOM,msg[7].text);
  //disable_all_icons();
  //disable_menus();

/*
  n=Desk_LinkList_ListLength(&Files);
  current=Desk_LinkList_FirstItem(&Files);
  filelist = (char **)Desk_DeskMem_Malloc(n * sizeof(char *));
  for(i=0;i<n;i++)
  {
    filelist[i]=current->name;
    current = (file_des *) current->header.next;
  }
*/

  transfer_active=TRUE;
  Desk_Icon_SetForeColour(filetrans_window,FILETRANS_STATUS,7);

  if(transfer_type_nr<3)
    send(/*n,filelist,*/transfer_type_nr);
  else
  {
    ascii_abort=0;
    send_ascii();
    if(ascii_abort)
      (*driver)(DRIVER_FLUSHTX,portnumber,0,0);
  }

  //Desk_DeskMem_Free(filelist);
  
  /*
  for(i=0;i<n;i++)
  {
    current=Desk_LinkList_FirstItem(&Files);
    Desk_LinkList_Unlink(&Files,&(current->header));
    Desk_DeskMem_Free(current);
  }
  */
  
Desk_Icon_SetForeColour(filetrans_window,FILETRANS_STATUS,7);
  if(filetr_abort)
    Desk_Icon_SetText(filetrans_window,FILETRANS_STATUS,"Aborted");

  if(!filetr_finished)
  {
    pause(100);
    (*driver)(DRIVER_FLUSHRX,portnumber,0,0);
    (*driver)(DRIVER_FLUSHTX,portnumber,0,0);
  }

  Desk_Icon_Unshade(filetrans_window,FILETRANS_ABORT);
  if(close_filetrans)
    Desk_Window_Hide(filetrans_window);
  else
    Desk_Icon_SetText(filetrans_window,FILETRANS_ABORT,msg[8].text);
  transfer_active=FALSE;
  
  //Desk_Menu_SetFlags(send_menu,0,0,0);
  //Desk_Menu_SetFlags(send_menu,1,0,0);
  //Desk_Menu_SetFlags(send_menu,2,0,0);
  //Desk_Menu_SetFlags(send_menu,3,0,0);
  
}


static void start_zmodem_receive(void)
{
  char name[80];
  int n;

  filetr_abort=FALSE;
  Desk_Icon_SetText(filetrans_window,FILETRANS_FILENAME,"");
  Desk_Icon_SetText(filetrans_window,FILETRANS_SIZE,"");
//  Desk_Icon_SetText(filetrans_window,FILETRANS_BYTES,"");
//  Desk_Icon_SetText(filetrans_window,FILETRANS_ELAPSED,"");
  Desk_Icon_SetText(filetrans_window,FILETRANS_EXPECTED,"");
  //Desk_Icon_SetText(filetrans_window,FILETRANS_STATUS,"Negotiating...");
  Desk_Icon_SetText(filetrans_window,FILETRANS_CPS,"");
//  Desk_Icon_SetText(filetrans_window,FILETRANS_BYTESCOM,msg[6].text);
  Desk_Slider_SetValue(&filetrans_slider, 0, NULL, NULL);
//  Desk_Icon_SetInteger(filetrans_window,FILETRANS_PRO,0);
  Desk_Icon_Unshade(filetrans_window,FILETRANS_ABORT);
  Desk_Icon_SetText(filetrans_window,FILETRANS_ABORT,msg[9].text);

  if(!Desk_Window_IsOpen(filetrans_window))
    Desk_Window_Show(filetrans_window,Desk_open_CENTERED);
  else
    Desk_Window_BringToFront(filetrans_window);

  //delete_status_icons(number_of_icons);
  number_of_icons=0;
  //disable_all_icons();
  //disable_menus();
  transfer_active=TRUE;
  //Desk_Icon_GetText(receive_window,RECEIVE_FILENAME,name);
  Desk_Icon_SetForeColour(filetrans_window,FILETRANS_STATUS,7);
  if(transfer_type_nr<3)
    receive(transfer_type_nr);
  else
  {
    ascii_abort=0;
    receive_ascii("asciifile");
    if(ascii_abort)
      (*driver)(DRIVER_FLUSHRX,portnumber,0,0);
  }

  if(beep_transfer)
    Desk_Sound_SysBeep();
  Desk_Icon_SetForeColour(filetrans_window,FILETRANS_STATUS,7);
  if(filetr_abort)
  {
    Desk_Icon_SetText(filetrans_window,FILETRANS_STATUS,"Aborted");
    //purgeline();
  }
  if(!filetr_finished)
  {
    pause(50);
    n=0;
    while(!serialbufferempty())
    {
      if(n>1)
      {
        canit();
        n=0;
      }
      (*driver)(DRIVER_FLUSHRX,portnumber,0,0);
      //(*driver)(DRIVER_FLUSHTX,portnumber,0,0);
      pause(50);
      n++;
    }
    (*driver)(DRIVER_FLUSHRX,portnumber,0,0);
  }
  Desk_Icon_Unshade(filetrans_window,FILETRANS_ABORT);
  if(close_filetrans)
    Desk_Window_Hide(filetrans_window);
  else
    Desk_Icon_SetText(filetrans_window,FILETRANS_ABORT,msg[8].text);
  transfer_active=FALSE;
}


/*
void create_pane_icons(void)
{
    Desk_icon_handle iconh;
    Desk_icon_createblock icon;
    int i,ypos,worky,anzahl;
    char *indirectstring="";

    worky=Desk_LinkList_ListLength(&Anchor)*48+8;
    if (worky>340)
      Desk_Window_SetExtent(pane_window,0,-worky,608,0);
    else
      Desk_Window_SetExtent(pane_window,0,-340,608,0);

    icon.window = pane_window;
    icon.icondata.workarearect.min.x=8;
    icon.icondata.workarearect.max.x=600;
    icon.icondata.flags.value=0x77018511;
    icon.icondata.data.indirecttext.bufflen=30;
    icon.icondata.data.indirecttext.validstring=indirectstring;

    ypos=-8;
    current=Desk_LinkList_FirstItem(&Anchor);
    anzahl=Desk_LinkList_ListLength(&Anchor);
    for(i=0;i<anzahl;i++)
    {
        icon.icondata.workarearect.min.y=ypos-48;
        icon.icondata.workarearect.max.y=ypos;
        icon.icondata.data.indirecttext.buffer=&current->daten.name[0];
        Desk_Wimp_CreateIcon(&icon,&iconh);
        ypos-=48;
        current = (t_element *) current->header.next;
    }
}
*/
static void delete_all_pane_icons(void)
{
  int i;

  for(i=0;i<number_of_scripts;i++)
    Desk_Wimp_DeleteIcon(pane_window,i);
  //Desk_Window_ForceRedraw(pane_window,0,-(anzahl*56+8),610,0);
}

static void open_downloads(void)
{
  char str[MAX_PATHLENGTH];

  sprintf(str,"Filer_OpenDir %s",downloads_directory);
  system(str);
}


static void check_modemlines(void)
{
  int out;

  out=(*driver)(DRIVER_MODEMCONTROL,portnumber,0,0);


  if(out!=modemlines)
  {
    if(out&1)
      Desk_Icon_SetBgCol(sinfo_window,SINFO_CTS,10);
    else
      Desk_Icon_SetBgCol(sinfo_window,SINFO_CTS,1);
      
    if(out&2)
      Desk_Icon_SetBgCol(sinfo_window,SINFO_DSR,10);
    else
      Desk_Icon_SetBgCol(sinfo_window,SINFO_DSR,1);
      
    if(out&4)
      Desk_Icon_SetBgCol(sinfo_window,SINFO_RI,10);
    else
      Desk_Icon_SetBgCol(sinfo_window,SINFO_RI,1);
      
    if(out&8)
      Desk_Icon_SetBgCol(sinfo_window,SINFO_DCD,14);
    else
      Desk_Icon_SetBgCol(sinfo_window,SINFO_DCD,1);  
    
    if(out&8) /* DCD */
    {
      dial_delay_time=0;
      if(beep_online)
        Desk_Sound_SysBeep();
      if(clear_terminal)
      {
        if(dial_terminal_nr==0)
        {
          ConOut(ESC);
          ConOut('[');
          ConOut('2');
          ConOut('J');
        }
        
        if(dial_terminal_nr==1)
        {
          decodeAnsi(ESC);
          decodeAnsi('[');
          decodeAnsi('2');
          decodeAnsi('J');
        }
        update_text(0,-(text_buffer_size-terminal_height),MAX_COLUMN,ymax+1);
      }
      //set_iconbar_text("  Online  ");
      if(dialing)
      {
        if(toolbar)
          Desk_Icon_Unshade(tools_window,TOOLS_DIAL);
        Desk_Menu_SetFlags(modem_menu,1,0,0);
        /*
        if(t_name[0]!=0)
          Desk_Icon_printf(unten_window,UNTEN_LSTATUS,"Logged in %c%s%c",34,t_name,34);
        */
        dialing=FALSE;
      }
      online=TRUE;
      online_time=Desk_Time_Monotonic();
      time(&log_start_time);
      old_online_time=0;
      reset_online_time();
    }
    else
    {

      /*
      if(logon>0)
      {
        if(logon_file!=-1)
        {
          Desk_File_Close(logon_file);
          logon_file=-1;
        }
        logon=0;
      }
      */
      online=FALSE;
      //online=TRUE; // nur zum testen !!!!!!!!!!
      online_time=0;
      old_online_time=0;
      write_logfile(0);
    }

    show_modem_status();
    /*
    if( (out&1) && !(out&8))
    {
      set_iconbar_text(STANDBY);
      Desk_Icon_SetText(unten_window,UNTEN_LSTATUS,"");
    }
    if(!(out&1) && !(out&8))
    {
      set_iconbar_text(BUSY);
      Desk_Icon_SetText(unten_window,UNTEN_LSTATUS,"");
    }
    */
  }
  modemlines=out;
}


static void set_special_menu_flags(void)
{
/*
  if(local_echo)
    Desk_Menu_SetFlags(special_menu,1,1,0);
  else
    Desk_Menu_SetFlags(special_menu,1,0,0);
  if(crtocrlf)
    Desk_Menu_SetFlags(special_menu,2,1,0);
  else
    Desk_Menu_SetFlags(special_menu,2,0,0);
  if(lftocrlf)
    Desk_Menu_SetFlags(special_menu,3,1,0);
  else
    Desk_Menu_SetFlags(special_menu,3,0,0);

  Desk_Menu_SetFlags(special_menu,0,autowrap,0);

  if(ansi_terminal_height==25)
  {
    if(dial_terminal_nr!=1)
      Desk_Menu_SetFlags(special_menu,4,1,1);
    else
      Desk_Menu_SetFlags(special_menu,4,1,0);
  }
  else
  {
    if(dial_terminal_nr!=1)
      Desk_Menu_SetFlags(special_menu,4,0,1);
    else
      Desk_Menu_SetFlags(special_menu,4,0,0);
  }
*/
  if(show_sb)
    Desk_Menu_SetFlags(special_menu,3,1,0);
  else
    Desk_Menu_SetFlags(special_menu,3,0,0);

}



static void Desk_Pane2_RemovePane(Desk_window_handle mainwindow,int panenumber)
{
  /* The released versions of !Desk don't seem to have this function, so
   * reimplement it locally. It's assumed to be doing most of Desk_Pane2_Delete()
   * but keeping the underlying window for the pane around for next time. ie. it
   * only wants to remove the pane from its parent, not destroy the pane.
   */
  typedef struct
  {
    Desk_linklist_header list;
    Desk_window_handle   main;
    Desk_window_handle   pane;
    int                  others[5]; /* Opaque */
  } pane_entry;
  typedef struct
  {
    Desk_linklist_header list;
    int                  others[2]; /* Opaque */
    Desk_linklist_header panes;
  } main_entry;

  /* Bits and bobs to map back to the internal library structure. Yuck! */
  extern main_entry *Desk_Pane2__FindMainWindow(Desk_window_handle);
  extern pane_entry *Desk_Pane2__FindPaneWindow(const main_entry *,int);
  main_entry *mainentry;
  pane_entry *paneentry;

  mainentry=Desk_Pane2__FindMainWindow(mainwindow);
  if(mainentry==NULL) return; /* No match */
  paneentry=Desk_Pane2__FindPaneWindow(mainentry,panenumber);
  if(paneentry==NULL) return; /* No match */

  /* Close the window, and remove it from the main window's pane list */
  Desk_Window_Hide(paneentry->pane);
  Desk_LinkList_Unlink(&mainentry->panes, &paneentry->list);
  Desk_DeskMem_Free(paneentry);
}


static void show_toolbar(int what)
{
  //Desk_wimp_point paneoffset;

  if(what)
  {
    if(Desk_Pane2_GetPaneNumber(haupt_window,tools_window)!=0) // schon da ?
      Desk_Pane2_RemovePane(haupt_window,Desk_Pane2_GetPaneNumber(haupt_window,tools_window));
    create_toolbar(Desk_Window_IsOpen(spool_window),sinfo_open);
    if(Desk_Window_IsOpen(haupt_window))
      open_haupt_window(3);
  }
  else
  {
    if(Desk_Pane2_GetPaneNumber(haupt_window,tools_window)!=0) // schon da ?
      Desk_Pane2_RemovePane(haupt_window,Desk_Pane2_GetPaneNumber(haupt_window,tools_window));
  }
}

static int get_selected_iconnr(void)
{
  int i,zurueck;

  i=0;
  while (i<number_of_scripts && Desk_Icon_GetSelect(pane_window,i)==FALSE)
    i++;
  if (i==number_of_scripts)
    zurueck=-1;
  else
    zurueck=i;

  return(zurueck);
}


static void set_fkeys_icons(void)
{
  Desk_Icon_SetText(fkeys_window,FKEYS_1,t_fkeys[0]);
  Desk_Icon_SetText(fkeys_window,FKEYS_2,t_fkeys[1]);
  Desk_Icon_SetText(fkeys_window,FKEYS_3,t_fkeys[2]);
  Desk_Icon_SetText(fkeys_window,FKEYS_4,t_fkeys[3]);
  Desk_Icon_SetText(fkeys_window,FKEYS_5,t_fkeys[4]);
  Desk_Icon_SetText(fkeys_window,FKEYS_6,t_fkeys[5]);
  Desk_Icon_SetText(fkeys_window,FKEYS_7,t_fkeys[6]);
  Desk_Icon_SetText(fkeys_window,FKEYS_8,t_fkeys[7]);
  Desk_Icon_SetText(fkeys_window,FKEYS_9,t_fkeys[8]);
  Desk_Icon_SetText(fkeys_window,FKEYS_10,t_fkeys[9]);
  Desk_Icon_SetText(fkeys_window,FKEYS_11,t_fkeys[10]);
  Desk_Icon_SetText(fkeys_window,FKEYS_12,t_fkeys[11]);
}

static void set_sbedit_icons(void)
{
  Desk_Icon_SetText(sbedit_window,SBEDIT_L1,t_sb_label[0]);
  Desk_Icon_SetText(sbedit_window,SBEDIT_D1,t_sb_data[0]);
  Desk_Icon_SetText(sbedit_window,SBEDIT_L2,t_sb_label[1]);
  Desk_Icon_SetText(sbedit_window,SBEDIT_D2,t_sb_data[1]);
  Desk_Icon_SetText(sbedit_window,SBEDIT_L3,t_sb_label[2]);
  Desk_Icon_SetText(sbedit_window,SBEDIT_D3,t_sb_data[2]);
  Desk_Icon_SetText(sbedit_window,SBEDIT_L4,t_sb_label[3]);
  Desk_Icon_SetText(sbedit_window,SBEDIT_D4,t_sb_data[3]);
  Desk_Icon_SetText(sbedit_window,SBEDIT_L5,t_sb_label[4]);
  Desk_Icon_SetText(sbedit_window,SBEDIT_D5,t_sb_data[4]);
  Desk_Icon_SetText(sbedit_window,SBEDIT_L6,t_sb_label[5]);
  Desk_Icon_SetText(sbedit_window,SBEDIT_D6,t_sb_data[5]);
  Desk_Icon_SetText(sbedit_window,SBEDIT_L7,t_sb_label[6]);
  Desk_Icon_SetText(sbedit_window,SBEDIT_D7,t_sb_data[6]);
  Desk_Icon_SetText(sbedit_window,SBEDIT_L8,t_sb_label[7]);
  Desk_Icon_SetText(sbedit_window,SBEDIT_D8,t_sb_data[7]);
}

static void set_edit_icons(void)
{
  int i;

  Desk_Icon_SetInteger(edit_window,EDIT_NR,1);
/*
  strcpy(t_name,"");
  for(i=0;i<MAX_NUMBERS;i++)
    strcpy(t_number[i],"");
  t_number_nr=0;
  t_terminal=0;
  t_baud=4;
  t_data=5;
  t_filetr=2;
  t_wrap=1;
  t_echo=0;
  t_lines25=0;
  t_online=0;
  strcpy(t_modeminit,"");
  strcpy(t_download,"");
  t_send_crashrecovery=send_crashrecovery;
  t_receive_file_action=receive_file_action;
  t_tx_window=tx_window;
  t_tx_window_size=tx_window_size;
  t_ackint=ackint;
  t_xmodem_crc=xmodem_crc;
  t_xmodem_k=xmodem_k;
  t_ymodem_crc=ymodem_crc;
  t_ymodem_k=ymodem_k;
  t_ascii_char_delay=ascii_char_delay;
  t_ascii_line_delay=ascii_line_delay;
  t_ascii_trans=ascii_trans;
*/
  if (editaction==EDIT)
  {
    load_header(t_filename[script_nr]);
  }
  else
  {
    strcpy(t_name,"");
    for(i=0;i<MAX_NUMBERS;i++)
      strcpy(t_number[i],"");
    t_number_nr=0;
    t_terminal=dial_terminal_nr_0;//0;
    t_baud=dial_baud_nr_0;//4;
    t_data=dial_data_nr_0;//5;
    t_filetr=transfer_type_nr_0;//2;
    t_wrap=wrap_0;//1;
    t_echo=local_echo_0;//0;
    t_lines25=0;
    t_avatar=avatar_0;
    t_online=0;
    t_crtocrlf=crtocrlf_0;
    t_lftocrlf=lftocrlf_0;
    strcpy(t_modeminit,"");
    strcpy(t_download,"");
    t_send_crashrecovery=send_crashrecovery_0;
    t_receive_file_action=receive_file_action_0;
    //t_tx_window=tx_window;
    t_tx_window_size=tx_window_size_0;
    t_ackint=ackint_0;
    t_xmodem_crc=xmodem_crc_0;
    t_xmodem_k=xmodem_k_0;
    t_ymodem_crc=ymodem_crc_0;
    t_ymodem_k=ymodem_k_0;
    t_ascii_char_delay=ascii_char_delay_0;
    t_ascii_line_delay=ascii_line_delay_0;
    t_ascii_trans=ascii_trans_0;
    for(i=0;i<12;i++)
      strcpy(t_fkeys[i],"");
    for(i=0;i<8;i++)
    {
      strcpy(t_sb_label[i],"");
      strcpy(t_sb_data[i],"");
    }
  }

  Desk_Icon_SetText(edit_window,EDIT_NAME,t_name);
  Desk_Icon_SetText(edit_window,EDIT_NUMBER,t_number[t_number_nr]);
  Desk_Icon_SetText(edit_window,EDIT_INIT,t_modeminit);
  if(t_download[0]!=0)
    Desk_Icon_SetText(edit_window,EDIT_DIR,t_download);
  else
    Desk_Icon_SetText(edit_window,EDIT_DIR,old_downloads_directory);

  Desk_Icon_SetInteger(edit_window,EDIT_ONLINE,t_online);

  edit_terminal_nr=t_terminal;
  Desk_Icon_SetText(edit_window,EDIT_TERMINAL,terminal[edit_terminal_nr].string);
  edit_baud_nr=t_baud;
  Desk_Icon_SetText(edit_window,EDIT_BAUD,baud[edit_baud_nr].string);
  edit_data_nr=t_data;
  Desk_Icon_SetText(edit_window,EDIT_DATA,data[edit_data_nr].string);
  edit_filetr_nr=t_filetr;
  Desk_Icon_SetText(edit_window,EDIT_FILETR,transfer[edit_filetr_nr]);

  //Desk_Icon_SetSelect(edit_window,EDIT_25,t_lines25);
  //Desk_Icon_SetSelect(edit_window,EDIT_WRAP,t_wrap);

  /*
  for(i=0;i<12;i++)
  {
    if(fkeys[i]!=NULL)
      Desk_Icon_SetText(fkeys_window,i,fkeys[i]);
    else
      Desk_Icon_SetText(fkeys_window,i,"");
  }
  */

}

static void get_fkeys_icons(void)
{
  Desk_Icon_GetText(fkeys_window,FKEYS_1,gstring);
  strcpy(t_fkeys[0],gstring);
  Desk_Icon_GetText(fkeys_window,FKEYS_2,gstring);
  strcpy(t_fkeys[1],gstring);
  Desk_Icon_GetText(fkeys_window,FKEYS_3,gstring);
  strcpy(t_fkeys[2],gstring);
  Desk_Icon_GetText(fkeys_window,FKEYS_4,gstring);
  strcpy(t_fkeys[3],gstring);
  Desk_Icon_GetText(fkeys_window,FKEYS_5,gstring);
  strcpy(t_fkeys[4],gstring);
  Desk_Icon_GetText(fkeys_window,FKEYS_6,gstring);
  strcpy(t_fkeys[5],gstring);
  Desk_Icon_GetText(fkeys_window,FKEYS_7,gstring);
  strcpy(t_fkeys[6],gstring);
  Desk_Icon_GetText(fkeys_window,FKEYS_8,gstring);
  strcpy(t_fkeys[7],gstring);
  Desk_Icon_GetText(fkeys_window,FKEYS_9,gstring);
  strcpy(t_fkeys[8],gstring);
  Desk_Icon_GetText(fkeys_window,FKEYS_10,gstring);
  strcpy(t_fkeys[9],gstring);
  Desk_Icon_GetText(fkeys_window,FKEYS_11,gstring);
  strcpy(t_fkeys[10],gstring);
  Desk_Icon_GetText(fkeys_window,FKEYS_12,gstring);
  strcpy(t_fkeys[11],gstring);
}

static void get_sbedit_icons(void)
{
  Desk_Icon_GetText(sbedit_window,SBEDIT_L1,t_sb_label[0]);
  Desk_Icon_GetText(sbedit_window,SBEDIT_D1,t_sb_data[0]);
  Desk_Icon_GetText(sbedit_window,SBEDIT_L2,t_sb_label[1]);
  Desk_Icon_GetText(sbedit_window,SBEDIT_D2,t_sb_data[1]);
  Desk_Icon_GetText(sbedit_window,SBEDIT_L3,t_sb_label[2]);
  Desk_Icon_GetText(sbedit_window,SBEDIT_D3,t_sb_data[2]);
  Desk_Icon_GetText(sbedit_window,SBEDIT_L4,t_sb_label[3]);
  Desk_Icon_GetText(sbedit_window,SBEDIT_D4,t_sb_data[3]);
  Desk_Icon_GetText(sbedit_window,SBEDIT_L5,t_sb_label[4]);
  Desk_Icon_GetText(sbedit_window,SBEDIT_D5,t_sb_data[4]);
  Desk_Icon_GetText(sbedit_window,SBEDIT_L6,t_sb_label[5]);
  Desk_Icon_GetText(sbedit_window,SBEDIT_D6,t_sb_data[5]);
  Desk_Icon_GetText(sbedit_window,SBEDIT_L7,t_sb_label[6]);
  Desk_Icon_GetText(sbedit_window,SBEDIT_D7,t_sb_data[6]);
  Desk_Icon_GetText(sbedit_window,SBEDIT_L8,t_sb_label[7]);
  Desk_Icon_GetText(sbedit_window,SBEDIT_D8,t_sb_data[7]);
}

static void get_edit_icons(void)
{
  int i;
  char *text;

  /*
  if (editaction==EDIT)
  {
    Desk_Icon_GetText(pane_window,script_nr,script_name);
    load_header(script_name);
  }
  */

  Desk_Icon_GetText(edit_window,EDIT_NAME,t_name);
  Desk_Icon_GetText(edit_window,EDIT_NUMBER,t_number[t_number_nr]);
  Desk_Icon_GetText(edit_window,EDIT_INIT,t_modeminit);
  Desk_Icon_GetText(edit_window,EDIT_DIR,t_download);
  t_online=Desk_Icon_GetInteger(edit_window,EDIT_ONLINE);

  t_terminal=edit_terminal_nr;
  t_baud=edit_baud_nr;
  t_data=edit_data_nr;
  t_filetr=edit_filetr_nr;

  //t_lines25=Desk_Icon_GetSelect(edit_window,EDIT_25);
  //t_wrap=Desk_Icon_GetSelect(edit_window,EDIT_WRAP);

  /*
  for(i=0;i<12;i++)
  {
    if(fkeys[i]!=NULL)
    {
      Desk_DeskMem_Free(fkeys[i]);
      fkeys[i]=NULL;
    }
    Desk_Icon_GetText(fkeys_window,i,gstring);
    if(strlen(gstring)>0)
    {
      text = (char *)Desk_DeskMem_Malloc(strlen(gstring)+1);
      strcpy(text,gstring);
      fkeys[i]=text;
    }
  }
  */
}


static void set_fkeys2_icons(void)
{
  int i;

  for(i=0;i<12;i++)
    Desk_Icon_SetText(fkeys2_window,i,fkeys[i]);
}

static void get_fkeys2_icons(void)
{
  int i;

  for(i=0;i<12;i++)
  {
    Desk_Icon_GetText(fkeys2_window,i,gstring);
    strcpy(fkeys[i],gstring);
  }
}

static void set_sbedit2_icons(void)
{
  Desk_Icon_SetText(sbedit2_window,SBEDIT2_L1,sb_label[0]);
  Desk_Icon_SetText(sbedit2_window,SBEDIT2_D1,sb_data[0]);
  Desk_Icon_SetText(sbedit2_window,SBEDIT2_L2,sb_label[1]);
  Desk_Icon_SetText(sbedit2_window,SBEDIT2_D2,sb_data[1]);
  Desk_Icon_SetText(sbedit2_window,SBEDIT2_L3,sb_label[2]);
  Desk_Icon_SetText(sbedit2_window,SBEDIT2_D3,sb_data[2]);
  Desk_Icon_SetText(sbedit2_window,SBEDIT2_L4,sb_label[3]);
  Desk_Icon_SetText(sbedit2_window,SBEDIT2_D4,sb_data[3]);
  Desk_Icon_SetText(sbedit2_window,SBEDIT2_L5,sb_label[4]);
  Desk_Icon_SetText(sbedit2_window,SBEDIT2_D5,sb_data[4]);
  Desk_Icon_SetText(sbedit2_window,SBEDIT2_L6,sb_label[5]);
  Desk_Icon_SetText(sbedit2_window,SBEDIT2_D6,sb_data[5]);
  Desk_Icon_SetText(sbedit2_window,SBEDIT2_L7,sb_label[6]);
  Desk_Icon_SetText(sbedit2_window,SBEDIT2_D7,sb_data[6]);
  Desk_Icon_SetText(sbedit2_window,SBEDIT2_L8,sb_label[7]);
  Desk_Icon_SetText(sbedit2_window,SBEDIT2_D8,sb_data[7]);
}

static void get_sbedit2_icons(void)
{
  Desk_Icon_GetText(sbedit2_window,SBEDIT2_L1,sb_label[0]);
  Desk_Icon_GetText(sbedit2_window,SBEDIT2_D1,sb_data[0]);
  Desk_Icon_GetText(sbedit2_window,SBEDIT2_L2,sb_label[1]);
  Desk_Icon_GetText(sbedit2_window,SBEDIT2_D2,sb_data[1]);
  Desk_Icon_GetText(sbedit2_window,SBEDIT2_L3,sb_label[2]);
  Desk_Icon_GetText(sbedit2_window,SBEDIT2_D3,sb_data[2]);
  Desk_Icon_GetText(sbedit2_window,SBEDIT2_L4,sb_label[3]);
  Desk_Icon_GetText(sbedit2_window,SBEDIT2_D4,sb_data[3]);
  Desk_Icon_GetText(sbedit2_window,SBEDIT2_L5,sb_label[4]);
  Desk_Icon_GetText(sbedit2_window,SBEDIT2_D5,sb_data[4]);
  Desk_Icon_GetText(sbedit2_window,SBEDIT2_L6,sb_label[5]);
  Desk_Icon_GetText(sbedit2_window,SBEDIT2_D6,sb_data[5]);
  Desk_Icon_GetText(sbedit2_window,SBEDIT2_L7,sb_label[6]);
  Desk_Icon_GetText(sbedit2_window,SBEDIT2_D7,sb_data[6]);
  Desk_Icon_GetText(sbedit2_window,SBEDIT2_L8,sb_label[7]);
  Desk_Icon_GetText(sbedit2_window,SBEDIT2_D8,sb_data[7]);
}


static void set_cmodem_icons(void)
{
   Desk_Icon_SetText(cmodem_window,CMODEM_INIT,modem.init);
   Desk_Icon_SetText(cmodem_window,CMODEM_PREFIX,modem.dialprefix);
   Desk_Icon_SetText(cmodem_window,CMODEM_SUFFIX,modem.dialsuffix);
   Desk_Icon_SetText(cmodem_window,CMODEM_HANGUP,modem.hangup);
   Desk_Icon_SetText(cmodem_window,CMODEM_ANSWER,modem.answer);
   Desk_Icon_SetSelect(cmodem_window,CMODEM_AUTODIAL,autodial);
   Desk_Icon_SetShade(cmodem_window,CMODEM_DELAY,!autodial);
   Desk_Icon_SetInteger(cmodem_window,CMODEM_DELAY,dial_delay);
   Desk_Icon_SetSelect(cmodem_window,CMODEM_BEEP_ONLINE,beep_online);
   Desk_Icon_SetSelect(cmodem_window,CMODEM_CLEART,clear_terminal);
   Desk_Icon_SetSelect(cmodem_window,CMODEM_INITOPT,init_modem);

   if(drop_dtr)
   {
     Desk_Icon_Select(cmodem_window,CMODEM_DROPDTROPT);
     Desk_Icon_Deselect(cmodem_window,CMODEM_HSTROPT);
     Desk_Icon_Shade(cmodem_window,CMODEM_HANGUP);
   }
   else
   {
     Desk_Icon_Select(cmodem_window,CMODEM_HSTROPT);
     Desk_Icon_Deselect(cmodem_window,CMODEM_DROPDTROPT);
     Desk_Icon_Unshade(cmodem_window,CMODEM_HANGUP);

   }
}

static void set_cterminal_icons(void)
{
  Desk_Icon_SetInteger(cterminal_window,CTERMINAL_TBSIZE,text_buffer_size);
  Desk_Icon_SetSelect(cterminal_window,CTERMINAL_FLASHING,cursor_flashing);
  Desk_Icon_SetBackColour(cterminal_window,CTERMINAL_CURSOR_COLOR,cursorcolor);
  local_cursorcolor=cursorcolor;
  Desk_Icon_SetBackColour(cterminal_window,CTERMINAL_BCOLOR,backcolor);
  local_backcolor=backcolor;
  Desk_Icon_SetBackColour(cterminal_window,CTERMINAL_FCOLOR,forecolor);
  local_forecolor=forecolor;
  Desk_Icon_SetInteger(cterminal_window,CTERMINAL_LOCAL,local_lines);
  Desk_Icon_SetInteger(cterminal_window,CTERMINAL_REMOTE,remote_lines);
  Desk_Icon_SetSelect(cterminal_window,CTERMINAL_SPECIAL,chat_special);
  Desk_Icon_SetSelect(cterminal_window,CTERMINAL_TOOLBAR,toolbar);
  Desk_Icon_SetInteger(cterminal_window,CTERMINAL_CEPTZOOM,cept_zoom);
  if(toolbar_type==1)
    Desk_Icon_Select(cterminal_window,CTERMINAL_LEFT);
  if(toolbar_type==2)
    Desk_Icon_Select(cterminal_window,CTERMINAL_BOTTOM);
  Desk_Icon_SetSelect(cterminal_window,CTERMINAL_KEYB,german_keyb);
  Desk_Icon_SetSelect(cterminal_window,CTERMINAL_AUTOLOGON,autologon);

  if(vt_font)
  {
    Desk_Icon_Select(cterminal_window,CTERMINAL_FVT16);
    Desk_Icon_Deselect(cterminal_window,CTERMINAL_FVT18);
  }
  else
  {
    Desk_Icon_Select(cterminal_window,CTERMINAL_FVT18);
    Desk_Icon_Deselect(cterminal_window,CTERMINAL_FVT16);
  }

  if(ansi_font)
  {
    Desk_Icon_Select(cterminal_window,CTERMINAL_FAN16);
    Desk_Icon_Deselect(cterminal_window,CTERMINAL_FAN18);
  }
  else
  {
    Desk_Icon_Select(cterminal_window,CTERMINAL_FAN18);
    Desk_Icon_Deselect(cterminal_window,CTERMINAL_FAN16);
  }

}

#if 0
void set_cserial_icons(int dnr,int pmnr,int sib,int sob,int intern)
{
  Desk_Icon_SetText(config_pane_window,CONFIGPANE_BLOCK,drivers[dnr].file);
  Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_PORT,portnumber);
  Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_INPUT,serial_input_buffer_size);
  if(serial_output_buffer)
    Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_OUTPUT,serial_output_buffer_size);
  else
    Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_OUTPUT,4096);
    
  Desk_Icon_SetSelect(config_pane_window,CONFIGPANE_INOPT,sib);
  Desk_Icon_SetSelect(config_pane_window,CONFIGPANE_OUTOPT,sob);
  Desk_Icon_SetShade(config_pane_window,CONFIGPANE_INOPT,!intern);
  Desk_Icon_SetShade(config_pane_window,CONFIGPANE_OUTOPT,!intern);
  Desk_Icon_SetShade(config_pane_window,CONFIGPANE_INPUT,!sib);
  Desk_Icon_SetShade(config_pane_window,CONFIGPANE_OUTPUT,!sob);
  
  Desk_Icon_SetText(config_pane_window,CONFIGPANE_FLOW,flow[flow_type_nr]);
  Desk_Icon_SetSelect(config_pane_window,CONFIGPANE_MODEM,iconbar_modem);
  Desk_Icon_SetSelect(config_pane_window,CONFIGPANE_RXTX,iconbar_rxtx);
  Desk_Icon_SetSelect(config_pane_window,CONFIGPANE_IPORT,iconbar_portnumber);
  
  if(pmnr==0)
  {
    //incdec_config_pane->step=0;
    Desk_Icon_Shade(config_pane_window,CONFIGPANE_PUP);
    Desk_Icon_Shade(config_pane_window,CONFIGPANE_PDOWN);
  }
  else
  {
    //incdec_config_pane->step=1;
    Desk_Icon_Unshade(config_pane_window,CONFIGPANE_PUP);
    Desk_Icon_Unshade(config_pane_window,CONFIGPANE_PDOWN);
  }
  //incdec_config_pane->max=pmnr;
  local_max_port_nr=pmnr;
  
}
#endif

void set_cserial_icons(int dnr,int pmnr,int sib,int sob,int intern)
{
  Desk_Icon_SetText(cserial_window,CSERIAL_BLOCK,drivers[dnr].file);
  Desk_Icon_SetInteger(cserial_window,CSERIAL_PORT,portnumber);
  Desk_Icon_SetInteger(cserial_window,CSERIAL_INPUT,serial_input_buffer_size);
  if(serial_output_buffer)
    Desk_Icon_SetInteger(cserial_window,CSERIAL_OUTPUT,serial_output_buffer_size);
  else
    Desk_Icon_SetInteger(cserial_window,CSERIAL_OUTPUT,4096);
    
  Desk_Icon_SetSelect(cserial_window,CSERIAL_INOPT,sib);
  Desk_Icon_SetSelect(cserial_window,CSERIAL_OUTOPT,sob);
  Desk_Icon_SetShade(cserial_window,CSERIAL_INOPT,!intern);
  Desk_Icon_SetShade(cserial_window,CSERIAL_OUTOPT,!intern);
  Desk_Icon_SetShade(cserial_window,CSERIAL_INPUT,!sib);
  Desk_Icon_SetShade(cserial_window,CSERIAL_OUTPUT,!sob);
  
  Desk_Icon_SetText(cserial_window,CSERIAL_FLOW,flow[choosed_flow_type_nr]);
  
  //Desk_Icon_SetSelect(cserial_window,CSERIAL_MODEM,iconbar_modem);
  //Desk_Icon_SetSelect(cserial_window,CSERIAL_RXTX,iconbar_rxtx);
  //Desk_Icon_SetSelect(cserial_window,CSERIAL_IPORT,iconbar_portnumber);
  
  if(pmnr==0)
  {
    //incdec_cserial->step=0;
    Desk_Icon_Shade(cserial_window,CSERIAL_UP);
    Desk_Icon_Shade(cserial_window,CSERIAL_DOWN);
  }
  else
  {
    //incdec_cserial->step=1;
    Desk_Icon_Unshade(cserial_window,CSERIAL_UP);
    Desk_Icon_Unshade(cserial_window,CSERIAL_DOWN);
  }
  //incdec_cserial->max=pmnr;
  local_max_port_nr=pmnr;
  
}


static void set_cfiletr_icons(void)
{
  Desk_Icon_SetText(cfiletr_window,CFILETR_DOWNLOADS,old_downloads_directory);
  Desk_Icon_SetSelect(cfiletr_window,CFILETR_DOSMAP,use_dosmap);
  Desk_Icon_SetSelect(cfiletr_window,CFILETR_BEEP_TRANSFER,beep_transfer);
  Desk_Icon_SetText(cfiletr_window,CFILETR_FILETYPES,filetypes);
  Desk_Icon_SetSelect(cfiletr_window,CFILETR_CLOSE,close_filetrans);
  Desk_Icon_SetInteger(cfiletr_window,CFILETR_FLENGTH,truncate_filename);
  Desk_Icon_SetInteger(cfiletr_window,CFILETR_DBSIZE,discbuffer);
}




#if 0

void set_cserial_icons(int dnr,int pmnr,int sib,int sob,int intern)
{
  Desk_Icon_SetText(config_pane_window,CONFIGPANE_BLOCK,drivers[dnr].file);
  Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_PORT,portnumber);
  Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_INPUT,serial_input_buffer_size);
  
  //if(serial_output_buffer)
    Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_OUTPUT,serial_output_buffer_size);
  //else
  //  Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_OUTPUT,4096);
    
  Desk_Icon_SetSelect(config_pane_window,CONFIGPANE_INOPT,sib);
  Desk_Icon_SetSelect(config_pane_window,CONFIGPANE_OUTOPT,sob);
  Desk_Icon_SetShade(config_pane_window,CONFIGPANE_INOPT,!intern);
  Desk_Icon_SetShade(config_pane_window,CONFIGPANE_OUTOPT,!intern);
  Desk_Icon_SetShade(config_pane_window,CONFIGPANE_INPUT,!sib);
  Desk_Icon_SetShade(config_pane_window,CONFIGPANE_OUTPUT,!sob);
  
  Desk_Icon_SetText(config_pane_window,CONFIGPANE_FLOW,flow[flow_type_nr]);
  
  if(pmnr==0)
  {
    //incdec_config_pane->step=0;
    Desk_Icon_Shade(config_pane_window,CONFIGPANE_PUP);
    Desk_Icon_Shade(config_pane_window,CONFIGPANE_PDOWN);
  }
  else
  {
    //incdec_config_pane->step=1;
    Desk_Icon_Unshade(config_pane_window,CONFIGPANE_PUP);
    Desk_Icon_Unshade(config_pane_window,CONFIGPANE_PDOWN);
  }
  //incdec_config_pane->max=pmnr;
  local_max_port_nr=pmnr;
  
}

static void set_config_pane_icons(void)
{
  // Modem
  
   Desk_Icon_SetText(config_pane_window,CONFIGPANE_INIT,modem.init);
   Desk_Icon_SetText(config_pane_window,CONFIGPANE_PREFIX,modem.dialprefix);
   Desk_Icon_SetText(config_pane_window,CONFIGPANE_SUFFIX,modem.dialsuffix);
   Desk_Icon_SetText(config_pane_window,CONFIGPANE_HANGUP,modem.hangup);
   Desk_Icon_SetText(config_pane_window,CONFIGPANE_ANSWER,modem.answer);
   Desk_Icon_SetSelect(config_pane_window,CONFIGPANE_AUTODIAL,autodial);
   Desk_Icon_SetShade(config_pane_window,CONFIGPANE_DELAY,!autodial);
   Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_DELAY,dial_delay);
   Desk_Icon_SetSelect(config_pane_window,CONFIGPANE_BEEP_ONLINE,beep_online);
   Desk_Icon_SetSelect(config_pane_window,CONFIGPANE_INITOPT,init_modem);

   if(drop_dtr)
   {
     Desk_Icon_Select(config_pane_window,CONFIGPANE_DROPDTROPT);
     Desk_Icon_Deselect(config_pane_window,CONFIGPANE_HSTROPT);
     Desk_Icon_Shade(config_pane_window,CONFIGPANE_HANGUP);
   }
   else
   {
     Desk_Icon_Select(config_pane_window,CONFIGPANE_HSTROPT);
     Desk_Icon_Deselect(config_pane_window,CONFIGPANE_DROPDTROPT);
     Desk_Icon_Unshade(config_pane_window,CONFIGPANE_HANGUP);

   }
   
   // Terminal
   
  Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_TBSIZE,text_buffer_size);
  Desk_Icon_SetSelect(config_pane_window,CONFIGPANE_FLASHING,cursor_flashing);
  Desk_Icon_SetBackColour(config_pane_window,CONFIGPANE_CURSOR_COLOR,cursorcolor);
  local_cursorcolor=cursorcolor;
  Desk_Icon_SetBackColour(config_pane_window,CONFIGPANE_BCOLOR,backcolor);
  local_backcolor=backcolor;
  Desk_Icon_SetBackColour(config_pane_window,CONFIGPANE_FCOLOR,forecolor);
  local_forecolor=forecolor;
  Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_LOCAL,local_lines);
  Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_REMOTE,remote_lines);
  Desk_Icon_SetSelect(config_pane_window,CONFIGPANE_SPECIAL,chat_special);
  Desk_Icon_SetSelect(config_pane_window,CONFIGPANE_TOOLBAR,toolbar);
  Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_CEPTZOOM,cept_zoom);
  if(toolbar_type==1)
    Desk_Icon_Select(config_pane_window,CONFIGPANE_LEFT);
  if(toolbar_type==2)
    Desk_Icon_Select(config_pane_window,CONFIGPANE_BOTTOM);
  Desk_Icon_SetSelect(config_pane_window,CONFIGPANE_KEYB,german_keyb);
  Desk_Icon_SetSelect(config_pane_window,CONFIGPANE_AUTOLOGON,autologon);

  if(vt_font)
  {
    Desk_Icon_Select(config_pane_window,CONFIGPANE_FVT16);
    Desk_Icon_Deselect(config_pane_window,CONFIGPANE_FVT18);
  }
  else
  {
    Desk_Icon_Select(config_pane_window,CONFIGPANE_FVT18);
    Desk_Icon_Deselect(config_pane_window,CONFIGPANE_FVT16);
  }

  if(ansi_font)
  {
    Desk_Icon_Select(config_pane_window,CONFIGPANE_FAN16);
    Desk_Icon_Deselect(config_pane_window,CONFIGPANE_FAN18);
  }
  else
  {
    Desk_Icon_Select(config_pane_window,CONFIGPANE_FAN18);
    Desk_Icon_Deselect(config_pane_window,CONFIGPANE_FAN16);
  }

   // Serial
 
  set_cserial_icons(driver_nr,max_port_nr,serial_input_buffer,serial_output_buffer,internal_driver);
  
  set_driver_info_window(driver_info,driver_version,driver_creator,max_port_nr,
                         driver_speedtable[driver_noofspeeds-1]);
   // File transfer
   
  Desk_Icon_SetText(config_pane_window,CONFIGPANE_DOWNLOADS,old_downloads_directory);
  Desk_Icon_SetSelect(config_pane_window,CONFIGPANE_BEEP_TRANSFER,beep_transfer);
  Desk_Icon_SetText(config_pane_window,CONFIGPANE_FILETYPES,filetypes);
  Desk_Icon_SetSelect(config_pane_window,CONFIGPANE_CLOSE,close_filetrans);
  Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_FLENGTH,truncate_filename);
  Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_DBSIZE,discbuffer);
   
}
#endif


static void set_xmodem_icons(void)
{
  if(popup_window!=edit_window)
  {
    Desk_Icon_SetSelect(xmodem_window,XMODEM_CRC,xmodem_crc);
    Desk_Icon_SetSelect(xmodem_window,XMODEM_CHECKSUM,!xmodem_crc);
    Desk_Icon_SetSelect(xmodem_window,XMODEM_1024B,xmodem_k);
    Desk_Icon_SetSelect(xmodem_window,XMODEM_128B,!xmodem_k);
  }
  else
  {
    Desk_Icon_SetSelect(xmodem_window,XMODEM_CRC,t_xmodem_crc);
    Desk_Icon_SetSelect(xmodem_window,XMODEM_CHECKSUM,!t_xmodem_crc);
    Desk_Icon_SetSelect(xmodem_window,XMODEM_1024B,t_xmodem_k);
    Desk_Icon_SetSelect(xmodem_window,XMODEM_128B,!t_xmodem_k);
  }
}

static void set_ymodem_icons(void)
{
  if(popup_window!=edit_window)
  {
    Desk_Icon_SetSelect(ymodem_window,YMODEM_CRC,ymodem_crc);
    Desk_Icon_SetSelect(ymodem_window,YMODEM_CHECKSUM,!ymodem_crc);
    Desk_Icon_SetSelect(ymodem_window,YMODEM_1024B,ymodem_k);
    Desk_Icon_SetSelect(ymodem_window,YMODEM_128B,!ymodem_k);
  }
  else
  {
    Desk_Icon_SetSelect(ymodem_window,YMODEM_CRC,t_ymodem_crc);
    Desk_Icon_SetSelect(ymodem_window,YMODEM_CHECKSUM,!t_ymodem_crc);
    Desk_Icon_SetSelect(ymodem_window,YMODEM_1024B,t_ymodem_k);
    Desk_Icon_SetSelect(ymodem_window,YMODEM_128B,!t_ymodem_k);
  }
}

static void set_zmodem_icons(void)
{
  if(popup_window!=edit_window)
  {
    Desk_Icon_SetSelect(zmodem_window,ZMODEM_SCRASHREC,send_crashrecovery);

    Desk_Icon_Deselect(zmodem_window,ZMODEM_RCRASHREC);
    Desk_Icon_Deselect(zmodem_window,ZMODEM_RENAME);
    Desk_Icon_Deselect(zmodem_window,ZMODEM_OVERWRITE);

    if(receive_file_action==CRASHRECOVERY)
      Desk_Icon_Select(zmodem_window,ZMODEM_RCRASHREC);
    if(receive_file_action==RENAME)
      Desk_Icon_Select(zmodem_window,ZMODEM_RENAME);
    if(receive_file_action==OVERWRITE)
      Desk_Icon_Select(zmodem_window,ZMODEM_OVERWRITE);

    //Desk_Icon_SetSelect(zmodem_window,ZMODEM_WINDOW,tx_window);
    if(tx_window_size>1000)
      tx_window_size/=1024;
    Desk_Icon_SetInteger(zmodem_window,ZMODEM_TXWSIZE,tx_window_size);
    //Desk_Icon_SetShade(zmodem_window,ZMODEM_TXWSIZE,!tx_window);
    //Desk_Icon_SetShade(zmodem_window,ZMODEM_TXD,!tx_window);
    //Desk_Icon_SetShade(zmodem_window,ZMODEM_TXU,!tx_window);

    Desk_Icon_SetInteger(zmodem_window,ZMODEM_ACKINT,ackint);
  }
  else
  {
    Desk_Icon_SetSelect(zmodem_window,ZMODEM_SCRASHREC,t_send_crashrecovery);

    Desk_Icon_Deselect(zmodem_window,ZMODEM_RCRASHREC);
    Desk_Icon_Deselect(zmodem_window,ZMODEM_RENAME);
    Desk_Icon_Deselect(zmodem_window,ZMODEM_OVERWRITE);

    if(t_receive_file_action==CRASHRECOVERY)
      Desk_Icon_Select(zmodem_window,ZMODEM_RCRASHREC);
    if(t_receive_file_action==RENAME)
      Desk_Icon_Select(zmodem_window,ZMODEM_RENAME);
    if(t_receive_file_action==OVERWRITE)
      Desk_Icon_Select(zmodem_window,ZMODEM_OVERWRITE);

    //Desk_Icon_SetSelect(zmodem_window,ZMODEM_WINDOW,t_tx_window);
    if(t_tx_window_size>1000)
      t_tx_window_size/=1024;
    Desk_Icon_SetInteger(zmodem_window,ZMODEM_TXWSIZE,t_tx_window_size);
    //Desk_Icon_SetShade(zmodem_window,ZMODEM_TXWSIZE,!t_tx_window);
    //Desk_Icon_SetShade(zmodem_window,ZMODEM_TXD,!t_tx_window);
    //Desk_Icon_SetShade(zmodem_window,ZMODEM_TXU,!t_tx_window);

    Desk_Icon_SetInteger(zmodem_window,ZMODEM_ACKINT,t_ackint);
  }
}

static void set_ascii_icons(void)
{
  if(popup_window!=edit_window)
  {
    Desk_Icon_SetInteger(ascii_window,ASCII_CHARDELAY,ascii_char_delay);
    Desk_Icon_SetInteger(ascii_window,ASCII_LINEDELAY,ascii_line_delay);

    Desk_Icon_Deselect(ascii_window,ASCII_0);
    Desk_Icon_Deselect(ascii_window,ASCII_1);
    Desk_Icon_Deselect(ascii_window,ASCII_2);
    Desk_Icon_Deselect(ascii_window,ASCII_3);

    switch(ascii_trans)
    {
      case 0:
        Desk_Icon_Select(ascii_window,ASCII_0);
      break;
      case 1:
        Desk_Icon_Select(ascii_window,ASCII_1);
      break;
      case 2:
        Desk_Icon_Select(ascii_window,ASCII_2);
      break;
      case 3:
        Desk_Icon_Select(ascii_window,ASCII_3);
      break;
    }
  }
  else
  {
    Desk_Icon_SetInteger(ascii_window,ASCII_CHARDELAY,t_ascii_char_delay);
    Desk_Icon_SetInteger(ascii_window,ASCII_LINEDELAY,t_ascii_line_delay);

    Desk_Icon_Deselect(ascii_window,ASCII_0);
    Desk_Icon_Deselect(ascii_window,ASCII_1);
    Desk_Icon_Deselect(ascii_window,ASCII_2);
    Desk_Icon_Deselect(ascii_window,ASCII_3);

    switch(t_ascii_trans)
    {
      case 0:
        Desk_Icon_Select(ascii_window,ASCII_0);
      break;
      case 1:
        Desk_Icon_Select(ascii_window,ASCII_1);
      break;
      case 2:
        Desk_Icon_Select(ascii_window,ASCII_2);
      break;
      case 3:
        Desk_Icon_Select(ascii_window,ASCII_3);
      break;
    }
  }
}


static void set_ansi_icons(void)
{
  if(popup_window!=edit_window)
  {
    Desk_Icon_SetSelect(ansi_window,ANSI_WRAP,autowrap);
    Desk_Icon_SetSelect(ansi_window,ANSI_ECHO,local_echo);
    Desk_Icon_SetSelect(ansi_window,ANSI_CR,crtocrlf);
    Desk_Icon_SetSelect(ansi_window,ANSI_LF,lftocrlf);
    Desk_Icon_SetSelect(ansi_window,ANSI_AVATAR,avatar);
    if(ansi_terminal_height==25)
      Desk_Icon_SetSelect(ansi_window,ANSI_25,1);
    else
      Desk_Icon_SetSelect(ansi_window,ANSI_25,0);
  }
  else
  {
    Desk_Icon_SetSelect(ansi_window,ANSI_WRAP,t_wrap);
    Desk_Icon_SetSelect(ansi_window,ANSI_ECHO,t_echo);
    Desk_Icon_SetSelect(ansi_window,ANSI_CR,t_crtocrlf);
    Desk_Icon_SetSelect(ansi_window,ANSI_LF,t_lftocrlf);
    Desk_Icon_SetSelect(ansi_window,ANSI_AVATAR,t_avatar);
    Desk_Icon_SetSelect(ansi_window,ANSI_25,t_lines25);
  }
}

static void set_vt100_icons(void)
{
  if(popup_window!=edit_window)
  {
    Desk_Icon_SetSelect(vt100_window,VT100_WRAP,autowrap);
    Desk_Icon_SetSelect(vt100_window,VT100_ECHO,local_echo);
    Desk_Icon_SetSelect(vt100_window,VT100_CR,crtocrlf);
    Desk_Icon_SetSelect(vt100_window,VT100_LF,lftocrlf);
  }
  else
  {
    Desk_Icon_SetSelect(vt100_window,VT100_WRAP,t_wrap);
    Desk_Icon_SetSelect(vt100_window,VT100_ECHO,t_echo);
    Desk_Icon_SetSelect(vt100_window,VT100_CR,t_crtocrlf);
    Desk_Icon_SetSelect(vt100_window,VT100_LF,t_lftocrlf);
  }
}

void set_smartbuttons(void)
{
  Desk_wimp_point offset;
  int i;
  int empty=1;
  int old_sb_height=sb_height;

  offset.x=0;
  offset.y=40; //-title_bar_height;

  for(i=0;i<8;i++)
  {
    if(sb_label[i][0]!=0)
      empty=0;
    Desk_Icon_SetText(smartbutton_window,i,sb_label[i]);
  }
  if(empty)
  {
    sb_height=0;
    if(Desk_Pane2_GetPaneNumber(haupt_window,smartbutton_window)!=0) // schon da ?
      Desk_Pane2_RemovePane(haupt_window,Desk_Pane2_GetPaneNumber(haupt_window,smartbutton_window));
  }
  else
  {
    sb_height=0;
    if(Desk_Pane2_GetPaneNumber(haupt_window,smartbutton_window)!=0) // schon da ?
      Desk_Pane2_RemovePane(haupt_window,Desk_Pane2_GetPaneNumber(haupt_window,smartbutton_window));
    if(show_sb)
    {
      sb_height=40;
      Desk_Pane2_AddPane(haupt_window,smartbutton_window, &offset, NULL,
                    Desk_pane2_MAINTOP|Desk_pane2_FIXED|Desk_pane2_HRESIZE|Desk_pane2_HSTRETCH);
    }
  }
  if(Desk_Window_IsOpen(haupt_window) && old_sb_height!=sb_height)
    open_haupt_window(4);
}


void set_configure_icons(void)
{
  set_cmodem_icons();
  set_cterminal_icons();
  choosed_flow_type_nr=flow_type_nr_0;
  set_cserial_icons(driver_nr,max_port_nr,serial_input_buffer,serial_output_buffer,internal_driver);
  set_driver_info_window(driver_info,driver_version,driver_creator,max_port_nr,
                         driver_speedtable[driver_noofspeeds-1]);
  set_cfiletr_icons();
}


static void get_cmodem_icons(void)
{
  Desk_Icon_GetText(cmodem_window,CMODEM_INIT,modem.init);
  Desk_Icon_GetText(cmodem_window,CMODEM_PREFIX,modem.dialprefix);
  Desk_Icon_GetText(cmodem_window,CMODEM_SUFFIX,modem.dialsuffix);
  Desk_Icon_GetText(cmodem_window,CMODEM_HANGUP,modem.hangup);
  Desk_Icon_GetText(cmodem_window,CMODEM_ANSWER,modem.answer);
  autodial=Desk_Icon_GetSelect(cmodem_window,CMODEM_AUTODIAL);
  dial_delay=Desk_Icon_GetInteger(cmodem_window,CMODEM_DELAY);
  beep_online=Desk_Icon_GetSelect(cmodem_window,CMODEM_BEEP_ONLINE);
  clear_terminal=Desk_Icon_GetSelect(cmodem_window,CMODEM_CLEART);
  init_modem=Desk_Icon_GetSelect(cmodem_window,CMODEM_INITOPT);
  drop_dtr=Desk_Icon_GetSelect(cmodem_window,CMODEM_DROPDTROPT);
}

static void get_cterminal_icons(void)
{
  int old_text_buffer_size;
  int old_local_lines;
  int oldtoolbar;
  int oldtoolbar_type;
  int oldcept_zoom;
  int old_vt_font,old_ansi_font;

  old_text_buffer_size=text_buffer_size;
  old_local_lines=local_lines;
  oldtoolbar=toolbar;
  oldtoolbar_type=toolbar_type;
  oldcept_zoom=cept_zoom;
  old_vt_font=vt_font;
  old_ansi_font=ansi_font;

  text_buffer_size=Desk_Icon_GetInteger(cterminal_window,CTERMINAL_TBSIZE);
  if(old_text_buffer_size!=text_buffer_size)
  {
    init_text_buffer(1);
    Desk_Window_SetExtent(haupt_window,0,-(text_buffer_size*ZA+50),1280,0);
    Desk_Window_ForceWholeRedraw(haupt_window);
  }
  cursor_flashing=Desk_Icon_GetSelect(cterminal_window,CTERMINAL_FLASHING);
  local_lines=Desk_Icon_GetInteger(cterminal_window,CTERMINAL_LOCAL);
  remote_lines=Desk_Icon_GetInteger(cterminal_window,CTERMINAL_REMOTE);
  chat_special=Desk_Icon_GetSelect(cterminal_window,CTERMINAL_SPECIAL);
  if(dial_terminal_nr==2)
    insertmode=chat_special;

  flashing=cursor_flashing;
  flash=TRUE;
  cursorcolor=local_cursorcolor;

  if( backcolor!=local_backcolor || forecolor!=local_forecolor ||
      (dial_terminal_nr==2 && old_local_lines !=local_lines) )
  {
    backcolor=local_backcolor;
    forecolor=local_forecolor;
    setmodemspeed(dial_terminal_nr,dial_baud_nr,dial_data_nr,transfer_type_nr,TRUE);
  }

  cept_zoom=Desk_Icon_GetInteger(cterminal_window,CTERMINAL_CEPTZOOM);
  if(oldcept_zoom!=cept_zoom)
  {
    set_cept_zoom();

    if(Desk_Window_IsOpen(haupt_window) && dial_terminal_nr==3)
    {
      open_haupt_window(2);
      Desk_Window_ForceWholeRedraw(haupt_window);
    }
  }

  toolbar=Desk_Icon_GetSelect(cterminal_window,CTERMINAL_TOOLBAR);
  if(Desk_Icon_GetSelect(cterminal_window,CTERMINAL_LEFT))
    toolbar_type=1;
  else
    toolbar_type=2;

  german_keyb=Desk_Icon_GetSelect(cterminal_window,CTERMINAL_KEYB);

  if(toolbar!=oldtoolbar || toolbar_type!=oldtoolbar_type)
    show_toolbar(toolbar);

  autologon=Desk_Icon_GetSelect(cterminal_window,CTERMINAL_AUTOLOGON);
  //f_keys=Desk_Icon_GetSelect(cterminal_window,CTERMINAL_FKEYS);

  vt_font=Desk_Icon_GetSelect(cterminal_window,CTERMINAL_FVT16);
  ansi_font=Desk_Icon_GetSelect(cterminal_window,CTERMINAL_FAN16);
  if(vt_font!=old_vt_font || ansi_font!=old_ansi_font)
  {
    load_fonts(vt_font,ansi_font);
    modechange(NULL,NULL);
    modechange(NULL,NULL); // sonst geht beim Wechsel zwischen 8*16 und 8*18 font im
                           // lowres modes etwas schief ... was auch immer ?
    //if(Desk_Window_IsOpen(haupt_window) && dial_terminal_nr==3)
    //  open_haupt_window(2);
    if(Desk_Window_IsOpen(haupt_window) && dial_terminal_nr<3)
    open_haupt_window(2);
    Desk_Window_ForceWholeRedraw(haupt_window);
  }
}

static void get_cserial_icons(void)
{
  char *error;
  int out;
  int driver_changed=0;
  int old_driver_nr;
  int old_serial_input_buffer_size=serial_input_buffer_size;
  int old_serial_output_buffer_size=serial_output_buffer_size;
  int old_serial_input_buffer=serial_input_buffer;
  int old_serial_output_buffer=serial_output_buffer;
  
  portnumber=Desk_Icon_GetInteger(cserial_window,CSERIAL_PORT);
  portnumber_0=portnumber;
  serial_input_buffer_size=Desk_Icon_GetInteger(cserial_window,CSERIAL_INPUT);
  serial_output_buffer_size=Desk_Icon_GetInteger(cserial_window,CSERIAL_OUTPUT);
  serial_input_buffer=Desk_Icon_GetSelect(cserial_window,CSERIAL_INOPT);
  serial_output_buffer=Desk_Icon_GetSelect(cserial_window,CSERIAL_OUTOPT);

  if(driver_nr!=choosed_driver_nr || old_serial_input_buffer_size!=serial_input_buffer_size ||
     old_serial_output_buffer_size!=serial_output_buffer_size ||
     old_serial_input_buffer!=serial_input_buffer ||
     old_serial_output_buffer!=serial_output_buffer)
    driver_changed=1;
  else
    driver_changed=0;
      
  old_driver_nr=driver_nr;
  driver_nr=choosed_driver_nr;


  if(driver_changed)
    release_serial_port();

  if(driver_changed)
    claim_serial_port();
    
  flow_type_nr=choosed_flow_type_nr;
  flow_type_nr_0=flow_type_nr;
  
  (*driver)(DRIVER_FLOWCONTROL,portnumber,flow_type_nr,0);
  strcpy(block_driver_name,drivers[driver_nr].file);

  out=(*driver)(DRIVER_MODEMCONTROL,portnumber,0,0);
  if(out&1)
    Desk_Icon_SetBgCol(sinfo_window,SINFO_CTS,10);
  else
    Desk_Icon_SetBgCol(sinfo_window,SINFO_CTS,1);
  if(out&2)
    Desk_Icon_SetBgCol(sinfo_window,SINFO_DSR,10);
  else
    Desk_Icon_SetBgCol(sinfo_window,SINFO_DSR,1);
  if(out&4)
    Desk_Icon_SetBgCol(sinfo_window,SINFO_RI,10);
  else
    Desk_Icon_SetBgCol(sinfo_window,SINFO_RI,1);
  if(out&8)
    Desk_Icon_SetBgCol(sinfo_window,SINFO_DCD,14);
  else
    Desk_Icon_SetBgCol(sinfo_window,SINFO_DCD,1); 

  Desk_Icon_SetText(sinfo_window,SINFO_DRIVER,block_driver_name);
  Desk_Icon_SetInteger(sinfo_window,SINFO_PORT,portnumber);
  Desk_Icon_SetText(sinfo_window,SINFO_FLOW,flow[flow_type_nr]);
  
  
  set_driver_vars();
  set_driver_info_window(driver_info,driver_version,driver_creator,max_port_nr,
                         driver_speedtable[driver_noofspeeds-1]); 
}
  
static void get_cfiletr_icons(void)
{
  Desk_Icon_GetText(cfiletr_window,CFILETR_DOWNLOADS,old_downloads_directory);
  use_dosmap=Desk_Icon_GetSelect(cfiletr_window,CFILETR_DOSMAP);
  strcpy(downloads_directory,old_downloads_directory);
  beep_transfer=Desk_Icon_GetSelect(cfiletr_window,CFILETR_BEEP_TRANSFER);
  Desk_Icon_GetText(cfiletr_window,CFILETR_FILETYPES,filetypes);
  close_filetrans=Desk_Icon_GetSelect(cfiletr_window,CFILETR_CLOSE);
  //longfilenames=Desk_Icon_GetSelect(cfiletr_window,CFILETR_LFILENAMES);
  truncate_filename=Desk_Icon_GetInteger(cfiletr_window,CFILETR_FLENGTH);
  discbuffer=Desk_Icon_GetInteger(cfiletr_window,CFILETR_DBSIZE);
}




/******************************************************************/

#if 0

static void get_config_pane_icons(void)
{
  int old_text_buffer_size;
  int old_local_lines;
  int oldtoolbar;
  int oldtoolbar_type;
  int oldcept_zoom;
  int old_vt_font,old_ansi_font;
  char *error;
  int out;
  int old_driver_nr;
  int driver_changed=0;

  old_text_buffer_size=text_buffer_size;
  old_local_lines=local_lines;
  oldtoolbar=toolbar;
  oldtoolbar_type=toolbar_type;
  oldcept_zoom=cept_zoom;
  old_vt_font=vt_font;
  old_ansi_font=ansi_font;
  
  // Modem
  
  Desk_Icon_GetText(config_pane_window,CONFIGPANE_INIT,modem.init);
  Desk_Icon_GetText(config_pane_window,CONFIGPANE_PREFIX,modem.dialprefix);
  Desk_Icon_GetText(config_pane_window,CONFIGPANE_SUFFIX,modem.dialsuffix);
  Desk_Icon_GetText(config_pane_window,CONFIGPANE_HANGUP,modem.hangup);
  Desk_Icon_GetText(config_pane_window,CONFIGPANE_ANSWER,modem.answer);
  autodial=Desk_Icon_GetSelect(config_pane_window,CONFIGPANE_AUTODIAL);
  dial_delay=Desk_Icon_GetInteger(config_pane_window,CONFIGPANE_DELAY);
  beep_online=Desk_Icon_GetSelect(config_pane_window,CONFIGPANE_BEEP_ONLINE);
  init_modem=Desk_Icon_GetSelect(config_pane_window,CONFIGPANE_INITOPT);
  drop_dtr=Desk_Icon_GetSelect(config_pane_window,CONFIGPANE_DROPDTROPT);

  // Terminal
  
  text_buffer_size=Desk_Icon_GetInteger(config_pane_window,CONFIGPANE_TBSIZE);
  if(old_text_buffer_size!=text_buffer_size)
  {
    init_text_buffer(1);
    Desk_Window_SetExtent(haupt_window,0,-(text_buffer_size*ZA+50),1280,0);
    Desk_Window_ForceWholeRedraw(haupt_window);
  }
  cursor_flashing=Desk_Icon_GetSelect(config_pane_window,CONFIGPANE_FLASHING);
  local_lines=Desk_Icon_GetInteger(config_pane_window,CONFIGPANE_LOCAL);
  remote_lines=Desk_Icon_GetInteger(config_pane_window,CONFIGPANE_REMOTE);
  chat_special=Desk_Icon_GetSelect(config_pane_window,CONFIGPANE_SPECIAL);
  if(dial_terminal_nr==2)
    insertmode=chat_special;

  flashing=cursor_flashing;
  flash=TRUE;
  cursorcolor=local_cursorcolor;

  if( backcolor!=local_backcolor || forecolor!=local_forecolor ||
      (dial_terminal_nr==2 && old_local_lines !=local_lines) )
  {
    backcolor=local_backcolor;
    forecolor=local_forecolor;
    setmodemspeed(dial_terminal_nr,dial_baud_nr,dial_data_nr,transfer_type_nr,TRUE);
  }

  cept_zoom=Desk_Icon_GetInteger(config_pane_window,CONFIGPANE_CEPTZOOM);
  if(oldcept_zoom!=cept_zoom)
  {
    set_cept_zoom();

    if(Desk_Window_IsOpen(haupt_window) && dial_terminal_nr==3)
    {
      open_haupt_window(2);
      Desk_Window_ForceWholeRedraw(haupt_window);
    }
  }

  toolbar=Desk_Icon_GetSelect(config_pane_window,CONFIGPANE_TOOLBAR);
  if(Desk_Icon_GetSelect(config_pane_window,CONFIGPANE_LEFT))
    toolbar_type=1;
  else
    toolbar_type=2;

  german_keyb=Desk_Icon_GetSelect(config_pane_window,CONFIGPANE_KEYB);

  if(toolbar!=oldtoolbar || toolbar_type!=oldtoolbar_type)
    show_toolbar(toolbar);

  autologon=Desk_Icon_GetSelect(config_pane_window,CONFIGPANE_AUTOLOGON);

  vt_font=Desk_Icon_GetSelect(config_pane_window,CONFIGPANE_FVT16);
  ansi_font=Desk_Icon_GetSelect(config_pane_window,CONFIGPANE_FAN16);
  if(vt_font!=old_vt_font || ansi_font!=old_ansi_font)
  {
    load_fonts(vt_font,ansi_font);
    modechange(NULL,NULL);
    modechange(NULL,NULL); // sonst geht beim Wechsel zwischen 8*16 und 8*18 font im
                           // lowres modes etwas schief ... was auch immer ?
                           
    if(Desk_Window_IsOpen(haupt_window) && dial_terminal_nr==3)
      open_haupt_window(2);
    Desk_Window_ForceWholeRedraw(haupt_window);
  }

  // Serial
  
  if(driver_nr!=choosed_driver_nr)
    driver_changed=1;
  else
    driver_changed=0;
      
  old_driver_nr=driver_nr;
  driver_nr=choosed_driver_nr;
  
  if(driver_changed)
    release_serial_port();
  
  portnumber=Desk_Icon_GetInteger(config_pane_window,CONFIGPANE_PORT);
  serial_input_buffer_size=Desk_Icon_GetInteger(config_pane_window,CONFIGPANE_INPUT);
  serial_output_buffer_size=Desk_Icon_GetInteger(config_pane_window,CONFIGPANE_OUTPUT);
  serial_input_buffer=Desk_Icon_GetSelect(config_pane_window,CONFIGPANE_INOPT);
  serial_output_buffer=Desk_Icon_GetSelect(config_pane_window,CONFIGPANE_OUTOPT);

  if(driver_changed)
  {
    claim_serial_port();
/*  
    if ((driver=driver_load(drivers[driver_nr].file))==NULL)
      Desk_Error_ReportFatal(0,"Can't load %s driver",drivers[driver_nr].file);
    if((error=(char *)driver_initialise())!=NULL)
    {
      Desk_Error_Report(0,"Error when initialising driver: %s",error);
      if ((driver=driver_load(drivers[old_driver_nr].file))==NULL)
        Desk_Error_Report(0,"can't load %s driver",drivers[old_driver_nr].file);
      if((error=(char *)driver_initialise())!=NULL)
        Desk_Error_Report(0,"Error when initialising driver: %s",error);
      Desk_Icon_SetText(config_pane_window,CONFIGPANE_BLOCK,drivers[old_driver_nr].file);
      driver_nr=old_driver_nr;
    }
    else
    {
      old_driver_nr=driver_nr;
    }
*/
  }
  
  (*driver)(DRIVER_FLOWCONTROL,portnumber,flow_type_nr,0);
  strcpy(block_driver_name,drivers[driver_nr].file);
  
  out=(*driver)(DRIVER_MODEMCONTROL,portnumber,0,0);
  if(out&1)
    Desk_Icon_SetBgCol(sinfo_window,SINFO_CTS,10);
  else
    Desk_Icon_SetBgCol(sinfo_window,SINFO_CTS,1);
  if(out&2)
    Desk_Icon_SetBgCol(sinfo_window,SINFO_DSR,10);
  else
    Desk_Icon_SetBgCol(sinfo_window,SINFO_DSR,1);
  if(out&4)
    Desk_Icon_SetBgCol(sinfo_window,SINFO_RI,10);
  else
    Desk_Icon_SetBgCol(sinfo_window,SINFO_RI,1);
  if(out&8)
    Desk_Icon_SetBgCol(sinfo_window,SINFO_DCD,14);
  else
    Desk_Icon_SetBgCol(sinfo_window,SINFO_DCD,1); 

  Desk_Icon_SetText(sinfo_window,SINFO_DRIVER,block_driver_name);
  Desk_Icon_SetInteger(sinfo_window,SINFO_PORT,portnumber);
  
  set_driver_vars();
  set_driver_info_window(driver_info,driver_version,driver_creator,max_port_nr,
                         driver_speedtable[driver_noofspeeds-1]); 
  // File transfer                         

  Desk_Icon_GetText(config_pane_window,CONFIGPANE_DOWNLOADS,old_downloads_directory);
  strcpy(downloads_directory,old_downloads_directory);
  beep_transfer=Desk_Icon_GetSelect(config_pane_window,CONFIGPANE_BEEP_TRANSFER);
  Desk_Icon_GetText(config_pane_window,CONFIGPANE_FILETYPES,filetypes);
  close_filetrans=Desk_Icon_GetSelect(config_pane_window,CONFIGPANE_CLOSE);
  truncate_filename=Desk_Icon_GetInteger(config_pane_window,CONFIGPANE_FLENGTH);
  discbuffer=Desk_Icon_GetInteger(config_pane_window,CONFIGPANE_DBSIZE);

  // Misc
  
  save_modem_status=Desk_Icon_GetSelect(config_pane_window,CONFIGPANE_MODEM_STATUS); 
 
}
#endif


static void get_xmodem_icons(void)
{
  if(popup_window!=edit_window)
  {
    xmodem_crc=Desk_Icon_GetSelect(xmodem_window,XMODEM_CRC);
    xmodem_k=Desk_Icon_GetSelect(xmodem_window,XMODEM_1024B);
  }
  else
  {
    t_xmodem_crc=Desk_Icon_GetSelect(xmodem_window,XMODEM_CRC);
    t_xmodem_k=Desk_Icon_GetSelect(xmodem_window,XMODEM_1024B);
  }
}

static void get_ymodem_icons(void)
{
  if(popup_window!=edit_window)
  {
    ymodem_crc=Desk_Icon_GetSelect(ymodem_window,YMODEM_CRC);
    ymodem_k=Desk_Icon_GetSelect(ymodem_window,YMODEM_1024B);
  }
  else
  {
    t_ymodem_crc=Desk_Icon_GetSelect(ymodem_window,YMODEM_CRC);
    t_ymodem_k=Desk_Icon_GetSelect(ymodem_window,YMODEM_1024B);
  }
}


static void get_zmodem_icons(void)
{
  //int t_tx_window;
  /*
  if(buffersize>16)
    buffersize=16;
  if(buffersize<1)
    buffersize=1;
  */

  if(popup_window!=edit_window)
  {
    send_crashrecovery=Desk_Icon_GetSelect(zmodem_window,ZMODEM_SCRASHREC);

    if(Desk_Icon_GetSelect(zmodem_window,ZMODEM_RCRASHREC))
      receive_file_action=CRASHRECOVERY;
    if(Desk_Icon_GetSelect(zmodem_window,ZMODEM_RENAME))
      receive_file_action=RENAME;
    if(Desk_Icon_GetSelect(zmodem_window,ZMODEM_OVERWRITE))
      receive_file_action=OVERWRITE;

    //tx_window=Desk_Icon_GetSelect(zmodem_window,ZMODEM_WINDOW);
    //if(tx_window)
      tx_window_size=Desk_Icon_GetInteger(zmodem_window,ZMODEM_TXWSIZE);
    //else
    //  tx_window_size=0;

    ackint=Desk_Icon_GetInteger(zmodem_window,ZMODEM_ACKINT);
  }
  else
  {
    t_send_crashrecovery=Desk_Icon_GetSelect(zmodem_window,ZMODEM_SCRASHREC);

    if(Desk_Icon_GetSelect(zmodem_window,ZMODEM_RCRASHREC))
      t_receive_file_action=CRASHRECOVERY;
    if(Desk_Icon_GetSelect(zmodem_window,ZMODEM_RENAME))
      t_receive_file_action=RENAME;
    if(Desk_Icon_GetSelect(zmodem_window,ZMODEM_OVERWRITE))
      t_receive_file_action=OVERWRITE;

    //t_tx_window=Desk_Icon_GetSelect(zmodem_window,ZMODEM_WINDOW);
    //if(t_tx_window)
      t_tx_window_size=Desk_Icon_GetInteger(zmodem_window,ZMODEM_TXWSIZE);
    //else
    //  t_tx_window_size=0;

    t_ackint=Desk_Icon_GetInteger(zmodem_window,ZMODEM_ACKINT);
  }

}

static void get_ascii_icons(void)
{
  if(popup_window!=edit_window)
  {
    ascii_char_delay=Desk_Icon_GetInteger(ascii_window,ASCII_CHARDELAY);
    ascii_line_delay=Desk_Icon_GetInteger(ascii_window,ASCII_LINEDELAY);
    if(Desk_Icon_GetSelect(ascii_window,ASCII_0))
    {
      ascii_trans=0;
      return;
    }
    if(Desk_Icon_GetSelect(ascii_window,ASCII_1))
    {
      ascii_trans=1;
      return;
    }
    if(Desk_Icon_GetSelect(ascii_window,ASCII_2))
    {
      ascii_trans=2;
      return;
    }
    if(Desk_Icon_GetSelect(ascii_window,ASCII_3))
    {
      ascii_trans=3;
      return;
    }
  }
  else
  {
    t_ascii_char_delay=Desk_Icon_GetInteger(ascii_window,ASCII_CHARDELAY);
    t_ascii_line_delay=Desk_Icon_GetInteger(ascii_window,ASCII_LINEDELAY);
    if(Desk_Icon_GetSelect(ascii_window,ASCII_0))
    {
      t_ascii_trans=0;
      return;
    }
    if(Desk_Icon_GetSelect(ascii_window,ASCII_1))
    {
      t_ascii_trans=1;
      return;
    }
    if(Desk_Icon_GetSelect(ascii_window,ASCII_2))
    {
      t_ascii_trans=2;
      return;
    }
    if(Desk_Icon_GetSelect(ascii_window,ASCII_3))
    {
      t_ascii_trans=3;
      return;
    }
  }
}


static void get_ansi_icons(void)
{
  if(popup_window!=edit_window)
  {
    autowrap=Desk_Icon_GetSelect(ansi_window,ANSI_WRAP);
    local_echo=Desk_Icon_GetSelect(ansi_window,ANSI_ECHO);
    crtocrlf=Desk_Icon_GetSelect(ansi_window,ANSI_CR);
    lftocrlf=Desk_Icon_GetSelect(ansi_window,ANSI_LF);
    avatar=Desk_Icon_GetSelect(ansi_window,ANSI_AVATAR); 
    if(Desk_Icon_GetSelect(ansi_window,ANSI_25))
    {
      ansi_terminal_height=25;
      lineMode=1;
      terminal_height=ansi_terminal_height;
      init_text_buffer(0);
      consoleSetup();
      if(Desk_Window_IsOpen(haupt_window))
      {
        open_haupt_window(2);
        Desk_Window_ForceWholeRedraw(haupt_window);
      }
    }
    else
    {
      ansi_terminal_height=24;
      lineMode=0;
      terminal_height=ansi_terminal_height;
      init_text_buffer(0);
      consoleSetup();
      if(Desk_Window_IsOpen(haupt_window))
      {
        open_haupt_window(2);
        Desk_Window_ForceWholeRedraw(haupt_window);
      }
    }
  }
  else
  {
    t_wrap=Desk_Icon_GetSelect(ansi_window,ANSI_WRAP);
    t_echo=Desk_Icon_GetSelect(ansi_window,ANSI_ECHO);
    t_crtocrlf=Desk_Icon_GetSelect(ansi_window,ANSI_CR);
    t_lftocrlf=Desk_Icon_GetSelect(ansi_window,ANSI_LF);
    t_avatar=Desk_Icon_GetSelect(ansi_window,ANSI_AVATAR); 
    t_lines25=Desk_Icon_GetSelect(ansi_window,ANSI_25);
  }
}

static void get_vt100_icons(void)
{
  if(popup_window!=edit_window)
  {
    autowrap=Desk_Icon_GetSelect(vt100_window,VT100_WRAP);
    local_echo=Desk_Icon_GetSelect(vt100_window,VT100_ECHO);
    crtocrlf=Desk_Icon_GetSelect(vt100_window,VT100_CR);
    lftocrlf=Desk_Icon_GetSelect(vt100_window,VT100_LF);
  }
  else
  {
    t_wrap=Desk_Icon_GetSelect(vt100_window,VT100_WRAP);
    t_echo=Desk_Icon_GetSelect(vt100_window,VT100_ECHO);
    t_crtocrlf=Desk_Icon_GetSelect(vt100_window,VT100_CR);
    t_lftocrlf=Desk_Icon_GetSelect(vt100_window,VT100_LF);
  }
}


static void get_configure_icons(void)
{
  get_cmodem_icons();
  get_cterminal_icons();
  get_cserial_icons();
  get_cfiletr_icons();
  //get_config_pane_icons();
  spool_speed=Desk_Icon_GetInteger(spool_window,SPOOL_SPEED);
  save_modem_status=Desk_Icon_GetSelect(configure_window,CONFIGURE_MODEM_STATUS); 
}


static void set_unten_icons(void)
{
  Desk_Icon_SetText(unten_window,UNTEN_TERMINAL,terminal[dial_terminal_nr].string);
  Desk_Icon_SetText(unten_window,UNTEN_BAUD,baud[dial_baud_nr].string);
  Desk_Icon_SetText(unten_window,UNTEN_DATA,data[dial_data_nr].string);
  Desk_Icon_SetText(unten_window,UNTEN_TRANSFER,transfer[transfer_type_nr]);
}


void set_driver_info_window(char *di,int dv,char *dc,int mpn,int s)
{
  sprintf(gstring,"%s %d.%d",di,dv>>16,dv&0x0000ffff);
  Desk_Icon_SetText(driverinfo_window,DRIVERINFO_NAME,gstring);
  Desk_Icon_SetText(driverinfo_window,DRIVERINFO_BY,dc);
  Desk_Icon_SetInteger(driverinfo_window,DRIVERINFO_PORTS,mpn+1);
  //Desk_Icon_SetInteger(driverinfo_window,DRIVERINFO_MAXSPEED,driver_speedtable[driver_noofspeeds-1]);
  Desk_Icon_SetInteger(driverinfo_window,DRIVERINFO_MAXSPEED,s);
}


void quit_prg(int t)
{
  int i;

  if(!transfer_active || !t)
  {
    write_logfile(3);

      if(logon_file!=-1)
      {
        Desk_File_Close(logon_file);
        logon_file=-1;
      }
      logon=0;
      if(spool_file!=-1)
      {
        Desk_File_Close(spool_file);
        spool_file=-1;
      }

    //Desk_Font_LoseFont(font_handle);

    release_serial_port();
    driver_free();
    //deinstall_serial_buffer();
    //(*driver)(DRIVER_CLOSEDOWN,portnumber,0,0);

#if 0
    // delete windows
    Desk_Window_DeleteOrig(dir_window);
    Desk_Window_DeleteOrig(haupt_window);
    Desk_Window_DeleteOrig(info_window);
    Desk_Window_DeleteOrig(pane_window);
    Desk_Window_DeleteOrig(unten_window);
    Desk_Window_DeleteOrig(filetrans_window);
    Desk_Window_DeleteOrig(exporttext_window);
    Desk_Window_DeleteOrig(exportdata_window);
    Desk_Window_DeleteOrig(send_window);
    Desk_Window_DeleteOrig(colours_window);
    //Desk_Window_DeleteOrig(receive_window);
    Desk_Window_DeleteOrig(dial_window);
    Desk_Window_DeleteOrig(tools_window);
    Desk_Window_DeleteOrig(edit_window);
    Desk_Window_DeleteOrig(spool_window);
    if(banner_exist)
      Desk_Window_DeleteOrig(banner_window);
    Desk_Window_DeleteOrig(banner_window);
    Desk_Window_DeleteOrig(fkeys_window);
    Desk_Window_DeleteOrig(fkeys2_window);
    Desk_Window_DeleteOrig(xmodem_window);
    Desk_Window_DeleteOrig(ymodem_window);
    Desk_Window_DeleteOrig(zmodem_window);
    Desk_Window_DeleteOrig(ascii_window);
    Desk_Window_DeleteOrig(smartbutton_window);
    Desk_Window_DeleteOrig(sbedit_window);
    Desk_Window_DeleteOrig(sbedit2_window);
    Desk_Window_DeleteOrig(driverinfo_window);
    Desk_Window_DeleteOrig(ansi_window);
    Desk_Window_DeleteOrig(vt100_window);
#endif

    //Desk_Dialog_Destroy(ok_dialog);
    //Desk_Dialog_Destroy(message_dialog);

    Desk_Template_ClearAll();

    /* free memory */
    for(i=0;i<number_of_scripts;i++)
      if(t_filename[i]!=NULL)
        Desk_DeskMem_Free(t_filename[i]);

    for(i=0;i<MAX_NUMBERS;i++)
      Desk_DeskMem_Free(t_number[i]);

    Desk_DeskMem_Free(text_buffer);
    Desk_DeskMem_Free(zeichen);
    Desk_DeskMem_Free(spritearea);

    if(banner_exist && bannersprite !=NULL)
      Desk_DeskMem_Free(bannersprite);

    delete_cept_sprite();

    Desk_DeskMem_Free(usericonsprites);
    Desk_DeskMem_Free(trans_tab);

    for(i=0;i<4;i++)
      Desk_DeskMem_Free(ascii_trans_str[i]);


    // Free messages
    Desk_Msgs_DropGroup("title");
    Desk_Msgs_DropGroup("menu");
    Desk_Msgs_DropGroup("text");
    Desk_Msgs_DropGroup("msg");
    Desk_Msgs_DropGroup("app");

    // Free Menus
/*
    Desk_Menu_FullDispose(dial_menu);
    Desk_Menu_FullDispose(icon_menu);
    Desk_Menu_FullDispose(haupt_menu);
    Desk_Menu_FullDispose(baud_menu);
    Desk_Menu_FullDispose(terminal_menu);
    Desk_Menu_FullDispose(data_menu);
    Desk_Menu_FullDispose(transfer_menu);
    Desk_Menu_FullDispose(driver_menu);
    Desk_Menu_FullDispose(flow_menu);
    Desk_Menu_FullDispose(transfertype_menu);
    Desk_Menu_FullDispose(modem_menu);
    Desk_Menu_FullDispose(special_menu);
    Desk_Menu_FullDispose(ascii_menu);
    Desk_Menu_FullDispose(wrap_menu);
    Desk_Menu_FullDispose(logon_menu);
*/
    // delete iconbar icon
    //Desk_Wimp_DeleteIcon(Desk_iconbar_RIGHT,baricon);
    //Desk_Wimp_DeleteIcon(banner_window,0);

    Desk_Event_CloseDown();
    exit(0);
  }
  else
  {
    show_message(msg[4].text);
  }
}


/* quit handler */

Desk_bool Quit(Desk_event_pollblock *poll_block, void *reference)
{
  quit_prg(FALSE);
  return(Desk_TRUE);
}
/******************************************************************************
 *                              Close Window handlers                         *
 ******************************************************************************/

Desk_bool CloseWindow(Desk_event_pollblock *event, void *reference)
/*  Handler attached to all closewindow events.
 * fall through causes BEEP when window is closed which indicates that I have
 * not installed a close window hander for that window
 */
{
  Desk_Sound_SysBeep();

  if(event->type == Desk_event_CLOSE){

     Desk_Sound_SysBeep();
     Desk_Window_DeleteOrig(event->data.words[0]);

  }
  return(Desk_TRUE);
}

Desk_bool Close_haupt_window(Desk_event_pollblock *event, void *reference)
{
  Desk_mouse_block pointer;
  Desk_caret_block   caretblock;

  Desk_Wimp_GetPointerInfo(&pointer);

  if(pointer.button.data.select)
    Desk_Pane2_Hide(haupt_window);
  if(pointer.button.data.adjust)
  {
    caretblock.window = -1;
    caretblock.icon   = -1;
    caretblock.height = 0;
    caretblock.index  = -1;
    Desk_Wimp_SetCaretPosition(&caretblock);
    //Desk_Window_GainCaret(0); // lose caret
  }
  return(Desk_TRUE);
}

Desk_bool Close_dir_window(Desk_event_pollblock *event, void *reference)
{
  Desk_Pane2_Hide(pane_window);
  return(Desk_TRUE);
}

Desk_bool Close_send_window(Desk_event_pollblock *event, void *reference)
{
  Desk_Window_Hide(send_window);
  return(Desk_TRUE);
}

/*
Desk_bool Close_spool_window(Desk_event_pollblock *event, void *reference)
{
  Desk_Window_Hide(spool_window);
  return(Desk_TRUE);
}
*/

#if 0
Desk_bool Close_config_window(Desk_event_pollblock *event, void *reference)
{
  /*
  set_cserial_icons(driver_nr,max_port_nr,serial_input_buffer,serial_output_buffer,internal_driver);
  */
  set_driver_info_window(driver_info,driver_version,driver_creator,max_port_nr,
                         driver_speedtable[driver_noofspeeds-1]);
  new_driver_nr=driver_nr;
  choosed_driver_nr=driver_nr;
    
  Desk_Pane2_Hide(config_window);
  return(Desk_TRUE);
}
#endif

/*
Desk_bool Close_dial_window(Desk_event_pollblock *event, void *reference)
{
  Desk_Window_Hide(dial_window);
  return(Desk_TRUE);
}
*/

static void move_pane(Desk_window_handle main,Desk_window_handle pane,int addy)
{
  Desk_wimp_point paneoffset,panesize;
  
  Desk_Pane2_ReadVars(main,Desk_Pane2_GetPaneNumber(main,pane),
                      &paneoffset,&panesize);
  paneoffset.y+=addy;
  Desk_Pane2_SetVars(main,Desk_Pane2_GetPaneNumber(main,pane),
                     &paneoffset,&panesize);
}

Desk_bool Open_spool_window(void)
{
  Desk_wimp_point zerooffset = {0, 4};
  char *p;

  p=strrchr(spool_filename,'.');
  if(p==NULL)
    p=spool_filename;
  else
    p++;

  Desk_Icon_SetText(spool_window,SPOOL_NAME,p);
  Desk_Slider_SetValue(&spool_slider, (int)spool_position, NULL, NULL);

  if(!spool_frame)
  {
    Desk_Icon_AlterValidation(spool_window,SPOOL_FRAME,"r1;NFRAME");
    Desk_Icon_SetBackColour(spool_window,SPOOL_FRAME,1);
  }
  else
  {
    Desk_Icon_AlterValidation(spool_window,SPOOL_FRAME,"r2;NFRAME");
    Desk_Icon_SetBackColour(spool_window,SPOOL_FRAME,12);
  }

  if(!Desk_Window_IsOpen(spool_window))
  {
    Desk_Pane2_AddPane(haupt_window, spool_window, &zerooffset, NULL,
                       Desk_pane2_FIXED|Desk_pane2_PANETOP);
                       
    if(sinfo_open)
      move_pane(haupt_window,spool_window,56);
    if(toolbar && toolbar_type==2)
      move_pane(haupt_window,tools_window,56);
    /*
    if(toolbar)
    {
      if(Desk_Pane2_GetPaneNumber(haupt_window,tools_window)!=0) // schon da ?
        Desk_Pane2_RemovePane(haupt_window,Desk_Pane2_GetPaneNumber(haupt_window,tools_window));
      create_toolbar(1);
    }
    */
    open_haupt_window(3);
  }
  return(Desk_TRUE);
}

void show_sinfo_window(void)
{
  Desk_wimp_point zerooffset = {0, 4};
  
  
  if(!Desk_Window_IsOpen(sinfo_window))
  {
    Desk_Pane2_AddPane(haupt_window, sinfo_window, &zerooffset, NULL,
                       Desk_pane2_FIXED|Desk_pane2_PANETOP);
                       
    if(Desk_Window_IsOpen(spool_window))
      move_pane(haupt_window,spool_window,56);
    if(toolbar && toolbar_type==2)
      move_pane(haupt_window,tools_window,56);
    /*
    if(toolbar)
    {
      if(Desk_Pane2_GetPaneNumber(haupt_window,tools_window)!=0) // schon da ?
        Desk_Pane2_RemovePane(haupt_window,Desk_Pane2_GetPaneNumber(haupt_window,tools_window));
      create_toolbar(1);
    }
    */
    
    open_haupt_window(3);
  }
  sinfo_open=1;
}

void close_sinfo_window(void)
{
  Desk_Pane2_RemovePane(haupt_window,Desk_Pane2_GetPaneNumber(haupt_window,sinfo_window));
  if(Desk_Window_IsOpen(spool_window))
    move_pane(haupt_window,spool_window,-56);
  if(toolbar && toolbar_type==2)
    move_pane(haupt_window,tools_window,-56);
  /*
  if(toolbar)
  {
    Desk_Pane2_RemovePane(haupt_window,Desk_Pane2_GetPaneNumber(haupt_window,tools_window));
    create_toolbar(0);
  }
  */
  open_haupt_window(3);
  sinfo_open=0;
}

/******************************************************************************
 *                              Redraw handlers                               *
 ******************************************************************************/

Desk_bool Open_haupt_window(Desk_event_pollblock *event, void *reference)
{
  Desk_window_state state;
  static int toggling=0;

  cept_xorigin=event->data.openblock.screenrect.min.x-event->data.openblock.scroll.x;
  cept_yorigin=event->data.openblock.screenrect.max.y-event->data.openblock.scroll.y;
  Desk_Wimp_GetWindowState(haupt_window,&state);

  if(state.flags.data.istoggling && !toggling)
  {
    toggling=1;

    if(Desk_Kbd_KeyDown(Desk_inkey_SHIFT))
      event->data.openblock.screenrect.min.y=132;  // iconbar freilassen
    else
      event->data.openblock.screenrect.min.y=0;

    event->data.openblock.screenrect.max.y=Desk_screen_size.y-title_bar_height;
  }
  else
    toggling=0;

  /*
  if((event->data.openblock.screenrect.max.y-event->data.openblock.screenrect.min.y)>Desk_screen_size.y)
  {
    event->data.openblock.screenrect.min.y=0;
    event->data.openblock.screenrect.max.y=Desk_screen_size.y-title_bar_height;
  }
  */

  Desk_Pane2_OpenWindow(haupt_window,&event->data.openblock);
  return(Desk_TRUE);
}

Desk_bool Redraw_haupt_window(Desk_event_pollblock *event, void *reference)
{
  Desk_window_redrawblock r;
  Desk_bool more;
  int yy;
  //int t;
  //int xan,yan,xen,yen;

  if(dial_terminal_nr<3)
  {
    //t=Desk_Time_Monotonic();
    redraw_text();
    //Desk_Icon_printf(unten_window,UNTEN_LSTATUS,"%d",Desk_Time_Monotonic()-t);
  }
  else
  {
    //cept_sprite_id=(osspriteop_id) (osspriteop_header *) ((char *)cept_spritearea+cept_spritearea->first);

    r.window = haupt_window;
    Desk_Wimp_RedrawWindow(&r,&more);

    while(more)
    {
      cept_xorigin=r.rect.min.x-r.scroll.x;
      cept_yorigin=r.rect.max.y-r.scroll.y-sb_height;

      /*
      xan=((r.cliprect.min.x-cept_xorigin)>>Desk_screen_eig.x)/12;
      xen=((r.cliprect.max.x-cept_xorigin)>>Desk_screen_eig.x)/12;
      yan=((cept_yorigin-r.cliprect.max.y)>>Desk_screen_eig.y)/fontheight;
      yen=((cept_yorigin-r.cliprect.min.y)>>Desk_screen_eig.y)/fontheight;

      xclip0=((r.cliprect.min.x-cept_xorigin)>>Desk_screen_eig.x);
      xclip1=((r.cliprect.max.x-cept_xorigin)>>Desk_screen_eig.x);
      yclip0=((cept_yorigin-r.cliprect.max.y)>>Desk_screen_eig.y);
      yclip1=((cept_yorigin-r.cliprect.min.y)>>Desk_screen_eig.y);
      redraw_Desk_screen_rect(xan,yan,xen,yen,1);
      */



      yy=(240*factors.ymul)/factors.ydiv;
      xosspriteop_put_sprite_scaled(osspriteop_PTR,cept_spritearea,cept_sprite_id,
                                    cept_xorigin,cept_yorigin-(yy<<Desk_screen_eig.y),0,
                                    &factors,trans_tab);
      Desk_Wimp_GetRectangle(&r,&more);
    }
  }
  return(Desk_TRUE);
}

Desk_bool Redraw_spool_window(Desk_event_pollblock *event, void *reference)
{
  Desk_window_redrawblock redraw;
  Desk_bool more;

  redraw.window = event->data.openblock.window;
  Desk_Wimp_RedrawWindow(&redraw, &more);

  while (more)
  {
    Desk_Slider_Redraw(&spool_slider, &redraw.cliprect);
    Desk_Wimp_GetRectangle(&redraw, &more);
  }

  return(Desk_TRUE);
}

Desk_bool Redraw_filetrans_window(Desk_event_pollblock *event, void *reference)
{
  Desk_window_redrawblock redraw;
  Desk_bool more;

  redraw.window = event->data.openblock.window;
  Desk_Wimp_RedrawWindow(&redraw, &more);

  while (more)
  {
    Desk_Slider_Redraw(&filetrans_slider, &redraw.cliprect);
    Desk_Wimp_GetRectangle(&redraw, &more);
  }

  return(Desk_TRUE);
}

/*
Desk_bool Redraw_unten_window(Desk_event_pollblock *event, void *reference)
{
  Desk_window_redrawblock redraw;
  Desk_bool more;

  redraw.window = event->data.openblock.window;
  Desk_Wimp_RedrawWindow(&redraw, &more);

  while (more)
    Desk_Wimp_GetRectangle(&redraw, &more);

  update_time(online_time_str);

  return(Desk_TRUE);
}
*/

/******************************************************************************
 *                              Click handlers                                *
 ******************************************************************************/

void set_haupt_window_focus(void)
{
  Desk_Window_GainCaret(haupt_window);
  input_focus=haupt_window;
  flashing_time=Desk_Time_Monotonic();
  flashing=cursor_flashing;
  flash=TRUE;
}

void open_haupt_window(int where)
{
  Desk_window_openblock open;
  Desk_window_state state;
  Desk_wimp_box newextent;

  int haupt_width,haupt_height;

  set_unten_icons();
  
  if(dial_terminal_nr<3)
  {
    if(dial_terminal_nr==0 || dial_terminal_nr==2)
      ZA=vt_charheight<<1;
    else
      ZA=ansi_charheight<<1;
    init_text_buffer(0);

    //Desk_Window_SetExtent(haupt_window,0,-(text_buffer_size*ZA+50),1280,0);
    newextent.min.x = 0;
    newextent.min.y = -(text_buffer_size*ZA+48);
    newextent.max.x = 1280;
    newextent.max.y = 0;
    Desk_Wimp_SetExtent(haupt_window, &newextent);
    
    haupt_width=1280;
    //if(highres)
    //  haupt_height=terminal_height*ZA+48+2+sb_height;
    //else
    //  haupt_height=terminal_height*ZA+48+4+sb_height;
    haupt_height=terminal_height*ZA+48+sb_height;
  }
  else
  {
    /*
    Desk_Window_SetExtent(haupt_window,0,-((((240*factors.ymul)/factors.ydiv)<<Desk_screen_eig.y)+50),
                     (((480*factors.xmul)/factors.xdiv)<<Desk_screen_eig.x),0);
                     
    */
    newextent.min.x = 0;    
    newextent.min.y = -((((240*factors.ymul)/factors.ydiv)<<Desk_screen_eig.y)+48+sb_height);
    newextent.max.x = (((480*factors.xmul)/factors.xdiv)<<Desk_screen_eig.x);  
    newextent.max.y = 0;
    Desk_Wimp_SetExtent(haupt_window, &newextent);                 
    haupt_width=(((480*factors.xmul)/factors.xdiv)<<Desk_screen_eig.x);
    haupt_height=(((240*factors.ymul)/factors.ydiv)<<Desk_screen_eig.y)+48+sb_height;
  }

  open.window=haupt_window;

  switch(where)
  {
    case 0:
      open.screenrect.min.x=(Desk_screen_size.x-haupt_width)>>1;
      open.screenrect.min.y=(Desk_screen_size.y-(haupt_height+title_bar_height))>>1;

      /*
      if(Desk_screen_size.y==960)
        open.screenrect.min.y=Desk_screen_size.y-(haupt_height+title_bar_height);
      */
      open.screenrect.max.x=open.screenrect.min.x+haupt_width;
      open.screenrect.max.y=open.screenrect.min.y+haupt_height;
      open.behind=-1;
    break;
    case 1:
      Desk_Wimp_GetWindowState(haupt_window,&state);
      open.screenrect.min.x=state.openblock.screenrect.min.x;
      open.screenrect.min.y=state.openblock.screenrect.min.y;
      open.screenrect.max.x=state.openblock.screenrect.max.x;
      open.screenrect.max.y=state.openblock.screenrect.max.y;
      open.behind=-1;
    break;
    case 2:
      Desk_Wimp_GetWindowState(haupt_window,&state);
      open.screenrect.min.x=state.openblock.screenrect.min.x;
      open.screenrect.min.y=state.openblock.screenrect.min.y;
      open.screenrect.max.x=state.openblock.screenrect.min.x+haupt_width;
      open.screenrect.max.y=state.openblock.screenrect.min.y+haupt_height;
      open.behind=state.openblock.behind;
    break;
    case 3:
      Desk_Wimp_GetWindowState(haupt_window,&state);
      open.screenrect.min.x=state.openblock.screenrect.min.x;
      open.screenrect.min.y=state.openblock.screenrect.min.y;
      open.screenrect.max.x=state.openblock.screenrect.max.x;
      open.screenrect.max.y=state.openblock.screenrect.max.y;
      open.scroll=state.openblock.scroll;
      open.behind=state.openblock.behind;
    break;
    case 4:
      Desk_Wimp_GetWindowState(haupt_window,&state);
      open.screenrect.min.x=state.openblock.screenrect.min.x;
      open.screenrect.min.y=state.openblock.screenrect.min.y;
      open.screenrect.max.x=state.openblock.screenrect.max.x;
      if(sb_height!=0)
        open.screenrect.max.y=state.openblock.screenrect.max.y+sb_height;
      else
        open.screenrect.max.y=state.openblock.screenrect.max.y-40;
      open.scroll=state.openblock.scroll;
      open.behind=state.openblock.behind;
    break;
  }
  if(where<3)
  {
    if(dial_terminal_nr<3)
      open.scroll.y=-(text_buffer_size*ZA+48);
    else
      open.scroll.y=0;
  }
  open.scroll.x=0;
  cept_xorigin=open.screenrect.min.x-open.scroll.x;
  cept_yorigin=open.screenrect.max.y-open.scroll.y-sb_height;
  Desk_Pane2_OpenWindow(haupt_window,&open);
  if(dial_terminal_nr==3)
    Desk_Window_ForceWholeRedraw(haupt_window);
  if(where<2)
    set_haupt_window_focus();
    //Desk_Pane2_Show(haupt_window, Desk_open_CENTERED);
}

void open_banner_window(void)
{
  Desk_window_openblock open;
  Desk_window_state state;

  open.window=banner_window;

  Desk_Wimp_GetWindowState(banner_window,&state);
  open.screenrect.min.x=(Desk_screen_size.x-banner_xsize)>>1;
  open.screenrect.min.y=(Desk_screen_size.y-banner_ysize)>>1;
  open.screenrect.max.x=open.screenrect.min.x+banner_xsize;
  open.screenrect.max.y=open.screenrect.min.y+banner_ysize;
  open.behind=state.openblock.behind;
  open.scroll.y=0;
  open.scroll.x=0;
  Desk_Wimp_OpenWindow(&open);
}




Desk_bool Click_baricon(Desk_event_pollblock *event, void *reference)
{
  static int t=0;
  
  if(event->data.mouse.button.data.menu)
     Desk_Menu_Show(icon_menu, event->data.mouse.pos.x,-1);
  if(event->data.mouse.button.data.select)
  {
    if(Desk_Time_Monotonic()-t>CLICK_DELAY)
    {
      t=Desk_Time_Monotonic();
      if(Desk_Window_IsOpen(haupt_window))
        open_haupt_window(1);
      else
        open_haupt_window(0);
    }
    else
      open_haupt_window(0); // doppelclick
    t=Desk_Time_Monotonic();
  }
  if(event->data.mouse.button.data.adjust)
  {
    if(serial_port_claimed)
      release_serial_port();
    else
      claim_serial_port();
  }
  return(Desk_TRUE);
}

static void selection_update_drag_cept(void *userdata)
{
  Desk_mouse_block pointer;
  Desk_window_state window;
  int xpos,ypos,x,y,xx,i;
  int xpos2,ypos2;
  //int xposp,yposp;
  Desk_wimp_box wpos;
  int yposmin;
  int w,h;

  Desk_Wimp_GetWindowState(haupt_window,&window);
  xpos=window.openblock.screenrect.min.x-window.openblock.scroll.x;
  ypos=window.openblock.screenrect.max.y-window.openblock.scroll.y;
  wpos=window.openblock.screenrect;
  wpos.min.y+=UNTEN_HEIGHT;
  
  Desk_Wimp_GetPointerInfo(&pointer);
  //xposp=pointer.pos.x;
  //yposp=pointer.pos.y;
  xpos2=(pointer.pos.x-xpos);//&0xfffffff0;
  xpos2=xpos2/12;
  w=xpos2-mouse_start.x;
  xpos2=xpos2*12;
  ypos2=(ypos-pointer.pos.y/*-ypos*/); //&(0xffffffff-(ZA-1));
  ypos2=ypos2/12;
  h=/*ypos2*-*/mouse_start.y-ypos2;
  ypos2=ypos2*12-12;
  
  //x=xpos/16;
  //y=-ypos/ZA-(text_buffer_size-(terminal_height-1));
  
  Desk_Window_ForceWholeRedraw(haupt_window);
  Desk_GFX_GCOL(Desk_gfx_action_INVERT,0);
  Desk_GFX_RectangleFill(xpos+mouse_start.x*12,ypos-mouse_start.y*12,w*12,h*12);
  
}

static void selection_stop_drag_cept(void *userdata)
{
  
}

static void selection_update_drag(void *userdata)
{
  Desk_mouse_block pointer;
  Desk_window_state window;
  int xpos,ypos,x,y,xx,i;
  int xposp,yposp;
  Desk_wimp_box wpos;
  int yposmin,hilf;
  Desk_window_openblock open;

  Desk_Wimp_GetWindowState(haupt_window,&window);
  xpos=window.openblock.screenrect.min.x-window.openblock.scroll.x;
  ypos=window.openblock.screenrect.max.y-window.openblock.scroll.y;
  wpos=window.openblock.screenrect;
  wpos.min.y+=UNTEN_HEIGHT;

  yposmin=(text_buffer_size*ZA+window.openblock.scroll.y);
  hilf=yposmin/ZA;
  if(hilf*ZA<yposmin)
    yposmin=terminal_height-(yposmin/ZA+1);
  else
    yposmin=terminal_height-(yposmin/ZA);

  Desk_Wimp_GetPointerInfo(&pointer);
  xposp=pointer.pos.x;
  yposp=pointer.pos.y;
  xpos=(pointer.pos.x-xpos)&0xfffffff0;
  ypos=(pointer.pos.y-ypos); //&(0xffffffff-(ZA-1));
  ypos=ypos/ZA;
  ypos=ypos*ZA-ZA;
  x=xpos/16;
  y=-ypos/ZA-(text_buffer_size-(terminal_height-1));

/*
  Desk_Icon_printf(unten_window,UNTEN_LSTATUS,"%d,%d,%d,%d,%d,%d",xposp,yposp,wpos.min.x,wpos.max.y,wpos.max.x,wpos.min.y);
*/
  open.window=haupt_window;
  open.screenrect.min.x=window.openblock.screenrect.min.x;
  open.screenrect.min.y=window.openblock.screenrect.min.y;
  open.screenrect.max.x=window.openblock.screenrect.max.x;
  open.screenrect.max.y=window.openblock.screenrect.max.y;
  open.behind=window.openblock.behind;

  if(xposp<=wpos.min.x)
  {
    if(x<0)
      x=0;
    open.scroll.y=window.openblock.scroll.y;
    open.scroll.x=window.openblock.scroll.x-ZA;
    Desk_Pane2_OpenWindow(haupt_window,&open);
  }
  if(xposp>=wpos.max.x)
  {
    if(x>79)
      x=79;
    open.scroll.y=window.openblock.scroll.y;
    open.scroll.x=window.openblock.scroll.x+ZA;
    Desk_Pane2_OpenWindow(haupt_window,&open);
  }
  if(yposp>=wpos.max.y)
  {
    y=yposmin;
    open.scroll.y=window.openblock.scroll.y+ZA;
    open.scroll.x=window.openblock.scroll.x;
    Desk_Pane2_OpenWindow(haupt_window,&open);
  }
  if(yposp<=wpos.min.y)
  {
    if(y>=terminal_height)
      y=terminal_height-1;
    open.scroll.y=window.openblock.scroll.y-ZA;
    open.scroll.x=window.openblock.scroll.x;
    Desk_Pane2_OpenWindow(haupt_window,&open);
  }
  //Desk_Icon_printf(unten_window,UNTEN_LSTATUS,"%d,%d,%d",x,y,yposmin);

  if((mouse_end.x<mouse_start.x && mouse_start.y==mouse_end.y) || mouse_end.y<mouse_start.y)
  {
    for(xx=tb_above+mouse_start.x+80*mouse_start.y;xx>=tb_above+mouse_end.x+80*mouse_end.y;xx--)
      text_buffer[xx]=text_buffer[xx]&~SELECTED;
  }
  else
  {
    for(xx=tb_above+mouse_start.x+80*mouse_start.y;xx<=tb_above+mouse_end.x+80*mouse_end.y;xx++)
      text_buffer[xx]=text_buffer[xx]&~SELECTED;
  }

  if((x<mouse_start.x && mouse_start.y==y) || y<mouse_start.y)
  {
    //for(i=0;i<tb_all;i++)
    //   text_buffer[i]=text_buffer[i]&~SELECTED;
    for(xx=tb_above+mouse_start.x+80*mouse_start.y;xx>=tb_above+x+80*y;xx--)
      text_buffer[xx]=text_buffer[xx]|SELECTED;
  }
  else
  {
    //for(i=0;i<tb_all;i++)
    //   text_buffer[i]=text_buffer[i]&~SELECTED;
    for(xx=tb_above+mouse_start.x+80*mouse_start.y;xx<=tb_above+x+80*y;xx++)
      text_buffer[xx]=text_buffer[xx]|SELECTED;
  }
  update_text(0,-(text_buffer_size-terminal_height),80,terminal_height);

  mouse_end.x=x;
  mouse_end.y=y;
  dragx=pointer.pos.x;
}

static void selection_stop_drag(void *userdata)
{
  int j,xt,yt;
  unsigned int hilf;
  int was_selected;
  int l;
  int ms,me;

  ms=mouse_start.y;
  me=mouse_end.y;
  if(me<ms)
  {
    hilf=ms;
    ms=me;
    me=hilf;
  }
  l=(me-ms+1)*80+(me-ms+1)+1;
  if(mousebuffer!=NULL)
    Desk_DeskMem_Free(mousebuffer);
  mousebuffer=(char *)Desk_DeskMem_Malloc(l);

  j=0;
  for(yt=ms;yt<=me;yt++)
  {
    was_selected=0;
    for(xt=0;xt<80;xt++)
    {
      hilf=text_buffer[tb_above+xt+yt*80];
      if(hilf&SELECTED)
      {
        was_selected=1;
        if(hilf&EOL && xt!=0)
        {
            mousebuffer[j++]=0x0a;
            break;
        }
        else
        {
          mousebuffer[j++]=(char)hilf;
        }
      }
      else
      {
        if(was_selected)
          break;
      }
    }
    if(xt==80 && was_selected)
    {
      mousebuffer[j++]=0x0a;
    }
  }
  mousebuffer[j]=0;
  updateCursor();
}

static void haupt_drag_completed(void *userdata)
{
  Desk_mouse_block ptr;
  Desk_message_block  msg;

  save_handler_type=EXPORT_TEXT;
  Desk_DragASprite_Stop();
  Desk_Wimp_GetPointerInfo(&ptr);

  msg.header.size            = 80;
  msg.header.yourref         = 0;
  msg.header.action          = Desk_message_DATASAVE;
  msg.data.datasave.window   = ptr.window;
  msg.data.datasave.icon     = ptr.icon;
  msg.data.datasave.pos      = ptr.pos;
  msg.data.datasave.estsize  = -1;
  msg.data.datasave.filetype = 0xfff;
  strcpy(msg.data.datasave.leafname,"TextFile");
  Desk_Wimp_SendMessage(Desk_event_SENDWANTACK, &msg, ptr.window, ptr.icon);
}


Desk_bool leave_haupt_window(Desk_event_pollblock *e, void *r)
{
  if(mouse_ctrl)
    reset_pointer();
  return(Desk_TRUE);
}

Desk_bool enter_haupt_window(Desk_event_pollblock *e, void *r)
{
  if(mouse_ctrl)
    set_pointer();
  return(Desk_TRUE);
}


Desk_bool Click_haupt_window(Desk_event_pollblock *event, void *reference)
{
  int xpos,ypos,xpos2,ypos2,xpos3,ypos3,i,j;
  int start,end,xx;
  Desk_window_state window;
  Desk_icon_createblock icon;
  int icon_handle;
  int startx,starty;
  static int click=0;
  static int mousexpos,mouseypos;
  //static Desk_wimp_point old_mouse_start;
  Desk_window_outline outline;
  static int active=0;
  unsigned char c;
  Desk_kbd_modifiers modifiers;


  //Desk_Error_Report(0,"button: %d",event->data.mouse.button.value);

   if(event->data.mouse.button.data.menu)
   {
     if(toolbar)
       Desk_Menu_SetFlags(haupt_menu,5,1,0);
     Desk_Menu_Show(haupt_menu, event->data.mouse.pos.x,event->data.mouse.pos.y);
   }


if(dial_terminal_nr<3)
{
   modifiers=Desk_Kbd_GetModifiers(Desk_bool_TRUE);
   if(mouse_ctrl==0 && !modifiers.alt && !modifiers.ctrl)
   {
     
   if(event->data.mouse.button.value==4) // select
   {
     Desk_Window_GainCaret(haupt_window);

     Desk_Wimp_GetWindowState(haupt_window,&window);
     xpos=window.openblock.screenrect.min.x-window.openblock.scroll.x;
     ypos=window.openblock.screenrect.max.y-window.openblock.scroll.y;
     xpos2=(event->data.mouse.pos.x-xpos)&0xfffffff0;
     ypos2=(event->data.mouse.pos.y-ypos);//&0xffffff0e;
     ypos2=ypos2/ZA;
     ypos2=ypos2*ZA-ZA;
     //old_mouse_start=mouse_start;
     mouse_start.x=xpos2/16;
     mouse_start.y=-ypos2/ZA-(text_buffer_size-(terminal_height-1));

/*
     if(dial_terminal_nr==0)
       send_mouse_position(mouse_start.x,mouse_start.y);
*/
     if(Desk_Time_Monotonic()-click_time<=CLICK_DELAY)
     {
       click++;

       /*
       for(i=0;i<tb_all;i++)
         text_buffer[i]=text_buffer[i]&~SELECTED;

       update_text(0,-(text_buffer_size-terminal_height),80,terminal_height);
       updateCursor();
       */

       if(mousexpos==mouse_start.x && mouseypos==mouse_start.y)
       {
         if(click==2) // triple click
         {
           for(i=0;i<tb_all;i++)
           text_buffer[i]=text_buffer[i]&~SELECTED;
           update_text(0,-(text_buffer_size-terminal_height),80,terminal_height);
           updateCursor();
           click=0;

           for(i=tb_above+mouse_start.y*80;i<tb_above+80+mouse_start.y*80;i++)
             text_buffer[i]=text_buffer[i]|SELECTED;
           update_text(0,mouse_start.y,80,mouse_start.y+1);
           j=0;
           for(i=tb_above+mouse_start.y*80;i<tb_above+80+mouse_start.y*80;i++)
           {
             if(text_buffer[i]&SELECTED)
             {
               if(text_buffer[i]&EOL)
               {
                 if(j!=0)
                 {
                   mousebuffer[j++]=0x0a;
                   break;
                 }
                 else
                   mousebuffer[j++]=(char)text_buffer[i];
               }
               else
                 mousebuffer[j++]=(char)text_buffer[i];
             }
           }
           mousebuffer[j]=0;
           click_time=0;
         }
         else if(click==1) // double click
         {
           for(i=0;i<tb_all;i++)
           text_buffer[i]=text_buffer[i]&~SELECTED;
           update_text(0,-(text_buffer_size-terminal_height),80,terminal_height);
           updateCursor();
           mouse_end.x=mouse_start.x;
           mouse_end.y=mouse_start.y;

           while((text_buffer[tb_above+mouse_start.x+80*mouse_start.y]&0x000000ff)>32)
           {
             if(mouse_start.x>=0)
               mouse_start.x--;
             else
               break;
           }
           while((text_buffer[tb_above+mouse_end.x+80*mouse_end.y]&0x000000ff)>32)
           {
             if(mouse_end.x<80)
               mouse_end.x++;
             else
               break;
           }
           mouse_start.x++;
           mouse_end.x--;

           start=mouse_start.x+80*mouse_start.y;
           end=mouse_end.x+80*mouse_end.y;

           if(start!=end && text_buffer[tb_above+start]!=32 )
           {
             for(xx=tb_above+start;xx<=tb_above+end;xx++)
               text_buffer[xx]=text_buffer[xx]|SELECTED;

             update_text(mouse_start.x,mouse_start.y,mouse_end.x+1,mouse_start.y+1);
           }
           j=0;
           for(i=0;i<tb_all;i++)
           {
             if(text_buffer[i]&SELECTED)
               mousebuffer[j++]=(char)text_buffer[i];
           }
           mousebuffer[j]=0;
         }
       }
       else
       {
         mousexpos=mouse_start.x;
         mouseypos=mouse_start.y;
         click=0;
         click_time=Desk_Time_Monotonic();
       }
     }
     else
     {
       mousexpos=mouse_start.x;
       mouseypos=mouse_start.y;
       click=0;
       click_time=Desk_Time_Monotonic();
     }

   }

   if(event->data.mouse.button.value==1 && !active && !import_ascii && !transfer_active) // adjust
   {
     /*
     for(i=0;i<tb_all;i++)
     {
       if(text_buffer[i]&SELECTED)
         input(text_buffer[i]&0x000000ff);
     }
     */
     esc_break=FALSE;
     active=1;
     j=0;
     while((c=mousebuffer[j++])!=0)
     {
       while((*driver)(DRIVER_PUTBYTE,portnumber,c,0)==-1 && !esc_break)
         Desk_Event_Poll();
     }
     active=0;
     if(esc_break)
     {
       (*driver)(DRIVER_FLUSHTX,portnumber,0,0);
       esc_break=FALSE;
     }
     //input(mousebuffer[j++]);
   }

   if(event->data.mouse.button.value==64) // drag
   {

     Desk_Wimp_GetWindowState(haupt_window,&window);
     xpos=window.openblock.screenrect.min.x-window.openblock.scroll.x;
     ypos=window.openblock.screenrect.max.y-window.openblock.scroll.y;
     xpos2=(event->data.mouse.pos.x-xpos)&0xfffffff0;
     ypos2=(event->data.mouse.pos.y-ypos);//&(0xffffffff-(ZA-1));
     ypos2=ypos2/ZA;
     ypos2=ypos2*ZA-ZA;

     startx=xpos2/16;
     starty=-ypos2/ZA-(text_buffer_size-(terminal_height-1));
     xpos3=xpos2+xpos;
     if (xpos3<xpos)
       xpos3=xpos;
     ypos3=ypos2+ypos;

     if(text_buffer[tb_above+startx+80*starty]&SELECTED)
     {
       icon.window=haupt_window;
       icon.icondata.workarearect.min.x=(event->data.mouse.pos.x-xpos)-32;
       icon.icondata.workarearect.min.y=(event->data.mouse.pos.y-ypos)-32;
       icon.icondata.workarearect.max.x=(event->data.mouse.pos.x-xpos)+32;
       icon.icondata.workarearect.max.y=(event->data.mouse.pos.y-ypos)+32;
       icon.icondata.flags.value=2;
       strcpy(icon.icondata.data.spritename,"file_fff");
       Desk_Wimp_CreateIcon(&icon,&icon_handle);

       Desk_DragASprite_DragIcon(haupt_window,icon_handle);
       Desk_Wimp_DeleteIcon(haupt_window,icon_handle);
       Desk_Drag_SetHandlers(NULL,haupt_drag_completed,NULL);
     }
     else
     {
       /*
       if((mouse_end.x<old_mouse_start.x && old_mouse_start.y==mouse_end.y) || mouse_end.y<old_mouse_start.y)
       {
         for(xx=tb_above+old_mouse_start.x+80*old_mouse_start.y;xx>=tb_above+mouse_end.x+80*mouse_end.y;xx--)
           text_buffer[xx]=text_buffer[xx]&~SELECTED;
       }
       else
       {
         for(xx=tb_above+old_mouse_start.x+80*old_mouse_start.y;xx<=tb_above+mouse_end.x+80*mouse_end.y;xx++)
          text_buffer[xx]=text_buffer[xx]&~SELECTED;
       }
       */
       
       mouse_start.x=startx;
       mouse_start.y=starty;
       mouse_end.x=startx;
       mouse_end.y=starty;


       for(i=0;i<tb_all;i++)
         text_buffer[i]=text_buffer[i]&~SELECTED;

       update_text(0,-(text_buffer_size-terminal_height),80,terminal_height);
       updateCursor();

       drag.window=haupt_window;
       drag.type=Desk_drag_INVISIBLE;
       drag.screenrect.min.x=xpos3;
       drag.screenrect.min.y=ypos3;
       drag.screenrect.max.x=xpos3+16;
       drag.screenrect.max.y=ypos3+ZA;
       outline.window=haupt_window;
       Desk_Wimp_GetWindowOutline(&outline);
       drag.parent=outline.screenrect;
       /*
       drag.parent.min.x=xpos;
       drag.parent.min.y=0;//ypos3-((ZA*terminal_height)+ypos2+screen_above);
       drag.parent.max.x=xpos+1280;
       drag.parent.max.y=-ypos;//ypos3+ZA;
       */
       Desk_Wimp_DragBox(&drag);
       dragx=drag.screenrect.min.x;
       Desk_Drag_SetHandlers(selection_update_drag, selection_stop_drag, NULL);
     }
   }
   }
   else // bbs mouse ...
   {
     if(event->data.mouse.button.value==4) // select
     {
       if(mouse_ctrl==0)
       {
         set_pointer();
         mouse_ctrl=1;
       }
       Desk_Window_GainCaret(haupt_window);
       Desk_Wimp_GetWindowState(haupt_window,&window);
       xpos=window.openblock.screenrect.min.x-window.openblock.scroll.x;
       ypos=window.openblock.screenrect.max.y-window.openblock.scroll.y;
       xpos2=(event->data.mouse.pos.x-xpos)&0xfffffff0;
       ypos2=(event->data.mouse.pos.y-ypos);//&0xffffff0e;
       ypos2=ypos2/ZA;
       ypos2=ypos2*ZA-ZA;
       mouse_start.x=xpos2/16;
       mouse_start.y=-ypos2/ZA-(text_buffer_size-(terminal_height-1));
       /*
       Desk_Error_Report(0,"mouse: '%c','%c','%c'",base64[mouse_start.x/64],base64[mouse_start.x%64],base64[mouse_start.y]);
       */
       while((*driver)(DRIVER_PUTBYTE,portnumber,250,0)==-1);
       while((*driver)(DRIVER_PUTBYTE,portnumber,base64[mouse_start.x/64],0)==-1);
       while((*driver)(DRIVER_PUTBYTE,portnumber,base64[mouse_start.x%64],0)==-1);
       while((*driver)(DRIVER_PUTBYTE,portnumber,base64[mouse_start.y],0)==-1);
     }
     else if(event->data.mouse.button.value==1) // adjust
     {
       if(modifiers.alt && modifiers.ctrl)
       {
         reset_pointer();
         mouse_ctrl=0;
       }
     }
   }
}
else // cept window
{
  if(event->data.mouse.button.value==4) // select
    Desk_Window_GainCaret(haupt_window);
    
   if(event->data.mouse.button.value==64) // drag
   {

     Desk_Wimp_GetWindowState(haupt_window,&window);
     xpos=window.openblock.screenrect.min.x-window.openblock.scroll.x;
     ypos=window.openblock.screenrect.max.y-window.openblock.scroll.y;
     //xpos2=(event->data.mouse.pos.x-xpos)&0xfffffff0;
     xpos2=(event->data.mouse.pos.x-xpos);
     xpos2=xpos2/12;
     xpos2=xpos2*12;
     ypos2=(event->data.mouse.pos.y-ypos);//&(0xffffffff-(ZA-1));
     ypos2=ypos2/12;
     ypos2=ypos2*12-12;

     startx=xpos2/12;
     starty=-ypos2/12;
     
     
     xpos3=xpos2+xpos;
     if (xpos3<xpos)
       xpos3=xpos;
     ypos3=ypos2+ypos;

/*
     if(text_buffer[tb_above+startx+80*starty]&SELECTED)
     {
       icon.window=haupt_window;
       icon.icondata.workarearect.min.x=(event->data.mouse.pos.x-xpos)-32;
       icon.icondata.workarearect.min.y=(event->data.mouse.pos.y-ypos)-32;
       icon.icondata.workarearect.max.x=(event->data.mouse.pos.x-xpos)+32;
       icon.icondata.workarearect.max.y=(event->data.mouse.pos.y-ypos)+32;
       icon.icondata.flags.value=2;
       strcpy(icon.icondata.data.spritename,"file_fff");
       Desk_Wimp_CreateIcon(&icon,&icon_handle);

       Desk_DragASprite_DragIcon(haupt_window,icon_handle);
       Desk_Wimp_DeleteIcon(haupt_window,icon_handle);
       Desk_Drag_SetHandlers(NULL,haupt_drag_completed,NULL);
     }
     else
     {
*/
       mouse_start.x=startx;
       mouse_start.y=starty;
       mouse_end.x=startx;
       mouse_end.y=starty;


       //for(i=0;i<tb_all;i++)
       //  text_buffer[i]=text_buffer[i]&~SELECTED;

       //update_text(0,-(text_buffer_size-terminal_height),80,terminal_height);
       //updateCursor();

       drag.window=haupt_window;
       drag.type=Desk_drag_INVISIBLE;
       drag.screenrect.min.x=xpos3;
       drag.screenrect.min.y=ypos3;
       drag.screenrect.max.x=xpos3+12;
       drag.screenrect.max.y=ypos3+12;
       outline.window=haupt_window;
       Desk_Wimp_GetWindowOutline(&outline);
       drag.parent=outline.screenrect;
       /*
       drag.parent.min.x=xpos;
       drag.parent.min.y=0;//ypos3-((ZA*terminal_height)+ypos2+screen_above);
       drag.parent.max.x=xpos+1280;
       drag.parent.max.y=-ypos;//ypos3+ZA;
       */
       Desk_Wimp_DragBox(&drag);
       dragx=drag.screenrect.min.x;
       Desk_Drag_SetHandlers(selection_update_drag_cept, selection_stop_drag_cept, NULL);
     //}
   }
}
   return(Desk_TRUE);
}

Desk_bool Click_tools_window(Desk_event_pollblock *event, void *reference)
{
  switch(event->data.mouse.icon)
  {
    case TOOLS_FILETRANS:
      if(event->data.mouse.button.data.select)
        Desk_Window_Show(send_window, Desk_open_CENTERED);
      if(event->data.mouse.button.data.menu)
        open_downloads();
      if(event->data.mouse.button.data.adjust && !transfer_active)
        start_zmodem_receive();
    break;
    case TOOLS_DIRECTORY:
      if(event->data.mouse.button.data.menu)
        Desk_Menu_PopUp(dial_menu,tools_window,TOOLS_DIRECTORY);
      else
        Desk_Pane2_Show(pane_window, Desk_open_CENTERED);
    break;
    case TOOLS_HANGUP:
      hangup();
    break;
    case TOOLS_DIAL:
      //Desk_Window_Show(dial_window, Desk_open_CENTERED);
      //old_input_focus=input_focus;
      Desk_Menu_PopUp((Desk_menu_ptr)dial_window,tools_window,TOOLS_DIAL);
    break;
  }
  return(Desk_TRUE);
}

Desk_bool Click_unten_window(Desk_event_pollblock *event, void *reference)
{
  int i;
  Desk_convert_block coords;

  switch(event->data.mouse.icon)
  {
    case UNTEN_SHOW:
      if(!sinfo_open)
      {
        Desk_Icon_AlterValidation(unten_window,UNTEN_SHOW,"r5;Sup,pup");
        Desk_Icon_ForceRedraw(unten_window,UNTEN_SHOW);
        Icon_printf_Update(sinfo_window,SINFO_BUFFER,"%d / %d",(*driver)(DRIVER_CHECKRX,portnumber),
                           serial_output_buffer_size-(*driver)(DRIVER_CHECKTX,portnumber));
        show_sinfo_window();
      }
      else
      {
        Desk_Icon_AlterValidation(unten_window,UNTEN_SHOW,"r5;Sdown,pdown");
        Desk_Icon_ForceRedraw(unten_window,UNTEN_SHOW);
        close_sinfo_window();
      }
    break;
    case UNTEN_TERMINAL:
      
      popup_window=unten_window;
      set_ansi_icons();
      set_vt100_icons();
      
      if(event->data.mouse.button.data.adjust)
      {
        if(dial_terminal_nr==0)
          Desk_Menu_PopUp((Desk_menu_ptr)vt100_window,unten_window,UNTEN_TERMINAL); 
        if(dial_terminal_nr==1)
          Desk_Menu_PopUp((Desk_menu_ptr)ansi_window,unten_window,UNTEN_TERMINAL);
      }
      else
      {
        for(i=0;i<4;i++)
          Desk_Menu_SetFlags(terminal_menu,i,0,0);
        Desk_Menu_SetFlags(terminal_menu,dial_terminal_nr,1,0);
        Desk_Menu_PopUp(terminal_menu,unten_window,UNTEN_TERMINAL);
      }
    break;
    case UNTEN_BAUD:
      //for(i=0;i<10;i++)
      //  Desk_Menu_SetFlags(baud_menu,i,0,0);
      set_baud_menu(dial_baud_nr);
      popup_window=unten_window;
      //Desk_Menu_SetFlags(baud_menu,dial_baud_nr,1,0);
      Desk_Menu_PopUp(baud_menu,unten_window,UNTEN_BAUD);
    break;
    case UNTEN_DATA:
      for(i=0;i<8;i++)
        Desk_Menu_SetFlags(data_menu,i,0,0);
      popup_window=unten_window;
      Desk_Menu_SetFlags(data_menu,dial_data_nr,1,0);
      Desk_Menu_PopUp(data_menu,unten_window,UNTEN_DATA);
    break;
    case UNTEN_TRANSFER:
      popup_window=unten_window;
      set_xmodem_icons();
      set_ymodem_icons();
      set_zmodem_icons();
      set_ascii_icons();
      if(event->data.mouse.button.data.adjust)
      {
        switch(transfer_type_nr)
        {
          case 0:
            Desk_Menu_PopUp((Desk_menu_ptr)xmodem_window,unten_window,UNTEN_TRANSFER);
          break;
          case 1:
            Desk_Menu_PopUp((Desk_menu_ptr)ymodem_window,unten_window,UNTEN_TRANSFER);
          break;
          case 2:
            Desk_Menu_PopUp((Desk_menu_ptr)zmodem_window,unten_window,UNTEN_TRANSFER);
          break;
          case 3:
            Desk_Menu_PopUp((Desk_menu_ptr)ascii_window,unten_window,UNTEN_TRANSFER);
          break;
        }
      }
      else
      {
        for(i=0;i<4;i++)
          Desk_Menu_SetFlags(transfertype_menu,i,0,0);

        Desk_Menu_SetFlags(transfertype_menu,transfer_type_nr,1,0);
        Desk_Menu_PopUp(transfertype_menu,unten_window,UNTEN_TRANSFER);
      }
    break;
    case UNTEN_SPECIAL:
      if(event->data.mouse.button.data.adjust)
      {
        set_fkeys2_icons();
        Desk_Menu_PopUp((Desk_menu_ptr)fkeys2_window,unten_window,UNTEN_SPECIAL);
      }
      else
      {
        set_fkeys2_icons();
        set_sbedit2_icons();
        set_special_menu_flags();
        Desk_Menu_PopUp(special_menu,unten_window,UNTEN_SPECIAL);
      }
    break;
    /*
    case UNTEN_MSTATUS:
      Desk_Menu_PopUp(status_menu,unten_window,UNTEN_MSTATUS);
    break;
    */
    case UNTEN_LSTATUS:
      if(!import_ascii)
      {
        //if(logon>0)
        //  Desk_Menu_SetFlags(logon_menu,0,0,0);
        //else
        //  Desk_Menu_SetFlags(logon_menu,0,0,1);

        if(logon>0)
        {
          Desk_Window_GetCoords(haupt_window,&coords);

          if(coords.screenrect.max.x-coords.screenrect.min.x>1280)
            Desk_Menu_PopUp(logon_menu,unten_window,UNTEN_LSTATUS);
          else
            Desk_Menu_Show(logon_menu,coords.screenrect.max.x+64,coords.screenrect.min.y+48);
        }
      }
      else
      {
        Desk_Window_GetCoords(haupt_window,&coords);

        if(coords.screenrect.max.x-coords.screenrect.min.x>1280)
          Desk_Menu_PopUp(import_menu,unten_window,UNTEN_LSTATUS);
        else
          Desk_Menu_Show(import_menu,coords.screenrect.max.x+64,coords.screenrect.min.y+48);
      }
    break;

  }
  return(Desk_TRUE);
}

Desk_bool Click_smartbutton_window(Desk_event_pollblock *event, void *reference)
{
  switch(event->data.mouse.icon)
  {
    case SMARTBUTTON_1:
      send_string(sb_data[0]);
    break;
    case SMARTBUTTON_2:
      send_string(sb_data[1]);
    break;
    case SMARTBUTTON_3:
      send_string(sb_data[2]);
    break;
    case SMARTBUTTON_4:
      send_string(sb_data[3]);
    break;
    case SMARTBUTTON_5:
      send_string(sb_data[4]);
    break;
    case SMARTBUTTON_6:
      send_string(sb_data[5]);
    break;
    case SMARTBUTTON_7:
      send_string(sb_data[6]);
    break;
    case SMARTBUTTON_8:
      send_string(sb_data[7]);
    break;
  }
   return(Desk_TRUE);
}


/* Wenn das Fenster hoeher als der Bildschirm ist, dann bekommt es eine vertikale Scrollbar */

/*
static void special_create(Desk_window_handle *window)
{
  Desk_window_info *info;
  int height;
  char mem[4096];

  info=(Desk_window_info *)mem;
  info->window=*window;
  Desk_Wimp_GetWindowInfo(info);
  height=0-info->block.workarearect.min.y+40;
  if(height>Desk_screen_size.y)
    info->block.flags.data.vscroll=TRUE;
  else
    info->block.flags.data.vscroll=FALSE;
  Desk_Wimp_DeleteWindow(*window);
  Desk_Wimp_CreateWindow(&info->block,window);
}
*/

/*
static void test_height(Desk_window_handle *window,char *name)
{
  int height;
  Desk_window_block *wblock;

  wblock=Desk_Template_Find(name);

  height=0-wblock->workarearect.min.y+40;
  if(height>Desk_screen_size.y)
    wblock->flags.data.vscroll=TRUE;
  else
    wblock->flags.data.vscroll=FALSE;
  Desk_Wimp_DeleteWindow(*window);
  Desk_Wimp_CreateWindow(wblock,window);
}
*/

#if 0

Desk_bool Click_config_pane_window(Desk_event_pollblock *event, void *reference)
{
  int i;
  int local_cept_zoom;
  int flag;
  int size;
  int port;
  
  switch(event->data.mouse.icon)
  {
    // filetransfer
    case CONFIGPANE_DBD:
      size=Desk_Icon_GetInteger(config_pane_window,CONFIGPANE_DBSIZE);
      if(size>1)
        size--;
      Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_DBSIZE,size);
    break;
    case CONFIGPANE_DBU:
      size=Desk_Icon_GetInteger(config_pane_window,CONFIGPANE_DBSIZE);
      if(size<16)
        size++;
      Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_DBSIZE,size);
    break;
    case CONFIGPANE_FDOWN:
      size=Desk_Icon_GetInteger(config_pane_window,CONFIGPANE_FLENGTH);
      if(size>10)
        size--;
      Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_FLENGTH,size);
    break;
    case CONFIGPANE_FUP:
      size=Desk_Icon_GetInteger(config_pane_window,CONFIGPANE_FLENGTH);
      if(size<1024)
        size++;
      Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_FLENGTH,size);
    break;
    // serial
    case CONFIGPANE_BLOCK_BUTTON:
      for(i=1;i<=number_of_drivers;i++)
        Desk_Menu_SetFlags(driver_menu,i,0,0);
      Desk_Menu_SetFlags(driver_menu,new_driver_nr+1,1,0);
      Desk_Menu_PopUp(driver_menu,config_pane_window,CONFIGPANE_BLOCK_BUTTON);
    break;
    case CONFIGPANE_FLOW_BUTTON:
      for(i=0;i<4;i++)
        Desk_Menu_SetFlags(flow_menu,i,0,0);
      Desk_Menu_SetFlags(flow_menu,choosed_flow_type_nr,1,0);
      Desk_Menu_PopUp(flow_menu,config_pane_window,CONFIGPANE_FLOW_BUTTON);
    break;
    case CONFIGPANE_INOPT:
      flag=Desk_Icon_GetSelect(config_pane_window,CONFIGPANE_INOPT);
      Desk_Icon_SetShade(config_pane_window,CONFIGPANE_INPUT,!flag);
    break;
    case CONFIGPANE_OUTOPT:
      flag=Desk_Icon_GetSelect(config_pane_window,CONFIGPANE_OUTOPT);
      Desk_Icon_SetShade(config_pane_window,CONFIGPANE_OUTPUT,!flag);
    break;
    case CONFIGPANE_PUP:
      port=Desk_Icon_GetInteger(config_pane_window,CONFIGPANE_PORT);
      if(port<local_max_port_nr)
        port++;
      Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_PORT,port);
    break;
    case CONFIGPANE_PDOWN:
      port=Desk_Icon_GetInteger(config_pane_window,CONFIGPANE_PORT);
      if(port>0)
        port--;
      Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_PORT,port);
    break;
    // terminal
    case CONFIGPANE_BCOLBUTTON:
      for(i=0;i<=15;i++)
        Desk_Icon_Deselect(colours_window,i);
      Desk_Icon_Select(colours_window,local_backcolor);
      color_window_type=1;
      Desk_Menu_PopUp((Desk_menu_ptr)colours_window,config_pane_window,CONFIGPANE_BCOLBUTTON);
    break;
    case CONFIGPANE_FCOLBUTTON:
      for(i=0;i<=15;i++)
        Desk_Icon_Deselect(colours_window,i);
      Desk_Icon_Select(colours_window,local_forecolor);
      color_window_type=2;
      Desk_Menu_PopUp((Desk_menu_ptr)colours_window,config_pane_window,CONFIGPANE_FCOLBUTTON);
    break;
    case CONFIGPANE_CURSOR_COLBUTTON:
      for(i=0;i<=15;i++)
        Desk_Icon_Deselect(colours_window,i);
      Desk_Icon_Select(colours_window,local_cursorcolor);
      color_window_type=0;
      Desk_Menu_PopUp((Desk_menu_ptr)colours_window,config_pane_window,CONFIGPANE_CURSOR_COLBUTTON);
    break;
    case CONFIGPANE_CZD:
      local_cept_zoom=Desk_Icon_GetInteger(config_pane_window,CONFIGPANE_CEPTZOOM);
      if(local_cept_zoom>100)
        local_cept_zoom--;
      Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_CEPTZOOM,local_cept_zoom);
    break;
    case CONFIGPANE_CZU:
      local_cept_zoom=Desk_Icon_GetInteger(config_pane_window,CONFIGPANE_CEPTZOOM);
      local_cept_zoom++;
      Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_CEPTZOOM,local_cept_zoom);
    break;
    case CONFIGPANE_100:
      Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_CEPTZOOM,100);
    break;
    case CONFIGPANE_120:
      Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_CEPTZOOM,120);
    break;
    case CONFIGPANE_160:
      Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_CEPTZOOM,160);
    break;
    case CONFIGPANE_200:
      Desk_Icon_SetInteger(config_pane_window,CONFIGPANE_CEPTZOOM,200);
    break;
    // modem
    case CONFIGPANE_AUTODIAL:
      autodial=Desk_Icon_GetSelect(config_pane_window,CONFIGPANE_AUTODIAL);
      Desk_Icon_SetShade(config_pane_window,CONFIGPANE_DELAY,!autodial);
    break;
    case CONFIGPANE_HSTROPT:
      Desk_Icon_Unshade(config_pane_window,CONFIGPANE_HANGUP);
    break;
    case CONFIGPANE_DROPDTROPT:
      Desk_Icon_Shade(config_pane_window,CONFIGPANE_HANGUP);
    break;
  }
  return(Desk_TRUE);
}

static void scrollto(Desk_window_handle window,Desk_icon_handle icon)
{
  Desk_window_state wstate;
  Desk_icon_block istate;
  
  Desk_Wimp_GetWindowState(window,&wstate);
  Desk_Wimp_GetIconState(window,icon,&istate);
  wstate.openblock.scroll.y=istate.workarearect.max.y;
  Desk_Wimp_OpenWindow(&wstate.openblock);
  
}

Desk_bool Click_config_window(Desk_event_pollblock *event, void *reference)
{
  Desk_window_state state;
  
  
  switch(event->data.mouse.icon)
  {
    case CONFIG_MODEM:
      scrollto(config_pane_window,CONFIGPANE_MODEMT);
    break;
    case CONFIG_TERMINAL:
      scrollto(config_pane_window,CONFIGPANE_TERMINAL);
    break;
    case CONFIG_SERIAL:
      scrollto(config_pane_window,CONFIGPANE_SERIAL);
    break;
    case CONFIG_FILET:
      scrollto(config_pane_window,CONFIGPANE_TRANSFER);
    break;
    case CONFIG_OK:
      if(event->data.mouse.button.data.select)
        Desk_Pane2_Hide(config_window);
      Desk_Icon_Deselect(config_pane_window,CONFIGPANE_MODEM_STATUS);
      Desk_Event_Poll();
      get_config_icons();
    break;
    case CONFIG_SAVE:
      if(event->data.mouse.button.data.select)
        Desk_Pane2_Hide(config_window);
      Desk_Event_Poll();
      get_config_icons();
      saveconfiguration();
      Desk_Icon_Deselect(config_pane_window,CONFIGPANE_MODEM_STATUS);
    break;
  }
}

#endif


Desk_bool Click_configure_window(Desk_event_pollblock *event, void *reference)
{


  switch(event->data.mouse.icon)
  {
    case 1:
    case 2:
      set_cmodem_icons();
      Desk_Window_Show(cmodem_window, Desk_open_CENTERED);
    break;
    case 3:
    case 4:
    /*
      Desk_Event_Release(Desk_event_CLICK, cterminal_window, Desk_event_ANY, Click_cterminal_window, NULL);
      Desk_Event_Release(Desk_event_CLOSE, cterminal_window, Desk_event_ANY, Close_cterminal_window, NULL);
      //special_create(&cterminal_window);
      test_height(&cterminal_window,"cterminal");
      Desk_Event_Claim(Desk_event_CLICK, cterminal_window, Desk_event_ANY, Click_cterminal_window, NULL);
      Desk_Event_Claim(Desk_event_CLOSE, cterminal_window, Desk_event_ANY, Close_cterminal_window, NULL);
    */
      set_cterminal_icons();
      Desk_Window_Show(cterminal_window, Desk_open_CENTERED);
    break;
    case 5:
    case 6:
      choosed_flow_type_nr=flow_type_nr_0;
      set_cserial_icons(driver_nr,max_port_nr,serial_input_buffer,serial_output_buffer,internal_driver);
      set_driver_info_window(driver_info,driver_version,driver_creator,max_port_nr,
                         driver_speedtable[driver_noofspeeds-1]);
      Desk_Window_Show(cserial_window, Desk_open_CENTERED);
    break;
    case 7:
    case 8:
    /*
      Desk_Event_Release(Desk_event_CLICK, cfiletr_window, Desk_event_ANY, Click_cfiletr_window, NULL);
      Desk_Event_Release(Desk_event_CLOSE, cfiletr_window, Desk_event_ANY, Close_cfiletr_window, NULL);
      //special_create(&cfiletr_window);
      test_height(&cfiletr_window,"cfiletr");
      Desk_Event_Claim(Desk_event_CLICK, cfiletr_window, Desk_event_ANY, Click_cfiletr_window, NULL);
      Desk_Event_Claim(Desk_event_CLOSE, cfiletr_window, Desk_event_ANY, Close_cfiletr_window, NULL);
    */
      set_cfiletr_icons();
      Desk_Window_Show(cfiletr_window, Desk_open_CENTERED);
    break;
    case CONFIGURE_CANCEL:
      Desk_Window_Hide(configure_window);
      Desk_Icon_Deselect(configure_window,CONFIGURE_MODEM_STATUS);
    break;
    case CONFIGURE_SAVE:
      get_configure_icons();
      saveconfiguration();
      if(event->data.mouse.button.data.select)
        Desk_Window_Hide(configure_window);
      Desk_Icon_Deselect(configure_window,CONFIGURE_MODEM_STATUS);
    break;
  }
  return(Desk_TRUE);
}




#ifdef banner
Desk_bool Click_banner_window(Desk_event_pollblock *event, void *reference)
{
  Desk_Window_Hide(banner_window);
  banner_exist=0;
  if(bannersprite!=NULL)
  {
    Desk_DeskMem_Free(bannersprite);
    bannersprite=NULL;
  }
  return(Desk_TRUE);
}
#endif


Desk_bool Click_cfiletr_window(Desk_event_pollblock *event, void *reference)
{
  int size;
  int old_use_dosmap;

  switch(event->data.mouse.icon)
  {
    case CFILETR_MENU:
      Desk_Menu_PopUp(filetypes_menu,cfiletr_window,CFILETR_MENU);
    break;
    case CFILETR_DBD:
      size=Desk_Icon_GetInteger(cfiletr_window,CFILETR_DBSIZE);
      if(size>1)
        size--;
      Desk_Icon_SetInteger(cfiletr_window,CFILETR_DBSIZE,size);
    break;
    case CFILETR_DBU:
      size=Desk_Icon_GetInteger(cfiletr_window,CFILETR_DBSIZE);
      if(size<1024)
        size++;
      Desk_Icon_SetInteger(cfiletr_window,CFILETR_DBSIZE,size);
    break;
    case CFILETR_FDOWN:
      size=Desk_Icon_GetInteger(cfiletr_window,CFILETR_FLENGTH);
      if(size>10)
        size--;
      Desk_Icon_SetInteger(cfiletr_window,CFILETR_FLENGTH,size);
    break;
    case CFILETR_FUP:
      size=Desk_Icon_GetInteger(cfiletr_window,CFILETR_FLENGTH);
      if(size<1024)
        size++;
      Desk_Icon_SetInteger(cfiletr_window,CFILETR_FLENGTH,size);
    break;
    case CFILETR_CANCEL:
      if(event->data.mouse.button.data.select)
        Desk_Window_Hide(cfiletr_window);
    break;
    case CFILETR_OK:
      old_use_dosmap=use_dosmap;
      get_cfiletr_icons();
      if(old_use_dosmap!=use_dosmap) 
      {
        if(use_dosmap)
          create_filetypes_from_dosmap();
        else
        {
          strcpy(filetypes,old_filetypes);
          filetypes_menu=Desk_Menu_New("Filetypes",filetypes);
        }
        Desk_Icon_SetText(cfiletr_window,CFILETR_FILETYPES,filetypes);
      }
      if(event->data.mouse.button.data.select)
        Desk_Window_Hide(cfiletr_window);
      else
        set_cfiletr_icons();
    break;
  }
  return(Desk_TRUE);
}

Desk_bool Click_cserial_window(Desk_event_pollblock *event, void *reference)
{
  int i;
  int flag;
  int port;
  
  switch(event->data.mouse.icon)
  {
    case CSERIAL_BLOCK_BUTTON:
      for(i=1;i<=number_of_drivers;i++)
        Desk_Menu_SetFlags(driver_menu,i,0,0);
      Desk_Menu_SetFlags(driver_menu,new_driver_nr+1,1,0);
      Desk_Menu_PopUp(driver_menu,cserial_window,CSERIAL_BLOCK_BUTTON);
    break;
    case CSERIAL_FLOW_BUTTON:
      for(i=0;i<4;i++)
        Desk_Menu_SetFlags(flow_menu,i,0,0);
      Desk_Menu_SetFlags(flow_menu,choosed_flow_type_nr,1,0);
      Desk_Menu_PopUp(flow_menu,cserial_window,CSERIAL_FLOW_BUTTON);
    break;
    case CSERIAL_UP:
      port=Desk_Icon_GetInteger(cserial_window,CSERIAL_PORT);
      if(port<local_max_port_nr)
        port++;
      Desk_Icon_SetInteger(cserial_window,CSERIAL_PORT,port);
    break;
    case CSERIAL_DOWN:
      port=Desk_Icon_GetInteger(cserial_window,CSERIAL_PORT);
      if(port>0)
        port--;
      Desk_Icon_SetInteger(cserial_window,CSERIAL_PORT,port);
    break;
    case CSERIAL_INOPT:
      flag=Desk_Icon_GetSelect(cserial_window,CSERIAL_INOPT);
      Desk_Icon_SetShade(cserial_window,CSERIAL_INPUT,!flag);
    break;
    case CSERIAL_OUTOPT:
      flag=Desk_Icon_GetSelect(cserial_window,CSERIAL_OUTOPT);
      Desk_Icon_SetShade(cserial_window,CSERIAL_OUTPUT,!flag);
    break;
    case CSERIAL_CANCEL:
      set_cserial_icons(driver_nr,max_port_nr,serial_input_buffer,serial_output_buffer,internal_driver);
      set_driver_info_window(driver_info,driver_version,driver_creator,max_port_nr,
                         driver_speedtable[driver_noofspeeds-1]);
      new_driver_nr=driver_nr;
      choosed_driver_nr=driver_nr;
      if(event->data.mouse.button.data.select)
        Desk_Window_Hide(cserial_window);
    break;
    case CSERIAL_OK:
      if(event->data.mouse.button.data.select)
        Desk_Window_Hide(cserial_window);
      Desk_Event_Poll();   
      Desk_Icon_SetShade(configure_window,CONFIGURE_SAVE,1);
      get_cserial_icons();
      Desk_Icon_SetShade(configure_window,CONFIGURE_SAVE,0);
    break;
  }
  return(Desk_TRUE);
}

Desk_bool Click_cterminal_window(Desk_event_pollblock *event, void *reference)
{
  int i;
  int local_cept_zoom;

  switch(event->data.mouse.icon)
  {
    case CTERMINAL_BCOLBUTTON:
      for(i=0;i<=15;i++)
        Desk_Icon_Deselect(colours_window,i);
      Desk_Icon_Select(colours_window,local_backcolor);
      color_window_type=1;
      Desk_Menu_PopUp((Desk_menu_ptr)colours_window,cterminal_window,CTERMINAL_BCOLBUTTON);
    break;
    case CTERMINAL_FCOLBUTTON:
      for(i=0;i<=15;i++)
        Desk_Icon_Deselect(colours_window,i);
      Desk_Icon_Select(colours_window,local_forecolor);
      color_window_type=2;
      Desk_Menu_PopUp((Desk_menu_ptr)colours_window,cterminal_window,CTERMINAL_FCOLBUTTON);
    break;
    case CTERMINAL_CURSOR_COLBUTTON:
      for(i=0;i<=15;i++)
        Desk_Icon_Deselect(colours_window,i);
      Desk_Icon_Select(colours_window,local_cursorcolor);
      color_window_type=0;
      Desk_Menu_PopUp((Desk_menu_ptr)colours_window,cterminal_window,CTERMINAL_CURSOR_COLBUTTON);
    break;
    case CTERMINAL_CZD:
      local_cept_zoom=Desk_Icon_GetInteger(cterminal_window,CTERMINAL_CEPTZOOM);
      if(local_cept_zoom>100)
        local_cept_zoom--;
      Desk_Icon_SetInteger(cterminal_window,CTERMINAL_CEPTZOOM,local_cept_zoom);
    break;
    case CTERMINAL_CZU:
      local_cept_zoom=Desk_Icon_GetInteger(cterminal_window,CTERMINAL_CEPTZOOM);
      local_cept_zoom++;
      Desk_Icon_SetInteger(cterminal_window,CTERMINAL_CEPTZOOM,local_cept_zoom);
    break;
    case CTERMINAL_100:
      Desk_Icon_SetInteger(cterminal_window,CTERMINAL_CEPTZOOM,100);
    break;
    case CTERMINAL_120:
      Desk_Icon_SetInteger(cterminal_window,CTERMINAL_CEPTZOOM,120);
    break;
    case CTERMINAL_160:
      Desk_Icon_SetInteger(cterminal_window,CTERMINAL_CEPTZOOM,160);
    break;
    case CTERMINAL_200:
      Desk_Icon_SetInteger(cterminal_window,CTERMINAL_CEPTZOOM,200);
    break;
    case CTERMINAL_CANCEL:
      if(event->data.mouse.button.data.select)
        Desk_Window_Hide(cterminal_window);
    break;
    case CTERMINAL_OK:
      get_cterminal_icons();
      if(event->data.mouse.button.data.select)
        Desk_Window_Hide(cterminal_window);
    break;
  }
  return(Desk_TRUE);
}

Desk_bool Click_cmodem_window(Desk_event_pollblock *event, void *reference)
{
  switch(event->data.mouse.icon)
  {
    case CMODEM_AUTODIAL:
      autodial=Desk_Icon_GetSelect(cmodem_window,CMODEM_AUTODIAL);
      Desk_Icon_SetShade(cmodem_window,CMODEM_DELAY,!autodial);
    break;
    case CMODEM_HSTROPT:
      Desk_Icon_Unshade(cmodem_window,CMODEM_HANGUP);
    break;
    case CMODEM_DROPDTROPT:
      Desk_Icon_Shade(cmodem_window,CMODEM_HANGUP);
    break;
    case CMODEM_CANCEL:
      if(event->data.mouse.button.data.select)
        Desk_Window_Hide(cmodem_window);
    break;
    case CMODEM_OK:
      get_cmodem_icons();
      if(event->data.mouse.button.data.select)
        Desk_Window_Hide(cmodem_window);
    break;
  }
  return(Desk_TRUE);
}




/*
Desk_bool Click_receive_window(Desk_event_pollblock *event, void *reference)
{
  switch(event->data.mouse.icon)
  {
    case RECEIVE_CANCEL:
      Desk_Window_Hide(receive_window);
    break;
    case RECEIVE_RECEIVE:
      Desk_Window_Hide(receive_window);
      start_zmodem_receive();
    break;
  }
  return(Desk_TRUE);
}
*/


/*
Desk_bool Click_dial_window(Desk_event_pollblock *event, void *reference)
{
  switch(event->data.mouse.icon)
  {
    case DIAL_CANCEL:
      Desk_Window_Hide(dial_window);
    break;
    case DIAL_DIAL:
      Desk_Icon_GetText(dial_window,DIAL_NUMBER,dial_number);
      dial(dial_number);
      if(event->data.mouse.button.data.select)
        Desk_Window_Hide(dial_window);
    break;
  }
  return(Desk_TRUE);
}
*/

Desk_bool Click_colours_window(Desk_event_pollblock *event, void *reference)
{
  int i;

  for(i=0;i<=15;i++)
    Desk_Icon_Deselect(colours_window,i);
  Desk_Icon_Select(colours_window,event->data.mouse.icon);
  switch(color_window_type)
  {
    case 0:
      local_cursorcolor=event->data.mouse.icon;
      Desk_Icon_SetBackColour(cterminal_window,CTERMINAL_CURSOR_COLOR,local_cursorcolor);
    break;
    case 1:
      local_backcolor=event->data.mouse.icon;
      Desk_Icon_SetBackColour(cterminal_window,CTERMINAL_BCOLOR,local_backcolor);
    break;
    case 2:
      local_forecolor=event->data.mouse.icon;
      Desk_Icon_SetBackColour(cterminal_window,CTERMINAL_FCOLOR,local_forecolor);
    break;

  }
  if(event->data.mouse.button.data.select)
    Desk_Window_Hide(colours_window);
  return(Desk_TRUE);
}



static void get_fkeys(void)
{
  int i;

  for(i=0;i<12;i++)
  {
    if(strlen(t_fkeys[i])>0)
      strcpy(fkeys[i],t_fkeys[i]);
  }
}

static void get_sb(void)
{
  int i;

  for(i=0;i<8;i++)
  {
    if(strlen(t_sb_label[i])>0)
    {
      strcpy(sb_label[i],t_sb_label[i]);
      strcpy(sb_data[i],t_sb_data[i]);
    }
  }
  set_smartbuttons();
}

void start_dial(int nr,int pane)
{
    if(!transfer_active)
    {
      //set_haupt_window_focus();
      window_dial=FALSE;
      t_number_nr=0;
      script_nr=nr;
      load_header(t_filename[script_nr]);
      set_default_keys();
      get_fkeys();
      get_sb();

      if(t_download[0]!=0)
        strcpy(downloads_directory,t_download);
      else
        strcpy(downloads_directory,old_downloads_directory);
      cycle_dial[0]=nr;
      cycle_dial[1]=-1;
      cycle_dial_pos=0;
      if(t_lines25)
        ansi_terminal_height=25;
      else
        ansi_terminal_height=24;
      autowrap=t_wrap;
      avatar=t_avatar;
      send_crashrecovery=t_send_crashrecovery;
      receive_file_action=t_receive_file_action;
      //tx_window=t_tx_window;
      tx_window_size=t_tx_window_size;
      ackint=t_ackint;
      xmodem_crc=t_xmodem_crc;
      xmodem_k=t_xmodem_k;
      ymodem_crc=t_ymodem_crc;
      ymodem_k=t_ymodem_k;
      ascii_char_delay=t_ascii_char_delay;
      ascii_line_delay=t_ascii_line_delay;
      ascii_trans=t_ascii_trans;

      setmodemspeed(t_terminal,t_baud,t_data,t_filetr,TRUE);
      //strcpy(script_name,t_name);
      strcpy(log_number,t_number[t_number_nr]);
      strcpy(log_name,t_name);

      if(t_modeminit[0]!=0)
        send_string(t_modeminit);
      if(autologon)
        logon=1;
      else
        dial(t_number[t_number_nr]);
      if(pane)
        Desk_Pane2_Hide(pane_window);
    }
    else
    {
      show_message(msg[4].text);
    }
}


Desk_bool Click_dir_window(Desk_event_pollblock *event, void *reference)
{
  int i,z;
  char string[80];
  int *selected;

  switch(event->data.mouse.icon)
  {
    case DIR_CREATE:
      editaction=NEW;
      script_nr=-1;
      set_edit_icons();
      Desk_Window_Show(edit_window, Desk_open_CENTERED);
    break;
    case DIR_EDIT:
      editaction=EDIT;
      script_nr=get_selected_iconnr();
      if (script_nr<0)
      {
        show_message(msg[1].text);
      }
      else
      {
        set_edit_icons();
        Desk_Window_Show(edit_window, Desk_open_CENTERED);
      }
    break;
    case DIR_DELETE:
      z=0;
      selected=(int *)Desk_DeskMem_Malloc(sizeof(int)*(number_of_scripts+1));
      for(i=0;i<number_of_scripts;i++)
        if(Desk_Icon_GetSelect(pane_window,i))
          selected[z++]=i;
      selected[z]=-1;

      i=0;
      do
      {
        script_nr=selected[i]-i;
        if (script_nr<0)
        {
          show_message(msg[1].text);
          break;
        }
        else
        {
          load_name(t_filename[script_nr]);
          sprintf(string,"%s '%s' ?",msg[2].text,t_name);
          if(show_ok(string,msg[3].text))
          {
            delete_all_pane_icons();
            remove_script(t_filename[script_nr]);
            scan_scripts_dir();
          }
        }
      }
      while(selected[++i]!=-1);

      //for(i=0;i<number_of_scripts;i++)
      //  Desk_Icon_Deselect(pane_window,i);
      Desk_DeskMem_Free(selected);
    break;
    case DIR_DIAL:
      if(!transfer_active)
      {
        //set_haupt_window_focus();
        window_dial=FALSE;
        t_number_nr=0;
        cycle_dial_pos=0;
        for(i=0;i<number_of_scripts;i++)
        {
          if(Desk_Icon_GetSelect(pane_window,i))
            cycle_dial[cycle_dial_pos++]=i;
        }

        cycle_dial[cycle_dial_pos]=-1;
        cycle_dial_pos=0;

        if(cycle_dial[0]==-1)
        {
          show_message(msg[1].text);
        }
        else
        {
          script_nr=cycle_dial[cycle_dial_pos++];
          load_header(t_filename[script_nr]);
          set_default_keys();
          get_fkeys();
          get_sb();
          if(t_download[0]!=0)
            strcpy(downloads_directory,t_download);
          else
            strcpy(downloads_directory,old_downloads_directory);
          if(t_lines25)
            ansi_terminal_height=25;
          else
            ansi_terminal_height=24;
          autowrap=t_wrap;
          avatar=t_avatar;
          send_crashrecovery=t_send_crashrecovery;
          receive_file_action=t_receive_file_action;
          //tx_window=t_tx_window;
          tx_window_size=t_tx_window_size;
          ackint=t_ackint;
          xmodem_crc=t_xmodem_crc;
          xmodem_k=t_xmodem_k;
          ymodem_crc=t_ymodem_crc;
          ymodem_k=t_ymodem_k;
          ascii_char_delay=t_ascii_char_delay;
          ascii_line_delay=t_ascii_line_delay;
          ascii_trans=t_ascii_trans;
          setmodemspeed(t_terminal,t_baud,t_data,t_filetr,TRUE);
          //strcpy(script_name,t_name);
          strcpy(log_number,t_number[t_number_nr]);
          strcpy(log_name,t_name);

          if(t_modeminit[0]!=0)
            send_string(t_modeminit);
          if(autologon)
            logon=1;
          else
            dial(t_number[t_number_nr]);
          if(event->data.mouse.button.data.select)
            Desk_Pane2_Hide(pane_window);
        }
      }
      else
      {
        show_message(msg[4].text);
      }
    break;
    case DIR_LOGON:
      script_nr=get_selected_iconnr();
      if (script_nr<0)
      {
        show_message(msg[1].text);
      }
      else
      {
        sprintf(gstring,"Filer_Run %s.%s",SCRIPTS_PATH,t_filename[script_nr]);
        system(gstring);
      }
    break;
  }
  return(Desk_TRUE);
}

static void update_pane_drag(void *userdata)
{

}

static void stop_pane_drag(void *userdata)
{
  /*
  t_element *old_record,*new_record;
  Desk_mouse_block pointer;

  Desk_Wimp_GetPointerInfo(&pointer);
  if(dragged_icon_nr!=pointer.icon && dragged_icon_nr-1!=pointer.icon)
  {
    old_record=getcurrent_nr(dragged_icon_nr);
    new_record=getcurrent_nr(pointer.icon);

    delete_all_pane_icons(Desk_LinkList_ListLength(&Anchor));
    Desk_LinkList_Unlink(&Anchor,&(old_record->header));
    Desk_LinkList_InsertAfter(&Anchor,&(new_record->header),&(old_record->header));
    scan_scripts_dir(SCRIPTS_PATH);
    savedaten();
  }
  */
}


Desk_bool Click_pane_window(Desk_event_pollblock *event, void *reference)
{
  Desk_window_state window;
  Desk_icon_block icon;
  int x,y;

  if(event->data.mouse.button.data.select)
  {
    start_dial(event->data.mouse.icon,1);
  }

  if(event->data.mouse.button.value==64)
  {
    Desk_Wimp_GetIconState(pane_window,event->data.mouse.icon,&icon);
    dragged_icon_nr=event->data.mouse.icon;

    Desk_Wimp_GetWindowState(pane_window,&window);
    x=window.openblock.screenrect.min.x-window.openblock.scroll.x;
    y=window.openblock.screenrect.max.y-window.openblock.scroll.y;

    drag.window=pane_window;
    drag.type=Desk_drag_FIXEDBOX;
    drag.screenrect.min.x=x+icon.workarearect.min.x;
    drag.screenrect.min.y=y+icon.workarearect.min.y;
    drag.screenrect.max.x=x+icon.workarearect.max.x;
    drag.screenrect.max.y=y+icon.workarearect.max.y;
    drag.parent.min.x=x+icon.workarearect.min.x;
    drag.parent.min.y=window.openblock.screenrect.max.y-340;
    drag.parent.max.x=x+icon.workarearect.max.x;
    drag.parent.max.y=window.openblock.screenrect.max.y;
    Desk_Wimp_DragBox(&drag);
    Desk_Drag_SetHandlers(update_pane_drag, stop_pane_drag, NULL);
  }

  return(Desk_TRUE);
}

static void create_filename(char *in,char *out)
{
  Desk_file_handle file;
  int i,l,l2,z;
  char new_name[40];

  l=strlen(in);
  if(l>10)
    l=10;

  for(i=0;i<l;i++)
  {
    if(isalpha(in[i]) || isdigit(in[i]))
      out[i]=in[i];
    else
      out[i]='_';
  }
  out[l]=0;

  strcpy(new_name,out);

  sprintf(gstring,"%s.%s",SCRIPTS_PATH,out);
  file=Desk_File_Open(gstring,Desk_file_READ);
  if(file!=NULL)
  {
    // file existiert schon
    z=0;
    do
    {
      strcpy(out,new_name);
      Desk_File_Close(file);
      sprintf(gstring,"%d",z++);
      l2=strlen(gstring);
      if(l>(10-l2))
        out[l-l2]=0;
      strcat(out,gstring);

      sprintf(gstring,"%s.%s",SCRIPTS_PATH,out);
      file=Desk_File_Open(gstring,Desk_file_READ);
    }
    while(file!=NULL);
  }
}


Desk_bool Click_edit_window(Desk_event_pollblock *event, void *reference)
{
  int i;
  char filename[12];

  switch(event->data.mouse.icon)
  {
    case EDIT_UP:
      if(t_number_nr<(MAX_NUMBERS-1))
      {
        Desk_Icon_GetText(edit_window,EDIT_NUMBER,t_number[t_number_nr]);
        t_number_nr++;
        Desk_Icon_SetInteger(edit_window,EDIT_NR,t_number_nr+1);
        Desk_Icon_SetText(edit_window,EDIT_NUMBER,t_number[t_number_nr]);
      }
    break;
    case EDIT_DOWN:
      if(t_number_nr>0)
      {
        Desk_Icon_GetText(edit_window,EDIT_NUMBER,t_number[t_number_nr]);
        t_number_nr--;
        Desk_Icon_SetInteger(edit_window,EDIT_NR,t_number_nr+1);
        Desk_Icon_SetText(edit_window,EDIT_NUMBER,t_number[t_number_nr]);
      }
    break;
    case EDIT_TBUTTON:
      for(i=0;i<3;i++)
        Desk_Menu_SetFlags(terminal_menu,i,0,0);
      popup_window=edit_window;
      //Desk_Icon_SetSelect(avatar_window,AVATAR_AVATAR,avatar);
      set_ansi_icons();
      set_vt100_icons();
      Desk_Menu_SetFlags(terminal_menu,edit_terminal_nr,1,0);
      Desk_Menu_PopUp(terminal_menu,edit_window,EDIT_TBUTTON);
    break;
    case EDIT_BBUTTON:
      //for(i=0;i<10;i++)
      //  Desk_Menu_SetFlags(baud_menu,i,0,0);
      set_baud_menu(edit_baud_nr);
      popup_window=edit_window;
      //Desk_Menu_SetFlags(baud_menu,edit_baud_nr,1,0);
      Desk_Menu_PopUp(baud_menu,edit_window,EDIT_BBUTTON);
    break;
    case EDIT_FBUTTON:
      for(i=0;i<4;i++)
        Desk_Menu_SetFlags(transfertype_menu,i,0,0);
      popup_window=edit_window;
      set_xmodem_icons();
      set_ymodem_icons();
      set_zmodem_icons();
      set_ascii_icons();
      Desk_Menu_SetFlags(transfertype_menu,edit_filetr_nr,1,0);
      Desk_Menu_PopUp(transfertype_menu,edit_window,EDIT_FBUTTON);
    break;
    case EDIT_DBUTTON:
      for(i=0;i<8;i++)
        Desk_Menu_SetFlags(data_menu,i,0,0);
      popup_window=edit_window;
      Desk_Menu_SetFlags(data_menu,edit_data_nr,1,0);
      Desk_Menu_PopUp(data_menu,edit_window,EDIT_DBUTTON);
    break;
    case EDIT_FKEYS:
      set_fkeys_icons();
      Desk_Window_Show(fkeys_window,Desk_open_CENTERED);
    break;
    case EDIT_SB:
      set_sbedit_icons();
      Desk_Window_Show(sbedit_window,Desk_open_CENTERED);
    break;
    case EDIT_CANCEL:
      if(Desk_Window_IsOpen(fkeys_window))
        Desk_Window_Hide(fkeys_window);
      if(Desk_Window_IsOpen(sbedit_window))
        Desk_Window_Hide(sbedit_window);
      Desk_Window_Hide(edit_window);
    break;
    case EDIT_SAVE:
      get_edit_icons();
      if(script_nr!=-1)
        save_header(t_filename[script_nr]);
      else
      {
        // create filename
        create_filename(t_name,filename);
        save_header(filename);
      }
      delete_all_pane_icons();
      scan_scripts_dir();

      //if(t_download[0]!=0)
      //{
        //if(strchr(downloads_directory,'.')==NULL)
        //{
        //  sprintf(downloads_directory,"%s.%s",downloads_directory,t_download);
          //sprintf(gstring2,"%s.%s",downloads_directory,t_download);
          //if(!Desk_File_IsDirectory(gstring2))
          //  Desk_File_CreateDirectory(gstring2);
        //}
        //else
        //strcpy(downloads_directory,t_download);
        //Desk_Error_Report(0,"hier: %s",downloads_directory);
      //}
      //else
      //  strcpy(downloads_directory,old_downloads_directory);

      if(Desk_Window_IsOpen(fkeys_window))
        Desk_Window_Hide(fkeys_window);
      if(Desk_Window_IsOpen(sbedit_window))
        Desk_Window_Hide(sbedit_window);
      if(event->data.mouse.button.data.select)
        Desk_Window_Hide(edit_window);
    break;
  }
  return(Desk_TRUE);
}

Desk_bool Click_spool_window(Desk_event_pollblock *event, void *reference)
{
  int newvalue, closed = FALSE;

  switch(event->data.mouse.icon)
  {
    case SPOOL_HIDE:
      Desk_Pane2_RemovePane(haupt_window,Desk_Pane2_GetPaneNumber(haupt_window,spool_window));
      if(toolbar && toolbar_type==2)
        move_pane(haupt_window,tools_window,-56);
      /*
      if(toolbar)
      {
        Desk_Pane2_RemovePane(haupt_window,Desk_Pane2_GetPaneNumber(haupt_window,tools_window));
        create_toolbar(0);
      }
      */
      open_haupt_window(3);
    break;
    case SPOOL_REW:
      if(spool_action==STOP && !spool_pause)
      {
        spool_position-=100;
        if(spool_position<0)
          spool_position=0;
        Desk_Icon_SetInteger(spool_window,SPOOL_POS,spool_position/100);
        Desk_Slider_SetValue(&spool_slider, spool_position, NULL, NULL);
      }
    break;
    case SPOOL_PLAY:
      if(spool_action==STOP && !spool_pause)
      {
        if(event->data.mouse.button.data.adjust)
          spool_once=1;
        else
          spool_once=0;
        //xosfile_read(spool_filename,NULL,NULL,NULL,&spool_end,NULL);
        spool_end=Desk_File_GetLength(spool_filename);
        Desk_Icon_AlterValidation(spool_window,SPOOL_PLAY,"r2;Splayd,playd;NPLAY");
        spool_file=Desk_File_Open(spool_filename,Desk_file_READ);
        spool_slider.value  = 0;
        spool_slider.limits.min = 0;
        spool_slider.limits.max = spool_end-1;
        Desk_File_Seek(spool_file,spool_position);
        spool_position=Desk_File_ReturnPos(spool_file);
        Desk_Icon_SetInteger(spool_window,SPOOL_POS,spool_position/100);
        spool_action=PLAY;
      }
    break;
    case SPOOL_FORW:
      if(spool_action==STOP && !spool_pause)
      {
        spool_position+=100;
        if(spool_position>spool_end)
          spool_position=spool_end;
        Desk_Icon_SetInteger(spool_window,SPOOL_POS,(int)spool_position/100);
        Desk_Slider_SetValue(&spool_slider, spool_position, NULL, NULL);
      }
    break;
    case SPOOL_STOP:
      spool_stop();
      if(spool_pause)
      {
        Desk_Icon_AlterValidation(spool_window,SPOOL_PAUSE,"r5;Spauseu,paused;NPAUSE");
        spool_pause=0;
      }
    break;
    case SPOOL_REC:
      if(spool_action==STOP && !spool_pause)
      {
        Desk_Icon_AlterValidation(spool_window,SPOOL_REC,"r2;Srecd,recd;NREC");

        spool_file=Desk_File_Open(spool_filename,Desk_file_APPEND);
        Desk_File_Seek(spool_file,spool_position);
        spool_position=Desk_File_ReturnPos(spool_file);
        Desk_Icon_SetInteger(spool_window,SPOOL_POS,spool_position/100);
        spool_action=REC;
      }
    break;
    case SPOOL_PAUSE:
      if(spool_action==PLAY && !spool_pause)
      {
        Desk_Icon_AlterValidation(spool_window,SPOOL_PAUSE,"r2;Spaused,paused;NPAUSE");
        spool_pause=1;
        if(spool_file!=-1)
        {
          Desk_File_Close(spool_file);
          spool_file=-1;
        }
        spool_action=STOP;
      }
      else if(spool_action==STOP && spool_pause)
      {
        Desk_Icon_AlterValidation(spool_window,SPOOL_PAUSE,"r5;Spauseu,paused;NPAUSE");
        spool_pause=0;
        spool_once=0;
        //xosfile_read(spool_filename,NULL,NULL,NULL,&spool_end,NULL);
        spool_end=Desk_File_GetLength(spool_filename);
        Desk_Icon_AlterValidation(spool_window,SPOOL_PLAY,"r2;Splayd,playd;NPLAY");
        spool_file=Desk_File_Open(spool_filename,Desk_file_READ);
        spool_slider.value  = 0;
        spool_slider.limits.min = 0;
        spool_slider.limits.max = spool_end-1;
        Desk_File_Seek(spool_file,spool_position);
        spool_position=Desk_File_ReturnPos(spool_file);
        Desk_Icon_SetInteger(spool_window,SPOOL_POS,spool_position/100);
        spool_action=PLAY;
      }
    break;
    case SPOOL_FRAME:
      if(spool_frame)
      {
        Desk_Icon_AlterValidation(spool_window,SPOOL_FRAME,"r1;NFRAME");
        spool_frame=0;
        Desk_Icon_SetBackColour(spool_window,SPOOL_FRAME,1);
      }
      else
      {
        Desk_Icon_AlterValidation(spool_window,SPOOL_FRAME,"r2;NFRAME");
        spool_frame=1;
        Desk_Icon_SetBackColour(spool_window,SPOOL_FRAME,12);
      }
    break;
    case SPOOL_SLIDER: // slider
      if(spool_action==STOP && !spool_pause)
      {
        spool_end=Desk_File_Size(spool_filename);
        spool_slider.value  = 0;
        spool_slider.limits.min = 0;
        spool_slider.limits.max = spool_end-1;
        Desk_Slider_Drag(&spool_slider, &closed, &newvalue, NULL);
          /*  If the drag was successful, and the window has not been closed
           *  in the meantime, then show the end-of-drag value in the other
           *  icon in the window.
           */
           if (!closed)
           {
             spool_position=newvalue;
             Desk_Icon_SetInteger(spool_window,SPOOL_POS,spool_position/100);
           }
      }
    break;

  }
  return(Desk_TRUE);
}

Desk_bool Click_filetrans_window(Desk_event_pollblock *event, void *reference)
{
  switch(event->data.mouse.icon)
  {
    case FILETRANS_ABORT:
      if(transfer_active)
      {
        if(transfer_type_nr<3)
        {
          filetr_abort=TRUE;
          canit();
          Desk_Icon_Shade(filetrans_window,FILETRANS_ABORT);
        }
        else
        {
          ascii_abort=1;
          filetr_abort=TRUE;
          Desk_Icon_Shade(filetrans_window,FILETRANS_ABORT);
        }
      }
      else
        Desk_Window_Hide(filetrans_window);
    break;
  }
  return(Desk_TRUE);
}

static void exporttext_drag_completed(void *userdata)
{
  Desk_mouse_block ptr;
  Desk_message_block  msg;
  char *filename;

  save_handler_type=EXPORT_TEXT;
  Desk_DragASprite_Stop();
  Desk_Wimp_GetPointerInfo(&ptr);

  if(ptr.window!=exporttext_window)
  {
    msg.header.size            = 80;
    msg.header.yourref         = 0;
    msg.header.action          = Desk_message_DATASAVE;
    msg.data.datasave.window   = ptr.window;
    msg.data.datasave.icon     = ptr.icon;
    msg.data.datasave.pos      = ptr.pos;
    msg.data.datasave.estsize  = -1;
    msg.data.datasave.filetype = 0xfff;

    filename=Desk_Icon_GetTextPtr(exporttext_window,3);
    strcpy(msg.data.datasave.leafname,filename);

    Desk_Wimp_SendMessage(Desk_event_SENDWANTACK, &msg, ptr.window, ptr.icon);
  }
}

Desk_bool Click_exporttext_window(Desk_event_pollblock *event, void *reference)
{
  if(event->data.mouse.icon==1 && event->data.mouse.button.data.dragselect)
  {
    Desk_DragASprite_DragIcon(exporttext_window,1);
    Desk_Drag_SetHandlers(NULL,exporttext_drag_completed,NULL);
  }
  return(Desk_TRUE);
}

static void exportdata_drag_completed(void *userdata)
{
  Desk_mouse_block ptr;
  Desk_message_block  msg;
  char *filename;

  save_handler_type=EXPORT_DATA;
  Desk_DragASprite_Stop();
  Desk_Wimp_GetPointerInfo(&ptr);

  if(ptr.window!=exportdata_window && ptr.window!=haupt_window)
  {
    msg.header.size            = 80;
    msg.header.yourref         = 0;
    msg.header.action          = Desk_message_DATASAVE;
    msg.data.datasave.window   = ptr.window;
    msg.data.datasave.icon     = ptr.icon;
    msg.data.datasave.pos      = ptr.pos;
    msg.data.datasave.estsize  = -1;
    if(export_data_text)
      msg.data.datasave.filetype = 0xfff;
    else
      msg.data.datasave.filetype = 0xffd;

    filename=Desk_Icon_GetTextPtr(exportdata_window,3);
    strcpy(msg.data.datasave.leafname,filename);

    Desk_Wimp_SendMessage(Desk_event_SENDWANTACK, &msg, ptr.window, ptr.icon);
  }
}


Desk_bool Click_exportdata_window(Desk_event_pollblock *event, void *reference)
{
  Desk_file_handle f=-1;
  Desk_event_pollblock event2;
  
  switch(event->data.mouse.icon)
  {
    case 1:
      if(event->data.mouse.button.data.dragselect)
      {
        Desk_DragASprite_DragIcon(exportdata_window,1);
        Desk_Drag_SetHandlers(NULL,exportdata_drag_completed,NULL);
      }
    break;
    case 2: // OK
      sprintf(spool_filename,"<Wimp$ScrapDir>.Connector.SpoolFiles.%s",Desk_Icon_GetTextPtr(exportdata_window,3));
      Desk_File_CreateDirectory("<Wimp$ScrapDir>.Connector");
      Desk_File_CreateDirectory("<Wimp$ScrapDir>.Connector.SpoolFiles");
      f=Desk_File_Open(spool_filename,Desk_file_WRITE);
      if(f==-1)
      {
        show_message(msg[5].text);
        break;//return;
      }
      Desk_File_Close(f);
      if(export_data_text)
        Desk_File_SetType(spool_filename,Desk_filetype_TEXT);
      else
        Desk_File_SetType(spool_filename,Desk_filetype_DATA);
      spool_position=0;
      event2.data.mouse.icon=SPOOL_REC;
      Click_spool_window(&event2, NULL);
      Open_spool_window();
      //Desk_Window_Hide(exportdata_window);
      Desk_Menu_Show((Desk_menu_ptr)-1,0,0);
    break;
    case 4:
      export_data_text=~export_data_text;
      if(export_data_text)
        icon_change_sprite(exportdata_window,1,"file_fff");
      else
        icon_change_sprite(exportdata_window,1,"file_ffd");
    break;
  }
  return(Desk_TRUE);
}

Desk_bool Click_xmodem_window(Desk_event_pollblock *event, void *reference)
{
  switch(event->data.mouse.icon)
  {
    case XMODEM_OK:
      //Desk_Window_Hide(xmodem_window);
      if(popup_window==unten_window)
      {
        Desk_Menu_SetFlags(transfertype_menu,transfer_type_nr,0,0);
        transfer_type_nr=0;
        Desk_Menu_SetFlags(transfertype_menu,0,1,0);
        Desk_Icon_SetText(unten_window,UNTEN_TRANSFER,transfer[0]);
      }
      else if(popup_window==edit_window)
      {
        Desk_Menu_SetFlags(transfertype_menu,edit_filetr_nr,0,0);
        edit_filetr_nr=0;
        Desk_Menu_SetFlags(transfertype_menu,0,1,0);
        Desk_Icon_SetText(edit_window,EDIT_FILETR,transfer[0]);
      }
      if(event->data.mouse.button.data.select)
        Desk_Menu_Show((Desk_menu_ptr)-1,0,0);
      get_xmodem_icons();
    break;
  }
  return(Desk_TRUE);
}

Desk_bool Click_ymodem_window(Desk_event_pollblock *event, void *reference)
{
  switch(event->data.mouse.icon)
  {
    case YMODEM_OK:
      //Desk_Window_Hide(ymodem_window);
      if(popup_window==unten_window)
      {
        Desk_Menu_SetFlags(transfertype_menu,transfer_type_nr,0,0);
        transfer_type_nr=1;
        Desk_Menu_SetFlags(transfertype_menu,1,1,0);
        Desk_Icon_SetText(unten_window,UNTEN_TRANSFER,transfer[1]);
      }
      else if(popup_window==edit_window)
      {
        Desk_Menu_SetFlags(transfertype_menu,edit_filetr_nr,0,0);
        edit_filetr_nr=1;
        Desk_Menu_SetFlags(transfertype_menu,1,1,0);
        Desk_Icon_SetText(edit_window,EDIT_FILETR,transfer[1]);
      }
      if(event->data.mouse.button.data.select)
        Desk_Menu_Show((Desk_menu_ptr)-1,0,0);
      get_ymodem_icons();
    break;
  }
  return(Desk_TRUE);
}

Desk_bool Click_zmodem_window(Desk_event_pollblock *event, void *reference)
{
  int size;

  switch(event->data.mouse.icon)
  {
    /*
    case ZMODEM_WINDOW:
      flag=Desk_Icon_GetSelect(zmodem_window,ZMODEM_WINDOW);
      Desk_Icon_SetShade(zmodem_window,ZMODEM_TXWSIZE,!flag);
      Desk_Icon_SetShade(zmodem_window,ZMODEM_TXD,!flag);
      Desk_Icon_SetShade(zmodem_window,ZMODEM_TXU,!flag);
    break;
    */
    case ZMODEM_TXD:
      size=Desk_Icon_GetInteger(zmodem_window,ZMODEM_TXWSIZE);
      if(size>0)
        size--;
      Desk_Icon_SetInteger(zmodem_window,ZMODEM_TXWSIZE,size);
    break;
    case ZMODEM_TXU:
      size=Desk_Icon_GetInteger(zmodem_window,ZMODEM_TXWSIZE);
      if(size<16)
        size++;
      Desk_Icon_SetInteger(zmodem_window,ZMODEM_TXWSIZE,size);
    break;
    case ZMODEM_ACKD:
      size=Desk_Icon_GetInteger(zmodem_window,ZMODEM_ACKINT);
      if(size>0)
        size--;
      Desk_Icon_SetInteger(zmodem_window,ZMODEM_ACKINT,size);
    break;
    case ZMODEM_ACKU:
      size=Desk_Icon_GetInteger(zmodem_window,ZMODEM_ACKINT);
      if(size<16)
        size++;
      Desk_Icon_SetInteger(zmodem_window,ZMODEM_ACKINT,size);
    break;

    case ZMODEM_OK:
      if(popup_window==unten_window)
      {
        Desk_Menu_SetFlags(transfertype_menu,transfer_type_nr,0,0);
        transfer_type_nr=2;
        Desk_Menu_SetFlags(transfertype_menu,2,1,0);
        Desk_Icon_SetText(unten_window,UNTEN_TRANSFER,transfer[2]);
      }
      else if(popup_window==edit_window)
      {
        Desk_Menu_SetFlags(transfertype_menu,edit_filetr_nr,0,0);
        edit_filetr_nr=2;
        Desk_Menu_SetFlags(transfertype_menu,2,1,0);
        Desk_Icon_SetText(edit_window,EDIT_FILETR,transfer[2]);
      }
      if(event->data.mouse.button.data.select)
        Desk_Menu_Show((Desk_menu_ptr)-1,0,0);
      get_zmodem_icons();
    break;
  }
  return(Desk_TRUE);
}

Desk_bool Click_ascii_window(Desk_event_pollblock *event, void *reference)
{
  switch(event->data.mouse.icon)
  {
    case ASCII_OK:
      if(popup_window==unten_window)
      {
        Desk_Menu_SetFlags(transfertype_menu,transfer_type_nr,0,0);
        transfer_type_nr=3;
        Desk_Menu_SetFlags(transfertype_menu,3,1,0);
        Desk_Icon_SetText(unten_window,UNTEN_TRANSFER,transfer[3]);
      }
      else if(popup_window==edit_window)
      {
        Desk_Menu_SetFlags(transfertype_menu,edit_filetr_nr,0,0);
        edit_filetr_nr=3;
        Desk_Menu_SetFlags(transfertype_menu,3,1,0);
        Desk_Icon_SetText(edit_window,EDIT_FILETR,transfer[3]);
      }
      if(event->data.mouse.button.data.select)
        Desk_Menu_Show((Desk_menu_ptr)-1,0,0);
      get_ascii_icons();
    break;
  }
  return(Desk_TRUE);
}

Desk_bool Click_fkeys_window(Desk_event_pollblock *event, void *reference)
{
  switch(event->data.mouse.icon)
  {
    case FKEYS_OK:
      get_fkeys_icons();
      Desk_Window_Hide(fkeys_window);
    break;
    case FKEYS_CANCEL:
      Desk_Window_Hide(fkeys_window);
    break;
  }
  return(Desk_TRUE);
}

Desk_bool Click_fkeys2_window(Desk_event_pollblock *event, void *reference)
{
  if(event->data.mouse.icon==FKEYS2_OK)
  {
    get_fkeys2_icons();
    if(event->data.mouse.button.data.select)
      Desk_Menu_Show((Desk_menu_ptr)-1,0,0);
  }
  return(Desk_TRUE);
}

Desk_bool Click_sbedit_window(Desk_event_pollblock *event, void *reference)
{
  switch(event->data.mouse.icon)
  {
    case SBEDIT_OK:
      get_sbedit_icons();
      Desk_Window_Hide(sbedit_window);
    break;
    case SBEDIT_CANCEL:
      Desk_Window_Hide(sbedit_window);
    break;
  }
  return(Desk_TRUE);
}

Desk_bool Click_sbedit2_window(Desk_event_pollblock *event, void *reference)
{
  if(event->data.mouse.icon==SBEDIT2_OK)
  {
    get_sbedit2_icons();
    set_smartbuttons();
    if(event->data.mouse.button.data.select)
      Desk_Menu_Show((Desk_menu_ptr)-1,0,0);
  }
  return(Desk_TRUE);
}

Desk_bool Click_ansi_window(Desk_event_pollblock *event, void *reference)
{
  if(event->data.mouse.icon==ANSI_OK)
  {
    if(popup_window==unten_window)
    {
      dial_terminal_nr=1;
      Desk_Menu_SetFlags(terminal_menu,dial_terminal_nr,1,0);
      Desk_Icon_SetText(unten_window,UNTEN_TERMINAL,terminal[dial_terminal_nr].string);
      get_ansi_icons();
      setmodemspeed(dial_terminal_nr,dial_baud_nr,dial_data_nr,transfer_type_nr,FALSE);
    }
    else
    {
      edit_terminal_nr=1;
      Desk_Menu_SetFlags(terminal_menu,edit_terminal_nr,1,0);
      Desk_Icon_SetText(edit_window,EDIT_TERMINAL,terminal[edit_terminal_nr].string);
    }
    if(event->data.mouse.button.data.select)
      Desk_Menu_Show((Desk_menu_ptr)-1,0,0);
  }
  return(Desk_TRUE);
}

Desk_bool Click_vt100_window(Desk_event_pollblock *event, void *reference)
{
  if(event->data.mouse.icon==VT100_OK)
  {
    if(popup_window==unten_window)
    {
      dial_terminal_nr=0;
      Desk_Menu_SetFlags(terminal_menu,dial_terminal_nr,1,0);
      Desk_Icon_SetText(unten_window,UNTEN_TERMINAL,terminal[dial_terminal_nr].string);
      get_vt100_icons();
      setmodemspeed(dial_terminal_nr,dial_baud_nr,dial_data_nr,transfer_type_nr,FALSE);
    }
    else
    {
      edit_terminal_nr=0;
      Desk_Menu_SetFlags(terminal_menu,edit_terminal_nr,1,0);
      Desk_Icon_SetText(edit_window,EDIT_TERMINAL,terminal[edit_terminal_nr].string);
    }
    if(event->data.mouse.button.data.select)
      Desk_Menu_Show((Desk_menu_ptr)-1,0,0);
  }
  return(Desk_TRUE);
}


Desk_bool Click_send_window(Desk_event_pollblock *event, void *reference)
{
  file_des *current_file;
  int i;
  
  if(event->data.mouse.button.data.menu)
  {
    if(Desk_LinkList_ListLength(&Files)>0 && !transfer_active)
    {
      i=0;
      current_file=Desk_LinkList_FirstItem(&Files);
      while(current_file!=NULL)
      {
        if(current_file->selected)
          i++;
        current_file = (file_des *) current_file->header.next;
      }
      if(i>0)
      {
        Desk_Menu_SetFlags(send_menu,0,0,0); 
        Desk_Menu_SetFlags(send_menu,2,0,0); 
      }
      else // nothing selected
      {
        Desk_Menu_SetFlags(send_menu,0,0,1);
        Desk_Menu_SetFlags(send_menu,2,0,1); 
      }
      Desk_Menu_Show(send_menu, event->data.mouse.pos.x,event->data.mouse.pos.y);
    }
  }
  else
  {
    i=0;
    current_file=Desk_LinkList_FirstItem(&Files);
    while(current_file!=NULL)
    {
      current_file->selected=Desk_Icon_GetSelect(send_window,i);
      current_file = (file_des *) current_file->header.next;
      i+=2;
    } 
  }
  return(Desk_TRUE);
}


/******************************************************************************
 *                           menu choice handlers                             *
 ******************************************************************************/



Desk_bool MenuChoice_baricon_menu(Desk_event_pollblock *event, void *reference)
{
 /*
  * called when menu selection of the iconbar menu is made
  */
  Desk_mouse_block ptr;

  if (Desk_menu_currentopen != icon_menu)        /* Only respond to the icon_menu  */
    return(Desk_FALSE);

  switch(event->data.selection[0])
  {
    case 1:
      system("Filer_Run <Connector$Dir>.!Help");
    break;
    case 2:
      //set_configure_icons();
      Desk_Window_Show(configure_window, Desk_open_CENTERED);
      //set_config_pane_icons();
      //Desk_Pane2_Show(config_window,Desk_open_CENTERED);
    break;
    case 3:
      quit_prg(TRUE);
    break;
  }

  Desk_Wimp_GetPointerInfo(&ptr);               /* If ADJUST was used to select, */
  if (ptr.button.data.adjust)              /* then we keep the menu open.   */
    Desk_Menu_ShowLast();

  return(Desk_TRUE);
}

Desk_bool MenuChoice_haupt_menu(Desk_event_pollblock *event, void *reference)
{
  Desk_mouse_block ptr;

  if (Desk_menu_currentopen != haupt_menu)        /* Only respond to the haupt_menu  */
    return(Desk_FALSE);

  switch(event->data.selection[0])
  {
    case 0:
       switch(event->data.selection[1])
      {
        case 0:
          send_string(modem.init);
        break;
        case 1:
          //Desk_Window_Show(dial_window, Desk_open_CENTERED);
          //old_input_focus=input_focus;
          //Desk_Icon_SetCaret(dial_window,DIAL_NUMBER);
        break;
        case 2:
          answer();
        break;
        case 3:
          hangup();
        break;
      }
    break;
    case 1:
      switch(event->data.selection[1])
      {
        case 0:
          Desk_Window_Show(send_window, Desk_open_CENTERED);
        break;
        case 1:
          //Desk_Window_Show(receive_window, Desk_open_CENTERED);
          if(!transfer_active)
            start_zmodem_receive();
        break;
        case 2:
          open_downloads();
        break;
      }
    break;
    case 2:
      Desk_Pane2_Show(pane_window, Desk_open_CENTERED);
    break;
    case 3:
    break;
    case 4:
      Open_spool_window();
    break;
    case 5:
      if(toolbar)
       {
         Desk_Menu_SetFlags(haupt_menu,5,0,0);
         toolbar=FALSE;
       }
       else
       {
         Desk_Menu_SetFlags(haupt_menu,5,1,0);
         toolbar=TRUE;
       }

       Desk_Icon_SetSelect(cterminal_window,CTERMINAL_TOOLBAR,toolbar);
       show_toolbar(toolbar);
    break;
    case 6:
      Desk_Pane2_Hide(haupt_window);
    break;
    case 7:
      system("Filer_Run <Wimp$ScrapDir>.Connector.logfile");
    break;
  }

  Desk_Wimp_GetPointerInfo(&ptr);               /* If ADJUST was used to select, */
  if (ptr.button.data.adjust)              /* then we keep the menu open.   */
    Desk_Menu_ShowLast();

  return(Desk_TRUE);
}

Desk_bool MenuChoice_driver_menu(Desk_event_pollblock *event, void *reference)
{
  Desk_mouse_block ptr;
  char *error;
  int nr;
  //int  (*driver2)(int,...);
  int i;
  int adjust;

  if (Desk_menu_currentopen != driver_menu)        /* Only respond to the driver_menu  */
    return(Desk_FALSE);

  //Desk_Menu_SetFlags(driver_menu,driver_nr+1,0,0);
  for(i=0;i<number_of_drivers;i++)
    Desk_Menu_SetFlags(driver_menu,i,0,0);
  new_driver_nr=event->data.selection[0]-1;
  Desk_Menu_SetFlags(driver_menu,new_driver_nr+1,1,0);
  //Desk_Icon_SetText(cserial_window,CSERIAL_BLOCK,drivers[new_driver_nr].file);

  adjust=0;
  Desk_Wimp_GetPointerInfo(&ptr);               /* If ADJUST was used to select, */
  if (ptr.button.data.adjust)              /* then we keep the menu open.   */
  {
    Desk_Menu_ShowLast();
    adjust=1;
  }
  
  choosed_driver_nr=driver_check(drivers[new_driver_nr].file);
  if(choosed_driver_nr<0)
  {
    Desk_Menu_SetFlags(driver_menu,new_driver_nr+1,0,0);
    choosed_driver_nr=driver_nr;
    new_driver_nr=driver_nr;
    Desk_Menu_SetFlags(driver_menu,driver_nr+1,1,0);
    if(adjust)
      Desk_Menu_ShowLast();
  }
   
   
  
   
   Desk_Icon_SetInteger(cserial_window,CSERIAL_OUTPUT,serial_output_buffer_size);
   
   if(!Desk_stricmp(drivers[choosed_driver_nr].file,"InternalPC") ||
      !Desk_stricmp(drivers[choosed_driver_nr].file,"Internal") ||
      !Desk_stricmp(drivers[choosed_driver_nr].file,"Internal32") )
   {
     Desk_Icon_SetInteger(cserial_window,CSERIAL_INPUT,16384);
     Desk_Icon_SetInteger(cserial_window,CSERIAL_OUTPUT,4096);
     Desk_Icon_SetInteger(cserial_window,CSERIAL_PORT,0);
   }
   if(!Desk_stricmp(drivers[choosed_driver_nr].file,"PipeA") || 
         !Desk_stricmp(drivers[choosed_driver_nr].file,"PipeB"))
   {
     Desk_Icon_SetInteger(cserial_window,CSERIAL_INPUT,2048);
     Desk_Icon_SetInteger(cserial_window,CSERIAL_OUTPUT,2048);
   }
   
  /*
  if ((driver2=driver_load2(drivers[driver_nr].file))==NULL)
    Desk_Error_Report(0,"can't load %d driver",drivers[driver_nr].file);

  if((error=(char *)(*driver2)(DRIVER_INITIALISE,-1))!=NULL && Desk_stricmp(drivers[driver_nr].file,"Telnet"))
  {
    Desk_Error_Report(0,"Error when initialising driver: %s",error);
    if ((driver2=driver_load2(drivers[old_driver_nr].file))==NULL)
      Desk_Error_Report(0,"can't load %s driver",drivers[old_driver_nr].file);
    if((error=(char *)(*driver2)(DRIVER_INITIALISE,-1))!=NULL && Desk_stricmp(drivers[driver_nr].file,"Telnet"))
      Desk_Error_Report(0,"2Error when initialising driver: %s",error);
    Desk_Icon_SetText(cserial_window,CSERIAL_BLOCK,drivers[old_driver_nr].file);
    driver_nr=old_driver_nr;
  }
  else
  {
    old_driver_nr=driver_nr;
  }

  set_driver_vars();
  set_driver_info_window();

  if(max_port_nr==0)
  {
    incdec_cserial->step=0;
    Desk_Icon_Shade(cserial_window,CSERIAL_UP);
    Desk_Icon_Shade(cserial_window,CSERIAL_DOWN);
  }
  else
  {
    incdec_cserial->step=1;
    Desk_Icon_Unshade(cserial_window,CSERIAL_UP);
    Desk_Icon_Unshade(cserial_window,CSERIAL_DOWN);
  }
  incdec_cserial->max=max_port_nr;
  nr=Desk_Icon_GetInteger(cserial_window,CSERIAL_PORT);
  if(nr>max_port_nr)
    Desk_Icon_SetInteger(cserial_window,CSERIAL_PORT,max_port_nr);

  if(Desk_stricmp(drivers[driver_nr].file,"InternalPC") &&
     Desk_stricmp(drivers[driver_nr].file,"Internal") &&
     Desk_stricmp(drivers[driver_nr].file,"Internal32") )
  {
    Desk_Icon_Shade(cserial_window,CSERIAL_INOPT);
    Desk_Icon_Shade(cserial_window,CSERIAL_OUTOPT);
    Desk_Icon_Deselect(cserial_window,CSERIAL_INOPT);
    Desk_Icon_Deselect(cserial_window,CSERIAL_OUTOPT);
    Desk_Icon_Shade(cserial_window,CSERIAL_INPUT);
    Desk_Icon_Shade(cserial_window,CSERIAL_OUTPUT);
    serial_input_buffer=0;
    serial_output_buffer=0;
    get_serial_output_buffer_size();
  }
  else
  {
    Desk_Icon_Unshade(cserial_window,CSERIAL_INOPT);
    Desk_Icon_Unshade(cserial_window,CSERIAL_OUTOPT);
    Desk_Icon_Select(cserial_window,CSERIAL_INOPT);
    Desk_Icon_Select(cserial_window,CSERIAL_OUTOPT);
    Desk_Icon_Unshade(cserial_window,CSERIAL_INPUT);
    Desk_Icon_Unshade(cserial_window,CSERIAL_OUTPUT);
    serial_input_buffer=1;
    serial_output_buffer=1;
  }
  */

  return(Desk_TRUE);
}

Desk_bool MenuChoice_flow_menu(Desk_event_pollblock *event, void *reference)
{
  Desk_mouse_block ptr;
  int i;

  if (Desk_menu_currentopen != flow_menu)        /* Only respond to the flow_menu  */
    return(Desk_FALSE);

  //Desk_Menu_SetFlags(flow_menu,flow_type_nr,0,0);
  for(i=0;i<4;i++)
    Desk_Menu_SetFlags(flow_menu,i,0,0);
  
  choosed_flow_type_nr=event->data.selection[0];
  Desk_Menu_SetFlags(flow_menu,choosed_flow_type_nr,1,0);
  Desk_Icon_SetText(cserial_window,CSERIAL_FLOW,flow[choosed_flow_type_nr]);

  Desk_Wimp_GetPointerInfo(&ptr);               /* If ADJUST was used to select, */
  if (ptr.button.data.adjust)              /* then we keep the menu open.   */
    Desk_Menu_ShowLast();

  return(Desk_TRUE);
}

Desk_bool MenuChoice_terminal_menu(Desk_event_pollblock *event, void *reference)
{
  Desk_mouse_block ptr;

  if (Desk_menu_currentopen != terminal_menu)        /* Only respond to the flow_menu  */
    return(Desk_FALSE);

  if(popup_window==unten_window)
  {
    Desk_Menu_SetFlags(terminal_menu,dial_terminal_nr,0,0);
    dial_terminal_nr=event->data.selection[0];
    Desk_Menu_SetFlags(terminal_menu,dial_terminal_nr,1,0);
    Desk_Icon_SetText(unten_window,UNTEN_TERMINAL,terminal[dial_terminal_nr].string);
  }
  else if(popup_window==edit_window)
  {
    Desk_Menu_SetFlags(terminal_menu,edit_terminal_nr,0,0);
    edit_terminal_nr=event->data.selection[0];
    Desk_Menu_SetFlags(terminal_menu,edit_terminal_nr,1,0);
    Desk_Icon_SetText(edit_window,EDIT_TERMINAL,terminal[edit_terminal_nr].string);
  }
  Desk_Wimp_GetPointerInfo(&ptr);               /* If ADJUST was used to select, */
  if (ptr.button.data.adjust)              /* then we keep the menu open.   */
    Desk_Menu_ShowLast();

  setmodemspeed(dial_terminal_nr,dial_baud_nr,dial_data_nr,transfer_type_nr,FALSE);

  return(Desk_TRUE);
}

Desk_bool MenuChoice_baud_menu(Desk_event_pollblock *event, void *reference)
{
  Desk_mouse_block ptr;

  if (Desk_menu_currentopen != baud_menu)        /* Only respond to the flow_menu  */
    return(Desk_FALSE);

  if(popup_window==unten_window)
  {
    Desk_Menu_SetFlags(baud_menu,dial_baud_nr,0,0);
    dial_baud_nr=event->data.selection[0];
    Desk_Menu_SetFlags(baud_menu,dial_baud_nr,1,0);
    Desk_Icon_SetText(unten_window,UNTEN_BAUD,baud[dial_baud_nr].string);
  }
  else if(popup_window==edit_window)
  {
    Desk_Menu_SetFlags(baud_menu,edit_baud_nr,0,0);
    edit_baud_nr=event->data.selection[0];
    Desk_Menu_SetFlags(baud_menu,edit_baud_nr,0,0);
    Desk_Icon_SetText(edit_window,EDIT_BAUD,baud[edit_baud_nr].string);
  }
  Desk_Wimp_GetPointerInfo(&ptr);               /* If ADJUST was used to select, */
  if (ptr.button.data.adjust)              /* then we keep the menu open.   */
    Desk_Menu_ShowLast();

  setmodemspeed(dial_terminal_nr,dial_baud_nr,dial_data_nr,transfer_type_nr,FALSE);
  return(Desk_TRUE);
}

Desk_bool MenuChoice_data_menu(Desk_event_pollblock *event, void *reference)
{
  Desk_mouse_block ptr;

  if (Desk_menu_currentopen != data_menu)        /* Only respond to the flow_menu  */
    return(Desk_FALSE);

  if(popup_window==unten_window)
  {
    Desk_Menu_SetFlags(data_menu,dial_data_nr,0,0);
    dial_data_nr=event->data.selection[0];
    Desk_Menu_SetFlags(data_menu,dial_data_nr,1,0);
    Desk_Icon_SetText(unten_window,UNTEN_DATA,data[dial_data_nr].string);
  }
  else if(popup_window==edit_window)
  {
    Desk_Menu_SetFlags(data_menu,edit_data_nr,0,0);
    edit_data_nr=event->data.selection[0];
    Desk_Menu_SetFlags(data_menu,edit_data_nr,1,0);
    Desk_Icon_SetText(edit_window,EDIT_DATA,data[edit_data_nr].string);
  }

  Desk_Wimp_GetPointerInfo(&ptr);               /* If ADJUST was used to select, */
  if (ptr.button.data.adjust)              /* then we keep the menu open.   */
    Desk_Menu_ShowLast();

  setmodemspeed(dial_terminal_nr,dial_baud_nr,dial_data_nr,transfer_type_nr,FALSE);
  return(Desk_TRUE);
}

Desk_bool MenuChoice_transfertype_menu(Desk_event_pollblock *event, void *reference)
{
  Desk_mouse_block ptr;

  if (Desk_menu_currentopen != transfertype_menu)        /* Only respond to the flow_menu  */
    return(Desk_FALSE);

  if(popup_window==unten_window)
  {
    Desk_Menu_SetFlags(transfertype_menu,transfer_type_nr,0,0);
    transfer_type_nr=event->data.selection[0];
    Desk_Menu_SetFlags(transfertype_menu,transfer_type_nr,1,0);
    Desk_Icon_SetText(unten_window,UNTEN_TRANSFER,transfer[transfer_type_nr]);
  }
  else if(popup_window==edit_window)
  {
    Desk_Menu_SetFlags(transfertype_menu,edit_filetr_nr,0,0);
    edit_filetr_nr=event->data.selection[0];
    Desk_Menu_SetFlags(transfertype_menu,edit_filetr_nr,1,0);
    Desk_Icon_SetText(edit_window,EDIT_FILETR,transfer[edit_filetr_nr]);
  }
  Desk_Wimp_GetPointerInfo(&ptr);               /* If ADJUST was used to select, */
  if (ptr.button.data.adjust)              /* then we keep the menu open.   */
    Desk_Menu_ShowLast();

  return(Desk_TRUE);
}

/* setmodemspeed(dial_terminal_nr,dial_baud_nr,dial_data_nr,FALSE); */

Desk_bool MenuChoice_special_menu(Desk_event_pollblock *event, void *reference)
{
  Desk_mouse_block ptr;

  if (Desk_menu_currentopen != special_menu)        /* Only respond to the flow_menu  */
    return(Desk_FALSE);


/*
  if(event->data.selection[0]==0)
  {
    autowrap=!autowrap;
  }
  if(event->data.selection[0]==1)
    local_echo=!local_echo;
  if(event->data.selection[0]==2)
    crtocrlf=!crtocrlf;
  if(event->data.selection[0]==3)
    lftocrlf=!lftocrlf;
  if(event->data.selection[0]==4)
  {
    if(ansi_terminal_height==24)
    {
      lineMode=1;
      ansi_terminal_height=25;
      terminal_height=ansi_terminal_height;
      init_text_buffer(0);
      consoleSetup();
      if(Desk_Window_IsOpen(haupt_window))
      {
        open_haupt_window(2);
        Desk_Window_ForceWholeRedraw(haupt_window);
      }
    }
    else
    {
      lineMode=0;
      ansi_terminal_height=24;
      terminal_height=ansi_terminal_height;
      init_text_buffer(0);
      consoleSetup();
      if(Desk_Window_IsOpen(haupt_window))
      {
        open_haupt_window(2);
        Desk_Window_ForceWholeRedraw(haupt_window);
      }
    }
  }
*/
  if(event->data.selection[0]==0)
  {
    dial_terminal_nr=dial_terminal_nr_0;
    dial_baud_nr=dial_baud_nr_0;
    dial_data_nr=dial_data_nr_0;
    strcpy(dial_number,old_dial_number);
    spool_speed=old_spool_speed;
    transfer_type_nr=transfer_type_nr_0;
    autowrap=wrap_0;
    crtocrlf=crtocrlf_0;
    lftocrlf=lftocrlf_0;
    export_data_text=export_data_text_0;
    ansi_terminal_height=ansi_terminal_height_0;
    avatar=1;
    spool_frame=spool_frame_0;
    send_crashrecovery=send_crashrecovery_0;
    ascii_char_delay=ascii_char_delay_0;
    ascii_line_delay=ascii_line_delay_0;
    ascii_trans=ascii_trans_0;
    //tx_window=tx_window_0;
    tx_window_size=tx_window_size_0;
    ackint=ackint_0;
    //discbuffer=discbuffer_0;
    xmodem_crc=xmodem_crc_0;
    xmodem_k=xmodem_k_0;
    ymodem_crc=ymodem_crc_0;
    ymodem_k=ymodem_k_0;
    
    portnumber=portnumber_0;
    flow_type_nr=flow_type_nr_0;
    
    setmodemspeed(dial_terminal_nr,dial_baud_nr,dial_data_nr,transfer_type_nr,TRUE);
    set_default_keys();
    set_default_sb();
    set_smartbuttons();
  }
  if(event->data.selection[0]==1) // send break
  {
    Desk_Hourglass_On();
    (*driver)(DRIVER_BREAK,portnumber,200,0);
    Desk_Hourglass_Off();
  }
  if(event->data.selection[0]==3) // smart buttons
  {
    show_sb=!show_sb;
    set_smartbuttons();
  }

  Desk_Wimp_GetPointerInfo(&ptr);               /* If ADJUST was used to select, */
  if (ptr.button.data.adjust)              /* then we keep the menu open.   */
  {
    set_special_menu_flags();
    Desk_Menu_ShowLast();
  }

  return(Desk_TRUE);
}

/*
Desk_bool MenuChoice_ascii_menu(Desk_event_pollblock *event, void *reference)
{
  Desk_mouse_block ptr;

  if (Desk_menu_currentopen != ascii_menu)
    return(Desk_FALSE);


  Desk_Menu_SetFlags(ascii_menu,ascii_trans,0,0);
  ascii_trans=event->data.selection[0];
  Desk_Menu_SetFlags(ascii_menu,ascii_trans,1,0);
  Desk_Icon_SetText(ascii_window,ASCII_TRANS,ascii_trans_str[ascii_trans]);

  Desk_Wimp_GetPointerInfo(&ptr);
  if (ptr.button.data.adjust)
    Desk_Menu_ShowLast();

  return(Desk_TRUE);
}
*/

Desk_bool MenuChoice_logon_menu(Desk_event_pollblock *event, void *reference)
{
  Desk_mouse_block ptr;

  if (Desk_menu_currentopen != logon_menu)        /* Only respond to the flow_menu  */
    return(Desk_FALSE);

  if(event->data.selection[0]==0)
  {
    // cancel logon
    logon=0;
    Desk_Icon_SetText(unten_window,UNTEN_LSTATUS,"Logon cancelled.");
    if(logon_file!=-1)
    {
      Desk_File_Close(logon_file);
      logon_file=-1;
    }
  }
  Desk_Wimp_GetPointerInfo(&ptr);               /* If ADJUST was used to select, */
  if (ptr.button.data.adjust)              /* then we keep the menu open.   */
    Desk_Menu_ShowLast();
  return(Desk_TRUE);
}

Desk_bool MenuChoice_import_menu(Desk_event_pollblock *event, void *reference)
{
  Desk_mouse_block ptr;

  if (Desk_menu_currentopen != import_menu)        /* Only respond to the flow_menu  */
    return(Desk_FALSE);

  if(event->data.selection[0]==0)
    esc_break=1; // abort ascii import
  Desk_Wimp_GetPointerInfo(&ptr);               /* If ADJUST was used to select, */
  if (ptr.button.data.adjust)              /* then we keep the menu open.   */
    Desk_Menu_ShowLast();
  return(Desk_TRUE);
}




/*
Desk_bool MenuChoice_status_menu(Desk_event_pollblock *event, void *reference)
{
  Desk_mouse_block ptr;

  if (Desk_menu_currentopen != status_menu)
    return(Desk_FALSE);

  if(event->data.selection[0]==0)
  {
    dial_terminal_nr=dial_terminal_nr_0;
    dial_baud_nr=dial_baud_nr_0;
    dial_data_nr=dial_data_nr_0;
    strcpy(dial_number,old_dial_number);
    spool_speed=old_spool_speed;
    transfer_type_nr=transfer_type_nr_0;
    autowrap=wrap_0;
    crtocrlf=crtocrlf_0;
    lftocrlf=lftocrlf_0;
    export_data_text=export_data_text_0;
    ansi_terminal_height=ansi_terminal_height_0;
    spool_frame=spool_frame_0;
    send_crashrecovery=send_crashrecovery_0;
    ascii_char_delay=ascii_char_delay_0;
    ascii_line_delay=ascii_line_delay_0;
    ascii_trans=ascii_trans_0;
    //tx_window=tx_window_0;
    tx_window_size=tx_window_size_0;
    ackint=ackint_0;
    discbuffer=discbuffer_0;
    xmodem_crc=xmodem_crc_0;
    xmodem_k=xmodem_k_0;
    ymodem_crc=ymodem_crc_0;
    ymodem_k=ymodem_k_0;
    setmodemspeed(dial_terminal_nr,dial_baud_nr,dial_data_nr,transfer_type_nr,TRUE);
    set_default_keys();
  }
  Desk_Wimp_GetPointerInfo(&ptr);
  if (ptr.button.data.adjust)
    Desk_Menu_ShowLast();
  return(Desk_TRUE);
}
*/

Desk_bool MenuChoice_dial_menu(Desk_event_pollblock *event, void *reference)
{
  Desk_mouse_block ptr;

  if (Desk_menu_currentopen != dial_menu)        /* Only respond to the flow_menu  */
    return(Desk_FALSE);

  start_dial(event->data.selection[0],0);

  Desk_Wimp_GetPointerInfo(&ptr);               /* If ADJUST was used to select, */
  if (ptr.button.data.adjust)              /* then we keep the menu open.   */
    Desk_Menu_ShowLast();

  return(Desk_TRUE);
}




Desk_bool MenuChoice_send_menu(Desk_event_pollblock *event, void *reference)
{
 /*
  * called when menu selection of the iconbar menu is made
  */
  Desk_mouse_block ptr;
  file_des *current_file;
  file_des *next_current_file;
  int i;
	

  if (Desk_menu_currentopen != send_menu)        /* Only respond to the icon_menu  */
    return(Desk_FALSE);

  switch(event->data.selection[0])
  {
    case 0: // remove selection
      i=0;
      current_file=Desk_LinkList_FirstItem(&Files);
      while(current_file!=NULL)
      {
        next_current_file = (file_des *) current_file->header.next;
        if(Desk_Icon_GetSelect(send_window,i))
        {
          Desk_LinkList_Unlink(&Files,&(current_file->header));
          Desk_DeskMem_Free(current_file);
        }
        current_file=next_current_file;  
        i+=2;     
      }
      create_send_list();
    break;
    case 1: // remove all
      current_file=Desk_LinkList_FirstItem(&Files);
      while(current_file!=NULL)
      {
        next_current_file = (file_des *) current_file->header.next;
        Desk_LinkList_Unlink(&Files,&(current_file->header));
        Desk_DeskMem_Free(current_file);
        current_file=next_current_file;       
      }
      create_send_list();
    break;
    case 2: // send selection
      send_all=0;
      start_send();
    break;
    case 3: // send all
      send_all=1;
      start_send();
    break;
  }

  Desk_Wimp_GetPointerInfo(&ptr);               /* If ADJUST was used to select, */
  if (ptr.button.data.adjust)              /* then we keep the menu open.   */
    Desk_Menu_ShowLast();

  return(Desk_TRUE);
}



Desk_bool Gain_caret(Desk_event_pollblock *event, void *reference)
{
  input_focus=event->data.caret.window;
  if(input_focus==haupt_window)
    updateCursor();
  return(Desk_TRUE);
}

Desk_bool Lose_caret(Desk_event_pollblock *event, void *reference)
{
  if(input_focus==haupt_window)
  {
    input_focus=event->data.caret.window;
    if(input_focus==haupt_window) // kein Connector Fenster
      input_focus=-1;
    update_text(cursorX,cursorY,cursorX+1,cursorY+1);
  }
  return(Desk_TRUE);
}


/******************************************************************************
 *                              NULL Handler                                  *
 ******************************************************************************/

/*
static void get_update_rectangle(void)
{
  if (cursorX<xmin) xmin=cursorX;
  if (cursorY<ymin) ymin=cursorY;
  if (cursorX>xmax) xmax=cursorX;
  if (cursorY>ymax) ymax=cursorY;
}
*/

static void redial(void)
{
  int i;

  if(dialing)
  {
    if(dial_delay_time==0)
      dial_delay_time=Desk_Time_Monotonic();

    if(dial_delay==0)
    {
      busy_seen=FALSE;

      if(!window_dial)
      {
        t_number_nr++;
        if(*t_number[t_number_nr]==0 || t_number_nr==MAX_NUMBERS)
        {
          t_number_nr=0;
          i=cycle_dial[cycle_dial_pos++];
          if(i==-1)
          {
            cycle_dial_pos=0;
            i=cycle_dial[cycle_dial_pos++];
          }
          script_nr=i;
          load_header(t_filename[script_nr]);
          set_default_keys();
          get_fkeys();
          get_sb();
          if(t_download[0]!=0)
            strcpy(downloads_directory,t_download);
          else
            strcpy(downloads_directory,old_downloads_directory);
          autowrap=t_wrap;
          avatar=t_avatar;
          send_crashrecovery=t_send_crashrecovery;
          receive_file_action=t_receive_file_action;
          //tx_window=t_tx_window;
          tx_window_size=t_tx_window_size;
          ackint=t_ackint;
          xmodem_crc=t_xmodem_crc;
          xmodem_k=t_xmodem_k;
          ymodem_crc=t_ymodem_crc;
          ymodem_k=t_ymodem_k;
          ascii_char_delay=t_ascii_char_delay;
          ascii_line_delay=t_ascii_line_delay;
          ascii_trans=t_ascii_trans;
          setmodemspeed(t_terminal,t_baud,t_data,t_filetr,TRUE);
          //strcpy(script_name,t_name);
          strcpy(log_number,t_number[t_number_nr]);
          strcpy(log_name,t_name);

          if(autologon)
            logon=1;
          else
            dial(t_number[t_number_nr]);
          dial_delay_time=0;
        }
        else
        {
          logon=1;
          dial_delay_time=0;
        }
      }
      else
      {
        strcpy(log_number,dial_number);
        strcpy(log_name,"");
        dial(dial_number);
        dial_delay_time=0;
      }
    }
    else
    {
      if( (Desk_Time_Monotonic()-dial_delay_time) >= (dial_delay*100) )
      {
        busy_seen=FALSE;

        if(!window_dial)
        {
          t_number_nr++;
          if(*t_number[t_number_nr]==0 || t_number_nr==MAX_NUMBERS)
          {
            t_number_nr=0;
            i=cycle_dial[cycle_dial_pos++];
            if(i==-1)
            {
              cycle_dial_pos=0;
              i=cycle_dial[cycle_dial_pos++];
            }
            script_nr=i;
            load_header(t_filename[script_nr]);
            set_default_keys();
            get_fkeys();
            get_sb();
            if(t_download[0]!=0)
              strcpy(downloads_directory,t_download);
            else
              strcpy(downloads_directory,old_downloads_directory);
            autowrap=t_wrap;
            avatar=t_avatar;
            send_crashrecovery=t_send_crashrecovery;
            receive_file_action=t_receive_file_action;
            //tx_window=t_tx_window;
            tx_window_size=t_tx_window_size;
            ackint=t_ackint;
            xmodem_crc=t_xmodem_crc;
            xmodem_k=t_xmodem_k;
            ymodem_crc=t_ymodem_crc;
            ymodem_k=t_ymodem_k;
            ascii_char_delay=t_ascii_char_delay;
            ascii_line_delay=t_ascii_line_delay;
            ascii_trans=t_ascii_trans;
            setmodemspeed(t_terminal,t_baud,t_data,t_filetr,TRUE);
            //strcpy(script_name,t_name);
            strcpy(log_number,t_number[t_number_nr]);
            strcpy(log_name,t_name);

            if(autologon)
              logon=1;
            else
              dial(t_number[t_number_nr]);
            dial_delay_time=0;
          }
          else
          {
            strcpy(log_number,t_number[t_number_nr]);
            strcpy(log_name,t_name);
            if(autologon)
              logon=1;
            else
              dial(t_number[t_number_nr]);
            dial_delay_time=0;
          }
        }
        else
        {
          strcpy(log_number,dial_number);
          strcpy(log_name,"");
          dial(dial_number);
          dial_delay_time=0;
        }
      }
    }
  }
  else
    busy_seen=FALSE;
}

static void check_data(char c)
{
  int i;

  for(i=0;i<5;i++)
    ws[i]=ws[i+1];
  ws[5]=c;

  if(!strcmp(ws,zmodem_receive_string))
  {
    /*
    strcpy(linbuf,zmodem_receive_string);
    Lleft=strlen(zmodem_receive_string);
    */

    for(i=0;i<6;i++)
      ws[i]=32;
    Desk_Menu_SetFlags(transfertype_menu,transfer_type_nr,0,0);
    transfer_type_nr=2; // ZModem
    Desk_Menu_SetFlags(transfertype_menu,transfer_type_nr,1,0);
    Desk_Icon_SetText(unten_window,UNTEN_TRANSFER,transfer[transfer_type_nr]);

    /* loescht zmodem header im terminal fenster */

    switch(dial_terminal_nr)
    {
      case 0:
        for(i=0;i<6;i++)
        {
          get_update_rectangle();
          ConOut(8);
          ConOut(32);
          ConOut(8);
        }
      break;
      case 1:
        for(i=0;i<6;i++)
        {
          get_update_rectangle();
          decodeAnsi(8);
          decodeAnsi(32);
          decodeAnsi(8);
        }
      break;
      case 2:
        for(i=0;i<6;i++)
        {
          get_update_rectangle();
          remote_chat(8);
          remote_chat(32);
          remote_chat(8);
        }
      break;
    }
    get_update_rectangle();
    if(scroll_above)
      update_text(0,-(text_buffer_size-terminal_height),MAX_COLUMN,ymax+1);
    else
      update_text(0,ymin,MAX_COLUMN,ymax+1);
    updateCursor();

    if(!transfer_active)
    {
      start_zmodem_receive();
    }
  }
  
  if(!strcmp(ws,zmodem_send_string))
  {
    /*
    strcpy(linbuf,zmodem_receive_string);
    Lleft=strlen(zmodem_receive_string);
    */

    for(i=0;i<6;i++)
      ws[i]=32;
    Desk_Menu_SetFlags(transfertype_menu,transfer_type_nr,0,0);
    transfer_type_nr=2; // ZModem
    Desk_Menu_SetFlags(transfertype_menu,transfer_type_nr,1,0);
    Desk_Icon_SetText(unten_window,UNTEN_TRANSFER,transfer[transfer_type_nr]);
    
    if(!transfer_active)
    {
      send_all=1;
      start_send();
    }


  }
  
  

  if(dialing)
  {
    if(strstr(ws,"BUSY"))
    {
      busy_seen=TRUE;
      //set_iconbar_text(STANDBY);
      show_modem_status();
    }
    if(strstr(ws,"NO CAR")) // wenn das Waehlen abgebrochen wird (z.b. Tastendruck).
    {
      if(toolbar)
        Desk_Icon_Unshade(tools_window,TOOLS_DIAL);
      Desk_Menu_SetFlags(modem_menu,1,0,0);
      dialing=FALSE;
      show_modem_status();
      //busy_seen=TRUE;
    }
  }

/*
  if(logon>0 && online)
  {
    for(i=0;i<19;i++)
      wsl[i]=wsl[i+1];
    wsl[19]=c;
    //scan_logon(script_name);
  }
*/
}

static void test_message(void)
{
  Desk_window_info info;

  if(message_open)
  {
    if(Desk_Dialog_StillOpen(message_dialog))
    {
      Desk_Window_GetInfo3(Desk_Dialog_WindowHandle(message_dialog),&info);
      if(info.block.behind!=-1)
        Desk_Window_BringToFront(Desk_Dialog_WindowHandle(message_dialog));
      //Desk_Dialog_Show(message_dialog);
      if( (message_open_time+300)<=Desk_Time_Monotonic() )
      {
        Desk_Dialog_Hide(message_dialog);
        message_open=FALSE;
      }
      else
      {
        if(Desk_Dialog_LastClicked(message_dialog)!=Desk_dialog_NOCHOICE)
        {
          Desk_Dialog_Hide(message_dialog);
          message_open=FALSE;
        }
      }
    }
  }
}

static void test_file_droped(void)
{
  //file_des *current_file;
  //file_des *next_current_file;
  int i;

  if(file_droped)
  {
    if(file_nr==old_file_nr)
    {
      file_droped=FALSE;
      create_send_list();
      if(dropped_in_tools_window && !transfer_active)
      {
        send_all=1;
        start_send();
      }
      
      // alle alten Filenamen loeschen, falls vorhanden
      //while((current_file=Desk_LinkList_FirstItem(&Files))!=NULL)
      //{
      //  Desk_LinkList_Unlink(&Files,&(current_file->header));
      //  Desk_DeskMem_Free(current_file);
      //}
      
      /*
      current_file=Desk_LinkList_FirstItem(&Files);
      while(current_file!=NULL)
      {
        next_current_file = (file_des *) current_file->header.next;
        if(current_file->sent)
        {
          Desk_LinkList_Unlink(&Files,&(current_file->header));
          Desk_DeskMem_Free(current_file);
        }
        current_file=next_current_file;
      }
      create_send_list();
      */
      
      file_nr=0;
      old_file_nr=0;
    }
    old_file_nr=file_nr;
  }

}

static void flash_cursor(void)
{
  if(flashing && input_focus==haupt_window)
  {
    if( (Desk_Time_Monotonic()-flashing_time) >= 50 )
    {
      if(flash)
        flash=FALSE;
      else
        flash=TRUE;
      flashing_time=Desk_Time_Monotonic();
      updateCursor();
    }
  }
}

static void flash_text(void)
{
  if(text_flashing && input_focus==haupt_window)
  {
    if( (Desk_Time_Monotonic()-text_flashing_time) >= 50 )
    {
      if(text_flash)
        text_flash=FALSE;
      else
        text_flash=TRUE;
      text_flashing_time=Desk_Time_Monotonic();
      blink_text();
    }
  }
}

static void decode(void)
{

  int c;
  int time;

  time=Desk_Time_Monotonic();
  ymin=terminal_height;
  ymax=-1;
  scroll_above=0;

  switch(dial_terminal_nr)
  {
    case 0: /* vt100 */
       
      //if ((*driver)(DRIVER_CHECKRX,portnumber,0,0)>0)
      if((c=(*driver)(DRIVER_GETBYTE,portnumber,0,0))!=-1)
      {
        do
        {
          get_update_rectangle();
          //c=(*driver)(DRIVER_GETBYTE,portnumber,0,0);
          ConOut(c);
          check_data((char)c);
          if(spool_action==REC && !export_data_text)
            spool_rec(c);

          /*
          if((Desk_Time_Monotonic()-time)>10)
            break;
          */
          if((Desk_Time_Monotonic()-time)>10)
          {
            no_decode=1;
            Desk_Event_Poll();
            //Desk_Wimp_Poll(Desk_Event_mask, &Desk_Event_lastevent);
            time=Desk_Time_Monotonic();
          }

        }
        while((c=(*driver)(DRIVER_GETBYTE,portnumber,0,0))!=-1);
        //while( ((*driver)(DRIVER_CHECKRX,portnumber,0,0)>0));

        get_update_rectangle();
        if(scroll_above)
          update_text(0,-(text_buffer_size-terminal_height),MAX_COLUMN,ymax+1);
        else
          update_text(0,ymin,MAX_COLUMN,ymax+1);
        updateCursor();
      }
    break;

    case 1: /* ansi */
      //if ((*driver)(DRIVER_CHECKRX,portnumber,0,0)>0)
      if((c=(*driver)(DRIVER_GETBYTE,portnumber,0,0))!=-1)
      {
        do
        {
          get_update_rectangle();
          //c=(*driver)(DRIVER_GETBYTE,portnumber,0,0);
          decodeAnsi(c);
          check_data((char)c);
          if(spool_action==REC && !export_data_text)
            spool_rec(c);
          if((Desk_Time_Monotonic()-time)>10)
          {
            no_decode=1;
            Desk_Event_Poll();
            //Desk_Wimp_Poll(Desk_Event_mask, &Desk_Event_lastevent);
            time=Desk_Time_Monotonic();
          }
        }
        while((c=(*driver)(DRIVER_GETBYTE,portnumber,0,0))!=-1);
        //while( ((*driver)(DRIVER_CHECKRX,portnumber,0,0)>0));
        

        get_update_rectangle();
        if(scroll_above)
          update_text(0,-(text_buffer_size-terminal_height),MAX_COLUMN,ymax+1);
        else
          update_text(0,ymin,MAX_COLUMN,ymax+1);
        updateCursor();
      }
      /*
      else
      {
        check_dial_time();
      }
      */
    break;
    case 2: /* chat */
      //if ((*driver)(DRIVER_CHECKRX,portnumber,0,0)>0)
      if((c=(*driver)(DRIVER_GETBYTE,portnumber,0,0))!=-1)
      {
        do
        {
          //c=(*driver)(DRIVER_GETBYTE,portnumber,0,0);
          remote_chat(c);
          check_data((char)c);
          if(spool_action==REC && !export_data_text)
            spool_rec(c);
          if((Desk_Time_Monotonic()-time)>10)
          {
            Desk_Wimp_Poll(Desk_Event_mask, &Desk_Event_lastevent);
            time=Desk_Time_Monotonic();
          }
        }
        while((c=(*driver)(DRIVER_GETBYTE,portnumber,0,0))!=-1);
        //while ((*driver)(DRIVER_CHECKRX,portnumber,0,0)>0);
      }
    break;

    case 3: /* Cept */
      /*
      if ((*driver)(DRIVER_EXAMINE,portnumber,0,0)!=-1)
      {
        do
        {
          process_BTX_data();
          flag=1;
        }
        while( ((*driver)(DRIVER_EXAMINE,portnumber,0,0)!=-1) &&
               (Desk_Time_Monotonic()-null_event_time<5) );
      }
      */
      if(!btx_wait)
      {
        cept_xmin=41;
        cept_ymin=25;
        cept_xmax=-1;
        cept_ymax=-1;

        while(Desk_Time_Monotonic()-null_event_time<5 && dial_terminal_nr==3)
          process_BTX_data();

        /*
        Desk_Window_ForceRedraw(haupt_window,(((cept_xmin-1)*12*factors.xmul)/100)<<1,-(cept_ymax)*((10*factors.ymul)/100)<<1,((cept_xmax*12*factors.xmul)/100)<<1,-(cept_ymin-1)*((10*factors.ymul)/100)<<1);
        */

        Desk_Window_ForceRedraw(haupt_window,0,-(cept_ymax)*((10*factors.ymul)/100)<<1,(960*factors.xmul)/100,-(cept_ymin-1)*((10*factors.ymul)/100)<<1);

        //Desk_Icon_printf(unten_window,UNTEN_LSTATUS,"%d,%d",cept_ymin,cept_ymax);

        //Desk_Window_ForceWholeRedraw(haupt_window);
        //Desk_Window_ForceRedraw(haupt_window,0,-cept_ymax*12,1280,-cept_ymin*12);
      }

      //else
      //  Desk_Window_ForceWholeRedraw(haupt_window);

    break;

  }
}

Desk_bool null(Desk_event_pollblock *event, void *reference)
{
  int rx,tx;
  static int last_rx=0,last_tx=0;
  static int old_rx=0,old_tx=0;
  int t;
  Desk_kbd_modifiers modifiers;
  int taste,dummy,pressed;
  static int key_time=0;
  
  driver_poll();
  null_event_time=Desk_Time_Monotonic();

  if(no_decode)
  {
    no_decode=0;
    return(Desk_TRUE);
  }
  no_decode=0;

  if(sinfo_open)
  {
    rx=(*driver)(DRIVER_CHECKRX,portnumber);
    tx=(*driver)(DRIVER_CHECKTX,portnumber);
  
    if(rx>0)
    {
      if(last_rx==0)
      {
        Desk_Icon_SetBgCol(sinfo_window,SINFO_RX,10);
        last_rx=1;
      }
    }
    else
    {
      if(last_rx==1)
      {
        Desk_Icon_SetBgCol(sinfo_window,SINFO_RX,1);
        last_rx=0;
      }
    }
      
    if(tx<serial_output_buffer_size)
    {
      if(last_tx==0)
      {
        Desk_Icon_SetBgCol(sinfo_window,SINFO_TX,11);
        last_tx=1;
      }
    }
    else
    {
      if(last_tx==1)
      {
        Desk_Icon_SetBgCol(sinfo_window,SINFO_TX,1);
        last_tx=0;
      }
    }
    
    if(old_rx!=rx || old_tx!=tx)
    { 
      Icon_printf_Update(sinfo_window,SINFO_BUFFER,"%d / %d",rx,serial_output_buffer_size-tx);
      old_rx=rx;
      old_tx=tx;
    }
  }
    

/*
  if(banner_exist)
  {
    if(Desk_Time_Monotonic()>(banner_time+1000))
      Desk_Window_Hide(banner_window);
  }
*/

  test_file_droped();
  
  if(!transfer_active && !import_ascii)
  {
    if(spool_action==PLAY)
      spool_play();
    else
    {
      test_message();
      //test_file_droped();
      check_modemlines();
      if(dial_terminal_nr<3)
      {
        flash_cursor();
        flash_text();
      }
      if(!pause_status)
        scan_logon(t_filename[script_nr]);
        
      // special key handling  
      
      if(input_focus==haupt_window)
      {  
        modifiers=Desk_Kbd_GetModifiers(Desk_bool_TRUE);
        if(modifiers.Desk_left_alt)
        {
          Desk_SWI(1,3,6,122,&dummy,&taste,&dummy);
          //Desk_SWI(3,3,6,129,0,0,&dummy,&taste,&pressed);
          if(taste!=255 && Desk_Time_Monotonic()-key_time>20)
          {
            t=key_table[taste];
          
            if(modifiers.shift)
            {
              //Desk_Error_Report(0,"%d,%d,%c",taste,t,t);
              input(t+128,1);
            }
            else
            {
              t=key_table[taste];
              if(t>=65 && t<=90)
                t+=32;
              //Desk_Error_Report(0,"%d,%d,%c",taste,t,t);
              input(t+128,1);
            }
            key_time=Desk_Time_Monotonic();
          }   
        }
        if(modifiers.ctrl)
        {
          Desk_SWI(1,3,6,122,&dummy,&taste,&dummy);
          if(taste!=255 && Desk_Time_Monotonic()-key_time>20)
          {
            t=key_table[taste];
            if(!modifiers.shift)
            {
              if(t>=65 && t<=95)
                input(t-64,1);
              if(t==32)
                input(0,1);
            }
            else
            {
              if(t=='6')
                input(30,1);
              if(t=='-')
                input(31,1);  
            }
            key_time=Desk_Time_Monotonic();
          }
        }
      }
      
      
      
      if(serial_port_claimed)
        decode();
      if(busy_seen)
      {
        logon=0;
        redial();
      }
    }
  }
  else
  {
    if(!pause_status)
      test_message();
  }
  if(online)
  {
    t=Desk_Time_Monotonic()-online_time;
    show_online_time(t,&old_online_time);
    if(t_online>0)
    {
      if(t>t_online)
        hangup();
    }
  }

  return(Desk_TRUE);
}


static void echo(char *string)
{
  int i=0;

  switch(dial_terminal_nr)
  {
    case 0: // vt100
      while( string[i]!=0 )
      {
        if (string[i]!='|')
          ConOut(string[i++]);
        else
        {
          i++;
          ConOut(string[i++]-64);
        }
      }
    break;
    case 1: // ansi
      while( string[i]!=0 )
      {
        if (string[i]!='|')
          decodeAnsi(string[i++]);
        else
        {
          i++;
          decodeAnsi(string[i++]-64);
        }
      }
      //while( string[i]!=0 )
      //  decodeAnsi(string[i++]);
    break;
    case 2: // chat mode
      while( string[i]!=0 )
      {
        if (string[i]!='|')
          local_chat(string[i++]);
        else
        {
          i++;
          local_chat(string[i++]-64);
        }
      }
      //while( string[i]!=0 )
      //  local_chat(string[i++]);
    break;
  }
}


static void input(int taste,int special)
{
  Desk_kbd_modifiers modifiers;
  ymin=terminal_height;
  ymax=-1;
    
  
  if(!special)
  {
    modifiers=Desk_Kbd_GetModifiers(Desk_bool_TRUE); // ctrl-space doesn't work
    if(modifiers.ctrl || modifiers.Desk_left_alt)
      return;
  }
  
  //Desk_Error_Report(0,"Taste: %d",taste);
  
  /*
  if(modifiers.ctrl && taste==32)
    taste=0;
  if(modifiers.Desk_left_alt)
  {
    //taste+=128;
    // riscos liefert bei alt ascii code +133
    // ich will aber +128 ...
    taste-=5;
    Desk_Error_Report(0,"hier: %d",taste);
  }  
  */
    
    if (taste>=0)
    {
      if(german_keyb && taste<=255)
      {
        if(dial_terminal_nr<3)
          taste=keyb_table[taste];
      }


      if(dial_terminal_nr<3)
      {
        if (taste<=255)
        {
           //while((*driver)(DRIVER_PUTBYTE,portnumber,taste,0)==-1);
           (*driver)(DRIVER_PUTBYTE,portnumber,taste,0);
           //Desk_Wimp_Poll(Desk_Event_mask, &Desk_Event_lastevent);
             
           if(taste==27)
             esc_break=TRUE;
           if(local_echo)
           {
             get_update_rectangle();
             if(local_echo)
               echo((char*)&taste);
           }
        }
        else
        {
          switch(taste)
          {
              case Desk_keycode_CURSORUP:
                if(cursorkeys_mode && dial_terminal_nr==0)
                {
                   out_ESC("OA");
                  get_update_rectangle();
                  if(local_echo)
                    echo("|[OA");
                }
                else
                {
                  out_ESC("[A");
                  get_update_rectangle();
                  if(local_echo)
                    echo("|[[A");
                }
              break;
              case Desk_keycode_CURSORDOWN:
                if(cursorkeys_mode && dial_terminal_nr==0)
                {
                  out_ESC("OB");
                  get_update_rectangle();
                  if(local_echo)
                    echo("|[OB");
                }
                else
                {
                  out_ESC("[B");
                  get_update_rectangle();
                  if(local_echo)
                    echo("|[[B");
                }
              break;
              case Desk_keycode_CURSORRIGHT:
                if(cursorkeys_mode && dial_terminal_nr==0)
                {
                  out_ESC("OC");
                  get_update_rectangle();
                  if(local_echo)
                    echo("|[OC");
                }
                else
                {
                  out_ESC("[C");
                  get_update_rectangle();
                  if(local_echo)
                    echo("|[[C");
                }
              break;
              case Desk_keycode_CURSORLEFT:
                if(cursorkeys_mode && dial_terminal_nr==0)
                {
                  out_ESC("OD");
                  get_update_rectangle();
                  if(local_echo)
                    echo("|[OD");
                }
                else
                {
                  out_ESC("[D");
                  get_update_rectangle();
                  if(local_echo)
                    echo("|[[D");
                }
              break;
              case Desk_keycode_TAB:
                while((*driver)(DRIVER_PUTBYTE,portnumber,0x9,0)==-1);
                if(local_echo)
                  echo("|I");
              break;
              case Desk_keycode_PAGEUP:
                out_ESC("[5~");
                if(local_echo)
                  echo("|[[5~");
              break;
              case Desk_keycode_PAGEDOWN:
                out_ESC("[6~");
                if(local_echo)
                  echo("|[[6~");
              break;

              case Desk_keycode_F1:
                send_stringt(taste,fkeys[0]);
                if(local_echo)
                  echo(fkeys[0]);
              break;
              case Desk_keycode_F2:
                  send_stringt(taste,fkeys[1]);
                  if(local_echo)
                    echo(fkeys[1]);
              break;
              case Desk_keycode_F3:
                  send_stringt(taste,fkeys[2]);
                  if(local_echo)
                    echo(fkeys[2]);
              break;
              case Desk_keycode_F4:
                  send_stringt(taste,fkeys[3]);
                  if(local_echo)
                    echo(fkeys[3]);
              break;
              case Desk_keycode_F5:
                  send_stringt(taste,fkeys[4]);
                  if(local_echo)
                    echo(fkeys[4]);
              break;
              case Desk_keycode_F6:
                  send_stringt(taste,fkeys[5]);
                  if(local_echo)
                    echo(fkeys[5]);
              break;
              case Desk_keycode_F7:
                  send_stringt(taste,fkeys[6]);
                  if(local_echo)
                    echo(fkeys[6]);
              break;
              case Desk_keycode_F8:
                  send_stringt(taste,fkeys[7]);
                  if(local_echo)
                    echo(fkeys[7]);
              break;
              case Desk_keycode_F9:
                  send_stringt(taste,fkeys[8]);
                  if(local_echo)
                    echo(fkeys[8]);
              break;
              case Desk_keycode_F10:
                  send_stringt(taste,fkeys[9]);
                  if(local_echo)
                    echo(fkeys[9]);
              break;
              case Desk_keycode_F11:
                  send_stringt(taste,fkeys[10]);
                  if(local_echo)
                    echo(fkeys[10]);
              break;
              case Desk_keycode_F12:
                  send_stringt(taste,fkeys[11]);
                  if(local_echo)
                    echo(fkeys[11]);
              break;

              default:
                Desk_Wimp_ProcessKey(taste);
              break;
          }
        }
        if(local_echo)
        {
          get_update_rectangle();
          update_text(0,ymin,MAX_COLUMN,ymax+1);
          updateCursor();
        }
      }
      else
      {
        //Desk_Error_Report(0,"%d",taste);
        switch(taste)
        {
            case 228: // klein ae
              while((*driver)(DRIVER_PUTBYTE,portnumber,200,0)==-1);
              while((*driver)(DRIVER_PUTBYTE,portnumber,97,0)==-1);
            break;
            case 246: // klein oe
              while((*driver)(DRIVER_PUTBYTE,portnumber,200,0)==-1);
              while((*driver)(DRIVER_PUTBYTE,portnumber,111,0)==-1);
            break;
            case 252: // klein ue
              while((*driver)(DRIVER_PUTBYTE,portnumber,200,0)==-1);
              while((*driver)(DRIVER_PUTBYTE,portnumber,117,0)==-1);
            break;
            case 196: // ae
              while((*driver)(DRIVER_PUTBYTE,portnumber,200,0)==-1);
              while((*driver)(DRIVER_PUTBYTE,portnumber,65,0)==-1);
            break;
            case 214: // oe
              while((*driver)(DRIVER_PUTBYTE,portnumber,200,0)==-1);
              while((*driver)(DRIVER_PUTBYTE,portnumber,79,0)==-1);
            break;
            case 220: // ue
              while((*driver)(DRIVER_PUTBYTE,portnumber,200,0)==-1);
              while((*driver)(DRIVER_PUTBYTE,portnumber,85,0)==-1);
            break;
            case 223: // ss
              while((*driver)(DRIVER_PUTBYTE,portnumber,251,0)==-1);
            break;
            case Desk_keycode_HOME:
              while((*driver)(DRIVER_PUTBYTE,portnumber,APH,0)==-1);
            break;
            case Desk_keycode_CURSORUP:
              while((*driver)(DRIVER_PUTBYTE,portnumber,APU,0)==-1);
            break;
            case Desk_keycode_CURSORDOWN:
              while((*driver)(DRIVER_PUTBYTE,portnumber,APD,0)==-1);
            break;
            case Desk_keycode_CURSORRIGHT:
              while((*driver)(DRIVER_PUTBYTE,portnumber,APF,0)==-1);
            break;
            case Desk_keycode_BACKSPACE:
            case Desk_keycode_DELETE:
            case Desk_keycode_CURSORLEFT:
              while((*driver)(DRIVER_PUTBYTE,portnumber,APB,0)==-1);
            break;
            case 42: // *
              while((*driver)(DRIVER_PUTBYTE,portnumber,INI,0)==-1);
            break;
            case 13:
            case 34: // #
              while((*driver)(DRIVER_PUTBYTE,portnumber,taste,TER)==-1);
            break;

            case Desk_keycode_F1:
                send_stringt(taste,fkeys[0]);
                if(local_echo)
                  echo(fkeys[0]);
            break;
            case Desk_keycode_F2:
                  send_stringt(taste,fkeys[1]);
                  if(local_echo)
                    echo(fkeys[1]);
            break;
            case Desk_keycode_F3:
                  send_stringt(taste,fkeys[2]);
                  if(local_echo)
                    echo(fkeys[2]);
            break;
            case Desk_keycode_F4:
                  send_stringt(taste,fkeys[3]);
                  if(local_echo)
                    echo(fkeys[3]);
            break;
            case Desk_keycode_F5:
                  send_stringt(taste,fkeys[4]);
                  if(local_echo)
                    echo(fkeys[4]);
            break;
            case Desk_keycode_F6:
                  send_stringt(taste,fkeys[5]);
                  if(local_echo)
                    echo(fkeys[5]);
            break;
            case Desk_keycode_F7:
                  send_stringt(taste,fkeys[6]);
                  if(local_echo)
                    echo(fkeys[6]);
            break;
            case Desk_keycode_F8:
                  send_stringt(taste,fkeys[7]);
                  if(local_echo)
                    echo(fkeys[7]);
            break;
            case Desk_keycode_F9:
                  send_stringt(taste,fkeys[8]);
                  if(local_echo)
                    echo(fkeys[8]);
            break;
            case Desk_keycode_F10:
                  send_stringt(taste,fkeys[9]);
                  if(local_echo)
                    echo(fkeys[9]);
            break;
            case Desk_keycode_F11:
                  send_stringt(taste,fkeys[10]);
                  if(local_echo)
                    echo(fkeys[10]);
            break;
            case Desk_keycode_F12:
                  send_stringt(taste,fkeys[11]);
                  if(local_echo)
                    echo(fkeys[11]);
            break;

            default:
              if (taste<=255)
              {
                //Desk_Error_Report(0,"%d",taste);
                //Desk_Icon_SetInteger(unten_window,UNTEN_LSTATUS,taste);
                while((*driver)(DRIVER_PUTBYTE,portnumber,taste,0)==-1);
              }
              else
                Desk_Wimp_ProcessKey(taste);
            break;
        }
      }
    }
}


Desk_bool input_haupt_window(Desk_event_pollblock *event, void *reference)
{
  if(input_focus==haupt_window && serial_port_claimed && (!transfer_active || transfer_type_nr==3))
  {
    input(event->data.key.code,0);
    //Desk_Icon_SetBgCol(sinfo_window,SINFO_TX,11);
  }
  else if (input_focus==dial_window && event->data.key.code==13)
       {
         Desk_Icon_GetText(dial_window,DIAL_NUMBER,dial_number);
         window_dial=TRUE;
         strcpy(downloads_directory,old_downloads_directory);
         set_default_keys();
         strcpy(log_number,dial_number);
         strcpy(log_name,"");
         dial(dial_number);  /* waehlen */
         //Desk_Window_Hide(dial_window);
         Desk_Menu_Show((Desk_menu_ptr)-1,0,0);
         //Desk_Window_GainCaret(old_input_focus);
       }
       else
         Desk_Wimp_ProcessKey(event->data.key.code);

  return(Desk_TRUE);
}
