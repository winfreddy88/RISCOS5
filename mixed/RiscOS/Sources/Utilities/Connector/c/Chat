/*
 * Copyright (c) 1995, Andreas Zieringer
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include "global.h"
#include "misc.h"
#include "text.h"
#include "console.h"
#include "hterm.h"
#include "spool.h"
#include "vt100.h"

static int remote_cursorX,remote_cursorY;
static int local_cursorX,local_cursorY;

extern int ymin;

void init_chat(void)
{
  int i;

  remote_cursorX=0;
  remote_cursorY=0;
  local_cursorX=0;
  local_cursorY=24-local_lines;


  for(i=0;i<80;i++)
    putcharattr(i,remote_lines,'-',normal_attr);

  cursorX=0;
  cursorY=24-local_lines;
  update_text(0,remote_lines,MAX_COLUMN,remote_lines+1);
  updateCursor();
}

void remote_chat(int c)
{
  int old_flash;

  old_flash=flash;

  cursorX=remote_cursorX;
  cursorY=remote_cursorY;
  screentop=1;
  screenbottom=remote_lines;
  //wrap=2;
  ymin=cursorY;
  flash=0;
  updateCursor();
  ConOut(c);
  update_text(0,ymin,MAX_COLUMN,cursorY+1);
  remote_cursorX=cursorX;
  remote_cursorY=cursorY;
  flash=1;
  updateCursor();
  cursorX=local_cursorX;
  cursorY=local_cursorY;
  flash=old_flash;
}

void local_chat(int c)
{
  cursorX=local_cursorX;
  cursorY=local_cursorY;
  screentop=24-local_lines+1;
  screenbottom=24;
  //wrap=2;
  ConOut(c);
  local_cursorX=cursorX;
  local_cursorY=cursorY;
}
