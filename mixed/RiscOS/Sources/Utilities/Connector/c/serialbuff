/*
 * Copyright (c) 1995, Andreas Zieringer
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met: 
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of RISC OS Open Ltd nor the names of its contributors
 *       may be used to endorse or promote products derived from this software
 *       without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
#include "Desk/Core.h"
#include "buffer.h"
#include "osbyte.h"
#include "global.h"
#include <stdio.h>
#include "serialbuff.h"

static byte *old_buffer_in,*old_end_in;
static buffer_flags old_flags_in;
static byte *old_buffer_out,*old_end_out;
static buffer_flags old_flags_out;


void install_serial_buffer(void)
{
  if(serial_input_buffer)
  {
    // flush input buffer
    osbyte(osbyte_FLUSH_BUFFER,1,0);

    // alten input buffer sichern und deregistern
    old_flags_in=0; old_buffer_in=NULL; old_end_in=NULL;
    xbuffer_get_info((buffer_b)1,&old_flags_in,&old_buffer_in,&old_end_in,
                     NULL,NULL,NULL,NULL);
    xbuffer_deregister((buffer_b)1);
    xbuffer_create(old_flags_in,serial_input_buffer_size+1,(buffer_b)1,NULL);
  }

  if(serial_output_buffer)
  {
    // flush output buffer
    osbyte(osbyte_FLUSH_BUFFER,2,0);

    // alten output buffer sichern und deregistern
    old_flags_out=0; old_buffer_out=NULL; old_end_out=NULL;
    xbuffer_get_info((buffer_b)2,&old_flags_out,&old_buffer_out,&old_end_out,
                     NULL,NULL,NULL,NULL);
    xbuffer_deregister((buffer_b)2);
    xbuffer_create(old_flags_out,serial_output_buffer_size+1,(buffer_b)2,NULL);
  }
}

void deinstall_serial_buffer(void)
{
  if(serial_input_buffer)
  {
    // flush input buffer
    osbyte(osbyte_FLUSH_BUFFER,1,0);
    // remove input buffer
    xbuffer_remove((buffer_b)1);
    // register old input buffer
    xbuffer_register(old_flags_in,old_buffer_in,old_end_in,(buffer_b)1,NULL);
  }

  if(serial_output_buffer)
  {
    // flush output buffer
    osbyte(osbyte_FLUSH_BUFFER,2,0);
    // remove output buffer
    xbuffer_remove((buffer_b)2);
    // register old output buffer
    xbuffer_register(old_flags_out,old_buffer_out,old_end_out,(buffer_b)2,NULL);
  }
}


